<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android dependencies</title>
    <url>/2023/04/22/Android-dependencies/</url>
    <content><![CDATA[<h1 id="Android-dependencies-conflict-resolve"><a href="#Android-dependencies-conflict-resolve" class="headerlink" title="Android dependencies conflict resolve"></a>Android dependencies conflict resolve</h1><p>今天在编译Android应用“草书字典”时突然发现以下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Duplicate class com.google.common.util.concurrent.ListenableFuture found in modules jetified-guava-18.0 (com.google.guava:guava:18.0) and jetified-listenablefuture-1.0 (com.google.guava:listenablefuture:1.0)</span><br></pre></td></tr></table></figure>
<p>大意是说<code>com.google.common.util.concurrent.ListenableFuture</code>这个class出现在不同的package中，属于重复依赖，gradle无法处理，要手动处理一下。</p>
<p>在<code>app.gradle</code>文件中加入如下一行就好了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation &#x27;com.google.guava:guava:27.0.1-android&#x27;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android monorepo in action</title>
    <url>/2023/09/17/Android-monorepo-in-action/</url>
    <content><![CDATA[<h1 id="Android-monorepo-in-action-Android-monorepo实践"><a href="#Android-monorepo-in-action-Android-monorepo实践" class="headerlink" title="Android monorepo in action(Android monorepo实践)"></a>Android monorepo in action(Android monorepo实践)</h1><h2 id="What-is-monorepo-什么是monorepo"><a href="#What-is-monorepo-什么是monorepo" class="headerlink" title="What is monorepo(什么是monorepo)"></a>What is monorepo(什么是monorepo)</h2><p>In version control systems, a monorepo (“mono” meaning ‘single’ and “repo” being short for ‘repository’) is a software development strategy where code for many projects is stored in the same repository.</p>
<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><ol>
<li>Create a folder named <code>monorepo</code>, this is the root folder of the monorepo.</li>
<li>Create folder <code>mono-libraries</code> under <code>monorepo</code>, this is the folder for shared libraries.</li>
<li>Create folder<code>mono-build-logic</code> under <code>monorepo</code>, this is the folder for gradle files.</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>该monorepo要求每个side project都要打开一个Android Studio实例，如果同时打开多个，那么只能有一个设置为主项目。</p>
<h2 id="Reference-参考"><a href="#Reference-参考" class="headerlink" title="Reference(参考)"></a>Reference(参考)</h2><p><a href="https://blog.blundellapps.co.uk/make-a-monorepo-for-your-android-projects/">https://blog.blundellapps.co.uk/make-a-monorepo-for-your-android-projects/</a></p>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>monorepo</tag>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Android version, sdk version API level mapping</title>
    <url>/2023/04/25/Android-version-sdk-version-API-level-mapping/</url>
    <content><![CDATA[<p>See here for details:<br><a href="https://apilevels.com/">https://apilevels.com/</a></p>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular - Integrate Jest to Angular App</title>
    <url>/2023/06/07/Angular-Integrate-Jest-to-Angular-App/</url>
    <content><![CDATA[<h1 id="Integrate-Jest-to-Angular-App"><a href="#Integrate-Jest-to-Angular-App" class="headerlink" title="Integrate Jest to Angular App"></a>Integrate Jest to Angular App</h1><ol>
<li>Create your angular app</li>
<li>Install jest<br><code>npm install jest jest-preset-angular @types/jest</code></li>
<li>In your project root, create a setup-jest.ts file with the following contents:<br><code>import &#39;jest-preset-angular/setup-jest&#39;;</code></li>
<li>Create the jest.config.js file in your project root directory with the following contents:    <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">preset</span>: <span class="string">&#x27;jest-preset-angular&#x27;</span>,</span><br><span class="line">  <span class="attr">setupFilesAfterEnv</span>: [<span class="string">&#x27;&lt;rootDir&gt;/setup-jest.ts&#x27;</span>],</span><br><span class="line">  <span class="attr">globalSetup</span>: <span class="string">&#x27;jest-preset-angular/global-setup&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>Adjust your <code>tsconfig.spec.json</code> in your project root<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;extends&quot;</span>: <span class="string">&quot;./tsconfig.json&quot;</span>,  </span><br><span class="line"> <span class="string">&quot;compilerOptions&quot;</span>: &#123;  </span><br><span class="line"> <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./out-tsc/spec&quot;</span>,  </span><br><span class="line"> <span class="string">&quot;module&quot;</span>: <span class="string">&quot;CommonJs&quot;</span>,  </span><br><span class="line"> <span class="string">&quot;types&quot;</span>: [<span class="string">&quot;jest&quot;</span>]  </span><br><span class="line"> &#125;,  </span><br><span class="line"> <span class="string">&quot;include&quot;</span>: [<span class="string">&quot;src/**/*.spec.ts&quot;</span>, <span class="string">&quot;src/**/*.d.ts&quot;</span>]  </span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></li>
<li>update <code>package.json</code> file in your project root as below.<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;test&quot;</span>: <span class="string">&quot;jest --verbose&quot;</span>,</span><br><span class="line"><span class="string">&quot;test:watch&quot;</span>: <span class="string">&quot;jest --watch&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>Open your terminal and run <code>npm run test</code>, enjoy!</li>
</ol>
<h2 id="references"><a href="#references" class="headerlink" title="references:"></a>references:</h2><p><a href="https://www.xfive.co/blog/testing-angular-faster-jest/">xfive.co&#x2F;blog&#x2F;testing-angular-faster-jest&#x2F;</a></p>
]]></content>
      <tags>
        <tag>angular</tag>
        <tag>jest</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio tips - 1</title>
    <url>/2023/10/15/Android-tips-1/</url>
    <content><![CDATA[<h1 id="Android-Studio-Tips-1"><a href="#Android-Studio-Tips-1" class="headerlink" title="Android Studio Tips -1"></a>Android Studio Tips -1</h1><h2 id="1-Wireless-debugging-with-Android-device"><a href="#1-Wireless-debugging-with-Android-device" class="headerlink" title="1. Wireless debugging with Android device"></a>1. Wireless debugging with Android device</h2><ol>
<li>Select <code>Pair Devices using Wi-Fi</code> under emulator dropdown list.</li>
<li>Enable debug mode on your android device(see <a href="https://developer.android.com/studio/debug/dev-options">here</a> for more details).</li>
<li>On your android device, select <code>Settings | Developer options | Wireless debugging | Pair using QR code</code> to enable wireless debugging.<br><img src="/../images/android-wireless-debug.png" alt="Alt text"></li>
</ol>
<h2 id="2-Fix-Manifest-merged-errors"><a href="#2-Fix-Manifest-merged-errors" class="headerlink" title="2. Fix Manifest merged errors"></a>2. Fix Manifest merged errors</h2><ol>
<li>Open <code>AndroidManifest.xml</code> file.</li>
<li>Click <code>Merged Manifest</code> tab at the bottom of the editor.</li>
<li>Scroll down to the bottom to see the errors.<br><img src="/../images/android-manifest-merge-error.png" alt="Alt text"></li>
</ol>
<h2 id="3-View-database-file-in-Android-Studio"><a href="#3-View-database-file-in-Android-Studio" class="headerlink" title="3. View database file in Android Studio"></a>3. View database file in Android Studio</h2><ol>
<li>Select <code>View | Tools Window | App Inspection</code> from the main menu.</li>
<li>Launch your app on a device&#x2F;Emulator running API level 26 or higher.<br>  <img src="/../images/android-studio-app-inspector.png" alt="Alt text"></li>
<li>If you see a red <code>close</code> icon on your database file which means your database was not opened, you can operate on your app to open the database(such click a button, open a fragment or whatever action which can open the database).</li>
<li>If you database was opened, you can click the table under this database to view the data.</li>
</ol>
<h2 id="4-Filter-logs-in-Logcat"><a href="#4-Filter-logs-in-Logcat" class="headerlink" title="4. Filter logs in Logcat"></a>4. Filter logs in Logcat</h2><ol>
<li>Select <code>Logcat</code> at the bottom of Android Studio.</li>
<li>Select the emulator&#x2F;device where your app runs on.</li>
<li>Focus the filter input box, and press <code>Ctrl + Space</code> to open the filter dialog. then select the filter options you want.<br><img src="/../images/android-studio-filter-logcat.png" alt="Alt text"></li>
<li>For example, if you want to see only <code>error</code> logs for package <code>com.jiyuzhai.kaishuzidian</code>, you can input <code>package: com.jiyuzhai.kaishuzidian level: error</code> as a filter.</li>
</ol>
<h2 id="5-Open-xml-layout-file-in-split-mode"><a href="#5-Open-xml-layout-file-in-split-mode" class="headerlink" title="5. Open xml layout file in split mode"></a>5. Open xml layout file in <code>split</code> mode</h2><p>Do you ever encounter this situation? whenever you open an xml layout file, it opens in <code>design</code> mode by default. You can do the following to open it in <code>split</code> mode by default.</p>
<ol>
<li>Open <code>Settings | Editor | Design Tools</code> from the main menu.</li>
<li>Check <code>Prefer XML editor</code> option.</li>
<li>Click <code>OK</code> button.<br><img src="/../images/android-open-xml-layout-file-in-split-mode.png" alt="Alt text"></li>
</ol>
<h2 id="File-xxx-already-exists-it-cannot-be-overwritten-by-SerializableChange-file-x3D-xxx-fileStatus-x3D-NEW-normalizedPath-x3D-xxx-class"><a href="#File-xxx-already-exists-it-cannot-be-overwritten-by-SerializableChange-file-x3D-xxx-fileStatus-x3D-NEW-normalizedPath-x3D-xxx-class" class="headerlink" title="File xxx already exists, it cannot be overwritten by SerializableChange(file&#x3D;xxx, fileStatus&#x3D;NEW, normalizedPath&#x3D;xxx.class)."></a>File xxx already exists, it cannot be overwritten by SerializableChange(file&#x3D;xxx, fileStatus&#x3D;NEW, normalizedPath&#x3D;xxx.class).</h2><ol>
<li>In Android menu, select <code>Build | Clean Project</code>, then rebuild, that’s it!</li>
</ol>
<h2 id="Android-emulator-stop-working"><a href="#Android-emulator-stop-working" class="headerlink" title="Android emulator stop working."></a>Android emulator stop working.</h2><p>Delete the lock file under avd folder, here is the lock file path under android sdk folder.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$android_sdk_dir\.android\avd\Pixel_XL_API_34.avd\xxx.lock</span><br></pre></td></tr></table></figure>

<h2 id="xxx-is-already-defined-in-a-single-type-import"><a href="#xxx-is-already-defined-in-a-single-type-import" class="headerlink" title="xxx is already defined in a single-type import"></a>xxx is already defined in a single-type import</h2><p>在Android Java中，同一个java文件不能导入两个同名的包，比如两个来自不同module的R文件，解决方法是使用全路径名，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.jiyuzhai.kaishuzidian.R.string.app_name</span><br><span class="line">com.jiyuzhai.kaishuzidian2.R.string.app_name</span><br></pre></td></tr></table></figure>

<h2 id="java-lang-OutOfMemoryError-Java-heap-space"><a href="#java-lang-OutOfMemoryError-Java-heap-space" class="headerlink" title="java.lang.OutOfMemoryError: Java heap space"></a>java.lang.OutOfMemoryError: Java heap space</h2><p>Gradle内存过小导致的错误，可以增加gradle的内存。</p>
<ol>
<li>打开<code>gradle.properties</code>文件，如果没有则新建一个。</li>
<li>添加<code>org.gradle.jvmargs=-Xmx4096m</code>，其中4096m是内存大小，可以根据需要调整。<br>我的电脑是32G内存，所以给出如下配置，最高8g, 最低4g内存。</li>
</ol>
<pre><code>org.gradle.jvmargs=-Xmx8g -XX:MaxPermSize=4g -XX:+HeapDumpOnOutOfMemoryError -Dfile\
  .encoding=UTF-8

## Can not resolve symbol &#39;BuildConfig&#39;
</code></pre>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>android studio</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular-Misc</title>
    <url>/2023/08/19/Angular-Misc/</url>
    <content><![CDATA[<h1 id="Angular杂项"><a href="#Angular杂项" class="headerlink" title="Angular杂项"></a>Angular杂项</h1><h2 id="什么操作会触发Angular执行change-detection？"><a href="#什么操作会触发Angular执行change-detection？" class="headerlink" title="什么操作会触发Angular执行change detection？"></a>什么操作会触发Angular执行change detection？</h2><p>这个问题一直没有搞明白，有待进一步研究。<br><a href="https://angular.io/guide/change-detection">https://angular.io/guide/change-detection</a><br><a href="https://www.youtube.com/watch?v=-tB-QDrPmuI">https://www.youtube.com/watch?v=-tB-QDrPmuI</a></p>
<h2 id="在AOT编译器下，Private变量无法绑定到模板中。"><a href="#在AOT编译器下，Private变量无法绑定到模板中。" class="headerlink" title="在AOT编译器下，Private变量无法绑定到模板中。"></a>在AOT编译器下，Private变量无法绑定到模板中。</h2><p>如果在组件中定义了一个私有变量，是不能使用双话括弧绑定到模板中的，比如下面的代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-order&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./order.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./order.component.less&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderComponent</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样写是不行的，因为在AOT编译器下，私有变量会被删除，所以无法绑定到模板中，如果想要绑定到模板中，需要将变量定义为公共变量，或者使用<code>get</code>方法，如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-order&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./order.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./order.component.less&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderComponent</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> _count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">count</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_count</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="在AOT编译器下，Private方法无法绑定到模板中。"><a href="#在AOT编译器下，Private方法无法绑定到模板中。" class="headerlink" title="在AOT编译器下，Private方法无法绑定到模板中。"></a>在AOT编译器下，Private方法无法绑定到模板中。</h2><p>如果在组件中定义了一个私有方法，是不能使用双花括弧绑定到模板中的，比如下面的代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-order&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./order.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./order.component.less&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderComponent</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">getCount</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;getCount()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样写是不行的，因为在AOT编译器下，私有方法会被删除，所以无法绑定到模板中，如果想要绑定到模板中，需要将方法定义为公共方法，或者使用<code>get</code>方法，如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-order&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./order.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./order.component.less&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderComponent</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> _count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">count</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_count</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getCount</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;getCount()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular-module</title>
    <url>/2023/09/02/Angular-module/</url>
    <content><![CDATA[<h1 id="Angular-Module"><a href="#Angular-Module" class="headerlink" title="Angular Module"></a>Angular Module</h1><p>Angular是模块化的，模块是Angular应用的基本构建块，每个Angular应用都至少有一个模块，即根模块，Angular模块是一个带有<code>@NgModule</code>装饰器的类。</p>
<p>模块是一个逻辑单元，是一个自我完备的功能集合，它可以包含组件、服务、指令、管道等，模块可以导入其他模块，也可以被其他模块导入，模块之间可以相互通信，模块之间的通信是通过导入和导出来实现的。</p>
<p>以一个电商网站App为例，可以包含如下模块：登录模块（包含登录，注册，找回密码等功能），购物成模块，订单模块，支付模块等等。</p>
<h2 id="NgModule的组成"><a href="#NgModule的组成" class="headerlink" title="NgModule的组成"></a>NgModule的组成</h2><p>以下是一个典型的入口模块的代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    <span class="title class_">AppComponent</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span>,</span><br><span class="line">    <span class="title class_">AppRoutingModule</span>,</span><br><span class="line">    <span class="title class_">FormsModule</span>,</span><br><span class="line">    <span class="title class_">HttpClientModule</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="declarations"><a href="#declarations" class="headerlink" title="declarations"></a>declarations</h3><p><code>declarations</code>属性用来声明属于该模块的组件、指令、管道等，这些组件、指令、管道等只能在该模块中使用，其他模块不能使用。</p>
<h3 id="imports"><a href="#imports" class="headerlink" title="imports"></a>imports</h3><p><code>imports</code>属性用来导入其他模块，导入的模块中的组件、指令、管道等可以在该模块中使用。比如当前模块依赖其他模块A，那么要把模块A导入到当前模块中，这样当前模块就可以使用模块A中的组件、指令、管道等了。</p>
<h3 id="providers"><a href="#providers" class="headerlink" title="providers"></a>providers</h3><p><code>providers</code>属性用来声明该模块中的服务，这些服务可以在该模块中使用，也可以在该模块导入的其他模块中使用。</p>
<h3 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h3><p><code>exports</code>属性用来声明该模块中<code>导出</code>的组件、指令、管道等，这些组件、指令、管道等可以在该模块导入的其他模块中使用。注意导出的组件、指令、管道等必须同时在<code>declarations</code>属性中声明。<br>也就是说exports是declarations的子集。</p>
<p>Angular应用的主模块<code>app.module.ts</code>中的<code>exports</code>属性是空的，因为根模块中的组件、指令、管道等都是可以在其他模块中使用的，所以不需要导出。</p>
<h3 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h3><p><code>bootstrap</code>属性用来声明该模块的根组件，根组件是Angular应用的入口组件，一个Angular应用只能有一个根组件，根组件只能在根模块中声明。</p>
<p><strong>注意：</strong> 只有根模块才需要声明根组件，其他模块不需要声明根组件。所以除了<code>app.module.ts</code>之外，其他的module都不需要声明bootstrap属性。</p>
<h2 id="component-and-module"><a href="#component-and-module" class="headerlink" title="component and module"></a>component and module</h2><p>在Angular <code>standalone</code> component出现以前，任何一个component都必须隶属于一个module。但是在Angular <code>standalone</code> component出现以后，就可以不用隶属于一个module了，这种component称为<code>standalone</code> component，也就是独立的component。</p>
<p>详情请看<a href="https://zdd.github.io/2023/09/02/Angular-standalone-component/">Angular Standalone Component</a></p>
]]></content>
      <tags>
        <tag>angular</tag>
        <tag>module</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular lifecycle</title>
    <url>/2023/08/18/Angular-lifecycle/</url>
    <content><![CDATA[<h1 id="Angular-Lifecycle"><a href="#Angular-Lifecycle" class="headerlink" title="Angular Lifecycle"></a>Angular Lifecycle</h1><p>今天我们来深入学习一下Angular的Lifecycle方法，Lifecycle方法是Angular中非常重要的一个概念，我们在开发中经常会用到这些方法，比如在<code>ngOnInit</code>中初始化数据，或者在<code>ngOnDestroy</code>中取消订阅等等。</p>
<p>首先创建一个简单的组件，这个组件什么都不渲染，也就是说组件对应的html文件是空的，这样我们就可以专注于Lifecycle方法了。</p>
<p>首先在项目中生成一个组件，命名为<code>lifecycle</code>，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng g component lifecycle</span><br></pre></td></tr></table></figure>

<p>将<code>lifecycle.component.html</code>中的内容清空.</p>
<p>然后在<code>lifecycle.component.ts</code>中添加如下代码：组件中的<code>count</code>变量用来标记每个Lifecycle方法的调用顺序，每个方法都会在控制台打印出自己的调用顺序，这样我们就可以很清楚的看到每个方法的调用顺序了。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">AfterContentChecked</span>,</span><br><span class="line">  <span class="title class_">AfterContentInit</span>,</span><br><span class="line">  <span class="title class_">AfterViewChecked</span>,</span><br><span class="line">  <span class="title class_">AfterViewInit</span>,</span><br><span class="line">  <span class="title class_">Component</span>,</span><br><span class="line">  <span class="title class_">DoCheck</span>,</span><br><span class="line">  <span class="title class_">OnChanges</span>,</span><br><span class="line">  <span class="title class_">OnDestroy</span>,</span><br><span class="line">  <span class="title class_">OnInit</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-order&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./order.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./order.component.less&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderComponent</span></span><br><span class="line">  <span class="keyword">implements</span></span><br><span class="line">    <span class="title class_">OnInit</span>,</span><br><span class="line">    <span class="title class_">AfterViewInit</span>,</span><br><span class="line">    <span class="title class_">OnChanges</span>,</span><br><span class="line">    <span class="title class_">AfterContentInit</span>,</span><br><span class="line">    <span class="title class_">AfterContentChecked</span>,</span><br><span class="line">    <span class="title class_">AfterViewChecked</span>,</span><br><span class="line">    <span class="title class_">OnDestroy</span>,</span><br><span class="line">    <span class="title class_">DoCheck</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> constructor`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> ngOnInit`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngDoCheck</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> ngDoCheck`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngAfterContentInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> ngAfterContentInit`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngAfterContentChecked</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> ngAfterContentChecked`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngAfterViewInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> ngAfterViewInit`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngAfterViewChecked</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> ngAfterViewChecked`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnChanges</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> ngOnChanges`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> ngOnDestroy`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行程序，会得到如下输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 constructor</span><br><span class="line">2 ngOnInit</span><br><span class="line">3 ngDoCheck</span><br><span class="line">4 ngAfterContentInit</span><br><span class="line">5 ngAfterContentChecked</span><br><span class="line">6 ngAfterViewInit</span><br><span class="line">7 ngAfterViewChecked</span><br></pre></td></tr></table></figure>
<p><code>constructor</code>是构造函数，并不能算是Angular生命周期函数，但是为了图个全乎，我们一并介绍。</p>
<h2 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h2><p><code>constructor</code>是构造函数，它是在组件被创建时调用的，它的调用顺序是最早的，也就是说它是第一个被调用的方法，它的调用顺序是固定的，不会因为其他因素而改变。  </p>
<h3 id="构造函数中应该做哪些事情"><a href="#构造函数中应该做哪些事情" class="headerlink" title="构造函数中应该做哪些事情"></a>构造函数中应该做哪些事情</h3><p>一般在构造函数中会做一些初始化的工作，比如</p>
<ol>
<li>初始化变量</li>
<li>订阅事件</li>
</ol>
<h3 id="构造函数中不应该做哪些事情？"><a href="#构造函数中不应该做哪些事情？" class="headerlink" title="构造函数中不应该做哪些事情？"></a>构造函数中不应该做哪些事情？</h3><ol>
<li>与View相关的操作，比如操作DOM元素(应该在<code>ngAfterViewInit</code>中进行)</li>
<li>获取后台数据（应该在<code>ngOnInit</code>中获取）</li>
</ol>
<h2 id="ngOnChanges"><a href="#ngOnChanges" class="headerlink" title="ngOnChanges"></a>ngOnChanges</h2><p><code>ngOnChanges</code>是当组件的<code>@Input</code>属性发生变化时调用的，它接收一个<code>SimpleChanges</code>类型的参数，这个参数中包含了变化的属性的信息，比如变化前的值和变化后的值等等。</p>
<p><strong>调用时机：</strong></p>
<ol>
<li>当且仅当组件中有<code>@Input</code>属性时才会被调用。</li>
<li>先在<code>ngOnInit</code>之前调用一次。</li>
<li>后续每当<code>@Input</code>属性发生变化时调用一次。</li>
</ol>
<p>由于我们这个组件中没有<code>@Input</code>属性，所以这个方法没有被调用。</p>
<h2 id="ngOnInit"><a href="#ngOnInit" class="headerlink" title="ngOnInit"></a>ngOnInit</h2><p>Initialize the directive or component after Angular first displays the data-bound properties and sets the directive or component’s input properties</p>
<p><strong>调用时机</strong></p>
<ol>
<li>在<code>ngOnChanges</code>之后调用一次。</li>
<li>不管<code>ngOnChanges</code>是否被调用，<code>ngOnInit</code>都会被调用一次。</li>
<li>整个生命周期中只调用一次。</li>
</ol>
<p>所以上面例子中构造函数调用之后，立即调用了<code>ngOnInit</code>方法。</p>
<h2 id="ngDoCheck"><a href="#ngDoCheck" class="headerlink" title="ngDoCheck"></a>ngDoCheck</h2><p>Detect and act upon changes that Angular can’t or won’t detect on its own</p>
<p>该方法主要用来做自定义的更新检测。</p>
<p><strong>调用时机</strong></p>
<ol>
<li>每次<code>ngOnChanges</code>调用之后，都会调用该方法。</li>
<li>每次<code>ngOnInit</code>调用之后，调用一次。</li>
</ol>
<p>在上例中，虽然没有调用<code>ngOnChanges</code>，但是<code>ngOnInit</code>调用了，所以该方法也调用了一次。</p>
<p>注意：这里的第一点Angular官网的解释并不准确，确切的说，是每次Angular进行更新检测之后，都会调用该方法，即使更新检测后，绑定的值没有任何变化，也会调用该方法。为了验证，我们可以在<code>ngInit</code>中添加如下代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="keyword">private</span> changeDetector: ChangeDetectorRef, <span class="comment">// 注入ChangeDetectorRef</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> constructor`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ngOnInit</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> ngOnInit`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每隔一秒手动触发一次更新检测。</span></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">changeDetector</span>.<span class="title function_">detectChanges</span>();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时观察控制台，输入如下，可见，每当change detection发生时，<code>ngDoCheck</code>都会被调用。<code>ngAfterContentChecked</code>和<code>ngAfterViewChecked</code>也会跟着被调用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 constructor</span><br><span class="line">2 ngOnInit</span><br><span class="line">3 ngDoCheck</span><br><span class="line">4 ngAfterContentInit</span><br><span class="line">5 ngAfterContentChecked</span><br><span class="line">6 ngAfterViewInit</span><br><span class="line">7 ngAfterViewChecked</span><br><span class="line"></span><br><span class="line">8 ngDoCheck</span><br><span class="line">9 ngAfterContentChecked</span><br><span class="line">10 ngAfterViewChecked</span><br><span class="line"></span><br><span class="line">11 ngDoCheck</span><br><span class="line">12 ngAfterContentChecked</span><br><span class="line">13 ngAfterViewChecked</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="ngAfterContentInit"><a href="#ngAfterContentInit" class="headerlink" title="ngAfterContentInit"></a>ngAfterContentInit</h2><p>Respond after Angular projects external content into the component’s view。该方法与<code>&lt;ng-content&gt;</code>标签相关。但是需要注意的是，无论组件中是否包含<code>&lt;ng-content&gt;</code>标签，该方法都会被调用。<br>在Angular初始化组件内容之后调用。</p>
<p><strong>调用时机</strong></p>
<ol>
<li>在<code>ngDoCheck</code>第一次调用之后，调用一次。</li>
<li>整个生命周期中只调用一次。</li>
</ol>
<h2 id="ngAfterContentChecked"><a href="#ngAfterContentChecked" class="headerlink" title="ngAfterContentChecked"></a>ngAfterContentChecked</h2><p>当Angular检测完组件内容变化之后调用。</p>
<p><strong>调用时机</strong></p>
<ol>
<li>在<code>ngAfterContentInit</code>之后调用一次。</li>
<li>在每次<code>ngDoCheck</code>之后调用一次。</li>
</ol>
<h2 id="ngAfterViewInit"><a href="#ngAfterViewInit" class="headerlink" title="ngAfterViewInit"></a>ngAfterViewInit</h2><p>当Angular初始化完组件视图及其子视图之后调用。如果是directive中的ngAfterViewInit，则在初始化完包含该directive的视图之后调用。</p>
<p><strong>调用时机</strong></p>
<ol>
<li>在<code>ngAfterContentChecked</code>第一次调用之后调用一次。</li>
<li>整个生命周期中只调用一次。</li>
</ol>
<h2 id="ngAfterViewChecked"><a href="#ngAfterViewChecked" class="headerlink" title="ngAfterViewChecked"></a>ngAfterViewChecked</h2><p>当Angular检测完组件视图及其子视图之后调用。如果是directive中的ngAfterViewChecked，则在检测完包含该directive的视图之后调用。</p>
<p><strong>调用时机</strong></p>
<ol>
<li>在<code>ngAfterViewInit</code>之后调用一次。</li>
<li>在每次<code>ngAfterContentChecked</code>之后调用一次。</li>
</ol>
<h2 id="ngOnDestroy"><a href="#ngOnDestroy" class="headerlink" title="ngOnDestroy"></a>ngOnDestroy</h2><p>当Angular销毁组件之前调用。</p>
<p><strong>调用时机</strong></p>
<ol>
<li>在组件被销毁之前调用。</li>
<li>整个生命周期中只调用一次。</li>
</ol>
<p>要想看到该方法被调用，必须切换到切他页面，也就是离开该组件所在的页面才行。</p>
<p>下面我们改变页面内容，看看这些生命周期是否有变换，首先给模板文件添加内容，在<code>lifecycle.component.html</code>中添加如下内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Lifecycle component works<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>保存并刷新页面，可以看到输出并未变化。</p>
<p>接下来我们给组件添加一个<code>@Input</code>属性，修改<code>lifecycle.component.ts</code>文件，添加如下内容：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Input</span>() <span class="attr">nameList</span>: <span class="built_in">string</span>[] = [];</span><br></pre></td></tr></table></figure>

<p>修改模板文件，添加如下内容，用来显示输入的名字列表。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let name of nameList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>name: &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后我们创建一个父组件，用来调用<code>LifecycleComponent</code>组件，并传入<code>nameList</code>属性。<br>lifecycle-parent.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">lifecycle-order</span> [<span class="attr">nameList</span>]=<span class="string">&quot;nameList&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">lifecycle-order</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后运行程序，切换到life-cycle页面，可以看到控制台输出如下内容，从第二行可以看出，<code>ngOnChanges</code>方法被调用了，而且是在<code>ngOnInit</code>之前调用的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 - OrderComponent: constructor</span><br><span class="line">2 - OrderComponent: ngOnChanges</span><br><span class="line">3 - OrderComponent: ngOnInit</span><br><span class="line">4 - OrderComponent: ngDoCheck</span><br><span class="line">5 - OrderComponent: ngAfterContentInit</span><br><span class="line">6 - OrderComponent: ngAfterContentChecked</span><br><span class="line">7 - OrderComponent: ngAfterViewInit</span><br><span class="line">8 - OrderComponent: ngAfterViewChecked</span><br></pre></td></tr></table></figure>
<p>由于我们并没有在父组件中修改<code>nameList</code>属性，所以<code>ngOnChanges</code>方法只被调用了一次。<br>我们可以打印一下<code>changes</code>参数，看看里面有什么内容。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ngOnChanges</span>(<span class="params">simpleChanges: SimpleChanges</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> - <span class="subst">$&#123;<span class="variable language_">this</span>.className&#125;</span>: ngOnChanges`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(simpleChanges); <span class="comment">// print changes</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制台输出如下内容：<br><img src="/../images/ngOnChanges-simpleChanges.png" alt="Alt text"><br>因为是第一次赋值，所以<code>previousValue</code>是<code>undefined</code>，<code>currentValue</code>是<code>[&#39;John, &#39;Mary&#39;, &#39;Joe&#39;]</code>。并且firstChange为<code>true</code>。</p>
<p>接下来我们在父组件中添加一个按钮，用来修改<code>nameList</code>属性，修改<code>lifecycle-parent.component.html</code>文件，添加如下内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;changeNameList()&quot;</span>&gt;</span>Change Name List<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改<code>lifecycle-parent.component.ts</code>文件，添加如下内容：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">changeNameList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">nameList</span> = [<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Mary&#x27;</span>, <span class="string">&#x27;Joe&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行程序，切换到life-cycle页面，点击按钮，可以看到控制台输出如下内容：可以看到，由于这次我们修改了<code>nameList</code>属性，所以<code>ngOnChanges</code>方法又被调了一次。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">9 - OrderComponent: ngOnChanges</span><br><span class="line">10 - OrderComponent: ngDoCheck</span><br><span class="line">11 - OrderComponent: ngAfterContentChecked</span><br><span class="line">12 - OrderComponent: ngAfterViewChecked</span><br></pre></td></tr></table></figure>

<p>这次<code>changes</code>参数的内容如下图所示：<br><img src="/../images/ngOnChanges-second-change.png" alt="Alt text"></p>
<p>接下来，我们修改一下代码，添加一个input框，让用户输入名字，然后将该名字显示到页面上，修改<code>lifecycle-parent.component.html</code>文件，添加如下内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;addName()&quot;</span>&gt;</span>Add Name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改<code>lifecycle-parent.component.ts</code>文件，添加如下内容：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"><span class="title function_">addName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">name</span>.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nameList</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行程序，输入<code>zdd</code>到input框，点击Add Name按钮，可以看到新添加的name显示到了页面上，但是<code>onChanges</code>方法并没有被调用，这是为什么呢？</p>
<p><img src="/../images/ngOnChanges-input.png" alt="Alt text"></p>
<p>这是因为，Angular默认的change detection比较的是Input值的引用，而不是值本身。所以，当我们修改<code>nameList</code>属性时，<code>ngOnChanges</code>方法被调用了，因为我们修改了<code>nameList</code>的引用，但是当我们修改<code>nameList</code>的值时，<code>ngOnChanges</code>方法并没有被调用，因为<code>nameList</code>的引用并没有变化。</p>
<p>要想让<code>ngOnChanges</code>方法被调用，我们可以这样给<code>nameList</code>属性赋值：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">nameList</span> = [...<span class="variable language_">this</span>.<span class="property">nameList</span>, <span class="variable language_">this</span>.<span class="property">name</span>];</span><br></pre></td></tr></table></figure>
<p>这样，<code>nameList</code>的引用就变化了，<code>ngOnChanges</code>方法就会被调用。</p>
<p>不知道大家是否注意到这样一个情况，我们在input框每输入一个字符，控制台都会打印一下内容，甚至在我们删除输入框内容的时候，也会打印。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">96 - OrderComponent: ngDoCheck</span><br><span class="line">97 - OrderComponent: ngAfterContentChecked</span><br><span class="line">98 - OrderComponent: ngAfterViewChecked</span><br></pre></td></tr></table></figure>
<p>看来，每当我们输入值的时候，都触发了Angular change detection，这并不是我们想要的，我们只想在点击Add Name按钮的时候，触发change detection，这样才能保证性能。</p>
<p>用Angular Dev tool分析一下程序的性能。</p>
<p>首先打开Chrome的插件商店，搜索<code>Angular DevTools</code>，然后安装该插件。</p>
<p>然后运行程序，打开该插件，切换到<code>Profiler</code>页面。点击<code>Start recording</code>，然后在input框中输入几个字符，并停止录制。</p>
<p><img src="/../images/angular-devtools-profiler.png" alt="Alt text"></p>
<p>可以看到，输入框的input事件触发了<code>OrderComponent</code>的change detection,这不是我们想要的。我们可以使用<code>ChangeDetectorRef</code>来金庸change detection.</p>
<p>修改<code>lifecycle.component.ts</code>文件，添加如下内容：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> changeDetector: ChangeDetectorRef</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ngAfterViewInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 注意，不能再ngOnInit方法中调用以下方法，否则初始数据无法显示到页面上。</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">changeDetector</span>.<span class="title function_">detach</span>(); <span class="comment">// 禁用change detection.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onInput</span>(<span class="params">event: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">addName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">name</span>.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nameList</span> = [...<span class="variable language_">this</span>.<span class="property">nameList</span>, <span class="variable language_">this</span>.<span class="property">name</span>];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">changeDetector</span>.<span class="title function_">detectChanges</span>(); <span class="comment">// 更新数据时，要手动触发change detection.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次运行程序，在input框中输入字符，观察控制台，你会发现，input事件不再触发change detection了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">12</span><br><span class="line">123</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>

<p>使用<code>ChangeDetectionStrategy.OnPush</code>可以提高性能，但是要注意，如果我们使用了<code>ChangeDetectionStrategy.OnPush</code>，那么我们就必须使用<code>@Input</code>属性，否则，<code>ngOnChanges</code>方法不会被调用。而且使用这种策略时，只有当<code>@Input</code>属性的<code>引用</code>发生变化时，才会触发change detection，如果<code>@Input</code>属性的值发生变化，是不会触发change detection的。</p>
<p>比如，这样可以触发<code>ngOnChanges</code>方法：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">name</span>.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nameList</span> = [...<span class="variable language_">this</span>.<span class="property">nameList</span>, <span class="variable language_">this</span>.<span class="property">name</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这样不会触发<code>ngOnChanges</code>方法：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">name</span>.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nameList</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>angular</tag>
        <tag>lifecycle</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular-standalone-component</title>
    <url>/2023/09/02/Angular-standalone-component/</url>
    <content><![CDATA[<h1 id="Angular-Standalone-Component"><a href="#Angular-Standalone-Component" class="headerlink" title="Angular Standalone Component"></a>Angular Standalone Component</h1><p><code>standalone component</code>是Angular 14的一个新特性，它可以让我们在不创建module的情况下创建一个component。</p>
<h2 id="创建一个standalone-component"><a href="#创建一个standalone-component" class="headerlink" title="创建一个standalone component"></a>创建一个standalone component</h2><p>组件代码如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>, <span class="comment">// 添加这一句，表示这是一个standalone component。</span></span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">CommonModule</span>],</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;lifecycle-order&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./order.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./order.component.less&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderComponent</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>standalone component和module的交互使用有如下两种情况。</p>
<h2 id="standalone-component引入其他module"><a href="#standalone-component引入其他module" class="headerlink" title="standalone component引入其他module"></a>standalone component引入其他module</h2><p>如果standalone component需要引入其他module，那么需要在<code>imports</code>属性中引入其他module，比如上面代码中引入的<code>CommonModule</code>。</p>
<p>注意：只有standalone component才能引入其他module，<code>普通的component(non-standalone component)不能引入其他module</code>。所以只有standalone component才能使用<code>imports</code>属性。</p>
<p>如果你遇到如下报错，那么说明你在非standalone组件中使用了<code>imports</code>属性，这是不允许的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error NG2010: <span class="string">&#x27;imports&#x27;</span> is only valid on a component that is standalone.</span><br></pre></td></tr></table></figure>

<p>这种情况经常发生在，ComponentA(非独立组件)想在template中使用ComponentB(独立组件)，那么应该在ComponentA所在的module中的imports属性中引入ComponentB。</p>
<h2 id="module引入standalone-component"><a href="#module引入standalone-component" class="headerlink" title="module引入standalone component"></a>module引入standalone component</h2><p>如果一个module要使用一个standalone component，那么<code>不再</code>需要在<code>declarations</code>属性中声明这个standalone component，只需要在<code>imports</code>属性中引入这个standalone component所在的module即可。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    <span class="title class_">AppComponent</span>,</span><br><span class="line">    <span class="comment">// OrderComponent, // no need to declare standalone component here</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span>,</span><br><span class="line">    <span class="title class_">OrderComponent</span>, <span class="comment">// imports standalone component here</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>angular</tag>
        <tag>standalone</tag>
        <tag>component</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular template reference variables</title>
    <url>/2023/07/22/Angular-template-reference-variables/</url>
    <content><![CDATA[<h1 id="Angular-template-reference-variables"><a href="#Angular-template-reference-variables" class="headerlink" title="Angular template reference variables"></a>Angular template reference variables</h1><p>Template reference variables - 模板引用变量，是指在模板中声明的变量，它可以在模板中的任何地方使用，比如在模板中的表单元素中，可以使用模板引用变量来获取表单元素的值。模板引用变量的名字以<code>#</code>开头，比如<code>#name</code>，<code>#age</code>等。模板引用变量的作用域是模板，不能在组件中使用。</p>
<p>模板引用变量可以引用如下内容</p>
<ul>
<li>A DOM element in a template</li>
<li>a directive or component</li>
<li>a TemplateRef from an ng-template</li>
<li>a web component</li>
</ul>
<h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><p>模板引用变量以<code>#</code>开头，比如下面的代码中，<code>#phone</code>就是一个模板引用变量, 它引用了<code>&lt;input&gt;</code>元素。就是说，我们可以通过<code>#phone</code>这个模板引用变量来获取<code>&lt;input&gt;</code>元素的值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> #<span class="attr">phone</span> <span class="attr">placeholder</span>=<span class="string">&quot;phone number&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="引用DOM元素"><a href="#引用DOM元素" class="headerlink" title="引用DOM元素"></a>引用DOM元素</h2><p>下面的代码使用<code>#phone</code>变量引用了<code>input</code>元素，在点击button的时候，获取input元素的值，并调用相应的方法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> #<span class="attr">phone</span> <span class="attr">placeholder</span>=<span class="string">&quot;phone number&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;callPhone(phone.value)&quot;</span>&gt;</span>Call<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果想在页面上显示input中输入的值，可以使用双向绑定，如下所示：注意这里添加了<code>ngModel</code>，没有这个的话，<code>phone.value</code>是获取不到值的，因为初始的时候输入框并并没有值，而且input值改变的时候，phone.value也无法感知更新。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ngModel</span> #<span class="attr">phone</span> <span class="attr">placeholder</span>=<span class="string">&quot;phone number&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;phone.value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>引用DOM元素应该是模板变量最常用的场景了，有了它，我们就可以不用再使用<code>document.getElementById()</code>这样的方法来获取DOM元素了。</p>
<h2 id="使用模板变量创建ViewChild"><a href="#使用模板变量创建ViewChild" class="headerlink" title="使用模板变量创建ViewChild"></a>使用模板变量创建<code>ViewChild</code></h2><p>模板引用变量可以用来创建<code>ViewChild</code>，比如下面的代码中，<code>#phone</code>就是一个模板引用变量，它引用了<code>&lt;input&gt;</code>元素，然后我们就可以在组件中使用<code>@ViewChild</code>装饰器来获取<code>&lt;input&gt;</code>元素。</p>
<p>template.html代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> #<span class="attr">phone</span> <span class="attr">placeholder</span>=<span class="string">&quot;phone number&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>component.ts代码</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ViewChild</span>(<span class="string">&#x27;phone&#x27;</span>) <span class="attr">phone</span>: <span class="title class_">ElementRef</span>;</span><br></pre></td></tr></table></figure>
<p>这样我们就可以在组件中调用input元素的方法，比如点击某个按钮时，让input元素获取焦点。</p>
  <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">focusPhone</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">phone</span>.<span class="property">nativeElement</span>.<span class="title function_">focus</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="引用Component"><a href="#引用Component" class="headerlink" title="引用Component"></a>引用Component</h2><p>模板引用变量可以引用组件，比如下面的代码中，<code>#child</code>就是一个模板引用变量，它引用了<code>&lt;child-component&gt;</code>组件，然后我们就可以在模板中使用<code>#child</code>这个模板引用变量来调用<code>&lt;child-component&gt;</code>组件中的方法和属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child-component</span> #<span class="attr">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;child.childMethod()&quot;</span>&gt;</span>Call child method<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="引用Directive"><a href="#引用Directive" class="headerlink" title="引用Directive"></a>引用Directive</h2><p><code>Directive</code>中有一个属性：<code>exportAs</code>, 这个属性对应的值，就是模板引用变量中可以使用的名字。<br>下面是一个自定Directive，用来给某一段文字添加背景色。</p>
  <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Directive</span>, <span class="title class_">ElementRef</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[appHighlight]&#x27;</span>,</span><br><span class="line">  <span class="attr">exportAs</span>: <span class="string">&#x27;highlightDirective&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HighlightDirective</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> element: ElementRef</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">nativeElement</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;background-color: yellow;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setBackgroundColor</span>(<span class="params">color: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">nativeElement</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">`background-color: <span class="subst">$&#123;color&#125;</span>;`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是使用这个自定义指令的component对应的模板代码：页面加载后，文字的背景色为黄色，点击按钮后，文字的背景色变为红色。注意<code>#highlight=&quot;highlightDirective&quot;</code>这句话，<code>highlight</code>是模板引用变量，<code>highlightDirective</code>是<code>Directive</code>中<code>exportAs</code>属性对应的值。这样就把模板变量和其引用的指令关联起来了。</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">appHighlight</span> #<span class="attr">highlight</span>=<span class="string">&quot;highlightDirective&quot;</span>&gt;</span>test-component works!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;highlight.setBackgroundColor(&#x27;red&#x27;)&quot;</span>&gt;</span>Reset color<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="引用TemplateRef"><a href="#引用TemplateRef" class="headerlink" title="引用TemplateRef"></a>引用TemplateRef</h2><p>模板引用变量可以引用<code>&lt;ng-template&gt;</code>元素，这种情形经常出现在条件渲染中，就是根据不同的条件渲染不同的内容，比如下面的代码中，当<code>condition</code>为<code>true</code>时，渲染<code>thenBlock</code>，当<code>condition</code>为<code>false</code>时，渲染<code>elseBlock</code>。这里面的<code>thenBlock</code>和<code>elseBlock</code>引用的都是<code>&lt;ng-template&gt;</code>元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;condition; then thenBlock else elseBlock&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">thenBlock</span>&gt;</span>Content to render when condition is true.<span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">elseBlock</span>&gt;</span>Content to render when condition is false.<span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="引用Web-Component"><a href="#引用Web-Component" class="headerlink" title="引用Web Component"></a>引用Web Component</h2><p>模板引用变量可以引用Web Component，比如下面的代码中，<code>#wc</code>就是一个模板引用变量，它引用了<code>&lt;my-custom-element&gt;</code>元素，然后我们就可以在模板中使用<code>#wc</code>这个模板引用变量来调用<code>&lt;my-custom-element&gt;</code>元素中的方法和属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-custom-element</span> #<span class="attr">wc</span>&gt;</span><span class="tag">&lt;/<span class="name">my-custom-element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;wc.webComponentMethod()&quot;</span>&gt;</span>Call web component method<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>angular</tag>
        <tag>template</tag>
        <tag>variables</tag>
      </tags>
  </entry>
  <entry>
    <title>Array-like object</title>
    <url>/2023/07/01/Array-like-object/</url>
    <content><![CDATA[<h1 id="Array-like-object"><a href="#Array-like-object" class="headerlink" title="Array-like object"></a>Array-like object</h1><h2 id="What-is-array-like-object"><a href="#What-is-array-like-object" class="headerlink" title="What is array-like object?"></a>What is array-like object?</h2><p>Array-like object is an object that has a length property and indexed elements. For example, <code>arguments</code> is an array-like object.</p>
<p>An array-like is an object.</p>
<p>Has indexed access to the elements and a non-negative length property to know the number of elements in it. These are the only similarities it has with an array.<br>Doesn’t have any of the Array methods like push, pop, join, map, etc.</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayLike = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayLike[<span class="number">1</span>]); <span class="comment">// &#x27;b&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayLike.<span class="property">length</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayLike.<span class="property">push</span>); <span class="comment">// Uncaught TypeError: arrayLike.push is not a function</span></span><br></pre></td></tr></table></figure>

<h2 id="What-is-the-difference-between-array-and-array-like-object"><a href="#What-is-the-difference-between-array-and-array-like-object" class="headerlink" title="What is the difference between array and array-like object?"></a>What is the difference between array and array-like object?</h2><table>
<thead>
<tr>
<th>类型</th>
<th>length属性</th>
<th>索引访问</th>
<th>有Array.prototype方法</th>
</tr>
</thead>
<tbody><tr>
<td>Array</td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>Array-like object</td>
<td>✔️</td>
<td>✔️</td>
<td>❌</td>
</tr>
</tbody></table>
<h2 id="Which-type-in-JavaScript-is-array-like-object"><a href="#Which-type-in-JavaScript-is-array-like-object" class="headerlink" title="Which type in JavaScript is array-like object?"></a>Which type in JavaScript is array-like object?</h2><p>There are many types in JavaScript are array-like object, including:</p>
<ol>
<li>arguments in a function</li>
<li>NodeList(and other DOM collections)</li>
<li>HTMLCollection</li>
</ol>
<h3 id="arguments-in-a-function"><a href="#arguments-in-a-function" class="headerlink" title="arguments in a function"></a>arguments in a function</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br></pre></td></tr></table></figure>

<h3 id="NodeList-and-other-DOM-collections"><a href="#NodeList-and-other-DOM-collections" class="headerlink" title="NodeList(and other DOM collections)"></a>NodeList(and other DOM collections)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nodeList = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nodeList); <span class="comment">// NodeList(3) [div, div, div]</span></span><br></pre></td></tr></table></figure>

<h3 id="HTMLCollection"><a href="#HTMLCollection" class="headerlink" title="HTMLCollection"></a>HTMLCollection</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> htmlCollection = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;container&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(htmlCollection); <span class="comment">// HTMLCollection(3) [div.container, div.container, div.container]</span></span><br></pre></td></tr></table></figure>

<h2 id="How-to-convert-array-like-object-to-array"><a href="#How-to-convert-array-like-object-to-array" class="headerlink" title="How to convert array-like object to array?"></a>How to convert array-like object to array?</h2><p>There are several ways to convert array-like object to array.</p>
<h3 id="Array-from-…"><a href="#Array-from-…" class="headerlink" title="Array.from(…)"></a>Array.from(…)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayLike = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> array = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="Use-ES6-spread-operator"><a href="#Use-ES6-spread-operator" class="headerlink" title="Use ES6 spread operator"></a>Use ES6 spread operator</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayLike = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> array = [...arrayLike];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="Array-prototype-slice-call-…"><a href="#Array-prototype-slice-call-…" class="headerlink" title="Array.prototype.slice.call(…)"></a>Array.prototype.slice.call(…)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayLike = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> array = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(arrayLike);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>array like</tag>
      </tags>
  </entry>
  <entry>
    <title>Communication between components/directives by service</title>
    <url>/2023/07/12/Communication-between-components-directives-by-service/</url>
    <content><![CDATA[<p>组件（指令）间通信是Angular中一个非常常见的需求，对于有直接嵌套关系（比如父子组件）的组件，我们可以使用<code>@Input</code>和<code>@Output</code>来实现通信，但是对于没有嵌套关系的组件（亦或者嵌套层级很深的组件），我们就需要使用其他的方法来实现通信了，比如使用服务来实现组件间通信。<br>下面这个例子就是两个没有嵌套关系的指令之间通信的例子，我们将使用服务来实现这个功能。<br>注意：在Angular中，组件和指令是一样的，组件是一种特殊的指令。</p>
<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>首先我们需要创建一个服务，用于组件间通信。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Subject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CommunicationService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> messageSource = <span class="keyword">new</span> <span class="title class_">Subject</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 此变量的类型是Observable，用来接收消息, message$.subscribe()用来订阅消息。</span></span><br><span class="line">  <span class="keyword">public</span> message$ = <span class="variable language_">this</span>.<span class="property">messageSource</span>.<span class="title function_">asObservable</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 此函数用来发消息</span></span><br><span class="line">  <span class="title function_">sendMessage</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">messageSource</span>.<span class="title function_">next</span>(message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="指令1"><a href="#指令1" class="headerlink" title="指令1"></a>指令1</h2><p>该指令使用上面定义的service发送消息</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Directive</span>, <span class="title class_">HostListener</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommunicationService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./communication.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[senderDirective]&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SenderDirective</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> communicationService: CommunicationService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">  <span class="title function_">onClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">communicationService</span>.<span class="title function_">sendMessage</span>(<span class="string">&#x27;Hello from sender directive!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="指令2"><a href="#指令2" class="headerlink" title="指令2"></a>指令2</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">该指令使用上面定义的service接收消息</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Directive</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommunicationService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./communication.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[receiverDirective]&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ReceiverDirective</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> communicationService: CommunicationService</span>) &#123;</span><br><span class="line">    <span class="comment">// 接收消息</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">communicationService</span>.<span class="property">message$</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received message:&#x27;</span>, message);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>我们需要在appModule中声明这两个指令</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommunicationService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./communication.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SenderDirective</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./sender.directive&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReceiverDirective</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./receiver.directive&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    <span class="title class_">AppComponent</span>,</span><br><span class="line">    <span class="title class_">SenderDirective</span>,</span><br><span class="line">    <span class="title class_">ReceiverDirective</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">CommunicationService</span>],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">senderDirective</span>&gt;</span>Send message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">receiverDirective</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>angular</tag>
        <tag>service</tag>
        <tag>directive</tag>
        <tag>communication</tag>
      </tags>
  </entry>
  <entry>
    <title>Enable CORS from backend with Node and Express</title>
    <url>/2023/07/13/Enable-CORS-from-backend-with-Node-and-Express/</url>
    <content><![CDATA[<h1 id="Enable-CORS-from-backend-with-Node-and-Express"><a href="#Enable-CORS-from-backend-with-Node-and-Express" class="headerlink" title="Enable CORS from backend with Node and Express"></a>Enable CORS from backend with Node and Express</h1><p>本文介绍如何在Node和Express中启用CORS。从后端解决前端项目中常见的跨域问题。想必每个做过前端开发的同学都对下面这个错误很熟悉：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access to XMLHttpRequest at &#x27;http://localhost:3000/api/xxx&#x27; from origin &#x27;http://localhost:4200&#x27; has been blocked by CORS policy: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br></pre></td></tr></table></figure>
<p>这个错误是由于浏览器的同源策略导致的，同源策略是浏览器的一种安全策略，它要求浏览器只能向同源网址发送请求，同源网址指的是协议、域名、端口号都相同的网址。比如，<code>http://localhost:4200</code>(4200是Angular项目常用端口)和<code>http://localhost:3000</code>（3000是Node.js项目常用端口）就不是同源网址，因为它们的端口号不同。同源策略的目的是为了防止恶意的网站窃取数据，但是对于前端开发来说，这个策略有时候就显得有点过于严格了，比如我们在开发时，前端项目和后端项目往往是分开的，前端项目一般运行在<code>http://localhost:4200</code>，而后端项目一般运行在<code>http://localhost:3000</code>，这样就导致了前端项目无法向后端项目发送请求，从而导致了上面的错误。那么如何解决这个问题呢？我们可以在后端项目中启用CORS，从而解决这个问题。下面我们就来看看如何在Node和Express中启用CORS。</p>
<h2 id="什么是CORS"><a href="#什么是CORS" class="headerlink" title="什么是CORS"></a>什么是CORS</h2><p>CORS是Cross-Origin Resource Sharing的缩写，中文名是跨域资源共享，它是一种机制，它使用额外的HTTP头来告诉浏览器，允许运行在一个源上的Web应用访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域HTTP请求。<br>以下是几种跨域常见的场景：</p>
<ol>
<li>域名不同<br><code>remotehost</code> vs <code>localhost</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:4200 和 http://remotehost:3000</span><br></pre></td></tr></table></figure></li>
<li>协议不同<br><code>http</code> vs <code>https</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:3000 和 https://localhost:3000</span><br></pre></td></tr></table></figure></li>
<li>端口不同<br><code>3000</code> vs <code>4200</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:3000 和 http://localhost:4200</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h2><ol>
<li>创建一个Express项目并安装cors<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm install express --save</span><br><span class="line">npm install cors --save</span><br></pre></td></tr></table></figure></li>
<li>在项目根目录下创建<code>server.js</code>文件，添加如下内容，这个服务器提供两个接口，一个是<code>/</code>，一个是<code>/users</code>，其中<code>/users</code>接口返回一个用户列表。而且在<code>server.js</code>中启用了CORS，允许<code>http://localhost:4200</code>这个地址访问该服务提供的接口。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Enable CORS</span></span><br><span class="line"><span class="keyword">let</span> corsOptions = &#123;</span><br><span class="line"> origin : [<span class="string">&#x27;http://localhost:4200&#x27;</span>], <span class="comment">// 前端项目地址</span></span><br><span class="line">&#125;;</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>(corsOptions));</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"> res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/users&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">const</span> users = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;Jane&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;,</span><br><span class="line"> ];</span><br><span class="line"></span><br><span class="line"> res.<span class="title function_">json</span>(users);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li>启动项目<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure></li>
<li>新建一个前端项目（Angular），启动项目后运行在localhost:4200,通过前端访问这个api时就不会有跨域问题了。<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HttpClient</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, <span class="title class_">OnInit</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">UsersModel</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./users.model&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HttpClient</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@angular/common/http&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-users&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./users.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./users.component.less&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="attr">users</span>: <span class="title class_">UsersModel</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> http: HttpClient</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">http</span>.<span class="property">get</span>&lt;<span class="title class_">UsersModel</span>[]&gt;(<span class="string">&#x27;http://localhost:3000/users&#x27;</span>)</span><br><span class="line">      .<span class="title function_">subscribe</span>(<span class="function">(<span class="params">users: UsersModel[]</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">users</span> = users;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>记得在app.module.ts中启用HttpClientModule<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HttpClientModule</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">   <span class="attr">declarations</span>: [</span><br><span class="line">   <span class="title class_">AppComponent</span>,</span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">imports</span>: [</span><br><span class="line">     <span class="title class_">HttpClientModule</span>,</span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">providers</span>: [],</span><br><span class="line">   <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>cors</tag>
        <tag>node</tag>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>Event-delegate</title>
    <url>/2023/07/19/Event-delegate/</url>
    <content><![CDATA[<h1 id="Event-Delegate-事件代理"><a href="#Event-Delegate-事件代理" class="headerlink" title="Event Delegate(事件代理)"></a>Event Delegate(事件代理)</h1><h2 id="什么是事件代理（也叫事件委托）"><a href="#什么是事件代理（也叫事件委托）" class="headerlink" title="什么是事件代理（也叫事件委托）"></a>什么是事件代理（也叫事件委托）</h2><p>事件代理是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。比如，我们有一个<code>ul</code>元素，里面有很多<code>li</code>元素，我们想要给每个<code>li</code>元素添加点击事件。有两种方法可以完成这件事：</p>
<ol>
<li>给每个<code>li</code>元素都添加一个点击事件，弊端是如果<code>li</code>元素很多的话，就会导致代码很冗余，如果后面还有新的<code>li</code>元素添加进来，还需要给新的<code>li</code>元素添加点击事件，导致代码很难维护。</li>
<li>给<code>ul</code>元素添加一个点击事件，然后在事件处理程序中判断点击的是哪个<code>li</code>元素，然后执行对应的操作即可，简洁高效。<code>这种方法就是事件代理</code>。</li>
</ol>
<h2 id="事件代理的原理"><a href="#事件代理的原理" class="headerlink" title="事件代理的原理"></a>事件代理的原理</h2><p>事件代理的原理是利用事件冒泡，事件代理的事件处理程序会在事件冒泡阶段执行，这样就可以在事件处理程序中判断点击的是哪个元素，然后执行对应的操作。<br>不支持事冒泡的事件无法使用事件代理，比如<code>blur</code>、<code>focus</code>、<code>load</code>、<code>unload</code>等事件。</p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>下面代码为<code>ul</code>元素添加了一个点击事件，然后在事件处理程序中判断点击的是哪个<code>li</code>元素，然后执行对应的操作。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>);</span><br><span class="line">list.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">target</span> &amp;&amp; e.<span class="property">target</span>.<span class="property">nodeName</span> === <span class="string">&#x27;LI&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">innerHTML</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>而下面的代码为table元素添加了点击事件，然后在事件处理程序中判断点击的是哪个<code>td</code>元素，然后执行对应的操作。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;my-table&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> table = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;my-table&quot;</span>);</span><br><span class="line">table.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Only handle click on td element.</span></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>() === <span class="string">&quot;td&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">`You clicked on td element with value <span class="subst">$&#123;e.target.innerHTML&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="为啥突然想到这个呢？"><a href="#为啥突然想到这个呢？" class="headerlink" title="为啥突然想到这个呢？"></a>为啥突然想到这个呢？</h2><p>因为最近在做一个drag and drop的app，需要在拖拽的时候显示preview（被拖拽元素跟着鼠标走），需要一个操作就是克隆被拖拽的元素，而cloneNode这个方法是无法克隆事件的（只能克隆inline事件，无法克隆通过属性或者event listener添加的事件），而如果使用的是事件代理模式，则不存在这个问题。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>event</tag>
        <tag>delegate</tag>
      </tags>
  </entry>
  <entry>
    <title>Find element in array</title>
    <url>/2023/06/16/Find-element-in-array/</url>
    <content><![CDATA[<h1 id="在数组中查找元素"><a href="#在数组中查找元素" class="headerlink" title="在数组中查找元素"></a>在数组中查找元素</h1><h2 id="使用find查找元素"><a href="#使用find查找元素" class="headerlink" title="使用find查找元素"></a>使用<code>find</code>查找元素</h2><p><code>find</code>方法用于查找数组中满足条件的元素，如果找到了满足条件的元素，那么<code>find</code>方法会返回该元素，否则返回<code>undefined</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers.<span class="title function_">find</span>(<span class="function"><span class="params">element</span> =&gt;</span> element === <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result1 = numbers.<span class="title function_">find</span>(<span class="function"><span class="params">element</span> =&gt;</span> element === <span class="number">6</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>注意如果数组中有多个元素都满足查找条件，那么<code>find</code>方法只会返回第一个满足条件的元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>, <span class="attr">age</span>: <span class="number">32</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;wxq&#x27;</span>, <span class="attr">age</span>: <span class="number">28</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;xxx&#x27;</span>, <span class="attr">age</span>: <span class="number">32</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;guoguo&#x27;</span>, <span class="attr">age</span>: <span class="number">2</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result2 = people.<span class="title function_">find</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> ele.<span class="property">age</span> === <span class="number">32</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2); <span class="comment">// &#123; name: &#x27;zdd&#x27;, age: 32 &#125;</span></span><br></pre></td></tr></table></figure>
<p>如果想找出所有满足条件的元素，请使用<code>filter</code>方法。</p>
<h2 id="使用filter查找元素"><a href="#使用filter查找元素" class="headerlink" title="使用filter查找元素"></a>使用<code>filter</code>查找元素</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result3 = people.<span class="title function_">filter</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> ele.<span class="property">age</span> === <span class="number">32</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result3); <span class="comment">// [ &#123; name: &#x27;zdd&#x27;, age: 32 &#125;, &#123; name: &#x27;xxx&#x27;, age: 32 &#125; ]</span></span><br></pre></td></tr></table></figure>
<p>这里有一个技巧，可以使用ES6的解构操作进行查找。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result4 = people.<span class="title function_">find</span>(<span class="function">(<span class="params">&#123; age &#125;</span>) =&gt;</span> age === <span class="number">32</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result4); <span class="comment">// &#123; name: &#x27;zdd&#x27;, age: 32 &#125;</span></span><br></pre></td></tr></table></figure>
<p>如果想查找最后一个出现的元素，可以使用<code>findLast</code>方法。</p>
<h2 id="使用findLast方法查找最后一个满足条件的元素。"><a href="#使用findLast方法查找最后一个满足条件的元素。" class="headerlink" title="使用findLast方法查找最后一个满足条件的元素。"></a>使用<code>findLast</code>方法查找最后一个满足条件的元素。</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result4 = numbers.<span class="title function_">findLast</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> ele &gt; <span class="number">2</span>); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result4);</span><br></pre></td></tr></table></figure>
<p>注意：该方法需要Node.js version 18.0.0以上版本才支持。</p>
<h2 id="为什么有findLast方法，但是没有findFirst方法？"><a href="#为什么有findLast方法，但是没有findFirst方法？" class="headerlink" title="为什么有findLast方法，但是没有findFirst方法？"></a>为什么有<code>findLast</code>方法，但是没有<code>findFirst</code>方法？</h2><p>因为<code>find</code>方法就是<code>findFirst</code>方法，所以不需要<code>findFirst</code>方法。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>array</tag>
        <tag>element</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/04/10/Hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>How to get DOM element on page</title>
    <url>/2023/06/29/How-to-get-DOM-element-on-page/</url>
    <content><![CDATA[<h1 id="How-to-get-DOM-elements-on-page"><a href="#How-to-get-DOM-elements-on-page" class="headerlink" title="How to get DOM elements on page"></a>How to get DOM elements on page</h1><p>获取Dom元素总体来说有两类方法：</p>
<ul>
<li>getElementByXXX</li>
<li>queryXXX</li>
</ul>
<p>这两种方法都是从document对象开始查找，所以可以直接使用，不需要先获取document对象。</p>
<h2 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h2><h3 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById"></a>getElementById</h3><p>这是最常用的方法，如果你的元素有id属性，那么可以使用这个方法获取元素，返回的是一个Element对象。如果没有找到，则返回null。<br>html代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>js代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (element) &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="getElementsByClassName"><a href="#getElementsByClassName" class="headerlink" title="getElementsByClassName"></a>getElementsByClassName</h3><p>这个方法可以获取到所有class属性中包含指定类名的元素，返回的是一个<a href="https://daily.dev/blog/why-do-you-need-to-know-about-array-like-objects"><code>array-like</code></a>对象HTMLCollection，可以使用Array.from()方法将其转换为数组。<br>html代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>js代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;container&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> elementsArray = <span class="title class_">Array</span>.<span class="title function_">from</span>(elements);</span><br></pre></td></tr></table></figure>

<p>需要注意的是，这个方法返回的是一个动态的集合，也就是说，如果你在获取到元素之后，再向页面中添加或者删除元素，那么这个集合也会跟着改变。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 初始时，页面上有三个按钮。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> buttons = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(buttons); <span class="comment">// HTMLCollection(3) [button, button, button]</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 添加一个按钮, 此时再打印buttons，则输出四个按钮。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> buttonD = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    buttonD.<span class="property">innerHTML</span> = <span class="string">&quot;D&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    buttonD.<span class="property">className</span> = <span class="string">&quot;button&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(buttonD);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(buttons); <span class="comment">// HTMLCollection(4) [button, button, button, button]</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="query方法"><a href="#query方法" class="headerlink" title="query方法"></a>query方法</h2><p>query类的方法参数是CSS选择器，比如 </p>
<ul>
<li>“#root” - 查找id为root的结点，</li>
<li>“.container” - 查找class为container的结点，</li>
<li>“div” - 查找所有div结点。</li>
</ul>
<h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h3><p>这个方法可以获取到第一个匹配的元素，它的返回值类型是Element。如果没有匹配的元素，返回null。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>js代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h3><p>这个方法可以获取到所有匹配的元素，返回的是一个类数组对象NodeList，可以使用Array.from()方法将其转换为数组。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>js代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.container&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> elementsArray = <span class="title class_">Array</span>.<span class="title function_">from</span>(elements);</span><br></pre></td></tr></table></figure>

<p>querySelectorAll方法返回的是一个静态的集合，也就是说，如果你在获取到元素之后，再向页面中添加或者删除元素，那么这个集合不会跟着改变。</p>
<p>需要注意的是，尽管querySelectorAll方法返回的NodeList是静态的，但是NodeList在有些情况下却是动态的，比如 <code>Node.childNodes</code> 返回的就是一个动态的NodeList。</p>
<h2 id="总结成如下表格"><a href="#总结成如下表格" class="headerlink" title="总结成如下表格"></a>总结成如下表格</h2><table>
<thead>
<tr>
<th>方法</th>
<th>返回值类型</th>
<th>返回值个数</th>
<th>查不到时返回值</th>
<th>返回值状态：动态&#x2F;静态</th>
</tr>
</thead>
<tbody><tr>
<td>getElementById</td>
<td>Element</td>
<td>1</td>
<td>null</td>
<td>-</td>
</tr>
<tr>
<td>getElementsByClassName</td>
<td>HTMLCollection</td>
<td>0~n</td>
<td>空的HTMLCollection</td>
<td>动态</td>
</tr>
<tr>
<td>querySelector</td>
<td>Element</td>
<td>1</td>
<td>null</td>
<td>-</td>
</tr>
<tr>
<td>querySelectorAll</td>
<td>NodeList</td>
<td>0~n</td>
<td>空的NodeList</td>
<td>静态</td>
</tr>
</tbody></table>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/getElementById">getElementById</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/getElementsByClassName">getElementsByClassName</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelector">querySelector</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll">querySelectorAll</a>  </p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>element</tag>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Usage</title>
    <url>/2023/04/16/Hexo-Usage/</url>
    <content><![CDATA[<h1 id="Hexo-Usage"><a href="#Hexo-Usage" class="headerlink" title="Hexo Usage"></a>Hexo Usage</h1><h2 id="How-to-Write-a-new-post"><a href="#How-to-Write-a-new-post" class="headerlink" title="How to Write a new post"></a>How to Write a new post</h2><ol>
<li>Generate new post in your terminal: <code>hexo new &quot;Your post name&quot;</code></li>
<li>Open your project by <code>vscode</code>, then open file: <code>source\_post\Your post name.md</code></li>
<li>Edit your post with vscode, hexo support <code>markdown</code> and <code>ejs</code> files</li>
</ol>
<h2 id="Clean-cache"><a href="#Clean-cache" class="headerlink" title="Clean cache"></a>Clean cache</h2><ol>
<li>After finish editing, you can type <code>hexo clean</code> in your terminal to clean the cache, <code>clean</code> is short for <code>clean</code> here.<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h2><ol>
<li>After finish editing, you can type <code>hexo g</code> in your terminal to generate static files, <code>g</code> is short for <code>generate</code> here.<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Publish-your-post"><a href="#Publish-your-post" class="headerlink" title="Publish your post"></a>Publish your post</h2><ol>
<li>Type <code>hexo d</code> to deploy your post to github.io, <code>d</code> is short for <code>deploy</code> here.<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="View-your-post"><a href="#View-your-post" class="headerlink" title="View your post"></a>View your post</h2><ol>
<li>open <code>zdd.github.io</code> to see your post, good job!</li>
</ol>
<p>you can use <code>npm run deploy</code> to combine generate and deploy in a single command.</p>
<h2 id="View-post-locally"><a href="#View-post-locally" class="headerlink" title="View post locally"></a>View post locally</h2><ol>
<li>Run <code>hexo s</code> in terminal, then open <code>localhost:4000</code> to see your post, this is very convenient to check your post before publish.<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="404-File-not-found"><a href="#404-File-not-found" class="headerlink" title="404 File not found"></a>404 File not found</h2><p>When you encounter the 404 error, make sure to do the following</p>
<ol>
<li>Check your <code>source\_post\Your post name.md</code> file name, make sure it is the same as the title in the file.</li>
<li>run <code>hexo clean</code> to clean the cache</li>
<li>run <code>hexo g</code> to generate static files</li>
<li>run <code>hexo d</code> to deploy your post to github.io</li>
</ol>
<h2 id="Tags-not-working"><a href="#Tags-not-working" class="headerlink" title="Tags not working"></a>Tags not working</h2><ol>
<li>Make sure you have a <code>tags</code> folder under <code>source</code> folder</li>
<li>Install easy tag plugin by <code>npm install hexo-easy-tags-plugin --save</code></li>
<li>Delete <code>.deploy_git</code> folder</li>
<li>Run <code>hexo clean</code> to clean the cache</li>
<li>Run <code>hexo g</code> to generate static files</li>
<li>Run <code>hexo d</code> to deploy your post to github.io</li>
<li>Force refresh your browser by <code>Ctrl + F5</code></li>
</ol>
<h2 id="How-to-add-tags"><a href="#How-to-add-tags" class="headerlink" title="How to add tags"></a>How to add tags</h2><ol>
<li>Run <code>hexo new post &quot;tags&quot;</code></li>
<li>Make sure tags&#x2F;index.md has the following content<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2023-06-30 23:21:34</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Add-multiple-tags-for-a-post"><a href="#Add-multiple-tags-for-a-post" class="headerlink" title="Add multiple tags for a post"></a>Add multiple tags for a post</h2><ol>
<li>Add tags in the front matter of your post, for example:<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo Usage</span><br><span class="line">date: 2023-04-16 22:03:56</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">-</span> hexo</span><br><span class="line"><span class="section">- blog</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Array operations</title>
    <url>/2023/06/17/JavaScrip-array-operations/</url>
    <content><![CDATA[<h1 id="Array-operations"><a href="#Array-operations" class="headerlink" title="Array operations"></a>Array operations</h1><h2 id="插入，删除，替换数组元素"><a href="#插入，删除，替换数组元素" class="headerlink" title="插入，删除，替换数组元素"></a>插入，删除，替换数组元素</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert 6 at index 2</span></span><br><span class="line">numbers.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>); <span class="comment">// [1, 2, 6, 3, 4, 5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove 2 elements starting from index 3</span></span><br><span class="line">numbers.<span class="title function_">splice</span>(<span class="number">3</span>, <span class="number">2</span>); <span class="comment">// [1, 2, 6, 5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// replace 1 element at index 2 with 7</span></span><br><span class="line">numbers.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>); <span class="comment">// [1, 2, 7, 5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers);</span><br></pre></td></tr></table></figure>

<h2 id="获取最后一个元素"><a href="#获取最后一个元素" class="headerlink" title="获取最后一个元素"></a>获取最后一个元素</h2><h3 id="使用length属性"><a href="#使用length属性" class="headerlink" title="使用length属性"></a>使用<code>length</code>属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers[numbers.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<h3 id="使用at方法："><a href="#使用at方法：" class="headerlink" title="使用at方法："></a>使用<code>at</code>方法：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers.<span class="title function_">at</span>(-<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<p>原本JavaScript并不支持负值索引，但是有了<code>at</code>方法后，则可以使用负值索引。<br>注意<code>at</code>方法需要新版的浏览器和Node.js支持，详情看这里：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at</a></p>
<h3 id="截取数组的一部分"><a href="#截取数组的一部分" class="headerlink" title="截取数组的一部分"></a>截取数组的一部分</h3><h4 id="使用slice方法"><a href="#使用slice方法" class="headerlink" title="使用slice方法"></a>使用<code>slice</code>方法</h4><p><code>slice</code> return a shallow copy of a portion of an array into a new array object selected from <code>begin</code> to <code>end</code> (<code>end</code> not included). The original array will not be modified.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure>

<h2 id="合并两个数组"><a href="#合并两个数组" class="headerlink" title="合并两个数组"></a>合并两个数组</h2><h3 id="使用concat方法"><a href="#使用concat方法" class="headerlink" title="使用concat方法"></a>使用<code>concat</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers1.<span class="title function_">concat</span>(numbers2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure>
<h3 id="使用扩展运算符"><a href="#使用扩展运算符" class="headerlink" title="使用扩展运算符"></a>使用扩展运算符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">const</span> result = [...numbers1, ...numbers2];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure>
<h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><h3 id="使用Set对象"><a href="#使用Set对象" class="headerlink" title="使用Set对象"></a>使用<code>Set</code>对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(numbers)];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<h3 id="使用filter方法"><a href="#使用filter方法" class="headerlink" title="使用filter方法"></a>使用<code>filter</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> numbers.<span class="title function_">indexOf</span>(item) === index);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<h3 id="使用reduce方法"><a href="#使用reduce方法" class="headerlink" title="使用reduce方法"></a>使用<code>reduce</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc.<span class="title function_">includes</span>(cur) ? acc : [...acc, cur], []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<h2 id="数组diff"><a href="#数组diff" class="headerlink" title="数组diff"></a>数组diff</h2><h3 id="使用filter方法-1"><a href="#使用filter方法-1" class="headerlink" title="使用filter方法"></a>使用<code>filter</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers1.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !numbers2.<span class="title function_">includes</span>(item));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure>
<h3 id="使用reduce方法-1"><a href="#使用reduce方法-1" class="headerlink" title="使用reduce方法"></a>使用<code>reduce</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers1.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> numbers2.<span class="title function_">includes</span>(cur) ? acc : [...acc, cur], []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure>
<h2 id="数组交集"><a href="#数组交集" class="headerlink" title="数组交集"></a>数组交集</h2><h3 id="使用filter方法-2"><a href="#使用filter方法-2" class="headerlink" title="使用filter方法"></a>使用<code>filter</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers1.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> numbers2.<span class="title function_">includes</span>(item));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<h3 id="使用reduce方法-2"><a href="#使用reduce方法-2" class="headerlink" title="使用reduce方法"></a>使用<code>reduce</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers1.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> numbers2.<span class="title function_">includes</span>(cur) ? [...acc, cur] : acc, []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<h2 id="数组并集"><a href="#数组并集" class="headerlink" title="数组并集"></a>数组并集</h2><h3 id="使用Set对象-1"><a href="#使用Set对象-1" class="headerlink" title="使用Set对象"></a>使用<code>Set</code>对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>([...numbers1, ...numbers2])];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>
<h3 id="使用filter方法-3"><a href="#使用filter方法-3" class="headerlink" title="使用filter方法"></a>使用<code>filter</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> result = [...numbers1, ...numbers2].<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> arr.<span class="title function_">indexOf</span>(item) === index);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>
<h3 id="使用reduce方法-3"><a href="#使用reduce方法-3" class="headerlink" title="使用reduce方法"></a>使用<code>reduce</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> result = [...numbers1, ...numbers2].<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc.<span class="title function_">includes</span>(cur) ? acc : [...acc, cur], []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>
<h2 id="数组差集"><a href="#数组差集" class="headerlink" title="数组差集"></a>数组差集</h2><h3 id="使用filter方法-4"><a href="#使用filter方法-4" class="headerlink" title="使用filter方法"></a>使用<code>filter</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> result = [...numbers1, ...numbers2].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !numbers1.<span class="title function_">includes</span>(item) || !numbers2.<span class="title function_">includes</span>(item));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 6, 7]</span></span><br></pre></td></tr></table></figure>
<h3 id="使用reduce方法-4"><a href="#使用reduce方法-4" class="headerlink" title="使用reduce方法"></a>使用<code>reduce</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> result = [...numbers1, ...numbers2].<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> numbers1.<span class="title function_">includes</span>(cur) &amp;&amp; numbers2.<span class="title function_">includes</span>(cur) ? acc : [...acc, cur], []); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 6, 7]</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title>How node.js handle environment variables</title>
    <url>/2023/11/14/How-node-js-handle-environment-variables/</url>
    <content><![CDATA[<h1 id="How-node-js-handle-environment-variables"><a href="#How-node-js-handle-environment-variables" class="headerlink" title="How node.js handle environment variables"></a>How node.js handle environment variables</h1><p>The following content was generated by “文心一言”, Have fun!</p>
<p>在 Node.js 中处理环境变量通常使用 process.env 对象。当你想要从不同的配置文件中加载环境变量时，需要一些额外的步骤。通常，我们不直接通过 Node.js 加载 .local.env或其他配置文件，而是通过一些库（如 dotenv）来完成这个任务。</p>
<h2 id="使用-dotenv-处理环境变量"><a href="#使用-dotenv-处理环境变量" class="headerlink" title="使用 dotenv 处理环境变量"></a>使用 dotenv 处理环境变量</h2><p>安装 dotenv:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install dotenv</span><br></pre></td></tr></table></figure>

<p>在代码中使用 dotenv:<br>你可以在代码的顶部要求 dotenv，并使用它加载环境变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).<span class="title function_">config</span>();</span><br></pre></td></tr></table></figure>

<p>创建配置文件:<br>通常，你可以创建一个 .env 文件在你的项目的根目录。这个文件可以包含环境变量，如：</p>
<p>.env 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">```bash</span><br><span class="line">PORT=3000  </span><br><span class="line">DATABASE_URL=mysql://user:password@localhost/dbname</span><br></pre></td></tr></table></figure>

<p><code>.local.env文件通常是用于本地开发的环境变量，这些变量不应该被提交到版本控制系统中（如 git）。你可以在你的.gitignore文件中添加.local.env 来确保它不会被提交。</code></p>
<p>访问环境变量:<br>你可以使用 process.env 对象来访问你加载的环境变量。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span>;  </span><br><span class="line"><span class="keyword">const</span> databaseUrl = process.<span class="property">env</span>.<span class="property">DATABASE_URL</span>;</span><br></pre></td></tr></table></figure>

<h2 id="配置文件的优先级"><a href="#配置文件的优先级" class="headerlink" title="配置文件的优先级"></a>配置文件的优先级</h2><p>当你有多个配置文件时，你需要确定哪个文件的优先级更高。例如，你可能有一个通用的 .env 文件，还有一个针对本地开发的 .local.env 文件。</p>
<p>通常，你可以在加载配置文件时确定优先级。例如，你可以首先加载 .local.env，然后再加载 .env。这样，.local.env 中的设置将覆盖 .env 文件中的设置。使用 dotenv 时，你可以这样做：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).<span class="title function_">config</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;.local.env&#x27;</span> &#125;);  </span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).<span class="title function_">config</span>();</span><br></pre></td></tr></table></figure>

<h2 id="示例：处理端口环境变量"><a href="#示例：处理端口环境变量" class="headerlink" title="示例：处理端口环境变量"></a>示例：处理端口环境变量</h2><p>假设你在 .env 文件中有以下设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PORT=3000</span><br></pre></td></tr></table></figure>

<p>在 .local.env 文件中有以下设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PORT=8080</span><br></pre></td></tr></table></figure>

<p>你可以这样加载和使用它们：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).<span class="title function_">config</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;.local.env&#x27;</span> &#125;); <span class="comment">// 加载 .local.env  </span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).<span class="title function_">config</span>(); <span class="comment">// 加载 .env  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);  </span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();  </span><br><span class="line"><span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span>; <span class="comment">// port = 8080，因为 .local.env 中的设置将覆盖 .env 中的设置。  </span></span><br><span class="line">  </span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on port <span class="subst">$&#123;port&#125;</span>`</span>);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在这个例子中，服务器将运行在 8080 端口上，因为 .local.env 中的 PORT 设置覆盖了 .env 文件中的设置。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>node</tag>
        <tag>environment variables</tag>
        <tag>dotenv</tag>
        <tag>env</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript for ... of</title>
    <url>/2023/05/14/Javascript%E4%B8%AD%E7%9A%84for-of%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h1 id="for-…-of"><a href="#for-…-of" class="headerlink" title="for … of"></a>for … of</h1><h2 id="for-…-of-功能"><a href="#for-…-of-功能" class="headerlink" title="for … of 功能"></a>for … of 功能</h2><p>javascript中的<code>for ... of</code>语句用来遍历可迭代对象，比如遍历数组可以使用如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可迭代对象有很多，包括以下这些：</p>
<ol>
<li>Array</li>
<li>String</li>
<li>TypeArray</li>
<li>Map</li>
<li>Set</li>
<li>NodeList(and other DOM collections)</li>
<li>Array like objects(<code>arguments</code>)</li>
<li>generators produced by generator functions</li>
<li>User-defined iterables.</li>
</ol>
<h2 id="for-…-of-执行原理"><a href="#for-…-of-执行原理" class="headerlink" title="for … of 执行原理"></a>for … of 执行原理</h2><p><code>for ... of</code>首先会调用可迭代对象的<code>@@iterator()</code>方法获取一个<code>iterator</code>,然后反复调用这个<code>iterator</code>的<code>next</code>方法来获取对应的值。</p>
<h2 id="for-…-of-何时结束迭代？"><a href="#for-…-of-何时结束迭代？" class="headerlink" title="for … of 何时结束迭代？"></a>for … of 何时结束迭代？</h2><p>以下三种情况都会导致for … of结束迭代。</p>
<ol>
<li>遇到<code>break</code>语句</li>
<li>遇到<code>continue</code>语句</li>
<li><code>iterator</code>的<code>next</code>方法返回 <code>done: true</code>时（也就是正常遍历结束）</li>
</ol>
<h2 id="for-…-of-不会修改被迭代的对象"><a href="#for-…-of-不会修改被迭代的对象" class="headerlink" title="for … of 不会修改被迭代的对象"></a>for … of 不会修改被迭代的对象</h2><p>for … of底层使用generator实现，每次迭代都会生成一个新的变量，所以不会改变被迭代的对象。下面的代码将数组中每个值加1，并不会改变原来的数组，因为变量<code>num</code>时迭代时生成的，而且每次迭代就重新生成一个。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">  num += <span class="number">1</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 2, 3, 4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums); <span class="comment">// still [1, 2, 3]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="for-…-of-中可以使用destruction"><a href="#for-…-of-中可以使用destruction" class="headerlink" title="for … of 中可以使用destruction"></a>for … of 中可以使用destruction</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> students = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Cindy&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> &#123; name, age &#125; <span class="keyword">of</span> students) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="何时使用经典的for循环？"><a href="#何时使用经典的for循环？" class="headerlink" title="何时使用经典的for循环？"></a>何时使用经典的for循环？</h2><p>所谓经典for循环就是类似C语言中的for循环。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>是否使用经典的for循环有一个简单的判断标准，在遍历的过程中是否要改变原数组，如果需要，就使用，否则就可以使用其他循环代替，比如for … of, forEach, filter, map, reduce等。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>loop</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-is-pass-by-value</title>
    <url>/2023/10/27/JavaScript-is-pass-by-value/</url>
    <content><![CDATA[<p>#References:</p>
<ol>
<li><a href="https://www.javadude.com/articles/passbyvalue.htm">https://www.javadude.com/articles/passbyvalue.htm</a></li>
<li><a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_value">https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_value</a></li>
</ol>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>pass by value</tag>
        <tag>parameter</tag>
      </tags>
  </entry>
  <entry>
    <title>daily_national_day</title>
    <url>/2023/10/07/daily-national-day/</url>
    <content><![CDATA[<h1 id="2023年中秋节，国庆节"><a href="#2023年中秋节，国庆节" class="headerlink" title="2023年中秋节，国庆节"></a>2023年中秋节，国庆节</h1><p>短暂的假期结束了，今天是大多数人上班的日子，而我还在休息，因为在外企工作，所以不会串休，我请了十月五号，六号两天的假期，所以一共能休息九天（含两个周末）。</p>
<p>有人在朋友圈戏称，“八天假期很短吧？马上你就知道七天上班有多长了！”</p>
<p>今年的假期安排是回媳妇的老家—山西运城，前三天在家扒苞米，10月四日去了趟壶口瀑布，然后就是一直在家待着看抖音直播，我戏称，这回真是实现了看直播自由。</p>
<p>运城雨水丰沛，十一期间几乎每天下雨，不过都是小雨，不像大连这边的雨，下起来很大，而且一阵就结束了。</p>
<p>扒苞米这活讲真，我真的是十多年没有干了，小时候在家每年都干这活。一家人围在玉米堆旁边，一边扒，一边聊天，其乐融融。</p>
<p>壶口瀑布非常壮观，这是我第一次看见黄河，有趣的是，壶口瀑布位于山西和陕西两省的交界处，为两省共有，我们在河这边看，陕西的游客在河对面看，不过山西这边的视角更好些。（听网友说的）</p>
<p>本来想去李家大院的，无奈去壶口瀑布开车太累了，最后七公里的路程，堵了两个小时，所以就放弃了。</p>
<p>十月五号返回大连，勇男老弟开车来接，又去他家小坐，拿了很多好吃的，回到旅顺已经快十二点了。</p>
]]></content>
      <tags>
        <tag>daily</tag>
        <tag>national day</tag>
        <tag>mid-autumn festival</tag>
      </tags>
  </entry>
  <entry>
    <title>async vs defer</title>
    <url>/2024/01/09/async-vs-defer/</url>
    <content><![CDATA[<h1 id="async-amp-defer-what’s-the-differences"><a href="#async-amp-defer-what’s-the-differences" class="headerlink" title="async &amp; defer, what’s the differences?"></a>async &amp; defer, what’s the differences?</h1><h3 id="Html引入外部脚本"><a href="#Html引入外部脚本" class="headerlink" title="Html引入外部脚本"></a>Html引入外部脚本</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;./my_script1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;./my_script2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>在Html引入外部脚本时，可以使用<code>async</code>或者<code>defer</code>，那么两者有和区别呢？我们通过一个表格来分析一下：</p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>下载时机</th>
<th>执行时机</th>
<th>是否阻断Dom解析</th>
<th>多个脚本的执行顺序</th>
</tr>
</thead>
<tbody><tr>
<td>无</td>
<td>遇到对应的<code>&lt;script&gt;</code>标签，立即下载</td>
<td>下载后立即执行</td>
<td>是，下载阶段和执行阶段都阻断DOM解析。</td>
<td>按顺序执行</td>
</tr>
<tr>
<td>async</td>
<td>遇到对应的<code>&lt;script&gt;</code>标签，立即下载</td>
<td>下载后立即执行，只能保证在window.load事件之前执行，但是可能在window.DomContentLoade之前或之后。</td>
<td>否</td>
<td>没有固定顺序，取决于哪个脚本先下载完成。</td>
</tr>
<tr>
<td>defer</td>
<td>遇到对应的<code>&lt;script&gt;</code>标签，立即下载</td>
<td>在页面解析完之后，且在DomContentLoaded事件触发之前执行。</td>
<td>否</td>
<td>按<code>&lt;script&gt;</code>标签出现的顺序执行</td>
</tr>
</tbody></table>
<p>注意事项：</p>
<ol>
<li><p>async脚本的执行无固定顺序，谁先下载完，谁先执行。</p>
</li>
<li><p>defer脚本按出现的先后顺序执行，看一个例子。</p>
<p>我们使用defer加载两个脚本，short.js非常小，很快就下载完了，但是它不能执行，必须等待long.js下载并执行完毕，short.js才能执行。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script defer src=<span class="string">&#x27;https://xxx/yyy/long.js&#x27;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&#x27;https://xxx/yyy/short.js&#x27;</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>用一张图来总结一下：绿色线条表示dom解析，蓝色线条表示脚本的下载，红色线条表示脚本的执行。script分为普通脚本和模块化脚本。</p>
<p><img src="https://html.spec.whatwg.org/images/asyncdefer.svg" alt="https://html.spec.whatwg.org/images/asyncdefer.svg"></p>
<p>解释一下上面这张图：</p>
<ol>
<li>第一行，普通脚本，没有指定async或者defer，下载和执行阶段会阻断dom解析。</li>
<li>第二行，普通脚本，有defer关键字，下载和执行阶段都不阻断dom解析。(下载和dom解析并行进行，执行在dom解析完成后开始）</li>
<li>第三行，普通脚本，有async关键字，下载阶段不阻断dom解析，但执行阶段有可能阻断dom解析（如果脚本已经下载完毕，但是dom解析尚未完成的情况下）</li>
<li>第四行，模块化脚本，默认包含defer属性，该脚本及其依赖的其他脚本的下载与dom解析平行进行，待dom解析完毕开始执行脚本。</li>
<li>第五行，模块化脚本，有async关键字，该脚本及其依赖的其他脚本的下载与dom解析平行进行，下载完毕后立即执行脚本。</li>
</ol>
<h3 id="async-amp-defer"><a href="#async-amp-defer" class="headerlink" title="async &amp; defer"></a>async &amp; defer</h3><ul>
<li>标记为async或defer的script，下载阶段都不会阻断Dom的解析，但是async是下载后立即执行，而defer是下载后且等待dom解析完毕才执行，所以两者唯一的区别就是：async脚本执行阶段可能会阻断dom解析（前提是脚本已经下载完毕，但dom解析尚未完成）。</li>
<li>module script默认包含defer属性</li>
<li>多个标记为async的脚本，无法保证执行顺序。</li>
<li>多个defer脚本按照script标签出现的顺序执行。</li>
<li>没有标记async或defer的脚本会阻断Dom的解析。</li>
</ul>
<h3 id="window-load和window-DomContentLoaded"><a href="#window-load和window-DomContentLoaded" class="headerlink" title="window.load和window.DomContentLoaded"></a>window.load和window.DomContentLoaded</h3><p>这是两个重要的事件，与async及defer的执行时机息息相关。</p>
<ul>
<li><code>window.load</code> - 标志整个页面全部加载完成，包括images，styles和JavaScript等所有外部资源。</li>
<li><code>window.DomContentLoaded</code> - Html文件解析和加载完成(parsed and loaded)，且所有标记为defer的js脚本全部下载并执行完成后触发，注意，该事件不会等待其他资源，比如images，subframes，或者标记为async的script下载完成。另外，该事件不会等待stylesheet完成，但是：因为defer脚本会等待stylesheet加载完才执行，而该事件又在defer脚本执行完才触发，所以如果有defer脚本存在的话，那么该事件一定会等待stylesheet加载完才触发。</li>
</ul>
<h3 id="问题来了"><a href="#问题来了" class="headerlink" title="问题来了"></a>问题来了</h3><p>看起来async和defer没有太大的区别，那么两者分别在什么场合使用呢？</p>
<ul>
<li>async一般用在与当前页面无关联的外部脚本，比如Google统计，计数脚本等。</li>
<li>defer一般用于需要操作当前页面的脚本，所以它需要等Dom解析完之后才执行。</li>
</ul>
<h3 id="一道小题"><a href="#一道小题" class="headerlink" title="一道小题"></a>一道小题</h3><p>下面代码的输出结果是什么？</p>
<p>index.html</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;DOMContentLoaded event triggered&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;load event triggered&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;./async_script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;./defer_script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>async_script.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async script loaded&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>defer_script.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;defer script loaded&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> script loaded</span><br><span class="line">defer script loaded</span><br><span class="line"><span class="title class_">DOMContentLoaded</span> event triggered</span><br><span class="line">load event triggered</span><br></pre></td></tr></table></figure>

<p>多执行几次，你会发现，有时候输出还会是下面这样的。这充分印证了上面的结论，defer script一定在DOMContentLoaded之前执行，但是async script可能在DOMContentLoaded之前，也可能在其之后。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">defer script loaded</span><br><span class="line"><span class="title class_">DOMContentLoaded</span> event triggered</span><br><span class="line"><span class="keyword">async</span> script loaded</span><br><span class="line">load event triggered</span><br></pre></td></tr></table></figure>

<h3 id="References："><a href="#References：" class="headerlink" title="References："></a>References：</h3><p><a href="https://javascript.info/script-async-defer">https://javascript.info/script-async-defer</a></p>
<p><a href="https://html.spec.whatwg.org/multipage/scripting.html#attr-script-defer">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-defer</a> V8引擎</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script">https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event">https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event">https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event</a></p>
<p><a href="https://javascript.info/onload-ondomcontentloaded">https://javascript.info/onload-ondomcontentloaded</a></p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>script</tag>
        <tag>async</tag>
        <tag>defer</tag>
      </tags>
  </entry>
  <entry>
    <title>event.target-vs-event.currentTarget</title>
    <url>/2023/08/02/event-target-vs-event-currentTarget/</url>
    <content><![CDATA[<h1 id="Event-target-vs-Event-currentTarget"><a href="#Event-target-vs-Event-currentTarget" class="headerlink" title="Event.target vs Event.currentTarget"></a>Event.target vs Event.currentTarget</h1><h1 id="什么是Event-target和Event-currentTarget"><a href="#什么是Event-target和Event-currentTarget" class="headerlink" title="什么是Event.target和Event.currentTarget"></a>什么是Event.target和Event.currentTarget</h1><p>这个两个target在JavaScript事件处理中十分重要，来看一下他们之间的区别。</p>
<ul>
<li><code>event.target</code>：触发事件的元素</li>
<li><code>event.currentTarget</code>：绑定事件的元素</li>
</ul>
<p>二者之间的区别只有在元素嵌套的时候，才会有所体现。比如下面的代码：<br>外层div1绑定了click事件，内层div2没有绑定任何事件。当我们点击div2的时候，会输出什么呢？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div 1</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">div1.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">currentTarget</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="/../images/target-vs-currentTarget_1.jpg" alt="event-target-vs-event-currentTarget"></p>
<ul>
<li>当我们点击<code>div2</code>的时候，<code>event.target</code>是<code>div2</code>，<code>event.currentTarget</code>是<code>div1</code>。</li>
<li>当我们点击<code>div1</code>的时候，<code>event.target</code>是<code>div1</code>，<code>event.currentTarget</code>也是<code>div1</code>。</li>
</ul>
<p>由此可见，<code>event.target</code>永远是触发事件的元素，而<code>event.currentTarget</code>永远是绑定事件的元素。 </p>
<h1 id="如何禁止子元素触发事件"><a href="#如何禁止子元素触发事件" class="headerlink" title="如何禁止子元素触发事件"></a>如何禁止子元素触发事件</h1><p>那么问题来了，有些时候我们不像让内部元素（子元素）触发事件，而是想让外部元素（父元素）触发事件，这个时候我们应该怎么做呢？考虑如下场景，假设现在我们要实现一个Card，这个Card内部有很多子元素，现在用户有一个需求，让Card实现拖拽功能，那么我们需要监听Card的<code>dragenter</code>事件，但是我们不想让Card内部的子元素触发<code>dragenter</code>事件，这个时候我们应该怎么做呢？我们可以通过判断<code>event.currentTarget</code>来实现这个功能，因为<code>event.currentTarget</code>会指向card本身，而不是其内部的子元素。</p>
<p>其实还有一个更加彻底的办法就是使用CSS的<code>pointer-events</code>属性，这个属性可以控制元素是否可以触发鼠标事件，比如上面的例子，我们可以这样禁止div2触发click事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div 1</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;pointer-events: none;&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这下我们再次点击div2时，输出就变成了下面这样：可见div2没有触发click事件，而是由它的父元素div1触发了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target: div 1</span><br><span class="line">currentTarget: div 1</span><br></pre></td></tr></table></figure>

<p>需要注意：pointer-events属性是CSS3中的属性，IE11及以下版本不支持。并且它具有传递性，比如我们在div2上设置了<code>pointer-events: none;</code>，那么div2及其子元素都不会触发鼠标事件。</p>
<h1 id="Event-relatedTarget"><a href="#Event-relatedTarget" class="headerlink" title="Event.relatedTarget"></a>Event.relatedTarget</h1><p>Event中除了这两个target之外，其实还有一个<code>relatedTarget</code>属性，这个属性在不同的事件中有不同的含义，比如在<code>mouseover</code>事件中，<code>relatedTarget</code>表示鼠标移入的元素，而在<code>mouseout</code>事件中，<code>relatedTarget</code>表示鼠标移出的元素。两外html5中的drag and drop api也会用到这个属性，比如在<code>dragenter</code>事件中，<code>relatedTarget</code>表示拖拽元素进入的元素，而在<code>dragleave</code>事件中，<code>relatedTarget</code>表示拖拽元素离开的元素。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://stackoverflow.com/questions/10086427/what-is-the-exact-difference-between-currenttarget-property-and-target-property">Event.target vs Event.currentTarget</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/target">Event.target</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget">Event.currentTarget</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/relatedTarget">Event.relatedTarget</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events">Pointer Events</a></li>
</ul>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>event</tag>
        <tag>target</tag>
        <tag>currenttarget</tag>
      </tags>
  </entry>
  <entry>
    <title>famous npm packages</title>
    <url>/2024/01/07/famous-npm-packages/</url>
    <content><![CDATA[<h1 id="Famous-NPM-Packages"><a href="#Famous-NPM-Packages" class="headerlink" title="Famous NPM Packages"></a>Famous NPM Packages</h1><h2 id="cross-env"><a href="#cross-env" class="headerlink" title="cross-env"></a>cross-env</h2><p><a href="https://www.npmjs.com/package/cross-env">cross-env</a> is a cross platform solution to setting and using environment variables. It’s available as a command line utility as well as a Node.js module.</p>
<p>cross-env 是一个用于处理跨平台环境变量的 Node.js 包。在 Node.js 应用程序中，设置环境变量通常使用 process.env。然而，不同的操作系统（如 Windows、macOS 和 Linux）有不同的方式来设置和获取环境变量。cross-env 的目标是提供一种简单的方法来在跨平台上设置和获取环境变量。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>npm</tag>
        <tag>package</tag>
      </tags>
  </entry>
  <entry>
    <title>element.style vs window.getComputedStyle</title>
    <url>/2023/07/22/element-style-vs-window-getComputedStyle/</url>
    <content><![CDATA[<h1 id="element-style-vs-window-getComputedStyle"><a href="#element-style-vs-window-getComputedStyle" class="headerlink" title="element.style vs window.getComputedStyle"></a>element.style vs window.getComputedStyle</h1><p>这两种方式都可以获取元素的样式，但是它们之间有什么区别呢？首先让我们看看在前端开发中，有哪几种方式可以设置样式。</p>
<h2 id="inline-style-内联样式"><a href="#inline-style-内联样式" class="headerlink" title="inline style(内联样式)"></a>inline style(内联样式)</h2><p>内联样式是指直接在元素上设置样式，比如下面的代码中，<code>&lt;div&gt;</code>元素上设置了<code>style</code>属性，这就是内联样式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="inner-style-内部样式"><a href="#inner-style-内部样式" class="headerlink" title="inner style(内部样式)"></a>inner style(内部样式)</h2><p>内部样式是指在<code>&lt;head&gt;</code>标签中添加<code>&lt;style&gt;</code>标签，然后在<code>&lt;style&gt;</code>标签中添加样式，比如下面的代码中，<code>&lt;style&gt;</code>标签中添加了<code>div &#123;color: red;&#125;</code>这样的样式，这就是样式标签。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="external-stylesheet-外部样式表"><a href="#external-stylesheet-外部样式表" class="headerlink" title="external stylesheet(外部样式表)"></a>external stylesheet(外部样式表)</h2><p>外部样式表是指将样式单独放在一个文件中，然后在<code>&lt;head&gt;</code>标签中使用<code>&lt;link&gt;</code>标签引入，比如下面的代码中，<code>&lt;link&gt;</code>标签引入了<code>style.css</code>这个文件，这就是外部样式表。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="element-style-和-window-getComputedStyle的区别"><a href="#element-style-和-window-getComputedStyle的区别" class="headerlink" title="element.style 和 window.getComputedStyle的区别"></a>element.style 和 window.getComputedStyle的区别</h2><p>再来看<code>element.style</code>和<code>window.getComputedStyle</code>的区别：</p>
<ol>
<li><code>element.style</code>只能获取内联样式，</li>
<li><code>window.getComputedStyle</code>可以获取内联样式、内部样式和外部样式表。</li>
</ol>
<p>所以大多数情况下，我们都是使用<code>window.getComputedStyle</code>来获取元素的样式。</p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>下面的代码中，<code>style.css</code>文件中设置了外部样式表。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;my-div&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;my-div&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">style</span>.<span class="property">color</span>); <span class="comment">// &quot;&quot; - empty string. 因为div元素上没有设置内联样式。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(div).<span class="property">color</span>); <span class="comment">// rgb(0, 0, 255)</span></span><br></pre></td></tr></table></figure>
<p>可以看到，<code>element.style</code>只能获取内联样式，而<code>window.getComputedStyle</code>可以获取内联样式、内部样式和外部样式表。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style">MDN - HTMLElement.style</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle">MDN - window.getComputedStyle()</a></li>
</ul>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>css</tag>
        <tag>style</tag>
        <tag>getcomputedstyle</tag>
      </tags>
  </entry>
  <entry>
    <title>how-jest-works</title>
    <url>/2024/01/07/how-jest-works/</url>
    <content><![CDATA[<h1 id="How-Jest-Works-Jest是如何工作的"><a href="#How-Jest-Works-Jest是如何工作的" class="headerlink" title="How Jest Works(Jest是如何工作的)"></a>How Jest Works(Jest是如何工作的)</h1><h2 id="1-什么是Jest"><a href="#1-什么是Jest" class="headerlink" title="1. 什么是Jest"></a>1. 什么是Jest</h2><p>Jest是由Facebook(Meta)开发的一个Javascript测试框架。支持多种前端框架，比如Babel, TypeScript, Node, React, Angular, Vue等等。它的特点是快速，简单，可扩展。</p>
<h2 id="2-基于Nx框架的Jest配置"><a href="#2-基于Nx框架的Jest配置" class="headerlink" title="2. 基于Nx框架的Jest配置"></a>2. 基于Nx框架的Jest配置</h2><p>我们目前的项目基于Nx框架，其实Nx本身对于Jest已经支持的很好了，几乎不用做太多的配置，但是本文仍以Angular为例，看看如何配置Jest。</p>
<p>当我们使用Nx创建一个Angular项目时，会自动创建一个<code>jest.config.ts</code>文件，内容如下：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">displayName</span>: <span class="string">&#x27;todos&#x27;</span>,</span><br><span class="line">  <span class="attr">preset</span>: <span class="string">&#x27;../../jest.preset.js&#x27;</span>,</span><br><span class="line">  <span class="attr">setupFilesAfterEnv</span>: [<span class="string">&#x27;&lt;rootDir&gt;/src/test-setup.ts&#x27;</span>],</span><br><span class="line">  <span class="attr">globals</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;ts-jest&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">tsconfig</span>: <span class="string">&#x27;&lt;rootDir&gt;/tsconfig.spec.json&#x27;</span>,</span><br><span class="line">      <span class="attr">stringifyContentPathRegex</span>: <span class="string">&#x27;\\.(html|svg)$&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">coverageDirectory</span>: <span class="string">&#x27;../../coverage/apps/todos&#x27;</span>,</span><br><span class="line">  <span class="attr">transform</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;^.+\\.(ts|mjs|js|html)$&#x27;</span>: <span class="string">&#x27;jest-preset-angular&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">transformIgnorePatterns</span>: [<span class="string">&#x27;node_modules/(?!.*\\.mjs$)&#x27;</span>],</span><br><span class="line">  <span class="attr">snapshotSerializers</span>: [</span><br><span class="line">    <span class="string">&#x27;jest-preset-angular/build/serializers/no-ng-attributes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;jest-preset-angular/build/serializers/ng-snapshot&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;jest-preset-angular/build/serializers/html-comment&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在<code>transform</code>一节，我们看到了<code>jest-preset-angular</code>，这个是Angular官方提供的一个Jest预设，它会自动帮我们处理Angular的一些特殊文件，比如<code>.ts</code>, <code>.html</code>, <code>.svg</code>等等。如果我们不使用Angular，而是使用React，那么我们需要使用<code>jest-preset-react</code>，如果是Vue，那么我们需要使用<code>vue-jest</code>。如果我们使用的是Nx，那么我们可以使用<code>@nrwl/jest</code>，它会自动帮我们处理Nx的一些特殊文件，比如<code>.ts</code>, <code>.html</code>, <code>.svg</code>等等。</p>
<p>为什么需要<code>transform</code>呢？因为Jest只能处理JavaScript，对于TypeScript&#x2F;JSX等高级的文件格式，我们不许先将其转换为JavaScript，然后再交给Jest处理。</p>
<p>该<code>transform</code>块的含义是，对于所有以<code>.ts</code>, <code>.mjs</code>, <code>.js</code>, <code>.html</code>结尾的文件，都使用<code>jest-preset-angular</code>来处理。</p>
<p>如果<code>transform</code>配置不正确，就会出现如下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Jest encountered an unexpected token</span><br><span class="line">Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.</span><br><span class="line"></span><br><span class="line">Out of the box Jest supports Babel, <span class="built_in">which</span> will be used to transform your files into valid JS based on your Babel configuration.</span><br><span class="line">By default <span class="string">&quot;node_modules&quot;</span> folder is ignored by transformers.</span><br></pre></td></tr></table></figure>

<h2 id="How-jest-parse-config-and-execute-tests"><a href="#How-jest-parse-config-and-execute-tests" class="headerlink" title="How jest parse config and execute tests?"></a>How jest parse config and execute tests?</h2><p>Jest是如何解析配置文件，并执行测试的呢？我们可以通过<code>--debug</code>参数来查看Jest的执行过程。</p>
<p><strong>To be continue…</strong></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://jestjs.io/">Jest官网</a></li>
<li><a href="https://thymikee.github.io/jest-preset-angular/docs/">jest-preset-angular</a></li>
<li><a href="https://kulshekhar.github.io/ts-jest/docs/processing/">ts-jest</a></li>
</ul>
]]></content>
      <tags>
        <tag>jest</tag>
        <tag>javascript</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>groovy-json</title>
    <url>/2024/01/29/groovy-json/</url>
    <content><![CDATA[<h1 id="Groovy-JSON-operation"><a href="#Groovy-JSON-operation" class="headerlink" title="Groovy JSON operation"></a>Groovy JSON operation</h1><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> groovy.json.JsonOutput</span><br><span class="line"><span class="keyword">import</span> groovy.json.JsonSlurper</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert a groovy map to json object</span></span><br><span class="line">Map user = [<span class="attr">name:</span> <span class="string">&#x27;zdd&#x27;</span>, <span class="attr">age:</span> <span class="number">18</span>, <span class="attr">info:</span> [<span class="attr">address:</span> <span class="string">&#x27;beijing&#x27;</span>, <span class="attr">phone:</span> <span class="string">&#x27;123456789&#x27;</span>]];</span><br><span class="line">println JsonOutput.toJson(user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert a json object to groovy map</span></span><br><span class="line"><span class="keyword">def</span> jsonString = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30, &quot;city&quot;: &quot;New York&quot;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> jsonSlurper = <span class="keyword">new</span> JsonSlurper()</span><br><span class="line"><span class="keyword">def</span> jsonObject = jsonSlurper.parseText(JsonOutput.toJson(user))</span><br><span class="line">println jsonObject</span><br><span class="line"></span><br><span class="line"><span class="comment">// Given a string &quot;feat(configuration): id-xxxx add configuration for user page&quot;, please extract the jira id: id-xxx</span></span><br><span class="line"><span class="comment">// can you do it with regex? the target string start with &quot;: &quot; and end with &quot; &quot;, return null if not found</span></span><br><span class="line"><span class="keyword">def</span> str = <span class="string">&quot;feat(configuration): id-xxxx add configuration for user page&quot;</span></span><br><span class="line"><span class="keyword">def</span> jiraId2 = str =~ <span class="regexp">/: (.*?) /</span></span><br><span class="line">println jiraId2[<span class="number">0</span>][<span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>groovy</tag>
        <tag>jenkins</tag>
        <tag>pipeline</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>how-value-convert-to-string</title>
    <url>/2023/12/15/how-value-convert-to-string/</url>
    <content><![CDATA[<h1 id="How-many-ways-to-convert-a-value-to-string-in-JavaScript"><a href="#How-many-ways-to-convert-a-value-to-string-in-JavaScript" class="headerlink" title="How many ways to convert a value to string in JavaScript"></a>How many ways to convert a value to string in JavaScript</h1><h2 id="1-value-toString"><a href="#1-value-toString" class="headerlink" title="1. value.toString()"></a>1. value.toString()</h2><h2 id="2-String-value"><a href="#2-String-value" class="headerlink" title="2. String(value)"></a>2. String(value)</h2><h2 id="3-value-‘’"><a href="#3-value-‘’" class="headerlink" title="3. value + ‘’"></a>3. value + ‘’</h2><h2 id="4-value"><a href="#4-value" class="headerlink" title="4. ${value}"></a>4. <code>$&#123;value&#125;</code></h2><h2 id="5-JSON-stringify-value"><a href="#5-JSON-stringify-value" class="headerlink" title="5. JSON.stringify(value)"></a>5. JSON.stringify(value)</h2><h1 id="How-value-convert-to-string"><a href="#How-value-convert-to-string" class="headerlink" title="How value convert to string"></a>How value convert to string</h1>]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>html5 drag and drop events</title>
    <url>/2023/07/04/html5-drag-and-drop-events/</url>
    <content><![CDATA[<h1 id="html5-drag-and-drop-events"><a href="#html5-drag-and-drop-events" class="headerlink" title="html5 drag and drop events"></a>html5 drag and drop events</h1><p>html5中的拖放事件有以下几个：</p>
<ul>
<li>dragstart</li>
<li>drag</li>
<li>dragleave</li>
<li>dragenter</li>
<li>dragover</li>
<li>drop</li>
<li>dragend</li>
</ul>
<p>我们将从以下几个方面依次讲解这些事件，包括事件的触发条件，事件的触发源头，事件的触发频率等</p>
<h2 id="dragstart"><a href="#dragstart" class="headerlink" title="dragstart"></a>dragstart</h2><p>触发条件：当用户开始拖动一个元素时，会触发<code>dragstart</code>事件。<br>触发源头：被拖动的元素。<br>触发频率：一次。</p>
<h2 id="drag"><a href="#drag" class="headerlink" title="drag"></a>drag</h2><p>触发条件：当用户拖动一个元素时，会触发<code>drag</code>事件。<br>触发源头：被拖动的元素。<br>触发频率：多次。  </p>
<h2 id="dragleave"><a href="#dragleave" class="headerlink" title="dragleave"></a>dragleave</h2><p>触发条件：当用户拖动一个元素，离开了一个可放置的目标元素时，会触发<code>dragleave</code>事件。<br>触发源头：目标区域（松开鼠标后，元素放置的区域）。<br>触发频率：一次。  </p>
<h2 id="dragenter"><a href="#dragenter" class="headerlink" title="dragenter"></a>dragenter</h2><p>触发条件：当用户拖动一个元素，进入了一个可放置的目标元素时，会触发<code>dragenter</code>事件。<br>触发源头：目标区域（松开鼠标后，元素放置的区域）。<br>触发频率：一次。  </p>
<h2 id="dragover"><a href="#dragover" class="headerlink" title="dragover"></a>dragover</h2><p>触发条件：当用户拖动一个元素，悬停在一个可放置的目标元素上时，会触发<code>dragover</code>事件。<br>触发源头：目标区域（松开鼠标后，元素放置的区域）。<br>触发频率：多次。  </p>
<h2 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h2><p>触发条件：当用户拖动一个元素，释放鼠标按钮时，会触发<code>drop</code>事件。<br>触发源头：目标区域（松开鼠标后，元素放置的区域）。<br>触发频率：一次。  </p>
<h2 id="dragend"><a href="#dragend" class="headerlink" title="dragend"></a>dragend</h2><p>触发条件：当用户拖动一个元素，释放鼠标按钮时，会触发<code>dragend</code>事件。<br>触发源头：被拖动的元素。<br>触发频率：一次。  </p>
<h2 id="实例讲解"><a href="#实例讲解" class="headerlink" title="实例讲解"></a>实例讲解</h2><p>下面以一个实际例子来讲解事件发生的顺序，如下图，页面上有两个容器，Container A和Container B，container A中有一个元素Child，container B中没有元素。我们将container A中的Child元素拖动到container B中，观察事件的触发顺序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+-------------------+</span><br><span class="line">|     Container A   |</span><br><span class="line">|                   |</span><br><span class="line">|                   |</span><br><span class="line">|      Child        |</span><br><span class="line">|        |          |</span><br><span class="line">|        |          |</span><br><span class="line">|        |          |</span><br><span class="line">+--------|----------+</span><br><span class="line">         |</span><br><span class="line">        \/</span><br><span class="line"></span><br><span class="line">+-------------------+</span><br><span class="line">|    Container B    |</span><br><span class="line">|                   |</span><br><span class="line">|                   |</span><br><span class="line">|                   |</span><br><span class="line">|                   |</span><br><span class="line">|                   |</span><br><span class="line">|                   |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure>

<ol>
<li>首先触发的事件是 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event">dragstart</a>，触发源头是被拖动的元素，触发频率是一次。我们可以通过打印<code>event.target</code>来验证这一点。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dragStart</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">stopPropagation</span>(); <span class="comment">// 阻止事件冒泡，也就是阻止事件向父元素传递。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;drag start...&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  e.<span class="property">dataTransfer</span>.<span class="title function_">setData</span>(<span class="string">&quot;text&quot;</span>, e.<span class="property">target</span>.<span class="property">id</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
事件处理函数中的<code>e.target</code>是指触发该事件的元素，比如当用户点击某一个按钮时会触发<code>click</code>事件，那么按钮就是click事件的e.target。而<code>this</code>是指注册事件处理函数的元素，大部分情况下这二者是相同的，但是也有例外，详情请看这里。</li>
</ol>
<p><code>dragstart</code>不同于其他拖拽处理函数的地方是，它是唯一可以设置transfer data的地方。我们可以通过<code>e.dataTransfer.setData</code>方法来设置transfer data，该方法接受两个参数，第一个参数是transfer data的类型，第二个参数是transfer data的值。这里我们设置transfer data的类型为<code>text</code>，值为被拖动元素的id。</p>
<ol start="2">
<li><p>然后触发的事件是<code>drag</code>，触发源头是被拖动的元素，该事件会在拖动过程中一直触发。在实际应用中，一般不监听这个事件，因为它没啥用，而且触发太频繁。</p>
</li>
<li><p>接下来触发的事件是<code>dragenter</code>，当用户拖动一个元素到一个可放置的目标时，会触发该事件，只会触发一次。由于Container A也是一个可放置的区域，而刚开始拖动时Child就已经位于Container A中，所以会触发<code>dragenter</code>事件。</p>
</li>
<li><p>然后触发的事件是<code>dragover</code>，当用户拖动一个元素，悬停在一个可放置的目标元素上时，会触发该事件，会在拖动过程中一直触发。与其他事件处理函数不同，该函数有如下两个特点。</p>
<ol>
<li>该事件在放置目标区域上触发，而不是被拖拽的元素上触发。</li>
<li>这个事件是需要阻止默认行为的，否则会导致<code>drop</code>事件无法触发。我们可以通过<code>e.preventDefault()</code>来阻止默认行为。</li>
</ol>
</li>
<li><p>接下来，如果用户在目标区域释放了鼠标，那么会触发<code>drop</code>事件，该事件会在放置目标区域上触发，只会触发一次。我们可以通过<code>e.dataTransfer.getData</code>来获取transfer data，该方法接受一个参数，表示要获取的transfer data的类型，这里我们传入<code>text</code>，表示获取类型为<code>text</code>的transfer data。如果我们在<code>dragstart</code>事件处理函数中设置了transfer data，那么在<code>drop</code>事件处理函数中就可以获取到transfer data了。</p>
</li>
<li><p>如果用户在目标区没有释放鼠标，而是继续拖动，直到离开目标区域，那么会触发<code>dragleave</code>事件，该事件会在放置目标区域上触发，只会触发一次。反之，如果用户在目标区域释放了鼠标，那么该事件不会触发。也就是说，对于同一个目标区域而言，<code>dragleave</code>事件和<code>drop</code>事件是互斥的，只会触发其中一个。</p>
</li>
</ol>
<p>注意：<code>dragenter</code>, <code>dragleave</code>, <code>dragover</code> - 这里都是指鼠标的进入，离开，悬停，而不是指被拖动的元素的进入，离开，悬停。</p>
<h2 id="总结如下："><a href="#总结如下：" class="headerlink" title="总结如下："></a>总结如下：</h2><table>
<thead>
<tr>
<th>事件</th>
<th>触发条件</th>
<th>触发源头</th>
<th>触发频率</th>
</tr>
</thead>
<tbody><tr>
<td>dragstart</td>
<td>当用户开始拖动一个元素时</td>
<td>被拖动的元素</td>
<td>一次</td>
</tr>
<tr>
<td>drag</td>
<td>当用户拖动一个元素时</td>
<td>被拖动的元素</td>
<td>多次</td>
</tr>
<tr>
<td>dragleave</td>
<td>当用户拖动一个元素，离开了一个可放置的目标元素时</td>
<td>目标区域对应的元素</td>
<td>一次</td>
</tr>
<tr>
<td>dragenter</td>
<td>当用户拖动一个元素，进入了一个可放置的目标元素时</td>
<td>目标区域对应的元素</td>
<td>一次</td>
</tr>
<tr>
<td>dragover</td>
<td>当用户拖动一个元素，悬停在一个可放置的目标元素上时</td>
<td>目标区域对应的元素</td>
<td>多次</td>
</tr>
<tr>
<td>drop</td>
<td>当用户拖动一个元素，释放鼠标按钮时</td>
<td>目标区域对应的元素</td>
<td>一次</td>
</tr>
<tr>
<td>dragend</td>
<td>当用户拖动一个元素，释放鼠标按钮时</td>
<td>被拖动的元素</td>
<td>一次</td>
</tr>
</tbody></table>
<h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><ol>
<li><p><code>dragenter</code>, <code>dragleave</code>, <code>dragover</code> - 这里都是指鼠标的进入，离开，悬停，而不是指被拖动的元素的进入，离开，悬停。</p>
</li>
<li><p>在处理从一个区域拖拽到另一个区域的情况时比较简单，比如常见的左右两个列表，将一个元素从左侧列表拖拽到右侧列表。这时候被拖拽的元素和放置目标之间的界限比较明显，处理起来比较容易，也就是说被拖拽的元素相应以下事件即可：</p>
<ul>
<li>dragstart</li>
<li>drag</li>
<li>dragend</li>
</ul>
<p>而放置目标相应以下事件即可：</p>
<ul>
<li>dragenter</li>
<li>dragover</li>
<li>drop</li>
<li>dragleave</li>
</ul>
</li>
<li><p>但是如果处理一组元素之间的互相拖拽及排序，那就比较麻烦，比如一个相册列表，或者一个瀑布流布局，或者masonry布局，就是一个大容器，里面有如果子元素，我们可以拖拽任意一个元素到其他位置，在拖拽过程中要有placeholder，其他元素要给被拖拽的元素让路。这种情况下，每个元素都要相应所有事件，所以一个必要的操作就是判断被拖拽的元素和放置目标是否是同一个元素，如果是同一个元素，那么就不需要做任何处理，否则就需要做相应的处理。这里有一个技巧，可以使用<code>e.target</code>和<code>e.currentTarget</code>来判断被拖拽的元素和放置目标是否是同一个元素，常见的做法如下：</p>
</li>
</ol>
<ul>
<li>在<code>dragstart</code>函数中记录被拖拽的元素<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dragSrcEl = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleDragStart</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  dragSrcEl = <span class="variable language_">this</span>; <span class="comment">// record the dragged element</span></span><br><span class="line">  dragSrcEl.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;dragging&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在<code>dragenter</code>, <code>dragover</code>, <code>dragleave</code>, <code>drop</code>等方法中判断被拖拽元素是否等于this，如果是，那么说明是同一个元素，直接return，如果不是，再进行具体的处理工作。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleDragEnter</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// this event also triggered on the dragged item itself, we should ignore this case.</span></span><br><span class="line">  <span class="keyword">if</span> (dragSrcEl === <span class="variable language_">this</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="4">
<li><p>在<code>dragover</code>事件处理函数中，需要阻止默认行为，否则会导致<code>drop</code>事件无法触发。我们可以通过<code>e.preventDefault()</code>来阻止默认行为。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleDragOver</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>(); <span class="comment">// prevent default behavior</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>drop</code>事件处理函数中，需要阻止默认行为，否则会导致浏览器打开被拖拽的元素。我们可以通过<code>e.preventDefault()</code>来阻止默认行为。</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleDrop</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>(); <span class="comment">// prevent default behavior</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>html5</tag>
        <tag>drag and drop</tag>
        <tag>dnd</tag>
      </tags>
  </entry>
  <entry>
    <title>interact with jira/confluence rest api with python</title>
    <url>/2023/11/12/interact-with-jira-confluence-rest-api-with-python/</url>
    <content><![CDATA[<h1 id="How-to-interact-Jira-x2F-Confluence-REST-API-with-Python"><a href="#How-to-interact-Jira-x2F-Confluence-REST-API-with-Python" class="headerlink" title="How to interact Jira&#x2F;Confluence REST API with Python"></a>How to interact Jira&#x2F;Confluence REST API with Python</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># Jira API endpoint and authentication</span></span><br><span class="line">jira_url = <span class="string">&quot;https://your-jira-instance/rest/api/2/search&quot;</span></span><br><span class="line">jira_token = <span class="string">&quot;your-jira-personal-access-token&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Confluence API endpoint and authentication</span></span><br><span class="line">confluence_url = <span class="string">&quot;https://your-confluence-instance/rest/api/content&quot;</span></span><br><span class="line">confluence_token = <span class="string">&quot;your-confluence-personal-access-token&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 1: Get stories from Jira</span></span><br><span class="line">jira_headers = &#123;</span><br><span class="line">    <span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;Bearer <span class="subst">&#123;jira_token&#125;</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jira_params = &#123;</span><br><span class="line">    <span class="string">&quot;jql&quot;</span>: <span class="string">&quot;labels = release&quot;</span>,</span><br><span class="line">    <span class="string">&quot;maxResults&quot;</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(jira_url, headers=jira_headers, params=jira_params)</span><br><span class="line">jira_stories = response.json()[<span class="string">&quot;issues&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 2: Create a new Confluence page</span></span><br><span class="line">confluence_headers = &#123;</span><br><span class="line">    <span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;Bearer <span class="subst">&#123;confluence_token&#125;</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">confluence_payload = &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;page&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Release Stories&quot;</span>,</span><br><span class="line">    <span class="string">&quot;space&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;key&quot;</span>: <span class="string">&quot;your-space-key&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;storage&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;value&quot;</span>: <span class="string">&quot;&lt;h2&gt;Release Stories&lt;/h2&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;representation&quot;</span>: <span class="string">&quot;storage&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(confluence_url, headers=confluence_headers, json=confluence_payload)</span><br><span class="line">confluence_page_id = response.json()[<span class="string">&quot;id&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 3: Add the stories to the Confluence page</span></span><br><span class="line"><span class="keyword">for</span> story <span class="keyword">in</span> jira_stories:</span><br><span class="line">    story_title = story[<span class="string">&quot;fields&quot;</span>][<span class="string">&quot;summary&quot;</span>]</span><br><span class="line">    story_description = story[<span class="string">&quot;fields&quot;</span>][<span class="string">&quot;description&quot;</span>]</span><br><span class="line"></span><br><span class="line">    confluence_payload[<span class="string">&quot;body&quot;</span>][<span class="string">&quot;storage&quot;</span>][<span class="string">&quot;value&quot;</span>] += <span class="string">f&quot;&lt;h3&gt;<span class="subst">&#123;story_title&#125;</span>&lt;/h3&gt;&lt;p&gt;<span class="subst">&#123;story_description&#125;</span>&lt;/p&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">response = requests.put(<span class="string">f&quot;<span class="subst">&#123;confluence_url&#125;</span>/<span class="subst">&#123;confluence_page_id&#125;</span>&quot;</span>, headers=confluence_headers, json=confluence_payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 4: Verify the response</span></span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Page created successfully!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Failed to create the page.&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>Here is another example with Excel export support</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Color, PatternFill, Font</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line">start_date = <span class="string">&#x27;2021-05-29&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_issue_list</span>():</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Basic YOUR_TOKEN&#x27;</span>&#125;</span><br><span class="line">    project = <span class="string">&#x27;YOUR_PROJECT&#x27;</span></span><br><span class="line">    issue_type = <span class="string">&#x27;Story&#x27;</span></span><br><span class="line">    sprint = <span class="string">&#x27;YOUR_SPRINT_ID&#x27;</span></span><br><span class="line">    order_by = <span class="string">&#x27;key&#x27;</span></span><br><span class="line">    order_by_type = <span class="string">&#x27;ASC&#x27;</span></span><br><span class="line">    jql = <span class="string">f&#x27;project = <span class="subst">&#123;project&#125;</span> AND issuetype = <span class="subst">&#123;issue_type&#125;</span> AND Sprint = <span class="subst">&#123;sprint&#125;</span> AND created &gt;= <span class="subst">&#123;start_date&#125;</span> ORDER BY <span class="subst">&#123;order_by&#125;</span> <span class="subst">&#123;order_by_type&#125;</span>&#x27;</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;jql&#x27;</span>: jql,</span><br><span class="line">        <span class="string">&#x27;fields&#x27;</span>: [<span class="string">&#x27;summary&#x27;</span>, <span class="string">&#x27;created&#x27;</span>, <span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;priority&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">f&#x27;https://jira.xxx.com/rest/agile/1.0/sprint/<span class="subst">&#123;sprint&#125;</span>/issue&#x27;</span></span><br><span class="line">    r = requests.get(url, headers=headers, params=params)</span><br><span class="line">    <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_response</span>(<span class="params">response</span>):</span><br><span class="line">    issue_list = []</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> issue <span class="keyword">in</span> response[<span class="string">&#x27;issues&#x27;</span>]:</span><br><span class="line">        created = <span class="built_in">str</span>(issue[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;created&#x27;</span>]).split(<span class="string">&#x27;T&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        due_date = datetime.date.fromisoformat(created) + timedelta(<span class="number">2</span>)</span><br><span class="line">        issue_item = &#123;<span class="string">&#x27;id&#x27;</span>: i, <span class="string">&#x27;issue key&#x27;</span>: issue[<span class="string">&#x27;key&#x27;</span>],</span><br><span class="line">                      <span class="string">&#x27;summary&#x27;</span>: issue[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;summary&#x27;</span>],</span><br><span class="line">                      <span class="string">&#x27;status&#x27;</span>: issue[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;status&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">                      <span class="string">&#x27;priority&#x27;</span>: issue[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;priority&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">                      <span class="string">&#x27;created&#x27;</span>: created,</span><br><span class="line">                      <span class="string">&#x27;due date&#x27;</span>: due_date&#125;</span><br><span class="line">        issue_list.append(issue_item)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> issue_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">issue_mapping</span>(<span class="params">issue_list</span>):</span><br><span class="line">    new_issue_list = []</span><br><span class="line"></span><br><span class="line">    priority_mapping = &#123;</span><br><span class="line">        <span class="string">&#x27;Low&#x27;</span>: <span class="string">&#x27;Minor&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Medium&#x27;</span>: <span class="string">&#x27;Minor&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;High&#x27;</span>: <span class="string">&#x27;Major&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    status_mapping = &#123;</span><br><span class="line">        <span class="string">&#x27;To Do&#x27;</span>: <span class="string">&#x27;Open&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> issue <span class="keyword">in</span> issue_list:</span><br><span class="line">        <span class="keyword">if</span> issue[<span class="string">&#x27;priority&#x27;</span>] <span class="keyword">in</span> priority_mapping:</span><br><span class="line">            issue[<span class="string">&#x27;priority&#x27;</span>] = priority_mapping[issue[<span class="string">&#x27;priority&#x27;</span>]]</span><br><span class="line">        <span class="keyword">if</span> issue[<span class="string">&#x27;status&#x27;</span>] <span class="keyword">in</span> status_mapping:</span><br><span class="line">            issue[<span class="string">&#x27;status&#x27;</span>] = status_mapping[issue[<span class="string">&#x27;status&#x27;</span>]]</span><br><span class="line">        new_issue_list.append(issue)</span><br><span class="line">    <span class="keyword">return</span> new_issue_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_to_excel</span>(<span class="params">issue_list</span>):</span><br><span class="line">    issue_list = issue_mapping(issue_list)</span><br><span class="line">    workbook = Workbook()</span><br><span class="line">    sheet = workbook.active</span><br><span class="line">    sheet.title = <span class="string">&#x27;jira issue&#x27;</span></span><br><span class="line">    sheet.append([<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;issue key&#x27;</span>, <span class="string">&#x27;summary&#x27;</span>, <span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;priority&#x27;</span>, <span class="string">&#x27;created&#x27;</span>, <span class="string">&#x27;due date&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set color for header</span></span><br><span class="line">    <span class="keyword">for</span> rows <span class="keyword">in</span> sheet.iter_rows(min_row=<span class="number">1</span>, max_row=<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> cell <span class="keyword">in</span> rows:</span><br><span class="line">            cell.fill = PatternFill(fgColor=<span class="string">&quot;002060&quot;</span>, fill_type=<span class="string">&quot;solid&quot;</span>)</span><br><span class="line">            cell.font = Font(color=<span class="string">&quot;FFFFFF&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> issue <span class="keyword">in</span> issue_list:</span><br><span class="line">        sheet.append(<span class="built_in">list</span>(issue.values()))</span><br><span class="line">    <span class="comment"># fill in color</span></span><br><span class="line">    my_red = Color(rgb=<span class="string">&#x27;00B050&#x27;</span>)</span><br><span class="line">    my_fill = PatternFill(patternType=<span class="string">&#x27;solid&#x27;</span>, fgColor=my_red)</span><br><span class="line">    <span class="keyword">for</span> row_cells <span class="keyword">in</span> sheet.iter_rows(min_row=<span class="number">1</span>, max_row=sheet.max_row):</span><br><span class="line">        <span class="keyword">if</span> row_cells[<span class="number">3</span>].value == <span class="string">&#x27;Done&#x27;</span>:</span><br><span class="line">            row_cells[<span class="number">3</span>].fill = my_fill</span><br><span class="line"></span><br><span class="line">    file_name = <span class="string">&#x27;report_issue_list_&#x27;</span> + start_date + <span class="string">&#x27;.xlsx&#x27;</span></span><br><span class="line">    workbook.save(file_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = get_issue_list()</span><br><span class="line">issue_list = parse_response(response)</span><br><span class="line">write_to_excel(issue_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Done&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><p><a href="https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/">https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/</a></p>
<p><a href="https://developer.atlassian.com/cloud/jira/software/rest/api-group-sprint/">The Jira Software Cloud REST API</a></p>
<p><a href="https://docs.atlassian.com/software/jira/docs/api/REST/7.12.0/#api/2/search-searchUsingSearchRequest">JIRA 7.12.0</a></p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>jira</tag>
        <tag>confluence</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-observer-mode</title>
    <url>/2023/11/18/javascript-observer-mode/</url>
    <content><![CDATA[<h1 id="How-to-use-observer-mode-in-javascript"><a href="#How-to-use-observer-mode-in-javascript" class="headerlink" title="How to use observer mode in javascript"></a>How to use observer mode in javascript</h1><h2 id="Define-Observer"><a href="#Define-Observer" class="headerlink" title="Define Observer"></a>Define Observer</h2><p>Observer中文翻译为观察者，它是一个对象，拥有一个update方法，当Subject发生变化时，Observer的update方法会被调用，这样就能实现Subject和Observer的解耦。</p>
<p>下面的代码为每个观察者指定一个名字，当Subject发生变化时，<code>Observer</code>的<code>update</code>方法会被调用，打印出观察者的名字。<code>update</code>方法就是被观察者和观察者联系的纽带。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> updated`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Define-Subject"><a href="#Define-Subject" class="headerlink" title="Define Subject"></a>Define Subject</h2><p>Subject中文翻译为主题，它是一个对象，拥有注册观察者、删除观察者、通知观察者的方法。当某个特定事件发生时，Subject会通知所有观察者，让它们做出相应的反应。所以Subject实际上就是被观察者。</p>
<p>下面的代码为Subject添加了一个观察者数组，当Subject发生变化时，会遍历观察者数组，调用每个观察者的<code>update</code>方法。subscribe方法实际上就是addObserver方法，unsubscribe方法实际上就是removeObserver方法。这两个方法用来将观察者加入或者移除观察者数组。被移除数组的观察者无法再收到Subject的通知。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Observer</span> <span class="keyword">from</span> <span class="string">&#x27;./Observer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">observers</span>: <span class="title class_">Observer</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">subscribe</span>(<span class="params">observer: Observer</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">push</span>(observer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">unsubscribe</span>(<span class="params">observer: Observer</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span> = <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">o</span>) =&gt;</span> o !== observer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">o</span>) =&gt;</span> o.<span class="title function_">update</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Use-Observer"><a href="#Use-Observer" class="headerlink" title="Use Observer"></a>Use Observer</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Observer</span> <span class="keyword">from</span> <span class="string">&#x27;./Observer&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Subject</span> <span class="keyword">from</span> <span class="string">&#x27;./Subject&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"><span class="keyword">const</span> observer1 = <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="string">&#x27;Observer 1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> observer2 = <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="string">&#x27;Observer 2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> observer3 = <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="string">&#x27;Observer 3&#x27;</span>);</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">subscribe</span>(observer1);</span><br><span class="line">subject.<span class="title function_">subscribe</span>(observer2);</span><br><span class="line">subject.<span class="title function_">subscribe</span>(observer3);</span><br><span class="line">subject.<span class="title function_">notify</span>(); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">unsubscribe</span>(observer1);</span><br><span class="line">subject.<span class="title function_">notify</span>(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>在 &#x2F;&#x2F; 1 处，输入如下内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Observer 1 updated</span><br><span class="line">Observer 2 updated</span><br><span class="line">Observer 3 updated</span><br></pre></td></tr></table></figure>

<p>在 &#x2F;&#x2F; 2 处，输入如下内容，因为Observer 1被移除了，所以只有Observer 2和Observer 3收到了通知。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Observer 2 updated</span><br><span class="line">Observer 3 updated</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>design pattern</tag>
        <tag>observer</tag>
        <tag>subscribe</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript singleton mode</title>
    <url>/2023/11/18/javascript-singleton-mode/</url>
    <content><![CDATA[<h1 id="How-to-implement-singleton-mode-in-javascript"><a href="#How-to-implement-singleton-mode-in-javascript" class="headerlink" title="How to implement singleton mode in javascript"></a>How to implement singleton mode in javascript</h1><h1 id="A-simple-singleton-with-global-variable"><a href="#A-simple-singleton-with-global-variable" class="headerlink" title="A simple singleton with global variable"></a>A simple singleton with global variable</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Singleton</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Singleton</span>.<span class="property">getInstance</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;zdd&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> b = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;ddz&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>这是一个最简单的单例模式，但是这种方式有一个问题，就是instance是一个全局变量，会污染全局空间。稍微改进一下，将instance挂载到Singleton上。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Singleton</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Singleton</span>.<span class="property">getInstance</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">Singleton</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;zdd&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> b = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;ddz&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b);</span><br></pre></td></tr></table></figure>
<p>这样就不会污染全局空间了，但是这种方式还有一个问题，无法阻止使用者通过new Singleton()来创建实例。这无形中增加了使用者的心智负担，使用者必须提前知道Singleton是一个单例，也必须调用getInstance方法来获取实例。假设使用者用new Singleton()来创建实例，那么就会创建出多个实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title class_">Singleton</span>(<span class="string">&#x27;zdd&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Singleton</span>(<span class="string">&#x27;ddz&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c === d); <span class="comment">// false, not a singleton !!!</span></span><br></pre></td></tr></table></figure>

<p>为了避免用户通过<code>new</code>来创建实例，可以使用闭包来实现，将Singleton变成一个IIFE（Immediately Invoked Function Expression）。</p>
<h2 id="Use-IIFE"><a href="#Use-IIFE" class="headerlink" title="Use IIFE"></a>Use IIFE</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Singleton</span> = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里的init函数返回的是一个对象，而不是一个类的实例。</span></span><br><span class="line">  <span class="comment">// 这里init是箭头函数，最好不要使用this, 因为this指向global对象。</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params">name</span>) =&gt; (&#123;</span><br><span class="line">    name,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">getInstance</span>: <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">        instance = <span class="title function_">init</span>(name);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;zdd&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> b = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;ddz&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时，使用者就无法通过<code>new</code>来创建实例了，只能通过<code>getInstance</code>来获取实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title class_">Singleton</span>(); <span class="comment">// error， Singleton is not a constructor</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c === d);</span><br></pre></td></tr></table></figure>

<p>这里使用IIFE的好处是：</p>
<ol>
<li>不会污染全局空间，所有变量及方法都是私有的。</li>
<li>用户无法使用<code>new</code>来创建实例，只能通过<code>getInstance</code>来获取实例。</li>
</ol>
<p>为了区分私有方法和变量，以及公有方法和变量，可以使用下面的代码，更好的区分私有和公有。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Singleton</span> = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// Private methods and variables</span></span><br><span class="line">    <span class="keyword">const</span> privateVariable = <span class="string">&#x27;I am private variable&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">privateMethod</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Private method&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This object is the return value of init will be assigned to instance.</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// Public methods and variables</span></span><br><span class="line">      <span class="attr">publicVariable</span>: <span class="string">&#x27;I am public variable&#x27;</span>,</span><br><span class="line">      <span class="attr">publicMethod</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Public method&#x27;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Public method to get the singleton instance</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getInstance</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = <span class="title function_">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Expose the public method</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getInstance,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="keyword">const</span> singletonInstance1 = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"><span class="keyword">const</span> singletonInstance2 = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(singletonInstance1 === singletonInstance2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>前面说过，使用.getInstance()来获取实例，增加了用户的心智负担，如果想要用户通过new来创建实例，可以使用下面的代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Singleton</span> = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">createInstance</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      <span class="comment">// Init code goes here, If you want to exact init to a function, you must use createInstance.prototype.init = function(name)&#123;this.name = name&#125;. This will make init public to every instance, it&#x27;s bad idea！</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">      instance = <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> createInstance;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Singleton</span>(<span class="string">&#x27;zdd&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title class_">Singleton</span>(<span class="string">&#x27;ddz&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面是使用ES6的class来实现单例模式。代码更加简洁优雅。</p>
<h2 id="Use-class"><a href="#Use-class" class="headerlink" title="Use class"></a>Use class</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Singleton</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">      <span class="title class_">Singleton</span>.<span class="property">instance</span> = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="comment">// Your initialization code here</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Singleton</span>.<span class="property">instance</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Additional properties and methods can be added here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance1 = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"><span class="keyword">const</span> instance2 = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1 === instance2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="Use-Proxy"><a href="#Use-Proxy" class="headerlink" title="Use Proxy"></a>Use Proxy</h2><p>待补充。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>design pattern</tag>
        <tag>singleton</tag>
      </tags>
  </entry>
  <entry>
    <title>ng-template</title>
    <url>/2023/04/16/ng-template/</url>
    <content><![CDATA[<h1 id="ng-template"><a href="#ng-template" class="headerlink" title="ng-template"></a>ng-template</h1><p>顾名思义，<code>ng-template</code>是一个模板元素，通常与结构化指令<code>ng-if</code>, <code>ng-for</code>, <code>ng-switch</code>及模板变量配合使用.</p>
<h2 id="ng-template配合ng-if"><a href="#ng-template配合ng-if" class="headerlink" title="ng-template配合ng-if"></a>ng-template配合ng-if</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> [<span class="attr">ngIf</span>]=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在实际编程中，我们一般不用上面的写法，而是采用指令的简写形式，也就是用<code>*ngIf</code>代替<code>[ngIf]</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;true&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这段代码编译后的结果和第一段代码是相同的。关于指令的简写形式，请参考这篇。注意：在<code>ng-template</code>上使用指令的简写形式是无效的，必须使用属性绑定的方式，下面的代码无法正常工作。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> *<span class="attr">ngIf</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="作为elseBlock使用"><a href="#作为elseBlock使用" class="headerlink" title="作为elseBlock使用"></a>作为elseBlock使用</h2><ul>
<li>condition &#x3D; true, 显示<code>Hello, world!</code></li>
<li>condition &#x3D; false, 显示<code>Goodbye, world!</code><br><code>condition</code>是组件中定义的变量，也可以是一个函数。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;condition else otherTemplate&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">otherTemplate</span>&gt;</span>Goodbye, world!<span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="If-then-else"><a href="#If-then-else" class="headerlink" title="If-then-else"></a>If-then-else</h2><p>如果两个分支对应的模板都很大，那么可以采用这种方式，使结构更清晰，代码更易读。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;condition; then thenBlock else elseBlock&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">thenBlock</span>&gt;</span>Content to render when condition is true.<span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">elseBlock</span>&gt;</span>Content to render when condition is false.<span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>angular</tag>
        <tag>directives</tag>
      </tags>
  </entry>
  <entry>
    <title>nx commands</title>
    <url>/2023/11/07/nx-commands/</url>
    <content><![CDATA[<h1 id="Show-affected-apps"><a href="#Show-affected-apps" class="headerlink" title="Show affected apps"></a>Show affected apps</h1><p>nx v15</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nx affected:apps</span><br></pre></td></tr></table></figure>
<p>nx v16</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nx print-affected --<span class="built_in">type</span>=app --select=projects</span><br></pre></td></tr></table></figure>
<p>nx v17+</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nx show projects --affected</span><br><span class="line">nx affected --graph -t build</span><br><span class="line">nx graph --affected</span><br></pre></td></tr></table></figure>
<p>If there is no affected apps, <code>nx print-affected</code> will show the following output. look at the <code>projects</code> property, its empty, which means there is no affected apps.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;tasks&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;projects&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;projectGraph&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;nodes&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;content-templates&quot;</span>,</span><br><span class="line">      <span class="string">&quot;todos-e2e&quot;</span>,</span><br><span class="line">      <span class="string">&quot;todos&quot;</span>,</span><br><span class="line">      <span class="string">&quot;data&quot;</span>,</span><br><span class="line">      <span class="string">&quot;api&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ui&quot;</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If your apps&#x2F;libs was created manually, you have to make sure that there is a file <code>project.json</code> under the root of your app&#x2F;lib, and have the following content at least.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;content-templates&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;projectType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="Show-graph"><a href="#Show-graph" class="headerlink" title="Show graph"></a>Show graph</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nx dep-graph</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>monorepo</tag>
        <tag>angular</tag>
        <tag>nx</tag>
      </tags>
  </entry>
  <entry>
    <title>optional chaining</title>
    <url>/2023/12/06/optional-chaining/</url>
    <content><![CDATA[<h1 id="Optional-chaining"><a href="#Optional-chaining" class="headerlink" title="Optional chaining"></a>Optional chaining</h1><h2 id="Why-optional-chaining"><a href="#Why-optional-chaining" class="headerlink" title="Why optional chaining"></a>Why optional chaining</h2><p>Have you write the following code before?</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (user &amp;&amp; user.<span class="property">address</span> &amp;&amp; user.<span class="property">address</span>.<span class="property">street</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">address</span>.<span class="property">street</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>With optional chaining operator, you don’t need so many <code>&amp;&amp;</code> to get a deeply nested property.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user?.<span class="property">address</span>?.<span class="property">street</span>);</span><br></pre></td></tr></table></figure>

<h2 id="How-to-use-optional-chaining"><a href="#How-to-use-optional-chaining" class="headerlink" title="How to use optional chaining"></a>How to use optional chaining</h2><p>The optional chaining (?.) operator accesses an object’s property or calls a function. If the object accessed or function called using this operator is undefined or null, the expression short circuits and evaluates to undefined instead of throwing an error.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user; <span class="comment">// user is undefined since we didn&#x27;t give it any value.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user?.<span class="property">address</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">address</span>); <span class="comment">// TypeError: Cannot read properties of undefined (reading &#x27;address&#x27;)</span></span><br></pre></td></tr></table></figure>

<p>Optional chaining can not be used with a non-declared root object, but can be used with a root object that is null or undefined.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a?.<span class="property">b</span>); <span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span>?.<span class="property">b</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>?.<span class="property">b</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>In javascript, not defined and undefined are two different concepts. <a href="https://zdd.github.io/2023/12/06/undefined-vs-not-defined/">undefined vs not defined</a></p>
<h2 id="Unit-test-coverage-for-optional-chaining"><a href="#Unit-test-coverage-for-optional-chaining" class="headerlink" title="Unit test coverage for optional chaining"></a>Unit test coverage for optional chaining</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2>]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>optional chaining</tag>
        <tag>operator</tag>
      </tags>
  </entry>
  <entry>
    <title>refactor-replace-temp-with-query</title>
    <url>/2023/09/16/refactor-replace-temp-with-query/</url>
    <content><![CDATA[<h1 id="Replace-Temp-with-Query"><a href="#Replace-Temp-with-Query" class="headerlink" title="Replace Temp with Query"></a>Replace Temp with Query</h1><p>以查询取代临时变量的方法只适用于处理某些类型的临时变量，即那些只被赋值一次，而且之后再也没有被修改的临时变量。</p>
<p>看下面的代码：我们可以将 <code>price()</code>中的临时变量 <code>basePrice</code> 和<code>discountFactor</code> 替换为查询函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">quantity, item</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">quantity</span> = quantity;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">item</span> = item;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">price</span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> basePrice = <span class="variable language_">this</span>.<span class="property">quantity</span> * <span class="variable language_">this</span>.<span class="property">item</span>.<span class="property">price</span>;</span><br><span class="line">    <span class="keyword">let</span> discountFactor = <span class="number">0.98</span>;</span><br><span class="line">    <span class="keyword">if</span> (basePrice &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">      discountFactor -= <span class="number">0.03</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> basePrice * discountFactor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改后如下：可以看到，修改后，<code>price()</code>内的代码明显更加简洁，更加容易理解。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">quantity, item</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">quantity</span> = quantity;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">item</span> = item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> <span class="title function_">price</span>() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">basePrice</span> * <span class="variable language_">this</span>.<span class="property">discountFactor</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use this method to replace the temp variable basePrice</span></span><br><span class="line"><span class="keyword">get</span> <span class="title function_">basePrice</span>() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">quantity</span> * <span class="variable language_">this</span>.<span class="property">item</span>.<span class="property">price</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use this method to replace the temp variable discountFactor</span></span><br><span class="line"><span class="keyword">get</span> <span class="title function_">discountFactor</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> discountFactor = <span class="number">0.98</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">basePrice</span> &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">    discountFactor -= <span class="number">0.03</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> discountFactor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果是在不支持<code>getter</code>和<code>setter</code>的语言中，我们可以使用<code>extract function</code>的方法来实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">quantity, item</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">quantity</span> = quantity;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">item</span> = item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> <span class="title function_">price</span>() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getBasePrice</span>() * <span class="variable language_">this</span>.<span class="title function_">getDiscountFactor</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use this method to replace the temp variable basePrice</span></span><br><span class="line"><span class="title function_">getBasePrice</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">quantity</span> * <span class="variable language_">this</span>.<span class="property">item</span>.<span class="property">price</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use this method to replace the temp variable discountFactor</span></span><br><span class="line"><span class="title function_">getDiscountFactor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> discountFactor = <span class="number">0.98</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">basePrice</span> &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">    discountFactor -= <span class="number">0.03</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> discountFactor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>refactoring</tag>
        <tag>variable</tag>
        <tag>getter and setter</tag>
      </tags>
  </entry>
  <entry>
    <title>stopPropagation-vs-stopImmediatePropagation</title>
    <url>/2023/08/03/stopPropagation-vs-stopImmediatePropagation/</url>
    <content><![CDATA[<h1 id="Event-stopPropagation-vs-Event-stopImmediatePropagation"><a href="#Event-stopPropagation-vs-Event-stopImmediatePropagation" class="headerlink" title="Event.stopPropagation vs Event.stopImmediatePropagation"></a>Event.stopPropagation vs Event.stopImmediatePropagation</h1><h2 id="JavaScript事件模型"><a href="#JavaScript事件模型" class="headerlink" title="JavaScript事件模型"></a>JavaScript事件模型</h2><p>在JavaScript中，有两种事件的传递方向，一种是由内层元素向外层元素传递，也叫自底向上的方式，称作事件冒泡，好比水中的气泡由水底向水面上升的过程。另一种叫做事件捕获，方向刚好相反，从外层元素向内层元素传递，也叫自顶向下。</p>
<p>目前主流的浏览器都支持这两种事件传递方式，但是在IE8及以下版本的浏览器中，只支持事件冒泡，不支持事件捕获。</p>
<p>所以DOM中的事件处理分为以下三个阶段</p>
<ul>
<li>capture（捕获阶段），事件由外层向内层传递</li>
<li>target（命中阶段），事件到达目标元素</li>
<li>bubbling（冒泡阶段），事件由内层向外层传递</li>
</ul>
<p><img src="/../images/event-dispatch-modal.jpg"></p>
<p>那么如何指定事件的传递方式呢？我们可以通过addEventListener的第三个参数来指定，比如下面的代码：<br>当useCapture为true时，事件传递方式为事件捕获，当useCapture为false时，事件传递方式为事件冒泡。默认值为false，使用事件冒泡模式。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addEventListener</span>(type, listener, useCapture)</span><br></pre></td></tr></table></figure>

<h1 id="Event-stopPropagation"><a href="#Event-stopPropagation" class="headerlink" title="Event.stopPropagation"></a>Event.stopPropagation</h1><ol>
<li>当事件传递方式为捕获模式时，<code>event.stopPropagation()</code>会阻止事件继续向下（内层元素）传递。</li>
<li>当事件传递方式为冒泡模式时，<code>event.stopPropagation()</code>会阻止事件继续向上（外层元素）传递。</li>
</ol>
<p>代码示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">  div1</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">    div2</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div3&quot;</span>&gt;</span></span><br><span class="line">      div3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#div1&quot;</span>);</span><br><span class="line"><span class="title function_">bindEventListener</span>(div1, <span class="string">&quot;click&quot;</span>, clickHandler1, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">const</span> div2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#div2&quot;</span>);</span><br><span class="line"><span class="title function_">bindEventListener</span>(div2, <span class="string">&quot;click&quot;</span>, clickHandler2, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">const</span> div3 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#div3&quot;</span>);</span><br><span class="line"><span class="title function_">bindEventListener</span>(div3, <span class="string">&quot;click&quot;</span>, clickHandler3, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindEventListener</span>(<span class="params">element, event, listener, useCapture</span>) &#123;</span><br><span class="line">  element.<span class="title function_">addEventListener</span>(event, listener, useCapture);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clickHandler1</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> text = event.<span class="property">currentTarget</span>.<span class="property">id</span> + <span class="string">&quot; clicked&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clickHandler2</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> text = event.<span class="property">currentTarget</span>.<span class="property">id</span> + <span class="string">&quot; clicked&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clickHandler3</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> text = event.<span class="property">currentTarget</span>.<span class="property">id</span> + <span class="string">&quot; clicked&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/../images/event-bubble.jpg"></p>
<p>点击div3，输出如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div3 clicked</span><br><span class="line">div2 clicked</span><br><span class="line">div1 clicked</span><br></pre></td></tr></table></figure>
<p>如果我们在clickHandler3中加入<code>event.stopPropagation()</code>，再次点击div3，输出如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div3 clicked</span><br></pre></td></tr></table></figure>
<p>可见，<code>event.stopPropagation()</code>阻止了事件继续向上（外层元素）传递。</p>
<p>将事件处理函数改为捕获模式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">bindEventListener</span>(div1, <span class="string">&quot;click&quot;</span>, clickHandler1, <span class="literal">true</span>);</span><br><span class="line"><span class="title function_">bindEventListener</span>(div2, <span class="string">&quot;click&quot;</span>, clickHandler2, <span class="literal">true</span>);</span><br><span class="line"><span class="title function_">bindEventListener</span>(div3, <span class="string">&quot;click&quot;</span>, clickHandler3, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>再次点击div3，输出如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div1 clicked</span><br><span class="line">div2 clicked</span><br><span class="line">div3 clicked</span><br></pre></td></tr></table></figure>
<p>如果我们在clickHandler1中加入<code>event.stopPropagation()</code>，再次点击div3，输出如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div1 clicked</span><br></pre></td></tr></table></figure>
<p>可见，<code>event.stopPropagation()</code>阻止了事件继续向下（内层元素）传递。</p>
<h1 id="Event-stopImmediatePropagation"><a href="#Event-stopImmediatePropagation" class="headerlink" title="Event.stopImmediatePropagation"></a>Event.stopImmediatePropagation</h1><p>如果将上述代码中的<code>event.stopPropagation()</code>改为<code>event.stopImmediatePropagation()</code>，你会发现，输出的结果是一样的，这说明<code>event.stopImmediatePropagation()</code>与<code>event.stopPropagation()</code>的作用是一样的，都是阻止事件继续传递。既然作用是一样的，那么为什么还要有<code>event.stopImmediatePropagation()</code>呢？这是因为<code>event.stopImmediatePropagation()</code>还有一个额外的功能，就是阻止事件处理函数队列中的其他函数执行，比如下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">bindEventListener</span>(div1, <span class="string">&quot;click&quot;</span>, clickHandler1, <span class="literal">false</span>);</span><br><span class="line"><span class="title function_">bindEventListener</span>(div1, <span class="string">&quot;click&quot;</span>, clickHandler2, <span class="literal">false</span>);</span><br><span class="line"><span class="title function_">bindEventListener</span>(div1, <span class="string">&quot;click&quot;</span>, clickHandler3, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>当我们点击div1时，输出如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div1 clicked</span><br><span class="line">div1 clicked</span><br><span class="line">div1 clicked</span><br></pre></td></tr></table></figure>

<p>当多个事件处理函数绑定到同一个元素的同一个事件时，事件处理函数的执行顺序是按照绑定的顺序执行的，比如上面的代码，clickHandler1会先于clickHandler2执行，clickHandler2会先于clickHandler3执行。如果我们在clickHandler1中加入<code>event.stopImmediatePropagation()</code>，再次点击div1，输出如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div1 clicked</span><br></pre></td></tr></table></figure>
<p>可见，<code>event.stopImmediatePropagation()</code>阻止了事件处理函数队列中的其他函数执行。clickHandler2和clickHandler3都被阻止了执行。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation">Event.stopPropagation()</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation">Event.stopImmediatePropagation()</a></li>
</ul>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>event</tag>
        <tag>stoppropagation</tag>
        <tag>stopimmediatepropagation</tag>
      </tags>
  </entry>
  <entry>
    <title>test async task with angular and jest</title>
    <url>/2023/11/21/test-async-task-with-angular-and-jest/</url>
    <content><![CDATA[<h1 id="Test-async-task-with-Angular-Jest"><a href="#Test-async-task-with-Angular-Jest" class="headerlink" title="Test async task with Angular + Jest"></a>Test async task with Angular + Jest</h1><p>在前端开发中，Unit Test是很重要的一个环节，而异步任务测试又是Unit Test不可避免的一个环节。本文将介绍如何使用Angular + Jest来测试异步任务。</p>
<h2 id="待测试函数返回一个Promise"><a href="#待测试函数返回一个Promise" class="headerlink" title="待测试函数返回一个Promise"></a>待测试函数返回一个Promise</h2><p>这是最简单的情况了，直接使用<code>async/await</code>即可。</p>
<p><strong>待测函数</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getPromise</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试代码</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test getPromise&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> service.<span class="title function_">getPromise</span>();</span><br><span class="line">  <span class="title function_">expect</span>(result).<span class="title function_">toBe</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在实际项目中不会有这么简单的情况，大部分都是一个async函数，里面await了其他异步操作，比如下面代码中的handleData，我们该如何测试它呢？</p>
<p><strong>待测函数</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">handleData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getData</span>();</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    data,</span><br><span class="line">    <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先来分析一下，<code>handleData</code>是一个async方法，而async方法一定返回一个Promise(如果函数实际返回值不是Promise，那么async方法会用Promise包裹该返回值)，所以我们还是可以直接使用<code>async/await</code>来测试。</p>
<p><strong>测试代码</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test handle data&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> component.<span class="title function_">handleData</span>();</span><br><span class="line">  <span class="title function_">expect</span>(data.<span class="property">data</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>最新版的Angular推荐使用<code>waitForAsync</code>来测试异步任务，所以我们也可以使用waitForAsync来测试。(注意<code>waitForAsync</code>中不能使用await。)</p>
<p><strong>测试代码</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test handle data&#x27;</span>, <span class="title function_">waitForAsync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  component.<span class="title function_">handleData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(data.<span class="property">data</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<h2 id="待测试函数包含异步操作，但是没有返回Promise。"><a href="#待测试函数包含异步操作，但是没有返回Promise。" class="headerlink" title="待测试函数包含异步操作，但是没有返回Promise。"></a>待测试函数包含异步操作，但是没有返回Promise。</h2><p>这种情况还是有些简单，实际应用中，经常是一个函数中间夹杂着某些异步操作用来获取数据，然后对数据进行处理，最后可能也不返回Promise，对于这种情况，我们应该使用<code>fakeAsync</code>来测试。<br>fakeAsync内部有三个方法可以控制异步操作</p>
<ul>
<li>tick: 让时间快进</li>
<li>flush: 让所有异步操作立即执行</li>
<li>flushMicrotasks: 让所有微任务立即执行</li>
</ul>
<p>&#x2F;table</p>
<table>
<thead>
<tr>
<th>name</th>
<th>作用</th>
<th>使用场景</th>
</tr>
</thead>
<tbody><tr>
<td>tick</td>
<td>用于控制时间流逝</td>
<td>想要精细控制每个timer的执行时机，tick在执行前会清空micro task队列，如果代码中有promise，tick之后，promise都会执行完毕。</td>
</tr>
<tr>
<td>flush</td>
<td>执行所有异步操作，不论是macro task还是micro task</td>
<td>这个最常用，无脑操作，将所有异步操作执行完，比如setTimeout和promise等，flush之后就可以expect了</td>
</tr>
<tr>
<td>flushMicrotasks</td>
<td>这个只执行micro task，对于前端来说，就是promise了，不会影响timer</td>
<td>如果代码中没有用到timer，可以使用这个。</td>
</tr>
</tbody></table>
<p>下面看几个列子，分别讲解一下如何使用这三个方法来进行测试。</p>
<h3 id="待测试函数只包含Macro-Task"><a href="#待测试函数只包含Macro-Task" class="headerlink" title="待测试函数只包含Macro Task"></a>待测试函数只包含Macro Task</h3><p><strong>待测函数</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">updateValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">10</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">11</span>;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">12</span>;</span><br><span class="line">  &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试代码</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test updateValue&#x27;</span>, <span class="title function_">fakeAsync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  component.<span class="title function_">updateValue</span>();</span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">num</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="title function_">tick</span>(<span class="number">100</span>); <span class="comment">// tick the timer by 100ms</span></span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">num</span>).<span class="title function_">toBe</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="title function_">tick</span>(<span class="number">100</span>); <span class="comment">// tick the timer by 100ms again.</span></span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">num</span>).<span class="title function_">toBe</span>(<span class="number">12</span>);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<p>来分析一下以上测试代码，首先我们调用了<code>updateValue</code>方法，然后期望<code>num</code>的值为10，因为<code>updateValue</code>中有两个timer，所以我们需要调用两次<code>tick</code>，第一次调用<code>tick</code>，让时间快进100ms，这时候第一个timer会执行，<code>num</code>的值变为11，然后再调用一次<code>tick</code>，让时间再快进100ms，这时候第二个timer会执行，<code>num</code>的值变为12。</p>
<p>当然了，如果你不想测试中间过程，而只想测试最终的结果，也可以使用Jest提供的<code>useFakeTimer</code>方法。</p>
<p><strong>测试代码</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test updateValue&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  jest.<span class="title function_">useFakeTimers</span>();</span><br><span class="line">  component.<span class="title function_">updateValue</span>();</span><br><span class="line">  jest.<span class="title function_">runAllTimers</span>();</span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">num</span>).<span class="title function_">toBe</span>(<span class="number">12</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>useFakeTimers</code>会将所有的timer替换成一个fake的timer，然后调用<code>runAllTimers</code>，会让所有的timer立即执行，这样就可以直接测试最终结果了。</p>
<h3 id="待测试函数只包含Micro-Task"><a href="#待测试函数只包含Micro-Task" class="headerlink" title="待测试函数只包含Micro Task"></a>待测试函数只包含Micro Task</h3><p><strong>待测函数</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">updateValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">num</span> = value;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试代码</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test updateValue&#x27;</span>, <span class="title function_">fakeAsync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  component.<span class="title function_">updateValue</span>();</span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">num</span>).<span class="title function_">toBe</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="title function_">flushMicrotasks</span>(); <span class="comment">// 这里用tick()或者flush()也可以。但是flushMicrotasks更加精确。</span></span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">num</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<p>上述代码中，首先调用了<code>updateValue</code>方法，然后期望<code>num</code>的值为0，因为<code>updateValue</code>中有一个promise，所以我们需要调用<code>flushMicrotasks</code>，让所有的micro task立即执行，这时候<code>num</code>的值变为10。</p>
<p>当然上例中的<code>flushMicrotasks</code>也可以替换成<code>flush</code>，因为<code>flush</code>会让所有的异步操作立即执行，包括macro task和micro task。也可以使用tick，因为tick在执行之前也会先把微任务队列清空（把队列中的微任务都执行完）。</p>
<h3 id="待测试函数同时包含Macro-Task和Micro-Task"><a href="#待测试函数同时包含Macro-Task和Micro-Task" class="headerlink" title="待测试函数同时包含Macro Task和Micro Task"></a>待测试函数同时包含Macro Task和Micro Task</h3><p><strong>待测函数</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt;(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">updateValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">num</span> = value;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试代码</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test updateValue&#x27;</span>, <span class="title function_">fakeAsync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  component.<span class="title function_">updateValue</span>();</span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">num</span>).<span class="title function_">toBe</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="title function_">tick</span>(<span class="number">100</span>); <span class="comment">//或者flush()</span></span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">num</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<p>上述代码中，<code>fetchData()</code>中同时包含Macro task和Micro task，所以我们可以使用<code>tick</code>或者<code>flush</code>来测试。但是使用<code>flushMicrotasks</code>就不行了，因为<code>flushMicrotasks</code>只会让micro task立即执行，而<code>setTimeout</code>是macro task，不会被执行。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>如果函数返回一个Promise，那么直接使用<code>async/await</code>测试即可。新版的Angular推荐使用<code>waitForAsync</code>来测试。</li>
<li>如果函数中间夹杂着异步操作，但是没有返回Promise，那么分为以下三种情况<ul>
<li>待测试函数只包含微任务 - 使用<code>fakeAsync</code>配合<code>flushMicrotasks</code>来控制异步操作。</li>
<li>待测试函数只包含宏任务 - 使用<code>fakeAsync</code>配合<code>tick</code>或者<code>flush</code>来控制异步操作。</li>
<li>待测试函数同时包含微任务与宏任务 - 使用<code>fakeAsync</code>配合<code>tick</code>或者<code>flush</code>来控制异步操作。</li>
</ul>
</li>
<li>能用<code>async/await</code>或者<code>waitForAsync</code>测试的一定能用<code>fakeAsync</code>测试，反之不成立。</li>
</ul>
<p>最终结论: 在Angular + Jest为基础的项目中，使用<code>fakeAsync</code> + <code>tick</code>&#x2F;<code>flush</code>能搞定所有的异步测试。</p>
]]></content>
      <tags>
        <tag>angular</tag>
        <tag>jest</tag>
        <tag>async</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>undefined-in-javascript</title>
    <url>/2023/12/15/undefined-in-javascript/</url>
    <content><![CDATA[<h1 id="undefined-in-javascript"><a href="#undefined-in-javascript" class="headerlink" title="undefined in javascript"></a>undefined in javascript</h1><h1 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h1><h1 id="什么情况下JavaScript会产生undefined类型？"><a href="#什么情况下JavaScript会产生undefined类型？" class="headerlink" title="什么情况下JavaScript会产生undefined类型？"></a>什么情况下JavaScript会产生<code>undefined</code>类型？</h1><h2 id="1-显式undefined类型"><a href="#1-显式undefined类型" class="headerlink" title="1. 显式undefined类型"></a>1. 显式<code>undefined</code>类型</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined.</span></span><br></pre></td></tr></table></figure>

<h2 id="2-未初始化的变量"><a href="#2-未初始化的变量" class="headerlink" title="2. 未初始化的变量"></a>2. 未初始化的变量</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined.</span></span><br></pre></td></tr></table></figure>

<h2 id="3-访问对象中不存在的属性"><a href="#3-访问对象中不存在的属性" class="headerlink" title="3. 访问对象中不存在的属性"></a>3. 访问对象中不存在的属性</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">41</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">gender</span>); <span class="comment">// undefined.</span></span><br></pre></td></tr></table></figure>

<h2 id="4-函数没有返回值"><a href="#4-函数没有返回值" class="headerlink" title="4. 函数没有返回值"></a>4. 函数没有返回值</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello, world!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>()); <span class="comment">// undefined.</span></span><br></pre></td></tr></table></figure>

<h2 id="5-调用函数没有传递对应的参数"><a href="#5-调用函数没有传递对应的参数" class="headerlink" title="5. 调用函数没有传递对应的参数"></a>5. 调用函数没有传递对应的参数</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// output undefined.</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// output undefined.</span></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(); <span class="comment">// no arguments passed in.</span></span><br></pre></td></tr></table></figure>

<h1 id="undefined-x3D-not-defined"><a href="#undefined-x3D-not-defined" class="headerlink" title="undefined !&#x3D; not defined"></a><code>undefined</code> !&#x3D; <code>not defined</code></h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// error, b is not defined</span></span><br></pre></td></tr></table></figure>

<h1 id="undefined-vs-void-0"><a href="#undefined-vs-void-0" class="headerlink" title="undefined vs void 0"></a><code>undefined</code> vs <code>void 0</code></h1><p>既然已经有了<code>undefined</code>，为什么有很多库中还使用<code>void 0</code>呢？ 原因就是<code>undefined</code>是一个值，而不是关键字，能被用户串改，看下面的代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="literal">undefined</span> = <span class="number">1</span>; <span class="comment">// undefined被用户篡改！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 这里判断参数是否传入，结果失效了，因为undefined值在前面被改成了1</span></span><br><span class="line">  <span class="keyword">if</span> (a === <span class="literal">undefined</span> || b === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请输入两个数&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 这里会执行add函数中的if分支，是不是很崩溃？</span></span><br></pre></td></tr></table></figure>

<p>使用<code>void 0</code>就不会有这个问题。 </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="literal">undefined</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 写成void 0就没有问题了，无论undefined被改成什么，都不影响。</span></span><br><span class="line">  <span class="keyword">if</span> (a === <span class="keyword">void</span> <span class="number">0</span> || b === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请输入两个数&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<p><code>void expression</code> - 先对<code>expression</code>求值，然后返回<code>undefined</code></p>
<h1 id="undefined-vs-null"><a href="#undefined-vs-null" class="headerlink" title="undefined vs null"></a><code>undefined</code> vs <code>null</code></h1><p>Conceptually, <code>undefined</code> indicates the absence of a <em>value</em>, while <code>null</code> indicates the absence of an <em>object</em> (which could also make up an excuse for <code>[typeof null === &quot;object&quot;](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null)</code>). The language usually defaults to <code>undefined</code> when something is devoid of a value:</p>
<ul>
<li>A <code>[return](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return)</code> statement with no value (<code>return;</code>) implicitly returns <code>undefined</code>.</li>
<li>Accessing a nonexistent <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">object</a> property (<code>obj.iDontExist</code>) returns <code>undefined</code>.</li>
<li>A variable declaration without initialization (<code>let x;</code>) implicitly initializes the variable to <code>undefined</code>.</li>
<li>Many methods, such as <code>[Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)</code> and <code>[Map.prototype.get()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get)</code>, return <code>undefined</code> when no element is found.</li>
</ul>
<p><code>null</code> is used much less often in the core language. The most important place is the end of the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">prototype chain</a> — subsequently, methods that interact with prototypes, such as <code>[Object.getPrototypeOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf)</code>, <code>[Object.create()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create)</code>, etc., accept or return <code>null</code> instead of <code>undefined</code>.</p>
<p><code>null</code> is a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords">keyword</a>, but <code>undefined</code> is a normal <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers">identifier</a> that happens to be a global property. In practice, the difference is minor, since <code>undefined</code> should not be redefined or shadowed.</p>
<h1 id="References："><a href="#References：" class="headerlink" title="References："></a>References：</h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#undefined_type">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#undefined_type</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void</a></p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>undefined</tag>
      </tags>
  </entry>
  <entry>
    <title>书法杂谈(一)</title>
    <url>/2023/12/18/%E4%B9%A6%E6%B3%95%E6%9D%82%E8%B0%88-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="如何写榜书"><a href="#如何写榜书" class="headerlink" title="如何写榜书"></a>如何写榜书</h1><p>榜书需用熟纸，最好是铜版纸，十分光滑。墨需要用浓墨，最好买超浓墨汁，也可以自制宿墨（将墨水准备好之后，放置一晚），最见精神，如果写完纸张发皱，可用熨斗熨一下。笔可用兼毫，写大字时一定要将笔毫铺开，方能如意！不可只用笔尖，那是小字的笔法。<br>初练榜书时，可用报纸，将一张报纸从中间裁开，每张写一字，</p>
<h1 id="如何让墨汁好写"><a href="#如何让墨汁好写" class="headerlink" title="如何让墨汁好写"></a>如何让墨汁好写</h1><p>可以在墨汁中添加洗洁精或者液态胶水，今天晚上我就加了一点液态胶水，效果很好，墨汁不会太稀，也不会太浓，很好写。非常丝滑，胶水不用太好的，就文具店那种白色液体胶水即可。</p>
<h1 id="宿墨"><a href="#宿墨" class="headerlink" title="宿墨"></a>宿墨</h1><p>宿墨可以自行制作，也可以买现成的宿墨，今日见抖音作者用宣和宿墨写豆腐宣，很是得手。</p>
<h1 id="笔法"><a href="#笔法" class="headerlink" title="笔法"></a>笔法</h1><p>写字需笔笔交待清楚！要把动作做到位，不可草率。</p>
]]></content>
      <tags>
        <tag>书法</tag>
      </tags>
  </entry>
  <entry>
    <title>undefined vs not defined</title>
    <url>/2023/12/06/undefined-vs-not-defined/</url>
    <content><![CDATA[<h1 id="undefined-vs-not-defined"><a href="#undefined-vs-not-defined" class="headerlink" title="undefined vs not defined"></a>undefined vs not defined</h1><p>In JavaScript, undefined and not defined are two different concepts. </p>
<ul>
<li><code>undefined</code>: a variable has been declared but has not yet been assigned a value.</li>
<li><code>not defined</code>: a variable has not been declared(not exists).</li>
</ul>
<h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="not-defined"><a href="#not-defined" class="headerlink" title="not defined"></a>not defined</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// Uncaught ReferenceError: b is not defined</span></span><br></pre></td></tr></table></figure>

<p>Whenever you try to access a variable that is not declared, JavaScript throws an error: Uncaught ReferenceError: b is not defined. This is because the variable b is not declared anywhere in the code. but you can still use <code>typeof</code> to check if a variable is defined or not.</p>
<h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> b); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>undefined</tag>
        <tag>not defined</tag>
      </tags>
  </entry>
</search>
