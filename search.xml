<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android dependencies</title>
    <url>/2023/04/22/Android-dependencies/</url>
    <content><![CDATA[<h1 id="Android-dependencies-conflict-resolve"><a href="#Android-dependencies-conflict-resolve" class="headerlink" title="Android dependencies conflict resolve"></a>Android dependencies conflict resolve</h1><p>今天在编译Android应用“草书字典”时突然发现以下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Duplicate class com.google.common.util.concurrent.ListenableFuture found in modules jetified-guava-18.0 (com.google.guava:guava:18.0) and jetified-listenablefuture-1.0 (com.google.guava:listenablefuture:1.0)</span><br></pre></td></tr></table></figure>
<p>大意是说<code>com.google.common.util.concurrent.ListenableFuture</code>这个class出现在不同的package中，属于重复依赖，gradle无法处理，要手动处理一下。</p>
<p>在<code>app.gradle</code>文件中加入如下一行就好了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation &#x27;com.google.guava:guava:27.0.1-android&#x27;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android version, sdk version API level mapping</title>
    <url>/2023/04/25/Android-version-sdk-version-API-level-mapping/</url>
    <content><![CDATA[<p>See here for details:<br><a href="https://apilevels.com/">https://apilevels.com/</a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio tips - 1</title>
    <url>/2023/10/15/Android-tips-1/</url>
    <content><![CDATA[<h1 id="Android-Studio-Tips-1"><a href="#Android-Studio-Tips-1" class="headerlink" title="Android Studio Tips -1"></a>Android Studio Tips -1</h1><h2 id="1-Wireless-debugging-with-Android-device"><a href="#1-Wireless-debugging-with-Android-device" class="headerlink" title="1. Wireless debugging with Android device"></a>1. Wireless debugging with Android device</h2><ol>
<li>Select <code>Pair Devices using Wi-Fi</code> under emulator dropdown list.</li>
<li>Enable debug mode on your android device(see <a href="https://developer.android.com/studio/debug/dev-options">here</a> for more details).</li>
<li>On your android device, select <code>Settings | Developer options | Wireless debugging | Pair using QR code</code> to enable wireless debugging.<br><img src="/../images/android-wireless-debug.png" alt="Alt text"></li>
</ol>
<h2 id="2-Fix-Manifest-merged-errors"><a href="#2-Fix-Manifest-merged-errors" class="headerlink" title="2. Fix Manifest merged errors"></a>2. Fix Manifest merged errors</h2><ol>
<li>Open <code>AndroidManifest.xml</code> file.</li>
<li>Click <code>Merged Manifest</code> tab at the bottom of the editor.</li>
<li>Scroll down to the bottom to see the errors.<br><img src="/../images/android-manifest-merge-error.png" alt="Alt text"></li>
</ol>
<h2 id="3-View-database-file-in-Android-Studio"><a href="#3-View-database-file-in-Android-Studio" class="headerlink" title="3. View database file in Android Studio"></a>3. View database file in Android Studio</h2><ol>
<li>Select <code>View | Tools Window | App Inspection</code> from the main menu.</li>
<li>Launch your app on a device&#x2F;Emulator running API level 26 or higher.<br>  <img src="/../images/android-studio-app-inspector.png" alt="Alt text"></li>
<li>If you see a red <code>close</code> icon on your database file which means your database was not opened, you can operate on your app to open the database(such as click a button, open a fragment or whatever action which can open the database).</li>
<li>If you database was opened, you can click the table under this database to view the data.</li>
</ol>
<h2 id="4-Filter-logs-in-Logcat"><a href="#4-Filter-logs-in-Logcat" class="headerlink" title="4. Filter logs in Logcat"></a>4. Filter logs in Logcat</h2><ol>
<li>Select <code>Logcat</code> at the bottom of Android Studio.</li>
<li>Select the emulator&#x2F;device where your app runs on.</li>
<li>Focus the filter input box, and press <code>Ctrl + Space</code> to open the filter dialog. then select the filter options you want.<br><img src="/../images/android-studio-filter-logcat.png" alt="Alt text"></li>
<li>For example, if you want to see only <code>error</code> logs for package <code>com.jiyuzhai.kaishuzidian</code>, you can input <code>package: com.jiyuzhai.kaishuzidian level: error</code> as a filter.</li>
</ol>
<h2 id="5-Open-xml-layout-file-in-split-mode"><a href="#5-Open-xml-layout-file-in-split-mode" class="headerlink" title="5. Open xml layout file in split mode"></a>5. Open xml layout file in <code>split</code> mode</h2><p>Do you ever encounter this situation? whenever you open an xml layout file, it opens in <code>design</code> mode by default. You can do the following to open it in <code>split</code> mode by default.</p>
<ol>
<li>Open <code>Settings | Editor | Design Tools</code> from the main menu.</li>
<li>Check <code>Prefer XML editor</code> option.</li>
<li>Click <code>OK</code> button.<br><img src="/../images/android-open-xml-layout-file-in-split-mode.png" alt="Alt text"></li>
</ol>
<h2 id="File-xxx-already-exists-it-cannot-be-overwritten-by-SerializableChange-file-xxx-fileStatus-NEW-normalizedPath-xxx-class"><a href="#File-xxx-already-exists-it-cannot-be-overwritten-by-SerializableChange-file-xxx-fileStatus-NEW-normalizedPath-xxx-class" class="headerlink" title="File xxx already exists, it cannot be overwritten by SerializableChange(file&#x3D;xxx, fileStatus&#x3D;NEW, normalizedPath&#x3D;xxx.class)."></a>File xxx already exists, it cannot be overwritten by SerializableChange(file&#x3D;xxx, fileStatus&#x3D;NEW, normalizedPath&#x3D;xxx.class).</h2><ol>
<li>In Android menu, select <code>Build | Clean Project</code>, then rebuild, that’s it!</li>
</ol>
<h2 id="Android-emulator-stop-working"><a href="#Android-emulator-stop-working" class="headerlink" title="Android emulator stop working."></a>Android emulator stop working.</h2><p>Delete the lock file under avd folder, here is the lock file path under android sdk folder.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$android_sdk_dir\.android\avd\Pixel_XL_API_34.avd\xxx.lock</span><br></pre></td></tr></table></figure>

<h2 id="xxx-is-already-defined-in-a-single-type-import"><a href="#xxx-is-already-defined-in-a-single-type-import" class="headerlink" title="xxx is already defined in a single-type import"></a>xxx is already defined in a single-type import</h2><p>在Android Java中，同一个java文件不能导入两个同名的包，比如两个来自不同module的R文件，解决方法是使用全路径名，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.jiyuzhai.kaishuzidian.R.string.app_name</span><br><span class="line">com.jiyuzhai.kaishuzidian2.R.string.app_name</span><br></pre></td></tr></table></figure>

<h2 id="java-lang-OutOfMemoryError-Java-heap-space"><a href="#java-lang-OutOfMemoryError-Java-heap-space" class="headerlink" title="java.lang.OutOfMemoryError: Java heap space"></a>java.lang.OutOfMemoryError: Java heap space</h2><p>Gradle内存过小导致的错误，可以增加gradle的内存。</p>
<ol>
<li>打开<code>gradle.properties</code>文件，如果没有则新建一个。</li>
<li>添加<code>org.gradle.jvmargs=-Xmx4096m</code>，其中4096m是内存大小，可以根据需要调整。<br>我的电脑是32G内存，所以给出如下配置，最高8g, 最低4g内存。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.gradle.jvmargs=-Xmx8g -XX:MaxPermSize=4g -XX:+HeapDumpOnOutOfMemoryError -Dfile\</span><br><span class="line">  .encoding=UTF-8</span><br></pre></td></tr></table></figure>

<h2 id="Android-live-reload"><a href="#Android-live-reload" class="headerlink" title="Android live reload"></a>Android live reload</h2><ol>
<li>Run your app in Emulator or device.</li>
<li>Change your code.</li>
<li>Click <code>Apply Changes</code> button in the toolbar.<br><img src="/../images/android-apply-change.png" alt="android-apply-changes"></li>
</ol>
<h2 id="Connect-to-Google-App-Vitals"><a href="#Connect-to-Google-App-Vitals" class="headerlink" title="Connect to Google App Vitals"></a>Connect to <code>Google App Vitals</code></h2><ol>
<li>Sign in to your developer account in Android Studio using the profile icon  at the end of the toolbar.</li>
<li>Open App Quality Insights by clicking the tool window in Android Studio or clicking View &gt; Tool Windows &gt; App Quality Insights.</li>
<li>Click the Android vitals tab within App Quality Insights.</li>
</ol>
<h2 id="Can-not-resolve-symbol-‘BuildConfig’"><a href="#Can-not-resolve-symbol-‘BuildConfig’" class="headerlink" title="Can not resolve symbol ‘BuildConfig’"></a>Can not resolve symbol ‘BuildConfig’</h2>]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>android studio</tag>
      </tags>
  </entry>
  <entry>
    <title>Android monorepo in action</title>
    <url>/2023/09/17/Android-monorepo-in-action/</url>
    <content><![CDATA[<h1 id="Android-monorepo-in-action-Android-monorepo实践"><a href="#Android-monorepo-in-action-Android-monorepo实践" class="headerlink" title="Android monorepo in action(Android monorepo实践)"></a>Android monorepo in action(Android monorepo实践)</h1><h2 id="What-is-monorepo-什么是monorepo"><a href="#What-is-monorepo-什么是monorepo" class="headerlink" title="What is monorepo(什么是monorepo)"></a>What is monorepo(什么是monorepo)</h2><p>In version control systems, a monorepo (“mono” meaning ‘single’ and “repo” being short for ‘repository’) is a software development strategy where code for many projects is stored in the same repository.</p>
<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><ol>
<li>Create a folder named <code>monorepo</code>, this is the root folder of the monorepo.</li>
<li>Create folder <code>mono-libraries</code> under <code>monorepo</code>, this is the folder for shared libraries.</li>
<li>Create folder<code>mono-build-logic</code> under <code>monorepo</code>, this is the folder for gradle files.</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>该monorepo要求每个side project都要打开一个Android Studio实例，如果同时打开多个，那么只能有一个设置为主项目。</p>
<h2 id="Reference-参考"><a href="#Reference-参考" class="headerlink" title="Reference(参考)"></a>Reference(参考)</h2><p><a href="https://blog.blundellapps.co.uk/make-a-monorepo-for-your-android-projects/">https://blog.blundellapps.co.uk/make-a-monorepo-for-your-android-projects/</a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>monorepo</tag>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/04/10/Hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>How to get DOM element on page</title>
    <url>/2023/06/29/How-to-get-DOM-element-on-page/</url>
    <content><![CDATA[<h1 id="How-to-get-DOM-elements-on-page"><a href="#How-to-get-DOM-elements-on-page" class="headerlink" title="How to get DOM elements on page"></a>How to get DOM elements on page</h1><p>获取Dom元素总体来说有两类方法：</p>
<ul>
<li>getElementByXXX</li>
<li>queryXXX</li>
</ul>
<p>这两种方法都是从document对象开始查找，所以可以直接使用，不需要先获取document对象。</p>
<h2 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h2><h3 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById"></a>getElementById</h3><p>这是最常用的方法，如果你的元素有id属性，那么可以使用这个方法获取元素，返回的是一个Element对象。如果没有找到，则返回null。<br>html代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>js代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (element) &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="getElementsByClassName"><a href="#getElementsByClassName" class="headerlink" title="getElementsByClassName"></a>getElementsByClassName</h3><p>这个方法可以获取到所有class属性中包含指定类名的元素，返回的是一个<a href="https://daily.dev/blog/why-do-you-need-to-know-about-array-like-objects"><code>array-like</code></a>对象HTMLCollection，可以使用Array.from()方法将其转换为数组。<br>html代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>js代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;container&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> elementsArray = <span class="title class_">Array</span>.<span class="title function_">from</span>(elements);</span><br></pre></td></tr></table></figure>

<p>需要注意的是，这个方法返回的是一个动态的集合，也就是说，如果你在获取到元素之后，再向页面中添加或者删除元素，那么这个集合也会跟着改变。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 初始时，页面上有三个按钮。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> buttons = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(buttons); <span class="comment">// HTMLCollection(3) [button, button, button]</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 添加一个按钮, 此时再打印buttons，则输出四个按钮。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> buttonD = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    buttonD.<span class="property">innerHTML</span> = <span class="string">&quot;D&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    buttonD.<span class="property">className</span> = <span class="string">&quot;button&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(buttonD);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(buttons); <span class="comment">// HTMLCollection(4) [button, button, button, button]</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="query方法"><a href="#query方法" class="headerlink" title="query方法"></a>query方法</h2><p>query类的方法参数是CSS选择器，比如 </p>
<ul>
<li>“#root” - 查找id为root的结点，</li>
<li>“.container” - 查找class为container的结点，</li>
<li>“div” - 查找所有div结点。</li>
</ul>
<h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h3><p>这个方法可以获取到第一个匹配的元素，它的返回值类型是Element。如果没有匹配的元素，返回null。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>js代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h3><p>这个方法可以获取到所有匹配的元素，返回的是一个类数组对象NodeList，可以使用Array.from()方法将其转换为数组。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>js代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.container&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> elementsArray = <span class="title class_">Array</span>.<span class="title function_">from</span>(elements);</span><br></pre></td></tr></table></figure>

<p>querySelectorAll方法返回的是一个静态的集合，也就是说，如果你在获取到元素之后，再向页面中添加或者删除元素，那么这个集合不会跟着改变。</p>
<p>需要注意的是，尽管querySelectorAll方法返回的NodeList是静态的，但是NodeList在有些情况下却是动态的，比如 <code>Node.childNodes</code> 返回的就是一个动态的NodeList。</p>
<h2 id="总结成如下表格"><a href="#总结成如下表格" class="headerlink" title="总结成如下表格"></a>总结成如下表格</h2><table>
<thead>
<tr>
<th>方法</th>
<th>返回值类型</th>
<th>返回值个数</th>
<th>查不到时返回值</th>
<th>返回值状态：动态&#x2F;静态</th>
</tr>
</thead>
<tbody><tr>
<td>getElementById</td>
<td>Element</td>
<td>1</td>
<td>null</td>
<td>-</td>
</tr>
<tr>
<td>getElementsByClassName</td>
<td>HTMLCollection(Array-like object)</td>
<td>0~n</td>
<td>空的HTMLCollection</td>
<td>动态</td>
</tr>
<tr>
<td>querySelector</td>
<td>Element</td>
<td>1</td>
<td>null</td>
<td>-</td>
</tr>
<tr>
<td>querySelectorAll</td>
<td>NodeList(Array-like object)</td>
<td>0~n</td>
<td>空的NodeList</td>
<td>静态</td>
</tr>
</tbody></table>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/getElementById">getElementById</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/getElementsByClassName">getElementsByClassName</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelector">querySelector</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll">querySelectorAll</a>  </p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>dom</tag>
        <tag>element</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Usage</title>
    <url>/2023/04/16/Hexo-Usage/</url>
    <content><![CDATA[<h1 id="Hexo-Usage"><a href="#Hexo-Usage" class="headerlink" title="Hexo Usage"></a>Hexo Usage</h1><h2 id="How-to-Write-a-new-post"><a href="#How-to-Write-a-new-post" class="headerlink" title="How to Write a new post"></a>How to Write a new post</h2><ol>
<li>Generate new post in your terminal: <code>hexo new &quot;Your post name&quot;</code></li>
<li>Open your project by <code>vscode</code>, then open file: <code>source\_post\Your post name.md</code></li>
<li>Edit your post with vscode, hexo support <code>markdown</code> and <code>ejs</code> files</li>
</ol>
<h2 id="Clean-cache"><a href="#Clean-cache" class="headerlink" title="Clean cache"></a>Clean cache</h2><ol>
<li>After finish editing, you can type <code>hexo clean</code> in your terminal to clean the cache, <code>clean</code> is short for <code>clean</code> here.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<h2 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h2><ol>
<li>After finish editing, you can type <code>hexo g</code> in your terminal to generate static files, <code>g</code> is short for <code>generate</code> here.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<h2 id="Publish-your-post"><a href="#Publish-your-post" class="headerlink" title="Publish your post"></a>Publish your post</h2><ol>
<li>Type <code>hexo d</code> to deploy your post to github.io, <code>d</code> is short for <code>deploy</code> here.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h2 id="View-your-post"><a href="#View-your-post" class="headerlink" title="View your post"></a>View your post</h2><ol>
<li>open <code>zdd.github.io</code> to see your post, good job!</li>
</ol>
<p>you can use <code>npm run deploy</code> to combine generate and deploy in a single command.</p>
<h2 id="View-post-locally"><a href="#View-post-locally" class="headerlink" title="View post locally"></a>View post locally</h2><ol>
<li>Run <code>hexo s</code> in terminal, then open <code>localhost:4000</code> to see your post, this is very convenient to check your post before publish.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>


<h2 id="404-File-not-found"><a href="#404-File-not-found" class="headerlink" title="404 File not found"></a>404 File not found</h2><p>When you encounter the 404 error, make sure to do the following</p>
<ol>
<li>Check your <code>source\_post\Your post name.md</code> file name, make sure it is the same as the title in the file.</li>
<li>run <code>hexo clean</code> to clean the cache</li>
<li>run <code>hexo g</code> to generate static files</li>
<li>run <code>hexo d</code> to deploy your post to github.io</li>
</ol>
<h2 id="Tags-not-working"><a href="#Tags-not-working" class="headerlink" title="Tags not working"></a>Tags not working</h2><ol>
<li>Make sure you have a <code>tags</code> folder under <code>source</code> folder</li>
<li>Install easy tag plugin by <code>npm install hexo-easy-tags-plugin --save</code></li>
<li>Delete <code>.deploy_git</code> folder</li>
<li>Run <code>hexo clean</code> to clean the cache</li>
<li>Run <code>hexo g</code> to generate static files</li>
<li>Run <code>hexo d</code> to deploy your post to github.io</li>
<li>Force refresh your browser by <code>Ctrl + F5</code></li>
</ol>
<p>Make sure tags config in <code>themes\next\_config.yml</code> is correct, remember to set <code>amount</code> to a large number</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tagcloud:</span></span><br><span class="line">  <span class="comment"># All values below are same as default, change them by yourself.</span></span><br><span class="line">  <span class="attr">min:</span> <span class="number">12</span> <span class="comment"># Minimun font size in px</span></span><br><span class="line">  <span class="attr">max:</span> <span class="number">30</span> <span class="comment"># Maxium font size in px</span></span><br><span class="line">  <span class="attr">start:</span> <span class="string">&quot;#ccc&quot;</span> <span class="comment"># Start color (hex, rgba, hsla or color keywords)</span></span><br><span class="line">  <span class="attr">end:</span> <span class="string">&quot;#111&quot;</span> <span class="comment"># End color (hex, rgba, hsla or color keywords)</span></span><br><span class="line">  <span class="attr">amount:</span> <span class="number">2000</span> <span class="comment"># &lt;--------------- Set this to a large number</span></span><br></pre></td></tr></table></figure>

<h2 id="How-to-add-tags"><a href="#How-to-add-tags" class="headerlink" title="How to add tags"></a>How to add tags</h2><ol>
<li>Run <code>hexo new post &quot;tags&quot;</code></li>
<li>Make sure tags&#x2F;index.md has the following content<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2023-06-30 23:21:34</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Add-multiple-tags-for-a-post"><a href="#Add-multiple-tags-for-a-post" class="headerlink" title="Add multiple tags for a post"></a>Add multiple tags for a post</h2><ol>
<li>Add tags in the front matter of your post, for example:<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo Usage</span><br><span class="line">date: 2023-04-16 22:03:56</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">-</span> hexo</span><br><span class="line"><span class="section">- blog</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>How node.js handle environment variables</title>
    <url>/2023/11/14/How-node-js-handle-environment-variables/</url>
    <content><![CDATA[<h1 id="How-node-js-handle-environment-variables"><a href="#How-node-js-handle-environment-variables" class="headerlink" title="How node.js handle environment variables"></a>How node.js handle environment variables</h1><p>The following content was generated by “文心一言”, Have fun!</p>
<p>在 Node.js 中处理环境变量通常使用 process.env 对象。当你想要从不同的配置文件中加载环境变量时，需要一些额外的步骤。通常，我们不直接通过 Node.js 加载 .local.env或其他配置文件，而是通过一些库（如 dotenv）来完成这个任务。</p>
<h2 id="使用-dotenv-处理环境变量"><a href="#使用-dotenv-处理环境变量" class="headerlink" title="使用 dotenv 处理环境变量"></a>使用 dotenv 处理环境变量</h2><p>安装 dotenv:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install dotenv</span><br></pre></td></tr></table></figure>

<p>在代码中使用 dotenv:<br>你可以在代码的顶部require dotenv，并使用它加载环境变量。(默认情况下, dotenv会自动寻找项目根目录下的.env文件，如果想指定其他配置文件，可以通过path参数来控制)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).<span class="title function_">config</span>();</span><br></pre></td></tr></table></figure>

<p>创建配置文件:<br>通常，你可以创建一个 .env 文件在你的项目的根目录。这个文件可以包含环境变量，如：</p>
<p>.env 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PORT=3000  </span><br><span class="line">DATABASE_URL=mysql://user:password@localhost/dbname</span><br></pre></td></tr></table></figure>

<p><code>.local.env文件通常是用于本地开发的环境变量，这些变量不应该被提交到版本控制系统中（如 git）。你可以在你的.gitignore文件中添加.local.env 来确保它不会被提交。</code></p>
<p>访问环境变量:<br>你可以使用 process.env 对象来访问你加载的环境变量。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span>;  </span><br><span class="line"><span class="keyword">const</span> databaseUrl = process.<span class="property">env</span>.<span class="property">DATABASE_URL</span>;</span><br></pre></td></tr></table></figure>

<h2 id="配置文件的优先级"><a href="#配置文件的优先级" class="headerlink" title="配置文件的优先级"></a>配置文件的优先级</h2><p>当你有多个配置文件时，你需要确定哪个文件的优先级更高。例如，你可能有一个通用的 .env 文件，还有一个针对本地开发的 .local.env 文件。</p>
<p>通常，你可以在加载配置文件时确定优先级。例如，你可以首先加载 .local.env，然后再加载 .env。这样，.local.env 中的设置将覆盖 .env 文件中的设置。使用 dotenv 时，你可以这样做：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).<span class="title function_">config</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;.local.env&#x27;</span> &#125;);  </span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).<span class="title function_">config</span>();</span><br></pre></td></tr></table></figure>

<h2 id="示例：处理端口环境变量"><a href="#示例：处理端口环境变量" class="headerlink" title="示例：处理端口环境变量"></a>示例：处理端口环境变量</h2><p>假设你在 .env 文件中有以下设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PORT=3000</span><br></pre></td></tr></table></figure>

<p>在 .local.env 文件中有以下设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PORT=8080</span><br></pre></td></tr></table></figure>

<p>你可以这样加载和使用它们：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).<span class="title function_">config</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;.local.env&#x27;</span> &#125;); <span class="comment">// 加载 .local.env  </span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).<span class="title function_">config</span>(); <span class="comment">// 加载 .env  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);  </span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();  </span><br><span class="line"><span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span>; <span class="comment">// port = 8080，因为 .local.env 中的设置将覆盖 .env 中的设置。  </span></span><br><span class="line">  </span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on port <span class="subst">$&#123;port&#125;</span>`</span>);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在这个例子中，服务器将运行在 8080 端口上，因为 .local.env 中的 PORT 设置覆盖了 .env 文件中的设置。</p>
]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>node</tag>
        <tag>environment variables</tag>
        <tag>dotenv</tag>
        <tag>env</tag>
      </tags>
  </entry>
  <entry>
    <title>algorithm-dp-climb-stairs</title>
    <url>/2025/02/11/algorithm-dp-climb-stairs/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>一座楼梯有n个台阶，每一步可以走一个台阶，也可以走两个台阶，请问走完这座楼梯共有多少种方法? </p>
<p>这是一个经典的问题，俗称走台阶问题，此题有多种解法，我们分别看看每种解法的优劣。我们现推理一下递推关系，假设f(n)表示走n个台阶的方法数，那么：</p>
<ol>
<li>当n &#x3D; 1时，只有一种走法，即f(1) &#x3D; 1</li>
<li>当n &#x3D; 2时，有两种走法（每次走一个台阶:1-1，或者一次走两个台阶：2），即f(2) &#x3D; 2</li>
<li>当n &#x3D; 3时，有三种走法（1-1-1，1-2，2-1），即f(3) &#x3D; 3</li>
<li>当n &#x3D; n时，如果第一步走一个台阶，剩下n-1个台阶，有f(n-1)种走法；如果第一步走两个台阶，剩下n-2个台阶，有f(n-2)种走法，所以f(n) &#x3D; f(n-1) + f(n-2)</li>
</ol>
<h2 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h2><p>根据上面的递推关系，我们很容易写出递归解法，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">climbStairs</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">climbStairs</span>(n - <span class="number">1</span>) + <span class="title function_">climbStairs</span>(n - <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>递归法虽好，但是效率极其低下，当n &#x3D; 100时，程序就卡死了，我们来分析一下时间复杂度，当计算f(n)时，需要计算f(n-1)和f(n-2)，而计算f(n-1)时，需要计算f(n-2)和f(n-3)，依次类推，可以构造一个递归二叉树，其根节点是f(n)，左子树是f(n-1)，右子树是f(n-2)，左子树的左子树是f(n-2)，右子树是f(n-3)，以此类推，可以看出，递归法的时间复杂度是指数级别的，即O(2^n)。</p>
<p>以n &#x3D; 5为例，递归树如下：这里面f(3)被计算了2次，f(2)被计算了3次，f(1)被计算了2次。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">         f(5)</span><br><span class="line">        /    \</span><br><span class="line">     f(4)    f(3)</span><br><span class="line">     /  \    /  \</span><br><span class="line">  f(3) f(2) f(2) f(1)</span><br><span class="line">  /  \</span><br><span class="line">f(2) f(1)</span><br></pre></td></tr></table></figure>

<p>由于每个子问题被计算多次，所以这里面有大量的重复计算，为了避免重复计算，我们可以将计算过的结果存储起来，下次用到的时候直接使用存储的结果即可。这就是记忆化搜索（备忘录）方法。</p>
<h2 id="记忆化搜索-备忘录-解法"><a href="#记忆化搜索-备忘录-解法" class="headerlink" title="记忆化搜索(备忘录)解法"></a>记忆化搜索(备忘录)解法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">climbStairs</span>(<span class="params">n, memory = []</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果计算过，直接使用存储的结果</span></span><br><span class="line">    <span class="keyword">if</span> (memory[n] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> memory[n];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 计算并存储，不能直接return，必须先存放到memory[n]中</span></span><br><span class="line">      memory[n] = <span class="title function_">climbStairs</span>(n - <span class="number">1</span>, memory) + <span class="title function_">climbStairs</span>(n - <span class="number">2</span>, memory);</span><br><span class="line">      <span class="keyword">return</span> memory[n];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用记忆化搜索后，每个子问题只会被计算一次，时间复杂度降为O(n)，空间复杂度为O(n)。空间复杂度就是memory数组的长度。</p>
<h2 id="动态规划解法"><a href="#动态规划解法" class="headerlink" title="动态规划解法"></a>动态规划解法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">climbStairs1</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果台阶数小于等于2，直接返回n（因为1阶有1种方法，2阶有2种方法）</span></span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个数组dp，其中dp[i]表示到达第i个台阶的方法数</span></span><br><span class="line">  <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="title class_">Array</span>(n + <span class="number">1</span>);</span><br><span class="line">  dp[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// 第0阶没有意义，设为0</span></span><br><span class="line">  dp[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// 到达第1阶只有1种方法</span></span><br><span class="line">  dp[<span class="number">2</span>] = <span class="number">2</span>; <span class="comment">// 到达第2阶有2种方法</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 动态规划填表</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回到达第n阶的方法数</span></span><br><span class="line">  <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还能进一步优化吗?上面的空间复杂度是O(n)，我们可以看到，计算f(n)时只需要f(n-1)和f(n-2)的结果，所以我们只需要存储f(n-1)和f(n-2)的结果即可，不需要存储所有的结果。我们用两个变量来存储f(n-1)和f(n-2)的结果，然后依次计算f(n)，这就是迭代法。</p>
<h2 id="动态规划解法（优化空间）"><a href="#动态规划解法（优化空间）" class="headerlink" title="动态规划解法（优化空间）"></a>动态规划解法（优化空间）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">climbStairs</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> prev1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> prev2 = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      current = prev1 + prev2;</span><br><span class="line">      prev1 = prev2;</span><br><span class="line">      prev2 = current;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> current;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>迭代法的时间复杂度是O(n)，空间复杂度是O(1)。因为只使用了三个变量，所以空间复杂度是常数级别的。</p>
<h2 id="打印出所有走法"><a href="#打印出所有走法" class="headerlink" title="打印出所有走法"></a>打印出所有走法</h2><p>我们稍微拓展一下，如果想打印出所有的走法，该怎么做呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>时间复杂度和空间复杂度总结如下表：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>时间复杂度</th>
<th>空间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td>递归</td>
<td>O(2^n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>记忆化搜索</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>动态规划</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>动态规划（优化空间）</td>
<td>O(n)</td>
<td>O(1)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>dynamic programming</tag>
      </tags>
  </entry>
  <entry>
    <title>algorithm-backtracking-array-sum</title>
    <url>/2025/02/11/algorithm-backtracking-array-sum/</url>
    <content><![CDATA[<p>题目描述：<br>给定一个含有n个元素的整型数组a，再给定一个和sum，求出数组中满足给定和的所有元素组合，举个例子，设有数组a &#x3D; [1, 2, 3, 4, 5, 6]，sum &#x3D; 10，则满足和为10的所有组合是</p>
<ul>
<li>{ 1, 2, 3, 4 }</li>
<li>{ 1, 3, 6 }</li>
<li>{ 1, 4, 5 }</li>
<li>{ 2, 3, 5 }</li>
<li>{ 4, 6 }</li>
</ul>
<p>解题思路：</p>
<ol>
<li>核心逻辑：回溯法</li>
</ol>
<ul>
<li>递归尝试 ：从数组的第一个元素开始，尝试将每个元素加入当前组合。</li>
<li>撤销选择 ：如果某个元素被加入后不满足条件，则将其移除（回溯），继续尝试其他可能性。</li>
<li>终止条件 ：<ul>
<li>如果当前组合的和等于目标值 sum，记录该组合。</li>
<li>如果当前组合的和超过目标值 sum，停止进一步尝试（剪枝）。</li>
</ul>
</li>
</ul>
<ol start="2">
<li>关键点：避免重复组合<br>在递归调用中，参数 start 表示当前遍历的起始位置。通过设置 start，确保每次递归只从当前元素或其后面的元素中选择，从而避免生成重复的组合。</li>
<li>剪枝优化<br>如果当前组合的和已经超过目标值 sum，则直接返回，不再继续递归。这可以显著减少不必要的计算。</li>
</ol>
<p>代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findCombinations</span>(<span class="params">a, sum</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = []; <span class="comment">// 用于存储所有满足条件的组合</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 回溯函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">backtrack</span>(<span class="params">start, currentCombination, currentSum</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果当前组合的和等于目标值，记录这个组合</span></span><br><span class="line">    <span class="keyword">if</span> (currentSum === sum) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>([...currentCombination]); <span class="comment">// 深拷贝当前组合</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前组合的和超过目标值，直接返回（剪枝）</span></span><br><span class="line">    <span class="keyword">if</span> (currentSum &gt; sum) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历数组，尝试将每个元素加入当前组合</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; a.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      currentCombination.<span class="title function_">push</span>(a[i]); <span class="comment">// 选择当前元素</span></span><br><span class="line">      <span class="title function_">backtrack</span>(i + <span class="number">1</span>, currentCombination, currentSum + a[i]); <span class="comment">// 递归调用</span></span><br><span class="line">      currentCombination.<span class="title function_">pop</span>(); <span class="comment">// 撤销选择（回溯）</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用回溯函数</span></span><br><span class="line">  <span class="title function_">backtrack</span>(<span class="number">0</span>, [], <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>android-grade-settings</title>
    <url>/2024/10/05/android-grade-settings/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Today I got the following error after upgrade to Android Studio LadyBug.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Your build is currently configured to use Java 21.0.3 and Gradle 8.0.</span><br></pre></td></tr></table></figure>
<p>So I reinstall the old version android studio Koala and the error still exists. So I google it and found the following solution on stackoverflow.</p>
<ol>
<li>Open File | Settings | Build, Execution, Deployment | Build Tools | Gradle</li>
<li>Downgrade the JDK version to previous version, for example jbr-17.</li>
</ol>
<p><img src="/../images/android-studio-gradle-jdk.png" alt="android-grade-settings"></p>
<p>The reason that old version still not work is because after upgrade Android Studio to LadyBug, it automatically set Java 21.0.3 and Gradle 8.0. Even if you downgrade the Android Studio, the settings still remain the same. So you need to manually change the settings to make it work.</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>gradle</tag>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript for ... of</title>
    <url>/2023/05/14/Javascript%E4%B8%AD%E7%9A%84for-of%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h2 id="for-…-of-功能"><a href="#for-…-of-功能" class="headerlink" title="for … of 功能"></a>for … of 功能</h2><p>javascript中的<code>for ... of</code>语句用来遍历可迭代对象，比如遍历数组可以使用如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可迭代对象有很多，包括以下这些：</p>
<ol>
<li>Array</li>
<li>String</li>
<li>TypeArray</li>
<li>Map</li>
<li>Set</li>
<li>NodeList(and other DOM collections)</li>
<li>Array like objects(<code>arguments</code>)</li>
<li>generators produced by generator functions</li>
<li>User-defined iterables.</li>
</ol>
<h2 id="for-…-of-执行原理"><a href="#for-…-of-执行原理" class="headerlink" title="for … of 执行原理"></a>for … of 执行原理</h2><p><code>for ... of</code>首先会调用可迭代对象的<code>@@iterator()</code>方法获取一个<code>iterator</code>,然后反复调用这个<code>iterator</code>的<code>next</code>方法来获取对应的值。</p>
<h2 id="for-…-of-何时结束迭代？"><a href="#for-…-of-何时结束迭代？" class="headerlink" title="for … of 何时结束迭代？"></a>for … of 何时结束迭代？</h2><p>以下三种情况都会导致for … of结束迭代。</p>
<ol>
<li>遇到<code>break</code>语句</li>
<li>遇到<code>continue</code>语句</li>
<li><code>iterator</code>的<code>next</code>方法返回 <code>done: true</code>时（也就是正常遍历结束）</li>
</ol>
<h2 id="for-…-of-不会修改被迭代的对象"><a href="#for-…-of-不会修改被迭代的对象" class="headerlink" title="for … of 不会修改被迭代的对象"></a>for … of 不会修改被迭代的对象</h2><p>for … of底层使用generator实现，每次迭代都会生成一个新的变量，所以不会改变被迭代的对象。下面的代码将数组中每个值加1，并不会改变原来的数组，因为变量<code>num</code>时迭代时生成的，而且每次迭代就重新生成一个。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">  num += <span class="number">1</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 2, 3, 4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums); <span class="comment">// still [1, 2, 3]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="for-…-of-中可以使用destruction"><a href="#for-…-of-中可以使用destruction" class="headerlink" title="for … of 中可以使用destruction"></a>for … of 中可以使用destruction</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> students = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Cindy&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> &#123; name, age &#125; <span class="keyword">of</span> students) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="何时使用经典的for循环？"><a href="#何时使用经典的for循环？" class="headerlink" title="何时使用经典的for循环？"></a>何时使用经典的for循环？</h2><p>所谓经典for循环就是使用下标遍历的循环，类似C语言中的for循环。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>是否使用经典的for循环有一个简单的判断标准，在遍历的过程中是否要改变原数组，如果需要，就使用，否则就可以使用其他循环代替，比如for … of, forEach, filter, map, reduce等。</p>
<h2 id="for…of-vs-for…in"><a href="#for…of-vs-for…in" class="headerlink" title="for…of vs for…in"></a>for…of vs for…in</h2><p><code>for ... of</code>和<code>for ... in</code>都是用来遍历对象的，但是有一些区别：</p>
<ol>
<li><code>for ... of</code>遍历的是<code>可迭代</code>对象，而<code>for ... in</code>遍历的是<code>可枚举</code>对象。</li>
<li><code>for ... of</code>遍历的是值，而<code>for ... in</code>遍历的是键。</li>
</ol>
<h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>对于数组来说，<code>for ... of</code>遍历的是数组的值，而<code>for ... in</code>遍历的是数组的键（下标）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">nums.<span class="property">foo</span> = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 1, 2, 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> nums) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key); <span class="comment">// 0, 1, 2, foo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>在对象上使用<code>for ... of</code>会报错，因为对象不是可迭代对象，但是可以使用<code>for ... in</code>来遍历对象的键。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">  <span class="attr">baz</span>: <span class="string">&quot;qux&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// TypeError: obj is not iterable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key); <span class="comment">// 0, 1, 2, foo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>for...of</code>可以对<code>Object.keys</code>或者<code>Object.values</code>来进行遍历。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">  <span class="attr">baz</span>: <span class="string">&quot;qux&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key); <span class="comment">// foo, baz</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(obj)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// bar, qux</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>loop</tag>
      </tags>
  </entry>
  <entry>
    <title>android-sdk-location</title>
    <url>/2024/10/04/android-sdk-location/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>There are two types of SDK location in Android, global SDK location which is used by all projects and project SDK location which is used by a specific project.</p>
<h2 id="Global-SDK-Location"><a href="#Global-SDK-Location" class="headerlink" title="Global SDK Location"></a>Global SDK Location</h2><p>In Android Studio, open <code>File | Settings | Languages &amp; Frameworks | Android SDK</code>. Here you can see the <code>global</code> SDK location.<br><img src="/../images/android-sdk-global.png" alt="Android SDK Location"></p>
<h2 id="Project-SDK-Location"><a href="#Project-SDK-Location" class="headerlink" title="Project SDK Location"></a>Project SDK Location</h2><ol>
<li>Open Android Studio, go to <code>File</code> -&gt; <code>Project Structure</code> -&gt; <code>SDK Location</code>. Here you can see the <code>project</code> SDK location.<br><img src="/../images/android-sdk-local.png" alt="Android SDK Location"></li>
<li>If your project has file <code>local.properties</code>, you can specify the project SDK location by adding <code>sdk.dir=/path/to/android/sdk</code> in the file. For example:</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">sdk.dir</span>=<span class="string">D\:\\cache\\android_sdk</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>sdk</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular-Misc</title>
    <url>/2023/08/19/angular-Misc/</url>
    <content><![CDATA[<h1 id="Angular杂项"><a href="#Angular杂项" class="headerlink" title="Angular杂项"></a>Angular杂项</h1><h2 id="什么操作会触发Angular执行change-detection？"><a href="#什么操作会触发Angular执行change-detection？" class="headerlink" title="什么操作会触发Angular执行change detection？"></a>什么操作会触发Angular执行change detection？</h2><p>这个问题一直没有搞明白，有待进一步研究。<br><a href="https://angular.io/guide/change-detection">https://angular.io/guide/change-detection</a><br><a href="https://www.youtube.com/watch?v=-tB-QDrPmuI">https://www.youtube.com/watch?v=-tB-QDrPmuI</a></p>
<p>这个问题，现在大概了解了一些，Angular内部使用Zone.js来实现change detection，Zone.js对所有异步操作都进行了monkey patch，当有异步操作发生时，Angular会自动进行更新检测。所以这些动作会出发Angular执行change detection：</p>
<ol>
<li>setTimeout&#x2F;setInterval</li>
<li>XMLHttpRequest&#x2F;fetch</li>
<li>EventListener： click, mouseover, keydown, …</li>
<li>Promise.then</li>
<li>Async&#x2F;Await</li>
</ol>
<h2 id="Change-detection相关参考资料"><a href="#Change-detection相关参考资料" class="headerlink" title="Change detection相关参考资料"></a>Change detection相关参考资料</h2><ol>
<li><a href="https://blog.angular-university.io/how-does-angular-2-change-detection-really-work/">https://blog.angular-university.io/how-does-angular-2-change-detection-really-work/</a> - 尚未阅读。</li>
<li><a href="https://hackernoon.com/everything-you-need-to-know-about-change-detection-in-angular-8006c51d206f">https://hackernoon.com/everything-you-need-to-know-about-change-detection-in-angular-8006c51d206f</a> - 这个比较老了，用的还是Angular4.0的源码讲解的。</li>
<li><a href="https://stackoverflow.com/questions/42643389/why-do-we-need-ngdocheck/42807309#42807309">https://stackoverflow.com/questions/42643389/why-do-we-need-ngdocheck/42807309#42807309</a> - ngDoCheck的作用。</li>
</ol>
<h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><ul>
<li><a href="#monkey-patching">Monkey Patching</a>  </li>
<li><a href="#private-variable">Private Variable</a></li>
</ul>
<h2 id="在AOT编译器下，Private变量无法绑定到模板中。"><a href="#在AOT编译器下，Private变量无法绑定到模板中。" class="headerlink" title="在AOT编译器下，Private变量无法绑定到模板中。"></a>在AOT编译器下，Private变量无法绑定到模板中。</h2><p><a name="private-variable"></a>如果在组件中定义了一个私有变量，是不能使用双括弧绑定到模板中的，比如下面的代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-order&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./order.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./order.component.less&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderComponent</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样写是不行的，因为在AOT编译器下，私有变量会被删除，所以无法绑定到模板中，如果想要绑定到模板中，需要将变量定义为公共变量，或者使用<code>get</code>方法，如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-order&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./order.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./order.component.less&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderComponent</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> _count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">count</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_count</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者使用getCount()方法，如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-order&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./order.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./order.component.less&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderComponent</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">getCount</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;getCount()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="AOT-vs-JIT"><a href="#AOT-vs-JIT" class="headerlink" title="AOT vs JIT"></a>AOT vs JIT</h2><h2 id="Monkey-Patching"><a href="#Monkey-Patching" class="headerlink" title="Monkey Patching"></a>Monkey Patching</h2><p><a name="monkey-patching"></a>In computer programming, monkey patching is a technique used to dynamically update the behavior of a piece of code at run-time. It is used to extend or modify the runtime code of dynamic languages such as Smalltalk, JavaScript, Objective-C, Ruby, Perl, Python, Groovy, and Lisp without altering the original source code. - <a href="https://en.wikipedia.org/wiki/Monkey_patch">Wikipedia</a></p>
<h2 id="Angular找不到selector对应的组件时，不会报错。"><a href="#Angular找不到selector对应的组件时，不会报错。" class="headerlink" title="Angular找不到selector对应的组件时，不会报错。"></a>Angular找不到selector对应的组件时，不会报错。</h2><p>如果你在Angular template中使用了一个选择器，但是这个选择器没有对应任何组件，那么Angular不会报错，只会将选择器当作一个普通的HTML标签处理。这个问题在开发过程中很容易出现，因为Angular不会报错，所以很难发现。</p>
<h2 id="ng-repeat-vs-ngFor"><a href="#ng-repeat-vs-ngFor" class="headerlink" title="ng-repeat vs ngFor"></a><code>ng-repeat</code> vs <code>ngFor</code></h2><ul>
<li><code>ng-repeat</code>是AngularJS中的指令，用于循环遍历数组或对象。</li>
<li><code>ngFor</code>是Angular中的指令，用于循环遍历数组或对象。</li>
</ul>
<h2 id="Angular中的viewProviders和providers"><a href="#Angular中的viewProviders和providers" class="headerlink" title="Angular中的viewProviders和providers"></a>Angular中的viewProviders和providers</h2><p>竟然还有viewProvider?真是孤陋寡闻了。</p>
<h2 id="基于配置的换肤方案"><a href="#基于配置的换肤方案" class="headerlink" title="基于配置的换肤方案"></a>基于配置的换肤方案</h2><p>因为Angular的模板和样式是在Component元数据中指定的，所以我们可以定义一个变量用来控制模板和样式的变化，从而实现换肤功能。</p>
<p>首先：我们在<code>config</code>目录下新建一个<code>theme.ts</code>文件，用来存放主题相关的配置。这里我们定义一个<code>USE_LIGHT_THEME</code>变量，用来控制是否使用浅色主题。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config/theme.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">USE_LIGHT_THEME</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>然后：我们在<code>app.component.ts</code>中引入<code>USE_LIGHT_THEME</code>变量，根据这个变量的值来选择不同的模板和样式。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">USE_LIGHT_THEME</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./config/theme&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="variable constant_">USE_LIGHT_THEME</span> ? <span class="string">&#x27;./app.component-light.html&#x27;</span> : <span class="string">&#x27;./app.component-dark.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: <span class="variable constant_">USE_LIGHT_THEME</span> ? [<span class="string">&#x27;./app.component-light.css&#x27;</span>] : [<span class="string">&#x27;./app.component-dark.css&#x27;</span>],</span><br></pre></td></tr></table></figure>

<p>以上就是一个简单的实现方式，通过更改<code>USE_LIGHT_THEME</code>的值，就可以实现换肤功能。使用这种方法时，我们可以为已有的项目添加换肤功能，而不需要修改原有的代码，只需为每个组件添加一个额外的模板和样式文件即可。（有的甚至只需要添加一个样式文件就行了）。</p>
<h2 id="如何让Angular每五分钟进行一次更新检测？"><a href="#如何让Angular每五分钟进行一次更新检测？" class="headerlink" title="如何让Angular每五分钟进行一次更新检测？"></a>如何让Angular每五分钟进行一次更新检测？</h2><p>为什么会有如此奇怪的需求呢，现实中还真有。比如我们使用websocket来实时更新数据，但是websocket的数据更新不会触发Angular的change detection，所以我们需要定时调用<code>ChangeDetectorRef.detectChanges()</code>方法来手动触发更新检测。</p>
<p>这里的做法是首先使用<code>ChangeDetectorRef.detach()</code>方法来暂时关闭自动更新检测，然后使用<code>setInterval()</code>方法每隔5秒调用一次<code>ChangeDetectorRef.detectChanges()</code>方法来手动触发更新检测。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">ref</span>: <span class="title class_">ChangeDetectorRef</span></span>) &#123;</span><br><span class="line">  ref.<span class="title function_">detach</span>();</span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ref</span>.<span class="title function_">detectChanges</span>();</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HostBinding主要用来做什么？"><a href="#HostBinding主要用来做什么？" class="headerlink" title="HostBinding主要用来做什么？"></a>HostBinding主要用来做什么？</h2><p><code>HostBinding</code>装饰器用来绑定宿主元素的属性，比如下面的例子，我们使用<code>HostBinding</code>装饰器将<code>class</code>属性绑定到<code>app-root</code>元素上。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="meta">@HostBinding</span>(<span class="string">&#x27;class&#x27;</span>) <span class="keyword">class</span> = <span class="string">&#x27;app-root&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就相当于在<code>app-root</code>元素上添加了一个<code>class=&quot;app-root&quot;</code>属性。</p>
<h2 id="MDC"><a href="#MDC" class="headerlink" title="MDC"></a>MDC</h2><p>MDC &#x3D; Material Design Components.</p>
<h2 id="Angular-challenges"><a href="#Angular-challenges" class="headerlink" title="Angular challenges"></a>Angular challenges</h2><p><a href="https://angular-challenges.vercel.app/guides/getting-started/">https://angular-challenges.vercel.app/guides/getting-started/</a></p>
<h2 id="Angular-interview"><a href="#Angular-interview" class="headerlink" title="Angular interview."></a>Angular interview.</h2><p><a href="https://creators.spotify.com/pod/show/daniel-glejzner/episodes/Angular-Job-Interview---with-GDE-Chau-Tran--Brecht-Billiet-e22mf51/a-a9mqru9">https://creators.spotify.com/pod/show/daniel-glejzner/episodes/Angular-Job-Interview---with-GDE-Chau-Tran--Brecht-Billiet-e22mf51/a-a9mqru9</a></p>
<h2 id="Angular-zone-js"><a href="#Angular-zone-js" class="headerlink" title="Angular zone.js"></a>Angular zone.js</h2><ol>
<li><a href="https://angular.love/from-zone-js-to-zoneless-angular-and-back-how-it-all-works">https://angular.love/from-zone-js-to-zoneless-angular-and-back-how-it-all-works</a></li>
<li><a href="https://dev.to/vivekdogra02/angular-zonejs-change-detection-understanding-the-core-concepts-16ek">https://dev.to/vivekdogra02/angular-zonejs-change-detection-understanding-the-core-concepts-16ek</a></li>
<li><a href="https://medium.com/@krzysztof.grzybek89/how-runoutsideangular-might-reduce-change-detection-calls-in-your-app-6b4dab6e374d">https://medium.com/@krzysztof.grzybek89/how-runoutsideangular-might-reduce-change-detection-calls-in-your-app-6b4dab6e374d</a></li>
<li><a href="https://medium.com/@sehban.alam/what-is-zone-js-in-angular-e0029c21c32f">https://medium.com/@sehban.alam/what-is-zone-js-in-angular-e0029c21c32f</a></li>
<li><a href="https://www.youtube.com/watch?v=pGBh5oNB2wE">https://www.youtube.com/watch?v=pGBh5oNB2wE</a></li>
</ol>
<h2 id="UI-framework"><a href="#UI-framework" class="headerlink" title="UI framework"></a>UI framework</h2><ol>
<li>PrimeNg - <a href="https://primeng.org/">https://primeng.org/</a></li>
<li>Angular Material - <a href="https://material.angular.io/">https://material.angular.io/</a></li>
<li>DevUI - <a href="https://devui.design/home">https://devui.design/home</a></li>
</ol>
<h2 id="Angular-Form"><a href="#Angular-Form" class="headerlink" title="Angular Form"></a>Angular Form</h2><ol>
<li>Template-driven form</li>
<li>Reactive form</li>
</ol>
<h2 id="ngModel-使用双向绑定必须先导入FormsModule模块。"><a href="#ngModel-使用双向绑定必须先导入FormsModule模块。" class="headerlink" title="[(ngModel)] 使用双向绑定必须先导入FormsModule模块。"></a>[(ngModel)] 使用双向绑定必须先导入FormsModule模块。</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormsModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">FormsModule</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="如何查看Angular编译后的结果？"><a href="#如何查看Angular编译后的结果？" class="headerlink" title="如何查看Angular编译后的结果？"></a>如何查看Angular编译后的结果？</h2><p>可以使用<code>ngc</code>命令，详情看这里：<a href="https://zdd.github.io/2024/05/21/angular-ngc/">https://zdd.github.io/2024/05/21/angular-ngc/</a></p>
<h2 id="各种Ref"><a href="#各种Ref" class="headerlink" title="各种Ref"></a>各种Ref</h2><ol>
<li>ChangeDetectorRef - 构造函数注入，用于手动触发更新检测。</li>
<li>ElementRef - 构造函数注入，用于获取当前元素的引用, 常用于自定义指令。</li>
<li>ComponentRef - 用于获取组件实例。</li>
<li>ViewContainerRef - 构造函数注入，用于动态创建组件。</li>
<li>TemplateRef - 构造函数注入，用于动态创建组件。</li>
<li>EmbeddedViewRef - </li>
<li>ViewRef</li>
</ol>
<h2 id="发现一个Angular宝藏"><a href="#发现一个Angular宝藏" class="headerlink" title="发现一个Angular宝藏"></a>发现一个Angular宝藏</h2><ol>
<li><a href="https://angular.love/">https://angular.love/</a> - 有空整个通读一下吧，质量非常之高！</li>
<li><a href="https://angular-university.io/">https://angular-university.io/</a> - 这个质量就一般了。</li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular - Integrate Jest to Angular App</title>
    <url>/2023/06/07/angular-Integrate-Jest-to-Angular-App/</url>
    <content><![CDATA[<h1 id="Integrate-Jest-to-Angular-App"><a href="#Integrate-Jest-to-Angular-App" class="headerlink" title="Integrate Jest to Angular App"></a>Integrate Jest to Angular App</h1><ol>
<li>Create your angular app</li>
<li>Install jest<br><code>npm install jest jest-preset-angular @types/jest</code></li>
<li>In your project root, create a setup-jest.ts file with the following contents:<br><code>import &#39;jest-preset-angular/setup-jest&#39;;</code></li>
<li>Create the jest.config.js file in your project root directory with the following contents:  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">preset</span>: <span class="string">&#x27;jest-preset-angular&#x27;</span>,</span><br><span class="line">  <span class="attr">setupFilesAfterEnv</span>: [<span class="string">&#x27;&lt;rootDir&gt;/setup-jest.ts&#x27;</span>],</span><br><span class="line">  <span class="attr">globalSetup</span>: <span class="string">&#x27;jest-preset-angular/global-setup&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>Adjust your <code>tsconfig.spec.json</code> in your project root<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;extends&quot;</span>: <span class="string">&quot;./tsconfig.json&quot;</span>,  </span><br><span class="line">   <span class="string">&quot;compilerOptions&quot;</span>: &#123;  </span><br><span class="line">      <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./out-tsc/spec&quot;</span>,  </span><br><span class="line">      <span class="string">&quot;module&quot;</span>: <span class="string">&quot;CommonJs&quot;</span>,  </span><br><span class="line">      <span class="string">&quot;types&quot;</span>: [<span class="string">&quot;jest&quot;</span>]  </span><br><span class="line">   &#125;,  </span><br><span class="line">   <span class="string">&quot;include&quot;</span>: [<span class="string">&quot;src/**/*.spec.ts&quot;</span>, <span class="string">&quot;src/**/*.d.ts&quot;</span>]  </span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></li>
<li>update <code>package.json</code> file in your project root as below.<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;test&quot;</span>: <span class="string">&quot;jest --verbose&quot;</span>,</span><br><span class="line"><span class="string">&quot;test:watch&quot;</span>: <span class="string">&quot;jest --watch&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>Open your terminal and run <code>npm run test</code>, enjoy!</li>
<li>If you want to remove <code>karma</code> and <code>Jasmine</code> and switch to <code>Jest</code> completely, run the following command.<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall karma karma-chrome-launcher karma-coverage-istanbul-reporter karma-jasmine karma-jasmine-html-reporter jasmine-core jasmine-spec-reporter</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="references"><a href="#references" class="headerlink" title="references:"></a>references:</h2><p><a href="https://www.xfive.co/blog/testing-angular-faster-jest/">xfive.co&#x2F;blog&#x2F;testing-angular-faster-jest&#x2F;</a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>jest</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-assets-config</title>
    <url>/2024/10/01/angular-assets-config/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>How Angular handles assets file such as images, fonts and other static files in the project.</p>
<h2 id="Angular-18"><a href="#Angular-18" class="headerlink" title="Angular 18+"></a>Angular 18+</h2><p>The following config from <code>angular.json</code> indicates that the Angular builder will copy everything under <code>public</code> folder to the outputPath: <code>dist</code> folder.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;assets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;glob&quot;</span><span class="punctuation">:</span> <span class="string">&quot;**/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>So</p>
<ol>
<li>Put your logo file(angular.svg) under <code>public</code> folder</li>
<li>In your component file, you can just use it as below:</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;angular.svg&quot;</span> alt=<span class="string">&quot;Angular Logo&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>To verify whether the image was in the final build, you can run the following command and check the <code>dist</code> folder under project root.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng build</span><br></pre></td></tr></table></figure>

<p>If you want to use the old way, you can config <code>angular.json</code> file as below, in this config, we copy everything under <code>src/assets</code> folder to <code>dist</code> folder.(Note, if you omit the <code>output</code> option, the assets folder will not copied, it only copy <code>images</code> folder)</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;assets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;glob&quot;</span><span class="punctuation">:</span> <span class="string">&quot;**/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;glob&quot;</span><span class="punctuation">:</span> <span class="string">&quot;**/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/assets&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/assets&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>Then use it in your component file as below:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;assets/images/angular.svg&quot;</span> alt=<span class="string">&quot;Angular Logo&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Before-Angular-18"><a href="#Before-Angular-18" class="headerlink" title="Before Angular 18"></a>Before Angular 18</h2><p><code>angular.json</code> config</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;assets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="string">&quot;src/favicon.ico&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;src/assets&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>Asset file path: <code>src/assets/images/angular.svg</code></p>
<p>Use it in your component file as below:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;assets/images/angular.svg&quot;</span> alt=<span class="string">&quot;Angular Logo&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://angular.dev/reference/configs/workspace-config#assets-configuration">https://angular.dev/reference/configs/workspace-config#assets-configuration</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>asset</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-auxiliary-secondary-router</title>
    <url>/2024/05/11/angular-auxiliary-secondary-router/</url>
    <content><![CDATA[<p>Angular对路由的支持非常强大，可以实现多种路由模式，本文主要介绍辅助路由。</p>
<h2 id="辅助路由"><a href="#辅助路由" class="headerlink" title="辅助路由"></a>辅助路由</h2><p>辅助路由（auxiliary route）是一种特殊的路由，它的主要应用场景是为当前页面添加弹窗，主路由和辅助路由对应的组件同时显示，当关闭辅助路由组件（弹窗）时，主路由仍然保持显示。</p>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="创建Project"><a href="#创建Project" class="headerlink" title="创建Project"></a>创建Project</h3><p>首先参考<a href="https://zdd.github.io/2024/05/05/angular-how-to-create-an-angular-app/">这篇</a>创建一个Angular项目。注意从<code>Angular 17</code>开始，默认就使用<code>Standalone Component</code>来创建组件了，不在使用<code>NgModule</code>了。</p>
<h3 id="添加路由配置"><a href="#添加路由配置" class="headerlink" title="添加路由配置"></a>添加路由配置</h3><p>打开<code>app.routes.ts</code>文件，添加路由配置：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;book&#x27;</span>, <span class="attr">component</span>: <span class="title class_">BookComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;book-detail&#x27;</span>, <span class="attr">outlet</span>: <span class="string">&#x27;detail&#x27;</span>, <span class="attr">component</span>: <span class="title class_">BookDetailComponent</span>&#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h3 id="添加router-outlet"><a href="#添加router-outlet" class="headerlink" title="添加router-outlet"></a>添加<code>router-outlet</code></h3><p>在<code>app.component.html</code>文件中添加<code>router-outlet</code>：从Angular17开始，可以使用自关闭组件了，也就是说<code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>可以简化为<code>&lt;router-outlet /&gt;</code>，注意第二个<code>outlet</code>添加了<code>name</code>属性，用来给<code>outlet</code>命名。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span> <span class="attr">name</span>=<span class="string">&quot;detail&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="添加book组件"><a href="#添加book组件" class="headerlink" title="添加book组件"></a>添加<code>book</code>组件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng generate component book</span><br></pre></td></tr></table></figure>

<p>在<code>book</code>组件的模板文件中添加一个按钮，点击按钮时显示<code>book-detail</code>组件：</p>
<p>打开<code>book.component.html</code>，添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>book works!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;openBookDetail()&quot;</span>&gt;</span>Book Detail<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打开<code>book.component.ts</code>，添加按钮点击事件处理函数，这里调用<code>navigate</code>方法来实现路由跳转。注意该方法的第一个参数是数组，如果要跳转到命名的<code>outlet</code>, 则格式为：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="attr">outlets</span>: &#123;outlet-<span class="attr">name</span>: <span class="string">&#x27;path-name&#x27;</span>&#125;&#125;]</span><br></pre></td></tr></table></figure>
<p>以下代码中： <code>detail</code>为命名的<code>outlet</code>，<code>book-detail</code>为<code>path-name</code>。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">BookComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">router</span>: <span class="title class_">Router</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">openBookDetail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([&#123;<span class="attr">outlets</span>: &#123;<span class="attr">detail</span>: <span class="string">&#x27;book-detail&#x27;</span>&#125;&#125;]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加book-detail组件"><a href="#添加book-detail组件" class="headerlink" title="添加book-detail组件"></a>添加<code>book-detail</code>组件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng generate component book-detail</span><br></pre></td></tr></table></figure>

<p>打开<code>book-detail.component.html</code>，添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;book-detail&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;book-detail-title&quot;</span>&gt;</span>Book Detail<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;book-detail-body&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Book name: XXX<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Author: XXX<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Price: XXX<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Category: XXX<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Published date: XXX<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Quantity: XXX<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;close-button&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;closeBookDetail()&quot;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打开<code>book-detail.component.ts</code>，添加按钮点击事件处理函数：这里将<code>path</code>设置为<code>null</code>，表示关闭对应的组件。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">BookDetailComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">router</span>: <span class="title class_">Router</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">closeBookDetail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([&#123;<span class="attr">outlets</span>: &#123;<span class="attr">detail</span>: <span class="literal">null</span>&#125;&#125;]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng serve</span><br></pre></td></tr></table></figure>

<p>打开浏览器，访问<code>http://localhost:4200/book</code></p>
<p><img src="/../images/angular-auxiliary-router-book.png" alt="alt text"></p>
<p>点击<code>Book Detail</code>按钮，弹出<code>book-detail</code>组件，此时路由变华为<code>https://localhost:4200/book(detail:book-detail)</code>。</p>
<ul>
<li>detail: 表示辅助路由的名称，定义在<code>outlet</code>属性中。</li>
<li>book-detail: 表示辅助路由的路径。定义在<code>router</code>文件中。</li>
</ul>
<p><img src="/../images/angular-auxiliary-router-book-detail.png" alt="alt text"></p>
<p>点击弹窗上的关闭按钮，关闭<code>book-detail</code>组件，路由恢复为<code>http://localhost:4200/book</code>。</p>
<h2 id="同时显示多个辅助路由。"><a href="#同时显示多个辅助路由。" class="headerlink" title="同时显示多个辅助路由。"></a>同时显示多个辅助路由。</h2><p>添加一个<code>book-list</code>组件，点击<code>Book List</code>按钮时显示<code>book-list</code>弹窗。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng generate component book-list</span><br></pre></td></tr></table></figure>

<p>打开<code>book-list.component.html</code>文件，添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;book-list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;book-list-title&quot;</span>&gt;</span>Book List<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;book-list-body&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Book 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Book 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Book 3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Book 4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;close-button&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;closeBookList()&quot;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打开<code>book-list.component.ts</code>文件，添加如下代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">BookListComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">router</span>: <span class="title class_">Router</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">closeBookList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([&#123;<span class="attr">outlets</span>: &#123;<span class="attr">list</span>: <span class="literal">null</span>&#125;&#125;]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打开<code>book-list.component.css</code>  添加样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.book-list</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">30%</span>, -<span class="number">30%</span>);</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">9</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid gray;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.close-button</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打开<code>book.component.html</code>文件，添加<code>Book List</code>按钮：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>book works!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;openBookList()&quot;</span>&gt;</span>Book List<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;openBookDetail()&quot;</span>&gt;</span>Book Detail<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打开<code>book.component.ts</code>文件，添加按钮点击事件处理函数：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">openBookList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([&#123;<span class="attr">outlets</span>: &#123;<span class="attr">list</span>: <span class="string">&#x27;book-list&#x27;</span>&#125;&#125;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>app.routes.ts</code>文件中添加路由配置：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;book&#x27;</span>, <span class="attr">component</span>: <span class="title class_">BookComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;book-list&#x27;</span>, <span class="attr">outlet</span>: <span class="string">&#x27;list&#x27;</span>, <span class="attr">component</span>: <span class="title class_">BookListComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;book-detail&#x27;</span>, <span class="attr">outlet</span>: <span class="string">&#x27;detail&#x27;</span>, <span class="attr">component</span>: <span class="title class_">BookDetailComponent</span>&#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>打开<code>app.component.html</code>文件，添加<code>Book List</code>对应的<code>outlet</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span> <span class="attr">name</span>=<span class="string">&quot;detail&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>在次运行项目，依次点击<code>Book List</code>和<code>Book Detail</code>按钮，可以同时显示两个弹窗。观察此时路由的变化，注意有多个辅助路由时，按照路由outlet名字的字符串顺序显示，因为detail排在list前面，所以先显示detail，再显示list。无论先点击哪个按钮，路由顺序皆如此。</p>
<p><img src="/../images/angular-auxiliary-router-multiple-routers.png" alt="alt text"></p>
<p><code>http://localhost:4200/book(detail:book-detail//list:book-list)</code></p>
<ul>
<li><code>detail</code>: 表示辅助路由的名称，定义在<code>outlet</code>属性中。</li>
<li><code>book-detail</code>: 表示辅助路由的路径。定义在<code>router</code>文件中。</li>
<li><code>list</code>: 表示辅助路由的名称，定义在<code>outlet</code>属性中。</li>
<li><code>book-list</code>: 表示辅助路由的路径。定义在<code>router</code>文件中。</li>
<li><code>//</code>: 用来分隔多个辅助路由。</li>
</ul>
<h2 id="不更改URL显示辅助路由"><a href="#不更改URL显示辅助路由" class="headerlink" title="不更改URL显示辅助路由"></a>不更改URL显示辅助路由</h2><p>默认情况下，点击按钮后，路由会发生变化，URL会显示辅助路由的路径。如果不想更改URL，可以使用<code>skipLocationChange</code>选项。<br>在<code>book.component.ts</code>文件中，添加按钮点击事件处理函数：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">openBookList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([&#123;<span class="attr">outlets</span>: &#123;<span class="attr">list</span>: <span class="string">&#x27;book-list&#x27;</span>&#125;&#125;], &#123;<span class="attr">skipLocationChange</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">openBookDetail</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([&#123;<span class="attr">outlets</span>: &#123;<span class="attr">detail</span>: <span class="string">&#x27;book-detail&#x27;</span>&#125;&#125;], &#123;<span class="attr">skipLocationChange</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，如果有多个辅助路由，也要在关闭按钮点击事件处理函数中添加<code>skipLocationChange</code>选项，否则关闭一个弹窗时，另一个弹窗的URL会显示在地址栏中。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">closeBookList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([&#123;<span class="attr">outlets</span>: &#123;<span class="attr">list</span>: <span class="literal">null</span>&#125;&#125;], &#123;<span class="attr">skipLocationChange</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">closeBookDetail</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([&#123;<span class="attr">outlets</span>: &#123;<span class="attr">detail</span>: <span class="literal">null</span>&#125;&#125;], &#123;<span class="attr">skipLocationChange</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再次点击<code>Book List</code>和<code>Book Detail</code>按钮，可以看到URL没有发生变化。依次关闭两个弹窗，URL仍然保持不变。</p>
<p><img src="/../images/angular-auxiliary-router-no-url-change.png" alt="alt text"></p>
<h2 id="使用routerLink显示辅助路由"><a href="#使用routerLink显示辅助路由" class="headerlink" title="使用routerLink显示辅助路由"></a>使用<code>routerLink</code>显示辅助路由</h2><p>上面的例子中，我们通过点击按钮，并且在按钮事件处理函数中调用<code>navigate</code>方法来显示辅助路由。也可以使用<code>routerLink</code>来显示辅助路由。<br>在<code>app.component.html</code>文件中，使用<code>routerLink</code>显示辅助路由：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;[&#123;outlets: &#123;list: &#x27;book-list&#x27;&#125;&#125;]&quot;</span>&gt;</span>Book List<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;[&#123;outlets: &#123;detail: &#x27;book-detail&#x27;&#125;&#125;]&quot;</span>&gt;</span>Book Detail<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="主路由和辅助路由各自独立"><a href="#主路由和辅助路由各自独立" class="headerlink" title="主路由和辅助路由各自独立"></a>主路由和辅助路由各自独立</h2><p>前面提起过，主路由和辅助路由是平级关系，二者可自由变化，互补影响，比如我们可以在<code>book</code>组件下添加一个子路由<code>book1</code>，然后在<code>book1</code>下再添加子路由<code>book2</code>。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.routers.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;book&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">BookComponent</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;book1&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Book1Component</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;book2&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Book2Component</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- book.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>book works!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- book1.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>book1 works!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- book2.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>book2 works!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时点击<code>book-detail</code>按钮，观察路由变化，辅助路由自动append到主路由后面，无论主路由的层级有多深。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:4200/book/book1/book2(detail:book-detail)</span></span><br></pre></td></tr></table></figure>

<h2 id="同时显示主路由和辅助路由"><a href="#同时显示主路由和辅助路由" class="headerlink" title="同时显示主路由和辅助路由"></a>同时显示主路由和辅助路由</h2><p>主路由的<code>outlet name</code>是<code>primary</code>，我们只需在routerLink或者navigate函数中指定<code>primary</code>即可。</p>
<p>通过<code>routerLink</code>属性触发(浏览器url：<code>http://localhost:4200/book(detail:book-detail)</code>)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;[&#123;outlets: &#123;primary: &#x27;book&#x27;, detail: &#x27;book-detail&#x27;&#125;&#125;]&quot;</span>&gt;</span>Book and detail<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过<code>router.navigate</code>方法触发(浏览器url：<code>http://localhost:4200/book(detail:book-detail)</code>)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([&#123;<span class="attr">outlets</span>: &#123;<span class="attr">primary</span>: <span class="string">&#x27;book&#x27;</span>, <span class="attr">detail</span>: <span class="string">&#x27;book-detail&#x27;</span>&#125;&#125;]);</span><br></pre></td></tr></table></figure>

<p>如果主路由对应多级<code>path</code>，直接指定即可，如下：(浏览器url：<code>http://localhost:4200/book/book1/book2(detail:book-detail)</code>)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([&#123;<span class="attr">outlets</span>: &#123;<span class="attr">primary</span>: <span class="string">&#x27;book/book1/book2&#x27;</span>, <span class="attr">detail</span>: <span class="string">&#x27;book-detail&#x27;</span>&#125;&#125;]);</span><br></pre></td></tr></table></figure>

<h2 id="一次触发多个辅助路由"><a href="#一次触发多个辅助路由" class="headerlink" title="一次触发多个辅助路由"></a>一次触发多个辅助路由</h2><p>上面的例子中我们是依次点击按钮来显示辅助路由的，Angular也支持一次触发多个辅助路由，</p>
<h3 id="使用routerLink"><a href="#使用routerLink" class="headerlink" title="使用routerLink"></a>使用<code>routerLink</code></h3><p>可以在<code>routerLink</code>中同时定义多个辅助路由，在<code>app.component.html</code>文件中，添加如下代码，当我们点击<code>Book List and Details</code>按钮时，将同时显示<code>book-list</code>和<code>book-detail</code>组件。Url也将变为<code>http://localhost:4200/book(detail:book-detail//list:book-list)</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;[&#123;outlets: &#123;list: &#x27;book-list&#x27;, detail: &#x27;book-detail&#x27;&#125;&#125;]&quot;</span>&gt;</span>Book List and Details<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用navigate方法"><a href="#使用navigate方法" class="headerlink" title="使用navigate方法"></a>使用<code>navigate</code>方法</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">openBookListAndDetail</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([&#123;<span class="attr">outlets</span>: &#123;<span class="attr">list</span>: <span class="string">&#x27;book-list&#x27;</span>, <span class="attr">detail</span>: <span class="string">&#x27;book-detail&#x27;</span>&#125;&#125;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>辅助路由的格式：(outletname: path)，比如(list:book-list), <code>list</code>对应<code>outlet name</code>, <code>book-list</code>对应<code>path</code>。</li>
<li>主路由和辅助路由是平级关系，他们的<code>outlet</code>要定义在一个文件中。比如上面例子中book和book-list，book-detail三者都是平级关系，所以他们的<code>outlet</code>都定义在<code>app.component.html</code>文件中。</li>
<li><code>outlet</code>属性中<code>name</code>用来表示辅助路由的名称，不能包含<code>-</code>，不能是字符串<code>primary</code>，否则无法显示。</li>
<li>html文件中如果使用了<code>routerLink</code>，那么同时也要定义<code>outlet</code>，否则无法显示。</li>
</ul>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>router</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-is-pass-by-value</title>
    <url>/2023/10/27/JavaScript-is-pass-by-value/</url>
    <content><![CDATA[<p>#References:</p>
<ol>
<li><a href="https://www.javadude.com/articles/passbyvalue.htm">https://www.javadude.com/articles/passbyvalue.htm</a></li>
<li><a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_value">https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_value</a></li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>pass by value</tag>
        <tag>parameter</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-angular.json</title>
    <url>/2024/06/06/angular-angular-json/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>The <code>angular.json</code> file under the root of an Angular workspace provides workspace-wide and project-specific configuration defaults. It is used by the Angular CLI to build, test, and run Angular projects.</p>
<p>Path values given in the configuration are relative to the root of workspace directory.</p>
<h2 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h2><p>You can find the schema file of <code>angular.json</code> from here: <code>./node_modules/@angular/cli/lib/config/schema.json</code></p>
<h2 id="Configuration-of-angular-json"><a href="#Configuration-of-angular-json" class="headerlink" title="Configuration of angular.json"></a>Configuration of <code>angular.json</code></h2><h3 id="Turn-on-chunk-named"><a href="#Turn-on-chunk-named" class="headerlink" title="Turn on chunk named"></a>Turn on chunk named</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;projects&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;my-project&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;architect&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;namedChunks&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>Named chunk is useful for lazy loading component, you can see which chunk was loaded from the network tab in Chrome.</p>
<h3 id="Turn-on-source-map"><a href="#Turn-on-source-map" class="headerlink" title="Turn on source map"></a>Turn on source map</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;projects&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;my-project&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;architect&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;production&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>Source map is useful for debugging, it will generate a source map file for each JavaScript file. For example, <code>main.xxx.js</code> will have a <code>main.xxx.js.map</code> file when source map was on.</p>
<h3 id="Turn-off-optimization"><a href="#Turn-off-optimization" class="headerlink" title="Turn off optimization"></a>Turn off optimization</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;projects&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;my-project&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;architect&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;production&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;optimization&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;styles&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;fonts&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>This option is useful when you want to debug the production build, with above option, it will not minify the scripts, but styles and fonts are still minified.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://angular.dev/reference/configs/workspace-config">https://angular.dev/reference/configs/workspace-config</a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>angular.json</tag>
        <tag>cli</tag>
        <tag>build</tag>
        <tag>chunk</tag>
        <tag>source map</tag>
        <tag>optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-bindings</title>
    <url>/2024/07/20/angular-bindings/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>In Angular, there are several ways to bind data to the view, including text interpolation, property binding, class&#x2F;style bindings, and event binding. In this article, we’ll cover the basics of these bindings.</p>
<p>In an Angular template, a binding creates a live connection between a part of the UI created from a template(a DOM element, directive, or component) and the model(the component instance to which the template belongs). This connection can be used to synchronize the view with the model, to notify the model when an event or user action takes place in the view, or both. Angular’s Change Detection algorithm is responsible for keeping the view and the model in sync.</p>
<h2 id="Text-interpolation"><a href="#Text-interpolation" class="headerlink" title="Text interpolation"></a>Text interpolation</h2><p>Text interpolation refers to embedding expressions into marked up text, Angular use <code>&#123;&#123;&#125;&#125;</code> to interpolate expressions into HTML.</p>
<p>Suppose you have a variable <code>name</code> in the component, you can use it in the template like this:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, &#123;&#123;name&#125;&#125;!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Or if you want to display an image based on its URL, you can do this:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;imageUrl&#125;&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>You can also use conditional expressions in text interpolation, for example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Performance: &#123;&#123; score &gt; 90 ? &#x27;Exceeded&#x27; : &#x27;Match&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Or even a function call:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Performance: &#123;&#123; getPerformance() &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Note: text interpolation only works on <code>string</code>, for all other types, Angular will first convert it to string then interpolate it.</p>
<h2 id="Property-binding"><a href="#Property-binding" class="headerlink" title="Property binding"></a>Property binding</h2><p>Property binding in Angular helps you set values for properties of HTML elements or directives.</p>
<p>Property binding moves a value in one direction, from a component’s property into a target element property. In the following example, the <code>src</code> property of the <code>img</code> element is bound to the <code>imageUrl</code> property of the component.</p>
<p><img src="/../images/angular-property-binding.jpg" alt="angular-property-binding"></p>
<h3 id="Property-binding-syntax"><a href="#Property-binding-syntax" class="headerlink" title="Property binding syntax"></a>Property binding syntax</h3><p>You should enclose the HTML element property with <code>[]</code>, and put the component’s property in <code>&quot;&quot;</code>. In this way angular will parse the content in quotes as a variable. the following code won’t work, since angular will treat <code>imageUrl</code> as a literal string, not a variable in component.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imageUrl&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Text interpolation can also be used interchangeably with property binding, the following code has the same effects.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;imageUrl&#125;&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>So, if <code>imageUrl</code> is an variable in component class, then<br><code>[src]=&quot;imageUrl&quot;</code> is equal to <code>src=&quot;&#123;&#123;imageUrl&#125;&#125;&quot;</code>.</p>
<h2 id="Class-Style-bindings"><a href="#Class-Style-bindings" class="headerlink" title="Class&#x2F;Style bindings"></a>Class&#x2F;Style bindings</h2><h3 id="Class-bindings"><a href="#Class-bindings" class="headerlink" title="Class bindings"></a>Class bindings</h3><p>If you only need single class&#x2F;style binding, you can use the following syntax.<br>Where <code>grade</code> is a variable in the component, and this works as long as <code>grade</code> is a truthy value.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">class.grade</span>]=<span class="string">&quot;grade&quot;</span>&gt;</span>Student A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>class bindings works the same as <code>ngClass</code> directive, see <a href="https://zdd.github.io/2024/07/20/angular-ng-class/">here</a> for details.</p>
<h3 id="Style-bindings"><a href="#Style-bindings" class="headerlink" title="Style bindings"></a>Style bindings</h3><p>Style bindings works like class bindings, see <a href="https://angular.dev/guide/templates/class-binding#binding-to-a-single-style">here</a>, we rarely use style bindings, since we always put styles into a single file, but its good to know.</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://angular.dev/guide/templates">https://angular.dev/guide/templates</a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>binding</tag>
        <tag>interpolation</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-build-process</title>
    <url>/2024/09/12/angular-build-process/</url>
    <content><![CDATA[<p>Angular的编译过程是怎样的？<br>通常我么使用<code>ng build</code>命令来编译Angular项目，但是这个命令背后的逻辑是怎样的呢？</p>
<ul>
<li><code>ng build</code>命令底层是用<code>WebPack</code>还是<code>ESBuild</code>？</li>
<li><code>ng build</code>命令是如何处理<code>TypeScript</code>文件的？</li>
<li><code>ng build</code>命令是如何处理<code>HTML</code>文件的？</li>
</ul>
<h2 id="ts-js编译"><a href="#ts-js编译" class="headerlink" title="ts&#x2F;js编译"></a>ts&#x2F;js编译</h2><p>Webpack的配置文件在这里：<code>packages/angular_devkit/build_angular/src/tools/webpack/configs/common.ts</code></p>
<p>这个文件里我们可以看到如下<code>rule</code>配置：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.[cm]?[tj]sx?$/</span>,</span><br><span class="line">  <span class="comment">// The below is needed due to a bug in `@babel/runtime`. See: https://github.com/babel/babel/issues/12824</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123; <span class="attr">fullySpecified</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  <span class="attr">exclude</span>: [</span><br><span class="line">    <span class="regexp">/[\\/]node_modules[/\\](?:core-js|@babel|tslib|web-animations-js|web-streams-polyfill|whatwg-url)[/\\]/</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">use</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;../../babel/webpack-loader&#x27;</span>),</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">cacheDirectory</span>: (cache.<span class="property">enabled</span> &amp;&amp; path.<span class="title function_">join</span>(cache.<span class="property">path</span>, <span class="string">&#x27;babel-webpack&#x27;</span>)) || <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">aot</span>: buildOptions.<span class="property">aot</span>,</span><br><span class="line">        <span class="attr">optimize</span>: buildOptions.<span class="property">buildOptimizer</span>,</span><br><span class="line">        <span class="attr">supportedBrowsers</span>: buildOptions.<span class="property">supportedBrowsers</span>,</span><br><span class="line">        <span class="attr">instrumentCode</span>: codeCoverage</span><br><span class="line">          ? &#123;</span><br><span class="line">              <span class="attr">includedBasePath</span>: sourceRoot ?? projectRoot,</span><br><span class="line">              <span class="attr">excludedPaths</span>: <span class="title function_">getInstrumentationExcludedPaths</span>(root, codeCoverageExclude),</span><br><span class="line">            &#125;</span><br><span class="line">          : <span class="literal">undefined</span>,</span><br><span class="line">      &#125; <span class="keyword">as</span> <span class="title class_">AngularBabelLoaderOptions</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>可以看到这个正则表达式匹配的是：</p>
<ul>
<li><code>.ts</code>、<code>.tsx</code></li>
<li><code>.js</code>、<code>.jsx</code></li>
<li><code>.cjs</code>、<code>.mjs</code></li>
</ul>
<p>这些文件都会被<code>require.resolve(&#39;../../babel/webpack-loader&#39;)</code>这个loader处理。而这个loader的代码在这里：<code>packages/angular_devkit/build_angular/src/tools/babel/webpack-loader.ts</code></p>
<p>这个文件里面又调用了babelLoader。所以可知，<code>ng build</code>命令底层是用<code>Babel</code>来处理<code>TypeScript</code>文件的。</p>
<p>这里可以画一个流程图：ng build -&gt; Webpack -&gt; Babel -&gt; TypeScript</p>
<h2 id="scss-sass-less-css编译"><a href="#scss-sass-less-css编译" class="headerlink" title="scss&#x2F;sass&#x2F;less&#x2F;css编译"></a>scss&#x2F;sass&#x2F;less&#x2F;css编译</h2><p>Webpack通过各种loader来处理不同类型的文件，比如<code>css-loader</code>、<code>sass-loader</code>、<code>less-loader</code>等。那么什么是loader呢？loader是一个转换器，负责把一种文件格式转换为另一种文件格式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">output_format = loader(input_format)</span><br></pre></td></tr></table></figure>

<p>loader是可以链式调用的，上一个loader的输出可以作为下一个loader的输入，比如<code>scss</code>文件可以先经过<code>sass-loader</code>处理，然后再经过<code>css-loader</code>处理，最后再经过<code>style-loader</code>处理。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">output_format = style-loader(css-loader(sass-loader(input_format)))</span><br></pre></td></tr></table></figure>

<p>Angular默认采用<code>scss</code>作为样式文件的扩展名，所以我们可以看到<code>scss</code>文件是如何被处理的：Webpack中关于样式文件的配置在这里：<code>packages/angular_devkit/build_angular/src/tools/webpack/configs/styles.ts</code></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">extensions</span>: [<span class="string">&#x27;scss&#x27;</span>],</span><br><span class="line">  <span class="attr">use</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;resolve-url-loader&#x27;</span>),</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">sourceMap</span>: cssSourceMap,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;sass-loader&#x27;</span>),</span><br><span class="line">      <span class="attr">options</span>: <span class="title function_">getSassLoaderOptions</span>(</span><br><span class="line">        root,</span><br><span class="line">        sassImplementation,</span><br><span class="line">        includePaths,</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        !!buildOptions.<span class="property">verbose</span>,</span><br><span class="line">        !!buildOptions.<span class="property">preserveSymlinks</span>,</span><br><span class="line">      ),</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="html编译"><a href="#html编译" class="headerlink" title="html编译"></a>html编译</h2>]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>build</tag>
        <tag>builder</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-change-detection-on-push</title>
    <url>/2024/06/09/angular-change-detection-on-push/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In this article, we will learn how to use <code>ChangeDetectionStrategy.OnPush</code> in Angular to improve the performance of your application. By default, Angular uses <code>ChangeDetectionStrategy.Default</code>, which means that the change detection runs every time an event is triggered in the application. This can be inefficient if your application has a lot of components that don’t need to be updated every time an event is triggered. By using <code>ChangeDetectionStrategy.OnPush</code>, you can tell Angular to only run change detection on a component when its input properties change. with <code>onPush</code> strategy, Angular will only trigger change detection in the following cases:</p>
<ul>
<li>When component’s input property changes</li>
<li>When an event is triggered in the component</li>
<li>When you manually trigger change detection</li>
<li>注意：这里好像还有一条是async pipe，但是我找不到文档了，以后找到再补充吧。</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Take a look at the <code>product</code> component below, it has an input property <code>name</code>, and an event handler which changes the price of the product. We have set the <code>changeDetection</code> property to <code>ChangeDetectionStrategy.OnPush</code> in the component’s metadata.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- product.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;changePrice(10)&quot;</span>&gt;</span>Change price<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Product Name: &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Product Price: &#123;&#123;price&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-product&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./product.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./product.component.css&#x27;</span>,</span><br><span class="line">  <span class="attr">changeDetection</span>: <span class="title class_">ChangeDetectionStrategy</span>.<span class="property">OnPush</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span>, <span class="title class_">DoCheck</span>, <span class="title class_">OnChanges</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">price</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `ngDoCheck()` will called each time change detection run</span></span><br><span class="line">  <span class="title function_">ngDoCheck</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;change detection triggered...&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This will not trigger change detection</span></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">price</span> = <span class="number">20</span>;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// click handler, will trigger change detection.</span></span><br><span class="line">  <span class="title function_">changePrice</span>(<span class="params"><span class="attr">price</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>When parent component change the input property <code>name</code>, Angular will trigger change detection in the <code>product</code> component. and console will output <code>change detection triggered...</code></li>
<li>When user click button to change the price, Angular will trigger change detection in the <code>product</code> component. and console will output <code>change detection triggered...</code></li>
<li><code>setTimeout</code> function will not trigger change detection in the <code>product</code> component.</li>
</ol>
<h2 id="Change-Detection-with-OnPush-Diagram"><a href="#Change-Detection-with-OnPush-Diagram" class="headerlink" title="Change Detection with OnPush Diagram"></a>Change Detection with OnPush Diagram</h2><p>See <a href="https://angular.dev/best-practices/skipping-subtrees#an-event-is-handled-by-a-component-with-default-change-detection">here</a> for details.</p>
<h2 id="Do-I-need-OnPush-strategy-if-component-has-no-Input-bindings"><a href="#Do-I-need-OnPush-strategy-if-component-has-no-Input-bindings" class="headerlink" title="Do I need OnPush strategy if component has no @Input bindings?"></a>Do I need <code>OnPush</code> strategy if component has no <code>@Input</code> bindings?</h2><p>Yes, <code>OnPush</code> still make sense even if the component has no <code>@Input</code> bindings. </p>
<ol>
<li>With <code>OnPush</code>, change detection still triggers when an event is triggered in the component.</li>
<li>With <code>OnPush</code>, you prevent the change detection running automatically when the parent component changes. </li>
<li>With <code>OnPush</code>, you can manually trigger change detection when needed with <code>ChangeDetectorRef.detectChanges()</code>, or <code>ChangeDetectorRef.markForCheck()</code>.</li>
</ol>
<p><code>OnPush</code> + <a href="https://angular.dev/guide/signals">signal</a> is the future of Angular.</p>
<h1 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h1><ol>
<li><a href="https://angular.dev/best-practices/skipping-subtrees">https://angular.dev/best-practices/skipping-subtrees</a></li>
<li><a href="https://v17.angular.io/guide/change-detection-skipping-subtrees">https://v17.angular.io/guide/change-detection-skipping-subtrees</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>change detection</tag>
        <tag>onpush</tag>
      </tags>
  </entry>
  <entry>
    <title>bootstrap-standalone-component</title>
    <url>/2024/04/20/angular-bootstrap-standalone-component/</url>
    <content><![CDATA[<p>你也许在Angular的文档或者某些博客中看到过这样一句话：<br><code> Every application has at least one Angular module, the root module, which must be present for bootstrapping the application on launch. By convention and by default, this NgModule is named AppModule</code></p>
<p>在Angular 14之前，这句话是正确的。但是从Angular 14开始，你可以不用<code>AppModule</code>，因为<code>standalone component</code>可以替代它。下面我们来看看，如何移除<code>AppModule</code>。</p>
<h2 id="创建一个Angular项目"><a href="#创建一个Angular项目" class="headerlink" title="创建一个Angular项目"></a>创建一个Angular项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng new my-app</span><br></pre></td></tr></table></figure>

<h2 id="将app-component设置为standalone"><a href="#将app-component设置为standalone" class="headerlink" title="将app component设置为standalone"></a>将app component设置为standalone</h2><p>首先要将<code>app.component.ts</code>中的<code>standalone</code>设置为<code>true</code>。如果使用了router，还需要将RouterModule导入到component中。否则在html中使用<code>router-outlet</code>或者<code>routerLink</code>会报错。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">RouterModule</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@angular/router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>, <span class="comment">// set standalone to true</span></span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>], <span class="comment">// import RouterModule if you use router</span></span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  title = <span class="string">&#x27;angular-router&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建routes文件"><a href="#创建routes文件" class="headerlink" title="创建routes文件"></a>创建routes文件</h2><p>新建一个app-routes.ts文件，用来定义路由，就是将原本在<code>app-routing.module.ts</code>中定义的路由移到这个文件中。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Routes</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@angular/router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HomeComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./home/home.component&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">AboutComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./about/about.component&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NotFoundComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./not-found/not-found.component&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>, <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./product/product.module&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">m</span> =&gt;</span> m.<span class="property">ProductModule</span>)&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AboutComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;**&#x27;</span>, <span class="attr">component</span>: <span class="title class_">NotFoundComponent</span>&#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h2 id="删除AppModule"><a href="#删除AppModule" class="headerlink" title="删除AppModule"></a>删除AppModule</h2><p>经过上面的改造，我们已经将<code>AppModule</code>中的内容移到了<code>AppComponent</code>中，现在可以删除<code>AppModule</code>了。</p>
<ol>
<li>删除app module文件：<code>src/app/app.module.ts</code>。</li>
<li>删除route文件：<code>src/app/app-routing.module.ts</code>。（如果创建项目时选择了router）</li>
</ol>
<h2 id="修改main-ts"><a href="#修改main-ts" class="headerlink" title="修改main.ts"></a>修改main.ts</h2><p>最后，我们还需要修改<code>main.ts</code>，<code>main.ts</code>是app的入口文件，它本来引入的是<code>AppModule</code>，我们需要修改它来引入<code>standalone component</code>。</p>
<ol>
<li>将<code>bootstrapModule</code>替换为<code>bootstrapApplication</code>。</li>
<li>将<code>AppModule</code>替换为<code>AppComponent</code>。</li>
<li>引入<code>importProvidersFrom</code>来加载路由。</li>
</ol>
<p>修改前</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; enableProdMode &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; platformBrowserDynamic &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser-dynamic&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; environment &#125; <span class="keyword">from</span> <span class="string">&#x27;./environments/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (environment.<span class="property">production</span>) &#123;</span><br><span class="line">  <span class="title function_">enableProdMode</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">platformBrowserDynamic</span>().<span class="title function_">bootstrapModule</span>(<span class="title class_">AppModule</span>)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br></pre></td></tr></table></figure>

<p>修改后</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;enableProdMode, importProvidersFrom&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;environment&#125; <span class="keyword">from</span> <span class="string">&#x27;./environments/environment&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">RouterModule</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@angular/router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;routes&#125; <span class="keyword">from</span> <span class="string">&quot;./app/app.routes&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;bootstrapApplication&#125; <span class="keyword">from</span> <span class="string">&quot;@angular/platform-browser&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">AppComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./app/app.component&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (environment.<span class="property">production</span>) &#123;</span><br><span class="line">  <span class="title function_">enableProdMode</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">AppComponent</span>, &#123;</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    <span class="title function_">importProvidersFrom</span>(<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes))</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br></pre></td></tr></table></figure>

<h2 id="Angular-17"><a href="#Angular-17" class="headerlink" title="Angular 17+"></a>Angular 17+</h2><p>从Angular 17开始，使用Angular CLI创建的app默认就是standalone component，不需要再做上面的修改。一个新的Angular 17+项目结构如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">my-app/</span><br><span class="line">├─ node-modules/</span><br><span class="line">├─ src/</span><br><span class="line">│  ├─ app/</span><br><span class="line">│  │  ├─ app.component.css</span><br><span class="line">│  │  ├─ app.component.html</span><br><span class="line">│  │  ├─ app.component.ts</span><br><span class="line">│  │  ├─ app.config.ts</span><br><span class="line">│  │  ├─ app.routes.ts</span><br><span class="line">│  ├─ index.html</span><br><span class="line">│  ├─ main.ts</span><br><span class="line">├─ angular.json</span><br><span class="line">├─ package.json</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterOutlet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterOutlet</span>],</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./app.component.css&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  title = <span class="string">&#x27;my-app&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ApplicationConfig</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; provideRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; routes &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.routes&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">appConfig</span>: <span class="title class_">ApplicationConfig</span> = &#123;</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title function_">provideRouter</span>(routes)]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.routes.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Routes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeComponent</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">ProductComponent</span>,</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; bootstrapApplication &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; appConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.config&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">AppComponent</span>, appConfig)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>ngmodule</tag>
        <tag>standalone</tag>
        <tag>bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-builders</title>
    <url>/2024/06/06/angular-builders/</url>
    <content><![CDATA[<p>Angular builders负责构建，测试和运行Angular项目。Angular CLI使用builders来执行这些任务。以下是<a href="https://www.npmjs.com/package/@angular-devkit/build-angular">@angular-devkit&#x2F;build-angular</a>一些常见的builders：</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>application</code></td>
<td>Build an Angular application targeting a browser and server environment using <code>esbuild</code>.</td>
</tr>
<tr>
<td>app-shell</td>
<td>Build an Angular App shell.</td>
</tr>
<tr>
<td><code>browser</code></td>
<td>Build an Angular application targeting a browser environment using <code>Webpack</code>.</td>
</tr>
<tr>
<td><code>browser-esbuild</code></td>
<td>Build an Angular application targeting a browser environment using <code>esbuild</code>.</td>
</tr>
<tr>
<td><code>dev-server</code></td>
<td>A development server that provides live reloading.</td>
</tr>
<tr>
<td>extract-i18n</td>
<td>Extract i18n messages from an Angular application.</td>
</tr>
<tr>
<td>karma</td>
<td>Execute unit tests using Karma test runner.</td>
</tr>
<tr>
<td>ng-packagr</td>
<td>Build and package an Angular library in Angular Package Format (APF) format using ng-packagr.</td>
</tr>
<tr>
<td>prerender</td>
<td>Prerender pages of your application. Prerendering is the process where a dynamic page is processed at build time generating static HTML.</td>
</tr>
<tr>
<td>server</td>
<td>Build an Angular application targeting a Node.js environment.</td>
</tr>
<tr>
<td>ssr-dev-server</td>
<td>A development server which offers live reload during development, but uses server-side rendering.</td>
</tr>
<tr>
<td>protractor</td>
<td><span style="color:red">Deprecated</span> - Run end-to-end tests using Protractor framework.</td>
</tr>
</tbody></table>
<p>Builders的源码位于<a href="https://github.com/angular/angular-cli">Angular CLI</a>项目中。</p>
<ul>
<li><code>application</code>: packages&#x2F;angular&#x2F;build&#x2F;src&#x2F;builders&#x2F;application&#x2F;index.ts</li>
<li><code>browser</code>: packages&#x2F;angular_devkit&#x2F;build_angular&#x2F;src&#x2F;builders&#x2F;browser&#x2F;index.ts</li>
<li><code>browser-esbuild</code>: packages&#x2F;angular_devkit&#x2F;build_angular&#x2F;src&#x2F;builders&#x2F;browser-esbuild&#x2F;index.ts</li>
<li><code>dev-server</code><ul>
<li><code>ESBuild + Vite</code>: packages&#x2F;angular&#x2F;build&#x2F;src&#x2F;builders&#x2F;dev-server&#x2F;index.ts</li>
<li><code>Webpack</code>: packages&#x2F;angular_devkit&#x2F;build_angular&#x2F;src&#x2F;builders&#x2F;dev-server&#x2F;index.ts</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>cli</tag>
        <tag>builder</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-change-detection-markforcheck</title>
    <url>/2024/12/16/angular-change-detection-markforcheck/</url>
    <content><![CDATA[<p>Angular更新检测是自动执行的，但是有些情况下我们需要手动触发更新检测，Angular提供以下方法来手动触发更新检测：</p>
<ul>
<li>detectChanges(): Forces an immediate check for the component and its children.</li>
<li>markForCheck(): Marks the component to be checked in the next cycle (useful with OnPush).</li>
<li>detach()&#x2F;reattach(): Temporarily disables or re-enables change detection for a component.</li>
</ul>
<h2 id="When-to-use-detectChanges"><a href="#When-to-use-detectChanges" class="headerlink" title="When to use detectChanges"></a>When to use <code>detectChanges</code></h2><p>The follow cases are when you should use <code>detectChanges</code>:</p>
<h3 id="1-When-change-detector-is-detached-from-current-component"><a href="#1-When-change-detector-is-detached-from-current-component" class="headerlink" title="1. When change detector is detached from current component."></a>1. When change detector is <code>detached</code> from current component.</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ngDoCheck</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">currentAge</span>! &lt; <span class="number">50</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cdf</span>.<span class="title function_">detach</span>(); <span class="comment">// stop change detection</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cdf</span>.<span class="title function_">markForCheck</span>(); <span class="comment">// not work, use detectChanges instead.</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cdf</span>.<span class="title function_">reattach</span>(); <span class="comment">// restore change detection</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-An-update-is-happened-but-its-not-in-Angular-zone-for-example-3rd-party-libraries"><a href="#2-An-update-is-happened-but-its-not-in-Angular-zone-for-example-3rd-party-libraries" class="headerlink" title="2. An update is happened, but its not in Angular zone, for example: 3rd party libraries."></a>2. An update is happened, but its not in Angular zone, for example: 3rd party libraries.</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">myFunction</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">someFunctionThatIsRunByAThirdPartyCode</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">cd</span>.<span class="title function_">detectChanges</span>();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>Note that we can also fix this by wrapping the third party code in <code>setTimeout</code> or <code>NgZone.run</code>:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">myFunction</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">someFunctionThatIsRunByAThirdPartyCode</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cd</span>.<span class="title function_">detectChanges</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">myFunction</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ngZone</span>.<span class="title function_">run</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">someFunctionThatIsRunByAThirdPartyCode</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Angular has monkey patched <code>setTimeout</code>, and will do the change detection after the <code>setTimeout</code> is finished.</p>
<h3 id="3-There-are-also-cases-where-you-update-the-model-after-the-change-detection-cycle-is-finished-where-in-those-cases-you-get-this-dreaded-error-Expression-has-changed-after-it-was-checked"><a href="#3-There-are-also-cases-where-you-update-the-model-after-the-change-detection-cycle-is-finished-where-in-those-cases-you-get-this-dreaded-error-Expression-has-changed-after-it-was-checked" class="headerlink" title="3. There are also cases where you update the model after the change detection cycle is finished, where in those cases you get this dreaded error: &quot;Expression has changed after it was checked&quot;;"></a>3. There are also cases where you update the model after the change detection cycle is finished, where in those cases you get this dreaded error: <code>&quot;Expression has changed after it was checked&quot;;</code></h3><h2 id="When-to-use-markForCheck"><a href="#When-to-use-markForCheck" class="headerlink" title="When to use markForCheck"></a>When to use <code>markForCheck</code></h2><p>The most common case to use <code>markForCheck</code> is when your component use <code>OnPush</code> change detection strategy and you want to trigger change detection for the component and its ancestors.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ChangeDetectionStrategy</span>, <span class="title class_">ChangeDetectorRef</span>, <span class="title class_">Component</span>, <span class="title class_">OnInit</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;reflect-metadata&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ProductDetailComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;../product-detail/product-detail.component&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">CardComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;../card/card.component&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HoverDirective</span>&#125; <span class="keyword">from</span> <span class="string">&quot;../hover.directive&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Dir1Directive</span>&#125; <span class="keyword">from</span> <span class="string">&quot;../dir1.directive&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">OrderService</span>&#125; <span class="keyword">from</span> <span class="string">&quot;../order.service&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Dir2Directive</span>&#125; <span class="keyword">from</span> <span class="string">&quot;../dir2.directive&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ProductItem</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./product.model&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-product&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./product.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./product.component.scss&#x27;</span>,</span><br><span class="line">  <span class="attr">changeDetection</span>: <span class="title class_">ChangeDetectionStrategy</span>.<span class="property">OnPush</span>, <span class="comment">// OnPush mode</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="attr">product</span>: <span class="title class_">ProductItem</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">orderService</span>: <span class="title class_">OrderService</span>, <span class="keyword">private</span> <span class="attr">cdf</span>: <span class="title class_">ChangeDetectorRef</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">orderService</span>.<span class="title function_">fetchData</span>(<span class="number">1</span>).<span class="title function_">then</span>(<span class="function"><span class="params">product</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">product</span> = product;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cdf</span>.<span class="title function_">markForCheck</span>(); <span class="comment">// &lt;--- must</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Difference-between-detectChanges-and-markForCheck"><a href="#Difference-between-detectChanges-and-markForCheck" class="headerlink" title="Difference between detectChanges and markForCheck"></a>Difference between <code>detectChanges</code> and <code>markForCheck</code></h2><ol>
<li><code>detectChanges</code> triggers change detection for the <code>component and its children</code>.</li>
<li><code>markForCheck</code> marks the <code>component and its ancestors</code> for change detection, but it doesn’t trigger change detection immediately.</li>
<li><code>detectChanges</code> still work even when change detector is <code>detached</code>, but <code>markForCheck</code> doesn’t.</li>
</ol>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li><a href="https://angular.dev/api/core/ChangeDetectorRef#markForCheck">https://angular.dev/api/core/ChangeDetectorRef#markForCheck</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>change detection</tag>
        <tag>attach</tag>
        <tag>detach</tag>
        <tag>markforcheck</tag>
        <tag>detectchanges</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-cli</title>
    <url>/2024/05/28/angular-cli/</url>
    <content><![CDATA[<h2 id="Generate-a-new-Angular-project"><a href="#Generate-a-new-Angular-project" class="headerlink" title="Generate a new Angular project"></a>Generate a new Angular project</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng new my-app</span><br></pre></td></tr></table></figure>

<h2 id="Generate-a-new-empty-workspace"><a href="#Generate-a-new-empty-workspace" class="headerlink" title="Generate a new empty workspace"></a>Generate a new empty workspace</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng new my-workspace --create-application=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="Generate-a-new-application-in-the-workspace"><a href="#Generate-a-new-application-in-the-workspace" class="headerlink" title="Generate a new application in the workspace"></a>Generate a new application in the workspace</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-workspace</span><br><span class="line">ng generate application shell</span><br></pre></td></tr></table></figure>

<h2 id="Install-package-for-a-specific-project"><a href="#Install-package-for-a-specific-project" class="headerlink" title="Install package for a specific project"></a>Install package for a specific project</h2><p>When you working on a workspace with multiple projects, you can install a package for a specific project.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng add @angular-architects/module-federation --project shell</span><br></pre></td></tr></table></figure>

<h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><p><a href="https://angular.dev/cli">https://angular.dev/cli</a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>cli</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-communication-between-parent-and-child-component</title>
    <url>/2025/02/10/angular-communication-between-parent-and-child-component/</url>
    <content><![CDATA[<p>Angular父子组件间通信的方式有很多种，比如通过<code>@Input</code>和<code>@Output</code>，<code>ViewChild</code>和<code>ViewChildren</code>等。今天我们来详细讨论一下这几种方式的使用。</p>
<h2 id="Input和-Output"><a href="#Input和-Output" class="headerlink" title="@Input和@Output"></a>@Input和@Output</h2><p>这是最常见的方式，适用于父子组件之间的单向或双向数据传递。</p>
<p>(1) 父组件向子组件传递数据（@Input）<br>父组件可以通过 @Input 装饰器将数据传递给子组件。</p>
<p>步骤：</p>
<ol>
<li>在子组件中使用 @Input 定义一个输入属性。</li>
<li>在父组件模板中通过属性绑定将数据传递给子组件。<br>代码示例：</li>
</ol>
<p>子组件 (child.component.ts):</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Input</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-child&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;p&gt;Message from parent: &#123;&#123; message &#125;&#125;&lt;/p&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() message!: <span class="built_in">string</span>; <span class="comment">// 接收父组件传递的数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>父组件 (parent.component.html):</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;app-child [message]=<span class="string">&quot;&#x27;Hello from Parent!&#x27;&quot;</span>&gt;&lt;/app-child&gt;</span><br></pre></td></tr></table></figure>

<p>(2) 子组件向父组件传递数据（@Output 和 EventEmitter）<br>子组件可以通过 @Output 和 EventEmitter 向父组件发送事件和数据。</p>
<p>步骤：</p>
<ol>
<li>在子组件中定义一个 @Output 属性，并使用 EventEmitter 发送数据。</li>
<li>在父组件中监听子组件的事件并处理数据。<br>代码示例：</li>
</ol>
<p>子组件 (child.component.ts):</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Output</span>, <span class="title class_">EventEmitter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-child&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;button (click)=&quot;sendMessage()&quot;&gt;Send Message to Parent&lt;/button&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> &#123;</span><br><span class="line">  <span class="meta">@Output</span>() messageEvent = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>&lt;<span class="built_in">string</span>&gt;(); <span class="comment">// 定义输出事件</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">sendMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">messageEvent</span>.<span class="title function_">emit</span>(<span class="string">&#x27;Hello from Child!&#x27;</span>); <span class="comment">// 触发事件并传递数据</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>父组件 (parent.component.html):</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;app-<span class="title function_">child</span> (messageEvent)=<span class="string">&quot;receiveMessage($event)&quot;</span>&gt;&lt;/app-child&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message from child: &#123;&#123; receivedMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>父组件 (parent.component.ts):</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ParentComponent</span> &#123;</span><br><span class="line">  receivedMessage = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">receiveMessage</span>(<span class="params"><span class="attr">message</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receivedMessage</span> = message; <span class="comment">// 处理子组件传递的数据</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ViewChild和ViewChildren"><a href="#ViewChild和ViewChildren" class="headerlink" title="ViewChild和ViewChildren"></a>ViewChild和ViewChildren</h2><p>父组件可以通过 @ViewChild 或 @ViewChildren 直接访问子组件的属性和方法。</p>
<p>步骤：</p>
<ol>
<li>在父组件中使用 @ViewChild 获取子组件的实例。</li>
<li>直接调用子组件的方法或访问其属性。<br>代码示例：</li>
</ol>
<p>子组件 (child.component.ts):</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-child&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;p&gt;Child Component&lt;/p&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> &#123;</span><br><span class="line">  message = <span class="string">&#x27;Hello from Child!&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Greeting from Child!&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>父组件 (parent.component.ts):</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">ViewChild</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ChildComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./child.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-parent&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;app-child&gt;&lt;/app-child&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;callChildMethod()&quot;&gt;Call Child Method&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;Message from child: &#123;&#123; childMessage &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ParentComponent</span> &#123;</span><br><span class="line">  <span class="meta">@ViewChild</span>(<span class="title class_">ChildComponent</span>) child!: <span class="title class_">ChildComponent</span>; <span class="comment">// 获取子组件实例</span></span><br><span class="line">  childMessage = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">callChildMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">childMessage</span> = <span class="variable language_">this</span>.<span class="property">child</span>.<span class="title function_">greet</span>(); <span class="comment">// 调用子组件的方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用SharedService"><a href="#使用SharedService" class="headerlink" title="使用SharedService"></a>使用SharedService</h2><p>如果父子组件之间的通信比较复杂，可以使用共享服务来管理数据。详情见<a href="https://zdd.github.io/2023/07/12/Communication-between-components-directives-by-service/">这里</a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>communication</tag>
        <tag>input</tag>
        <tag>output</tag>
        <tag>viewchild</tag>
        <tag>viewchildren</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-change-detection</title>
    <url>/2024/04/28/angular-change-detection/</url>
    <content><![CDATA[<h2 id="Change-Detection是如何触发的？"><a href="#Change-Detection是如何触发的？" class="headerlink" title="Change Detection是如何触发的？"></a>Change Detection是如何触发的？</h2><p>前端框架的主要任务就是根据数据的变化来更新UI，Angular也不例外，而变更检测(Change Detection)就是完成这一任务的核心机制。</p>
<p><img src="/../images/angular-cd-flow.png" alt="change-detection-flow"></p>
<p>在<code>React</code>或者<code>Vue</code>这类框架中，触发UI更新的操作是由开发者手动完成的，比如调用<code>setState</code>或者<code>$set</code>。<br><code>React</code>中使用<code>setState</code>来触发变更检测。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br></pre></td></tr></table></figure>
<p><code>Vue</code>中使用<code>$set</code>来触发变更检测。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">data</span>, <span class="string">&#x27;count&#x27;</span>, <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span> + <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>而在Angular中，变更检测是自动触发的，那么Angular是如何实现自动触发变更检测的呢？要解释清楚这个问题，大家首先要明白javascript这门语言的特殊性，JS的行为在运行时是可以被改写的，也就是说可以做Monkey Patch，而Angular正是利用了这一特性来实现自动变更检测的。</p>
<p>在Angular app启动时，Angular框架会对一些底层的异步事件进行Monkey Patch（在这些事件中加入额外的逻辑），这样就可以在异步事件执行时自动触发变更检测。Angular使用Zone.js来完成这一过程。</p>
<p>比如下面这个<code>addEventListener</code>的例子，Angular会在<code>addEventListener</code>的回调函数执行完后，自动触发变更检测。这就是Monkey Patch的作用。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addEventListener</span>(<span class="params">eventName, callback</span>) &#123;</span><br><span class="line">  <span class="comment">// call the real addEventListener</span></span><br><span class="line">  <span class="title function_">callRealAddEventListener</span>(eventName, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// first call the original callback</span></span><br><span class="line">    <span class="title function_">callback</span>(...);</span><br><span class="line">    <span class="comment">// and then run Angular-specific functionality</span></span><br><span class="line">    <span class="keyword">var</span> changed = angular.<span class="title function_">runChangeDetection</span>();</span><br><span class="line">    <span class="keyword">if</span> (changed) &#123;</span><br><span class="line">      angular.<span class="title function_">reRenderUIPart</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在Angular程序启动时，会创建一个Zone，很多人刚开始对Zone比较迷惑，其实它很简单，就是一个执行上下文（Execution context）这个Zone会监控所有的异步操作，当异步操作执行时，Angular会运行变更检测。Zone.js会对浏览器中的所有异步操作进行<a href="https://en.wikipedia.org/wiki/Monkey_patch">monkey patch</a>，这样Angular就能知道何时运行变更检测。</p>
<p>这些被<code>monkey patch</code>的异步操作包括</p>
<ul>
<li><code>setTimeout</code>, <code>setInterval</code>,</li>
<li><code>addEventListener</code>, </li>
<li><code>XMLHttpRequest</code>,</li>
<li><code>fetch</code>, </li>
<li><code>Promise</code>, </li>
<li><code>MutationObserver</code></li>
<li><code>requestAnimationFrame</code></li>
<li><code>async/await</code> - 这个会降级到Promise，因为Zone.js无法直接监控async&#x2F;await，所以会降级到Promise。</li>
</ul>
<p>这种方式大大降低了开发人员写代码时的心智负担，但是这种方法也有一些弊端，那就是如果某些异步操作无法被Zone.js支持的话，那么Angular就无法对这些异步操作进行变更检测。比如<code>IndexedDB</code>的一些回调函数。</p>
<h2 id="Change-Detection是如何工作的"><a href="#Change-Detection是如何工作的" class="headerlink" title="Change Detection是如何工作的?"></a>Change Detection是如何工作的?</h2><p>每一个Angular Component都有一个与之关联的<code>change detector</code>, 这个<code>change detector</code>是在Angular App启动时创建的。当变更检测触发时，Angular会对Template中的每一个Expression进行检查，这个Expression一定是包含着Component中的某个或者某些变量，当该变量的当前值和之前的值不一致时，Angular就会使用新值渲染Template，这样就完成了UI的更新。</p>
<p>当然，这个操作不是一次一次触发的，Angular会对所有变化了的值进行标记，比如<code>isChanged</code> &#x3D; true，待标记完成后，一次性进行更新。Angular对新旧值进行比较时用的时<code>looseNotIdentical()</code>算法，也就是<code>===</code>，但是对于<code>NaN</code>有个特殊处理，也就是说<code>NaN === NaN</code>返回true（注意，在JS中<code>NaN === NaN</code>返回false）</p>
<p>Angular会对整个Component tree进行检测，并遵循如下原则：（不考虑OnPush的情况下）</p>
<ol>
<li>从整个组件树的根结点进行检测。</li>
<li>组件树中每个结点都被检测。</li>
<li>检测的方向是自顶向下。</li>
<li>组件树的遍历算法是深度优先遍历(DFS)算法。</li>
</ol>
<p>每个被检测到的component都会执行以下操作：</p>
<ol>
<li>运行Life Cycle方法</li>
<li>更新绑定 - Updating bindings.</li>
<li>刷新UI</li>
</ol>
<p>一个常见的误解是：Angular在变更检测时会重新渲染整个组件树，这是不对的。Angular足够智能，它只会更新那些发生了变化的部分，而不是整个组件树。</p>
<h2 id="如何关闭某个组件的Change-Detection"><a href="#如何关闭某个组件的Change-Detection" class="headerlink" title="如何关闭某个组件的Change Detection?"></a>如何关闭某个组件的Change Detection?</h2><p>很简单，只需要在组件的constructor中detach change detector即可。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">cd</span>: <span class="title class_">ChangeDetectorRef</span></span>) &#123;</span><br><span class="line">    cd.<span class="title function_">detach</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个很偏门的需求，使用的场景很少，但是也存在，比如如果后端通过websocket发送了大量的数据，而前端不可能这儿快的实时处理这些数据，所以就折中一下，每隔5秒钟更新一下UI，那么就可以用此方法。</p>
<p>我们现调用<code>detach()</code>方法，这样就可以关闭这个组件的变更检测了，然后再使用<code>setInterval</code>来定时手动触发变更检测，更新UI。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">cdf</span>: <span class="title class_">ChangeDetectorRef</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cdf</span>.<span class="title function_">detach</span>();</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cdf</span>.<span class="title function_">detectChanges</span>();</span><br><span class="line">    &#125;, <span class="number">5000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Take the DOM event as an example, when user click a button on page, Angular will run change detection to update the view. Angular will run change detection after the event handler is executed.</p>
<p>Here is the pseudo code, you can find the real code in <code>packages/zone.js/lib/browser/event-target.ts</code> in angular source code.(Note, initially, <code>zone.js</code> is a independent library, but it is moved to angular’s mono-repo.)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Store a reference to the original addEventListener</span></span><br><span class="line"><span class="keyword">const</span> nativeAddEventListener = <span class="variable language_">window</span>.<span class="property">EventTarget</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addEventListener</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Replace the original addEventListener with a patched version</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">EventTarget</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addEventListener</span> = <span class="keyword">function</span>(<span class="params">eventName, handler, options</span>) &#123;</span><br><span class="line">  <span class="comment">// Call the native addEventListener with the provided arguments</span></span><br><span class="line">  nativeAddEventListener.<span class="title function_">call</span>(<span class="variable language_">this</span>, eventName, handler, options);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Additional functionality to track the state of asynchronous operations</span></span><br><span class="line">  <span class="comment">// This could involve interacting with Zone.js&#x27;s internal data structures</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Change-Detection-steps"><a href="#Change-Detection-steps" class="headerlink" title="Change Detection steps"></a>Change Detection steps</h2><ol>
<li>An event occurs (user action, timer, AJAX response, etc.).</li>
<li>Angular’s zone (NgZone) notifies Angular that an async operation has completed.</li>
<li>Angular triggers change detection starting from the root component.</li>
<li>For each component, it checks the template bindings against the current component state.</li>
<li>If a binding has changed, Angular updates the DOM accordingly.</li>
<li>Components using OnPush strategy only check if their inputs have changed or if marked explicitly.</li>
<li>The process continues down the component tree until all components are checked.</li>
</ol>
<h2 id="What-does-change-detection-do-in-Angular"><a href="#What-does-change-detection-do-in-Angular" class="headerlink" title="What does change detection do in Angular?"></a>What does change detection do in Angular?</h2><ol>
<li>Update all bindings in templates.</li>
<li>Update the view.</li>
</ol>
<p>Angular中，每个Component都会关联一个Change Detector, 这个Change Detector是在Angular App启动时创建的（是所有Component共用一个Change Detector还是每个Component有自己的Change Detector?）。</p>
<p>这个Change Detector的工作就是检查每个Component的Template中的Expression是否发生了变化，如果发生了变化，就会更新View。</p>
<h2 id="NgZone"><a href="#NgZone" class="headerlink" title="NgZone"></a>NgZone</h2><p>Angular uses <code>NgZone</code> to detect changes in the application. <code>NgZone</code> is a class that provides a way to run code in the Angular zone. It is used to detect changes in the application.</p>
<p>You can easily see NgZone by logging it to the console.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">zone</span>: <span class="title class_">NgZone</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>((zone <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">_inner</span>.<span class="property">name</span>); <span class="comment">// angular</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>((zone <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">_outer</span>.<span class="property">name</span>); <span class="comment">// root</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>NgZone</code> is instantiated during the bootstrap phase.</p>
<h2 id="How-to-determine-when-change-detection-is-triggered-in-a-component"><a href="#How-to-determine-when-change-detection-is-triggered-in-a-component" class="headerlink" title="How to determine when change detection is triggered in a component?"></a>How to determine when change detection is triggered in a component?</h2><p>注意：下面这个结论是错误的，留在这里时刻提醒自己，不要再犯这种错误。详情请看<a href="https://zdd.github.io/2024/12/05/angular-lifecyle-ondocheck/">这里</a>  </p>
<p>You can use the <code>ngDoCheck</code> lifecycle hook to determine when change detection is triggered in a component. <code>ngDoCheck</code> is called every time change detection is triggered in a component.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="title function_">ngDoCheck</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Change detection triggered&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ngOnChanges"><a href="#ngOnChanges" class="headerlink" title="ngOnChanges"></a>ngOnChanges</h2><p><code>ngOnChanges</code> is a lifecycle hook that is called when a component’s input properties change. It is used to detect changes in the component’s input properties.</p>
<p>What’s the scenarios to use <code>ngOnChanges</code>?</p>
<ol>
<li>When you want to detect changes in the component’s input properties.</li>
<li>When you want to avoid function call in template. see <a href="https://medium.com/showpad-engineering/why-you-should-never-use-function-calls-in-angular-template-expressions-e1a50f9c0496">here</a></li>
</ol>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://angular.love/the-latest-in-angular-change-detection-zoneless-signals">https://angular.love/the-latest-in-angular-change-detection-zoneless-signals</a> - 这个写得太好了，仔细读之。</li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>change detection</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-component</title>
    <url>/2024/05/07/angular-component/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Component（组件）是Angular中的最小单元，通常来说，一个Component包含以下几个部分：</p>
<ol>
<li>选择器</li>
<li>模板</li>
<li>样式</li>
</ol>
<p>这三者中，哪个都不是必须的，但是至少要有模板。<br>我们可以使用Angular CLI来生成一个Component，比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng generate component product</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng g c product</span><br></pre></td></tr></table></figure>

<p>生成后的组件如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;product&#x27;</span>, <span class="comment">// 选择器</span></span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./product.component.html&#x27;</span>, <span class="comment">// 模板</span></span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./product.component.less&#x27;</span>] <span class="comment">// 样式</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductComponent</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>选择器是用来引用当前<code>Component</code>的，比如其他组件若想使用<code>Product</code>组件的话，那么可以在其他组件的模板中使用<code>&lt;product&gt;&lt;/product&gt;</code>来引用<code>Product</code>组件。选择器是给别人用的，组件本身并不使用自己的选择器。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- other.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">product</span>&gt;</span><span class="tag">&lt;/<span class="name">product</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Angular中的选择器是CSS选择器，可以是标签选择器、类选择器、属性选择器等等, 一般来说, 组件通常使用标签选择器,指令通常使用属性选择器, 其他类型的选择器使用较少, 但是也是可以的。比如使用类选择器来实现<code>Product</code>组件：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product.component.ts</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;.product&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./product.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./product.component.less&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- other.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;product&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行效果是一样的, 选择器本质是<code>Directive</code>上的属性,而<code>Component</code>是<code>Directive</code>的一个特例, 所以<code>Component</code>也可以使用选择器。关于选择器的详情,请看<a href="https://angular.io/api/core/Directive#selector">这里</a></p>
<p><strong>注意：</strong> 选择器不是必须的，一个组件可以没有选择器，这样的组件只能通过路由来访问，或者动态加载。</p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>模板是Component的视图，可以是HTML文件模板（比如上面的<code>Product</code>组件），也可以是内联模板。内联模板一般使用模版字符串(&#96;&#96;)，因为模板字符串可以支持多行。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;Product works&lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这样的话，就不需要<code>product.component.html</code>文件了。通常来说，如果模板的内容较多，还是存放到文件中比较好，这样方便维护。</p>
<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><p>样式是Component的样式，Angular支持多文件样式，单文件样式以及内联样式：</p>
<h3 id="多文件样式"><a href="#多文件样式" class="headerlink" title="多文件样式"></a>多文件样式</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./product.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./product.component.less&#x27;</span>, <span class="string">&#x27;./product.item.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="单文件样式"><a href="#单文件样式" class="headerlink" title="单文件样式"></a>单文件样式</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./product.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./product.component.less&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./product.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styles</span>: [<span class="string">&#x27;div &#123; color: red; &#125;&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这样的话，就不需要<code>product.component.less</code>文件了。通常来说，如果样式较多，还是存放到文件中比较好, 样式是依附于模板的，如果一个组件没有模板，那么也就没有样式。</p>
<p>对于一个Component来说：</p>
<ol>
<li>只有<code>component.ts</code>文件是必须的。</li>
<li><code>component.html</code>和<code>component.less</code>是可选的, 可以使用内联模板和内联样式代替，也可以干脆没有。</li>
<li>可以没有<code>selector</code>(选择器)，但是这样的Component只能通过路由来访问，或者动态加载。</li>
</ol>
<p>一个极简组件：这个组件什么也不显示，没有样式，也没有选择器。只能在路由中使用。可以在ngOnInit中添加一些逻辑，比如用来弹出popup等。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="component-vs-module"><a href="#component-vs-module" class="headerlink" title="component vs module"></a>component vs module</h2><p>在Angular中，非Standalone组件必须隶属于一个NgModule，也就是必须在一个module的<code>declarations</code>中声明，否则无法使用该组件。<br>非Standalone组件至多能在一个module中声明，如果其他module也要使用这个组件，那么需要将这个组件声明在其module的<code>exports</code>中，然后在其他module中引入这个module。</p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>component</tag>
        <tag>selector</tag>
        <tag>template</tag>
        <tag>style</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-component-input</title>
    <url>/2025/02/18/angular-component-input/</url>
    <content><![CDATA[<p>今天这篇我们讲解一下Angular中的Input，Input是Angular中的一个装饰器，它用来接收父组件传递过来的数据。</p>
<h2 id="传统的-Input-写法"><a href="#传统的-Input-写法" class="headerlink" title="传统的@Input()写法"></a>传统的@Input()写法</h2><p>为了方便展示，我们定义两个组件, 一个父组件：<code>ListComponent</code>， 一个子组件：<code>ListItemComponent</code>。为了便于展示，我们将template和style都写在component.ts中。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// list-item.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, <span class="title class_">Input</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-list-item&#x27;</span>,</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;list-item&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;div&gt;id: &#123;&#123;id&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;div&gt;name: &#123;&#123;name&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styles</span>: [<span class="string">`</span></span><br><span class="line"><span class="string">    .list-item &#123;</span></span><br><span class="line"><span class="string">      border: 1px solid #ccc;</span></span><br><span class="line"><span class="string">      margin-bottom: 10px;</span></span><br><span class="line"><span class="string">      padding: 10px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  `</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ListItemComponent</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>(&#123;<span class="attr">required</span>: <span class="literal">true</span>&#125;) <span class="attr">id</span>: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>ListItemComponent</code>中，我们定义了两个属性：<code>id</code>和<code>name</code>，并且使用了<code>@Input</code>装饰器。<code>@Input</code>装饰器有一个可选的参数<code>required</code>，如果设置为<code>true</code>，则表示这个属性是必须的，如果使用组件时没有给该字段赋值，则会报错。</p>
<p>接下来我们在<code>ListComponent</code>中使用<code>ListItemComponent</code>组件，并传递数据。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// list.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ListItemComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;../list-item/list-item.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-list&#x27;</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">ListItemComponent</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;list&quot;&gt;</span></span><br><span class="line"><span class="string">      @for (item of listItems; track item.id) &#123;</span></span><br><span class="line"><span class="string">        &lt;app-list-item [id]=&quot;item.id&quot; [name]=&quot;item.name&quot;/&gt;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./list.component.scss&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ListComponent</span> &#123;</span><br><span class="line">  listItems = [</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;item 1&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;item 2&#x27;</span>&#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@Input</code>定义的字段，需要通过property binding的方式传递数据，即<code>[id]=&quot;item.id&quot;</code>和<code>[name]=&quot;item.name&quot;</code>。</p>
<h2 id="基于signal的input写法"><a href="#基于signal的input写法" class="headerlink" title="基于signal的input写法"></a>基于signal的<code>input</code>写法</h2><p>以上是旧版的写法，从Angular 17.1开始，我们可以使用新版的基于signal的<code>input</code>语法了。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, input&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>; <span class="comment">// import &#x27;input&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ListItemComponent</span> &#123;</span><br><span class="line">  <span class="comment">// @Input(&#123;required: true&#125;) id: string = &#x27;&#x27;;</span></span><br><span class="line">  <span class="comment">// @Input() name: string = &#x27;&#x27;;</span></span><br><span class="line"></span><br><span class="line">  id = input.<span class="property">required</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">  name = input&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于这种类型的input的值对应的是一个signal, 所以读取值的时候，要加<code>()</code>，id -&gt; <code>id()</code>, name -&gt; <code>name()</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">template: `</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>id: &#123;&#123;id()&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>name: &#123;&#123;name()&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  `</span><br></pre></td></tr></table></figure>

<h2 id="default-value"><a href="#default-value" class="headerlink" title="default value"></a>default value</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">value = <span class="title function_">input</span>(<span class="number">0</span>); <span class="comment">// 0 is default value</span></span><br></pre></td></tr></table></figure>

<h2 id="specify-type"><a href="#specify-type" class="headerlink" title="specify type"></a>specify type</h2><p>Note that, for simple values, typescript can infer the type by value, but for complex types, you need to specify the type.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">value = input&lt;<span class="built_in">number</span>&gt;(<span class="number">0</span>); <span class="comment">// value = input(0); // totally ok</span></span><br><span class="line">value = input&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;&#x27;</span>); <span class="comment">// value = input(&#x27;&#x27;); // totally ok </span></span><br></pre></td></tr></table></figure>

<h2 id="required"><a href="#required" class="headerlink" title="required"></a>required</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">value = input.<span class="property">required</span>&lt;<span class="built_in">number</span>&gt;(); <span class="comment">// required</span></span><br></pre></td></tr></table></figure>

<h2 id="Input-transform"><a href="#Input-transform" class="headerlink" title="Input transform"></a>Input transform</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ListItemComponent</span> &#123;</span><br><span class="line">  id = input.<span class="property">required</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">  name = <span class="title function_">input</span>(<span class="string">&#x27;&#x27;</span>, &#123;<span class="attr">transform</span>: trimString&#125;); <span class="comment">// apply transform</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define transform function, transform function should be statically analyzable and pure function.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trimString</span>(<span class="params"><span class="attr">value</span>: <span class="built_in">string</span> | <span class="literal">undefined</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value?.<span class="title function_">trim</span>() ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Built-in-transform"><a href="#Built-in-transform" class="headerlink" title="Built-in transform"></a>Built-in transform</h3><ol>
<li><code>booleanAttribute</code> - imitates the behavior of standard HTML boolean attributes, where the presence of the attribute indicates a “true” value. However, Angular’s booleanAttribute treats the literal string “false” as the boolean false.</li>
<li><code>numberAttribute</code> - attempts to parse the given value to a number, producing NaN if parsing fails.</li>
</ol>
<h2 id="Input-alias"><a href="#Input-alias" class="headerlink" title="Input alias"></a>Input alias</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">value = <span class="title function_">input</span>(<span class="number">0</span>, &#123;<span class="attr">alias</span>: <span class="string">&#x27;sliderValue&#x27;</span>&#125;); <span class="comment">// aliasValue is the alias name</span></span><br></pre></td></tr></table></figure>
<p>在模板中使用<code>sliderValue</code>, 注意，组件代码中仍然只能使用<code>value</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-slider</span> [<span class="attr">sliderValue</span>]=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://angular.dev/guide/components/inputs">https://angular.dev/guide/components/inputs</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>input</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-constructor-vs-ngoninit</title>
    <url>/2024/10/02/angular-constructor-vs-ngoninit/</url>
    <content><![CDATA[<h2 id="Constructor-vs-ngOnInit"><a href="#Constructor-vs-ngOnInit" class="headerlink" title="Constructor vs ngOnInit"></a>Constructor vs ngOnInit</h2><p>What’s the difference between constructor and ngOnInit in Angular?<br><code>constructor</code> is a TypeScript class constructor while <code>ngOnInit</code> is an Angular lifecycle hook called by <code>Angular</code> to indicate that Angular is done creating the component. a common question is when to use <code>constructor</code> and when to use <code>ngOnInit</code>?</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, <span class="title class_">OnInit</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-product&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./product.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./product.component.scss&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// What should be done here?</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// What should be done here?</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>constructor</code> is used to initialize the class properties, but it’s not the right place to do any initialization that depends on Angular services or inputs. ngOnInit is the right place to do such initialization.</li>
<li><code>ngOnInit</code> is an Angular lifecycle hook that is called after Angular has initialized all data-bound properties of a directive. It’s the right place to put initialization logic that depends on Angular services or inputs.</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, <span class="title class_">OnInit</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">DataService</span>&#125; <span class="keyword">from</span> <span class="string">&quot;../data.service&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-product&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./product.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./product.component.scss&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">products</span>: <span class="built_in">any</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Dependency Injection goes here.</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">dataService</span>: <span class="title class_">DataService</span></span>) &#123;</span><br><span class="line">    <span class="comment">// What should be done here?</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dataService</span>.<span class="title function_">fetchData</span>().<span class="title function_">subscribe</span>(<span class="function">(<span class="params"><span class="attr">data</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">products</span> = data;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><table>
<thead>
<tr>
<th></th>
<th>When to call</th>
<th>Call count</th>
<th>What to do</th>
<th>Comments</th>
</tr>
</thead>
<tbody><tr>
<td>constructor</td>
<td>When create class</td>
<td>1</td>
<td>1. Initialize class properties, 2. DI</td>
<td></td>
</tr>
<tr>
<td>ngOnInit</td>
<td>after <code>constructor</code> and the first <code>ngOnChanges</code></td>
<td>1</td>
<td>1. Init @Input, 2. Call service to fetch data</td>
<td></td>
</tr>
</tbody></table>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://stackoverflow.com/questions/35763730/difference-between-constructor-and-ngoninit">https://stackoverflow.com/questions/35763730/difference-between-constructor-and-ngoninit</a></li>
<li><a href="https://medium.com/angular-in-depth/the-essential-difference-between-constructor-and-ngoninit-in-angular-c9930c209a42">https://medium.com/angular-in-depth/the-essential-difference-between-constructor-and-ngoninit-in-angular-c9930c209a42</a></li>
</ul>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>ngoninit</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-customize-webpack</title>
    <url>/2024/09/14/angular-customize-webpack/</url>
    <content><![CDATA[<p>Angular 隐藏了项目构建的细节，其构建过程通过各种Builder来实现，底层可以使用Webpack或者ESBuild（从Angular17开始，默认使用ESBuild），那么我们需要修改Webpack配置怎么办呢？其实只有一个办法，那就是通过第三方npm package，这里介绍目前流行的两个。</p>
<ul>
<li><a href="https://www.npmjs.com/package/ngx-build-plus">ngx-build-plus</a> - Angular Module Federation也是用的这个package来做Webpack定制化。</li>
<li><a href="https://www.npmjs.com/package/@angular-builders/custom-webpack">@angular-builders&#x2F;custom-webpack</a></li>
</ul>
<p>这两者的实现原理也比较简单，都是通过继承<a href="https://www.npmjs.com/package/@angular-devkit/build-angular">@angular-devkit&#x2F;build-angular</a>来实现的。</p>
<p>下面我们分别看看，这两个package的使用方法。</p>
<h2 id="ngx-build-plus"><a href="#ngx-build-plus" class="headerlink" title="ngx-build-plus"></a>ngx-build-plus</h2><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install ngx-build-plus --save-dev</span><br></pre></td></tr></table></figure>

<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p><code>angular.json</code>(for Angular project) or <code>project.json</code>(For Nx based mono repo)</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;architect&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ngx-build-plus:browser&quot;</span><span class="punctuation">,</span> <span class="comment">// change builder</span></span><br><span class="line">      <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;extraWebpackConfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;extra-webpack.config.js&quot;</span> <span class="comment">// supply a path to the custom webpack config</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="angular-builders-custom-webpack"><a href="#angular-builders-custom-webpack" class="headerlink" title="@angular-builders&#x2F;custom-webpack"></a>@angular-builders&#x2F;custom-webpack</h2><h3 id="Installation-1"><a href="#Installation-1" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @angular-builders/custom-webpack --save-dev</span><br></pre></td></tr></table></figure>

<h3 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h3><p><code>angular.json</code>(for Angular project) or <code>project.json</code>(For Nx based mono repo)</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;architect&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@angular-builders/custom-webpack:browser&quot;</span><span class="punctuation">,</span> <span class="comment">// change builder</span></span><br><span class="line">      <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;customWebpackConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./extra-webpack.config.js&quot;</span><span class="punctuation">,</span> <span class="comment">// supply a path to the custom webpack config</span></span><br><span class="line">          <span class="attr">&quot;mergeStrategies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;externals&quot;</span><span class="punctuation">:</span> <span class="string">&quot;replace&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="How-to-choose"><a href="#How-to-choose" class="headerlink" title="How to choose?"></a>How to choose?</h2><ol>
<li>If you are using Angular Module Federation, you should use <code>ngx-build-plus</code>, and it is installed automatically when you create a new Angular project with Angular Module Federation. This package has not been upgraded for a long time, but it is still working. <code>ngx-build-plus</code> support <code>hooks</code>.</li>
<li>If you are not using Angular Module Federation, you can choose either of them, but <code>@angular-builders/custom-webpack</code> is more popular. This package is upgraded frequently.</li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>webpack</tag>
        <tag>customize</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-data-binding</title>
    <url>/2024/05/06/angular-data-binding/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Data Binding是Angular中最重要的概念之一。它是Angular中组件和模板间的通信机制。Angular中有四种数据绑定方式，注意数据绑定都发生在html模板中。</p>
<h2 id="Interpolation"><a href="#Interpolation" class="headerlink" title="Interpolation"></a>Interpolation</h2><p>字符串插值是Angular中最简单的数据绑定形式。它使用双大括号<code>&#123;&#123;&#125;&#125;</code>将模板表达式包裹在其中。模板表达式是一段JavaScript代码，它会被Angular解析并插入到HTML中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--app.component.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, I&#x27;m &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.component.ts</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;Philip&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是<code>&#123;&#123;&#125;&#125;</code>仅支持简单值的插值，比如数字，字符串，布尔值等。如果要插入对象，数组等复杂值，需要使用属性绑定。</p>
<p><code>Interpolation</code>的数据流向是从组件传递到模板，不能反向传递。</p>
<h2 id="Property-Binding"><a href="#Property-Binding" class="headerlink" title="Property Binding"></a>Property Binding</h2><p>Angular中属性绑定可以为HTML元素的属性赋值。属性绑定使用如下语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">[property]=&quot;expression&quot;</span><br></pre></td></tr></table></figure>
<p>当Angular编译器遇到<code>[property]</code>时，它会对右侧的表达式<code>expression</code>进行求值，并将结果赋值给<code>property</code>属性。</p>
<p>比如我们要为一个图片的<code>src</code>属性赋值，可以使用如下代码，这里<code>src</code>是<code>img</code>标签的一个属性，<code>imageUrl</code>又是组件的属性，属性绑定因此得名。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--app.component.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> [<span class="attr">src</span>]=<span class="string">&quot;imageUrl&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Angular Logo&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.component.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  imageUrl = <span class="string">&#x27;https://www.angular.io/assets/images/angular.png&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>属性绑定的数据流向是从组件传递到模板，不能反向传递。</p>
<h2 id="Event-Binding"><a href="#Event-Binding" class="headerlink" title="Event Binding"></a>Event Binding</h2><p>事件绑定是Angular中将模板中的事件和组件中的方法关联起来的机制。事件绑定使用如下语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">(event)=&quot;eventHandler()&quot;</span><br></pre></td></tr></table></figure>
<p>其中<code>event</code>是一个事件名，比如<code>click</code>、<code>keydown</code>、<code>mousemove</code>等等。<code>eventHandler</code>是组件中的某个方法，用来处理该事件。</p>
<p>下面的代码用于绑定<code>button</code>的<code>click</code>事件，当用户点击按钮时，Angular会调用组件中的<code>updateName</code>方法来更新<code>name</code>属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--app.component.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, I&#x27;m &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;updateName(&#x27;Philip Zhang&#x27;)&quot;</span>&gt;</span>Update name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.component.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;Philip&#x27;</span>;</span><br><span class="line">  <span class="title function_">updateName</span>(<span class="params"><span class="attr">newName</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = newName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在确定事件目标（event target）时，Angular首先判断指令是否有一个输出属性，如果有，Angular会调用这个输出属性，如果没有，Angular会调用DOM元素的事件。</p>
<p>比如下面这段代码，<code>clickable</code>对应一个自定义指令<code>ClickDirective</code>。Angular在处理<code>myClick</code>事件时，会首先检查<code>ClickDirective</code>是否有<code>myClick</code>输出属性，如果没有，会调用DOM元素button上的<code>myClick</code>事件。 — 注意<code>myClick</code>在这里只是一个名字，可以泛指任何事件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>myClick is an event on the custom ClickDirective:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> (<span class="attr">myClick</span>)=<span class="string">&quot;clickHandler&quot;</span> <span class="attr">clickable</span>&gt;</span>click with myClick<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>事件绑定的数据流向是从模板传递到组件，不能反向传递。</p>
<h2 id="Two-way-Binding"><a href="#Two-way-Binding" class="headerlink" title="Two-way Binding"></a>Two-way Binding</h2><p>双向数据绑定是Angular中最强大的数据绑定方式，双向数据绑定使用如下语法：Angular团队给这个语法起了一个非常形象的名字，叫<em>banana in a box</em>。这个语法是将属性绑定和事件绑定结合在一起，实现了数据的双向绑定。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">[(ngModel)]=&quot;property&quot;</span><br></pre></td></tr></table></figure>

<p>双向数据绑定的数据流向是双向的：</p>
<ol>
<li>当组件内的数据变化时，页面上的内容跟着变化。</li>
<li>反之，当页面内容变化时，组件内的数据也会跟着变化。</li>
</ol>
<p>下面是一个双向绑定的例子，当用户在input框中输入内容时，<code>name</code>属性会跟着变化，页面上显示的内容也会跟着变化。初始化的时候，<code>name</code>属性的值是<code>Philip</code>，页面上输入框内显示的内容也是<code>Philip</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--app.component.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, I&#x27;m &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：使用双向绑定时，必须导入<code>FormsModule</code>模块。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.component.ts</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">FormsModule</span> <span class="comment">// this is must be.</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;Philip&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意：使用双向绑定的<code>ngModel</code>指令时，必须在<code>imports</code>数组中导入<code>FormsModule</code>模块。</p>
<p>下图显示了Angular中四种数据绑定方式的数据流向。</p>
<p><img src="/../images/angular-data-binding.png" alt="angular-data-binding"></p>
<ul>
<li><code>[ ]</code> - property binding</li>
<li><code>&#123;&#123; &#125;&#125;</code> - interpolation</li>
<li><code>( )</code> - event binding</li>
<li><code>[( )]</code> - two-way binding</li>
</ul>
<h2 id="Two-way-binding-between-components"><a href="#Two-way-binding-between-components" class="headerlink" title="Two-way binding between components"></a>Two-way binding between components</h2><p>双向数据绑定不仅可以在组件内部使用，还可以在组件之间使用。比如下面的例子，我们定义了一个Counter组件，为了方便我们把所有代码都写到了一个文件里面。<br>Counter组件中的count是一个Input属性，由父组件传入。当用户点击增加或者减少按钮时，Counter组件会调用<code>updateCount</code>方法，更新count属性，并且通过<code>changeCount</code>事件将新的count值传递给父组件。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, <span class="title class_">EventEmitter</span>, <span class="title class_">Input</span>, <span class="title class_">Output</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-counter&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;updateCount(-1)&quot;&gt;-&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;&#123;&#123; count &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;updateCount(+1)&quot;&gt;+&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CounterComponent</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() count = <span class="number">0</span>;</span><br><span class="line">  <span class="meta">@Output</span>() countChange = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">updateCount</span>(<span class="params"><span class="attr">value</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> += value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">countChange</span>.<span class="title function_">emit</span>(<span class="variable language_">this</span>.<span class="property">count</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是：这里面的Output函数必须是<code>xxxChange</code>的形式，xxx是Input属性的名字，比如代码中的<code>count</code>。那么对应的Output属性就是<code>countChange</code>，<br>这是Angular的约定。如果不是这个形式，Angular会认为这是一个普通的输出属性，而不是双向绑定的输出属性。（实测这种情况IDE会报错，但仍能运行）。</p>
<p>在父组件中调用Counter组件：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;app-counter [(count)]=&quot;initialCount&quot;&gt;&lt;/app-counter&gt;`</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">CounterComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  initialCount = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Input-and-Output"><a href="#Input-and-Output" class="headerlink" title="@Input and @Output"></a>@Input and @Output</h2><p>Angular中的@Input和@output和属性绑定和事件绑定有些类似，但是它们是用来在父子组件之间传递数据的。@Input用来从父组件向子组件传递数据，@Output用来从子组件向父组件传递数据。<br>上面的例子中已经介绍了，词不赘述。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://angular.dev/guide/templates/binding">https://angular.dev/guide/templates/binding</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>binding</tag>
        <tag>interpolation</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-decorator-input</title>
    <url>/2024/07/27/angular-decorator-input/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>input</tag>
        <tag>decorator</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-data-service</title>
    <url>/2025/01/01/angular-data-service/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>在Angular开发中经常要使用一些后台数据，下面是一个封装好的DataService服务，用于获取后台数据。数据来自：<a href="https://jsonplaceholder.typicode.com/">JSONPlaceholder</a></p>
<h1 id="DataService"><a href="#DataService" class="headerlink" title="DataService"></a>DataService</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Injectable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;<span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DataService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetchTodoById</span>(<span class="params"><span class="attr">id</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`https://jsonplaceholder.typicode.com/todos/<span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetch200Todos</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`https://jsonplaceholder.typicode.com/todos`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Data-types"><a href="#Data-types" class="headerlink" title="Data types"></a>Data types</h1><h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>data service</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-deferrable-views</title>
    <url>/2025/01/04/angular-deferrable-views/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Deferrable views is a new feature in Angular 18 that allows you to defer the loading of a component until it is needed. This can help improve the performance of your application by reducing the initial bundle size.</p>
<h1 id="How-to-use-deferrable-views"><a href="#How-to-use-deferrable-views" class="headerlink" title="How to use deferrable views"></a>How to use deferrable views</h1><h2 id="Load-when-browser-is-idle"><a href="#Load-when-browser-is-idle" class="headerlink" title="Load when browser is idle"></a>Load when browser is idle</h2><p>Wrap your component with <code>@defer &#123;&#125;</code> to make it deferrable. In the following example, the <code>app-product-detail</code> component will be loaded only when the Browser is idle.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@defer</span> &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">app-product-detail</span>&gt;</span><span class="tag">&lt;/<span class="name">app-product-detail</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Load-when-component-enter-the-viewport"><a href="#Load-when-component-enter-the-viewport" class="headerlink" title="Load when component enter the viewport"></a>Load when component enter the viewport</h2><p>You can also specify a condition for when the component should be loaded. In the following example, the <code>app-product-detail</code> component will be loaded when it enters the viewport.</p>
<h3 id="Placeholder"><a href="#Placeholder" class="headerlink" title="Placeholder"></a>Placeholder</h3><p>Note that, defer on viewport must be used in conjunction with @placeholder directive. When component is out of viewport, the placeholder will be rendered.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@defer</span>(on viewport) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">app-product-detail</span>&gt;</span><span class="tag">&lt;/<span class="name">app-product-detail</span>&gt;</span></span></span><br><span class="line">&#125; <span class="meta">@placeholder</span>() &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Default content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>To test this, you can add a long <code>div</code> element before the <code>app-product-detail</code> component to make it out of the viewport.</p>
<h3 id="Loading-section"><a href="#Loading-section" class="headerlink" title="Loading section."></a>Loading section.</h3><p>You’d better add a section to show the loading state of the component.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@defer</span>(on viewport) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">app-product-detail</span>&gt;</span><span class="tag">&lt;/<span class="name">app-product-detail</span>&gt;</span></span></span><br><span class="line">&#125; <span class="meta">@placeholder</span>() &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Default content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125; <span class="meta">@loading</span>() &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>To test the loading view, you can set the slow 3G network in the browser dev tools&#x2F;network tab.</p>
<h3 id="Error-section"><a href="#Error-section" class="headerlink" title="Error section"></a>Error section</h3><p>You can also specify an error section to show when the component fails to load.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@defer</span>(on viewport) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">app-product-detail</span>&gt;</span><span class="tag">&lt;/<span class="name">app-product-detail</span>&gt;</span></span></span><br><span class="line">&#125; <span class="meta">@placeholder</span>() &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Default content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125; <span class="meta">@loading</span>() &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125; <span class="meta">@error</span>() &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Error loading component<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This is not easy to test, not found a method yet.</p>
<h3 id="Minium-render-time-for-placeholder-and-loading-section"><a href="#Minium-render-time-for-placeholder-and-loading-section" class="headerlink" title="Minium render time for placeholder and loading section."></a>Minium render time for placeholder and loading section.</h3><p>To avoid flickering, you can specify a minimum render time for the placeholder and loading section. In the following example, the placeholder will be rendered for at least 200ms before the component is loaded, and the loading section will be rendered for at least 500ms.</p>
<p>Note that <code>at least</code> doesn’t mean <code>exactly</code>, for example, if the component didn’t load in 500ms, the loading section will keep showing until the component is loaded.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@defer</span>(on viewport) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">app-product-detail</span>&gt;</span><span class="tag">&lt;/<span class="name">app-product-detail</span>&gt;</span></span></span><br><span class="line">&#125; <span class="meta">@placeholder</span>( minimum 200ms) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Default content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125; <span class="meta">@loading</span>(minimum 500ms) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Trigger-conditions"><a href="#Trigger-conditions" class="headerlink" title="Trigger conditions"></a>Trigger conditions</h2><p>Angular provides several trigger conditions for deferrable views. You can use the following conditions to specify when the component should be loaded.</p>
<table>
<thead>
<tr>
<th>Trigger</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>idle</td>
<td>Triggers when the browser is idle.</td>
</tr>
<tr>
<td>viewport</td>
<td>Triggers when specified content enters the viewport</td>
</tr>
<tr>
<td>interaction</td>
<td>Triggers when the user interacts with specified element</td>
</tr>
<tr>
<td>hover</td>
<td>Triggers when the mouse hovers over specified area</td>
</tr>
<tr>
<td>immediate</td>
<td>Triggers immediately after non-deferred content has finished rendering</td>
</tr>
<tr>
<td>timer</td>
<td>Triggers after a specific duration</td>
</tr>
</tbody></table>
<h3 id="idle"><a href="#idle" class="headerlink" title="idle"></a>idle</h3><p>This is the default option, the component will be loaded when the browser is idle.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@defer</span>() &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">app-product-detail</span>&gt;</span><span class="tag">&lt;/<span class="name">app-product-detail</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h3><p>The component will be loaded when the specified content enters the viewport. If you didn’t specify the content, the component will be loaded when itself enters the viewport.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@defer</span> (on viewport) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">app-product-detail</span>&gt;</span><span class="tag">&lt;/<span class="name">app-product-detail</span>&gt;</span></span></span><br><span class="line">&#125; <span class="meta">@placeholder</span> &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Default view<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can also load the component when a specific element enters the viewport. In the following example, the <code>app-product-detail</code> component will be loaded when the <code>greeting</code> element enters the viewport.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;div #greeting&gt;<span class="title class_">Hello</span>!&lt;/div&gt;</span><br><span class="line"><span class="meta">@defer</span> (on <span class="title function_">viewport</span>(greeting)) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">app-product-detail</span>&gt;</span><span class="tag">&lt;/<span class="name">app-product-detail</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="interaction"><a href="#interaction" class="headerlink" title="interaction"></a>interaction</h3><p>The <code>interaction</code> trigger loads the deferred content when user interacts withe the specific element through <code>click</code> or <code>keydown</code> event.</p>
<p>By default, the placeholder acts as the interaction element. Placeholders used this way must have a single root element.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@defer</span> (on interaction) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">app-product-detail</span>&gt;</span><span class="tag">&lt;/<span class="name">app-product-detail</span>&gt;</span></span></span><br><span class="line">&#125; <span class="meta">@placeholder</span> &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Default view<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can also specify a different element for the interaction trigger. In the following example, the <code>app-product-detail</code> component will be loaded when the <code>greeting</code> element is clicked.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;div #greeting&gt;<span class="title class_">Hello</span>!&lt;/div&gt;</span><br><span class="line"><span class="meta">@defer</span> (on <span class="title function_">interaction</span>(greeting)) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">app-product-detail</span>&gt;</span><span class="tag">&lt;/<span class="name">app-product-detail</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="hover"><a href="#hover" class="headerlink" title="hover"></a>hover</h3><p>Same as <code>interaction</code>, you can just replace <code>interaction</code> with <code>hover</code> in the above examples.</p>
<h3 id="immediate"><a href="#immediate" class="headerlink" title="immediate"></a>immediate</h3><p>This is different than <code>idle</code>, the component will be loaded immediately after the non-deferred content has finished rendering.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@defer</span> (on immediate) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">app-product-detail</span>&gt;</span><span class="tag">&lt;/<span class="name">app-product-detail</span>&gt;</span></span></span><br><span class="line">&#125; <span class="meta">@placeholder</span> &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Default view<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h3><p>The <code>timer</code> trigger loads the deferred content after a specific duration. You can specify the duration in milliseconds or seconds.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@defer</span> (on <span class="title function_">timer</span>(500ms)) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">app-product-detail</span>&gt;</span><span class="tag">&lt;/<span class="name">app-product-detail</span>&gt;</span></span></span><br><span class="line">&#125; <span class="meta">@placeholder</span> &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Default view<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="when"><a href="#when" class="headerlink" title="when"></a>when</h3><p>The <code>when</code> trigger accepts a custom conditional expression and loads the deferred content when the condition becomes true. You can control the <code>condition</code> in our component class.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@defer</span> (when condition) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">app-product-detail</span>&gt;</span><span class="tag">&lt;/<span class="name">app-product-detail</span>&gt;</span></span></span><br><span class="line">&#125; <span class="meta">@placeholder</span> &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Default view<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This is a one-time operation– the @defer block does not revert back to the placeholder if the condition changes to a falsy value after becoming truthy.</p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><h2 id="Conditions-for-deferrable-views"><a href="#Conditions-for-deferrable-views" class="headerlink" title="Conditions for deferrable views"></a>Conditions for deferrable views</h2><ol>
<li>Must be standalone.</li>
<li>Must not references outside of the <code>@defer</code> block in the same template file.</li>
</ol>
<h2 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h2><ol>
<li>Angular use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import">dynamic import</a> to load the deferrable views.</li>
<li>The component loaded in @defer was bundled in a separated chunk.</li>
</ol>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li><a href="https://angular.dev/tutorials/learn-angular/10-deferrable-views">https://angular.dev/tutorials/learn-angular/10-deferrable-views</a></li>
<li><a href="https://blog.angular.dev/introducing-angular-v17-4d7033312e4b">https://blog.angular.dev/introducing-angular-v17-4d7033312e4b</a></li>
<li><a href="https://angular.dev/guide/templates/defer">https://angular.dev/guide/templates/defer</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>defer</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-dependency-injection</title>
    <url>/2024/04/13/angular-dependency-injection/</url>
    <content><![CDATA[<p>Dependency injection(DI) - 是Angular的核心概念之一 is a design pattern that allows us to remove the hard-coded dependencies and make our application loosely coupled, maintainable, and testable. It is a way to achieve Inversion of Control (IoC) in our application.</p>
<p>DI is widely used in Angular, React, and other modern frameworks. In Angular, we can inject services, components, and other dependencies into our components, services, and directives.</p>
<p>Some terms:</p>
<ul>
<li>Dependency 依赖</li>
<li>Injector 注入器</li>
<li>Registry 注册中心</li>
<li>DI - Dependency Injection</li>
<li>IoC - Inversion of Control</li>
</ul>
<p>Ways to implement DI:</p>
<ul>
<li>Constructor Injection</li>
<li>Setter Injection</li>
<li>Interface Injection</li>
</ul>
<h1 id="Angular-Dependency-Injection"><a href="#Angular-Dependency-Injection" class="headerlink" title="Angular Dependency Injection"></a>Angular Dependency Injection</h1><p>Angular通过一个叫做<code>Injector</code>（注入器）的服务来实现DI。注入器相当于依赖的生产者和依赖的消费者之间的桥梁。Angular会在启动时创建一个应用级别的注入器（也叫root injector），当然也会创建其他的injector（如果需要的话）。</p>
<p>当需要一个依赖时，Angular首先会检查其注册中心是否有这个依赖，如果有则直接返回，如果没有则会根据依赖的类型创建一个实例并返回。同时将其加入到注册中心中，以便下次使用。</p>
<p>在依赖注入中有两个主要的角色，一个是依赖的生产者，比如用来获取后台数据的<code>Service</code>，一个是依赖的消费者，比如使用这个<code>Service</code>的<code>Component</code>。而<code>Injector</code>就是这两者之间的桥梁。有了<code>Injector</code>，依赖生产者和依赖消费者之间便实现了解耦。</p>
<h1 id="Inversion-of-control"><a href="#Inversion-of-control" class="headerlink" title="Inversion of control"></a>Inversion of control</h1><p>控制反转 - 到底怎么个反转呢？<br>在没有依赖注入之前，对象自己管理自己的依赖。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">engine</span>: <span class="title class_">Engine</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">engine</span> = <span class="keyword">new</span> <span class="title class_">Engine</span>(); <span class="comment">// 直接创建依赖</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有了依赖注入之后，对象不在负责依赖的管理，而是交给Angular框架来管理，把管理依赖的职责由对象转移到外层框架，依赖的查找、注入都由框架负责，这就是控制反转。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-car&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">Engine</span>] <span class="comment">// 依赖配置在外部, 如果依赖有&#123;provideIn: &#x27;root&#x27;&#125;，则不需要配置这里</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">engine</span>: <span class="title class_">Engine</span></span>) &#123;&#125; <span class="comment">// 依赖由 Angular 注入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Provide-a-dependency"><a href="#Provide-a-dependency" class="headerlink" title="Provide a dependency"></a>Provide a dependency</h1><p>在Angular中，有三种方式提供一个依赖。</p>
<h2 id="provideIn"><a href="#provideIn" class="headerlink" title="provideIn"></a>provideIn</h2><p>创建依赖</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroService</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>使用依赖</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">heroService</span>: <span class="title class_">HeroService</span></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>provideIn：&#39;root&#39;</code>方式提供的依赖有如下特点：</p>
<ol>
<li>该依赖是全局共享的的，只有一个实例。</li>
<li>所有组件、指令、服务等都可以使用该依赖。</li>
<li>支持tree shaking, 如果该依赖没有被使用，则不会被打包到最终的bundle中。</li>
</ol>
<h2 id="providers"><a href="#providers" class="headerlink" title="providers"></a>providers</h2><p>创建依赖</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>() <span class="comment">// &lt;--- 注意这里没有provideIn</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroService</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>使用依赖</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">HeroService</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>providers</code>方式提供的依赖有如下特点：</p>
<ol>
<li>每个使用该依赖的模块对应的实例都会创建一个该依赖的实例。</li>
<li>该依赖是局部的，只有在提供了<code>providers</code>的模块中才能使用。</li>
<li>不支持tree shaking, 无论是否使用，都会被打包到最终的bundle中。</li>
<li>此依赖实例的生命周期和组件相同，当组件销毁时，该依赖实例也销毁。</li>
</ol>
<p>注意，如果当前组件引入了一个依赖，比如一个Service，那么这个依赖：</p>
<ul>
<li>在当前模块可用</li>
<li>在当前模块的模板中的所有组件中也可用</li>
</ul>
<p>举个例子：当前组件是ProductComponent，其模板中引用了ProductDetailComponent。ProductComponent引入了一个ProductService，那么：</p>
<ul>
<li>ProductService在ProductComponent中可用，</li>
<li>ProductService在ProductDetailComponent中也可用（需要ProductDetailComponent的constructor中再次注入该服务）<br>详情请看这里：<a href="https://angular.dev/guide/di/dependency-injection#at-the-component-level">https://angular.dev/guide/di/dependency-injection#at-the-component-level</a></li>
</ul>
<h2 id="ApplicationConfig"><a href="#ApplicationConfig" class="headerlink" title="ApplicationConfig"></a>ApplicationConfig</h2><p>创建依赖</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>() <span class="comment">// &lt;--- 注意这里没有provideIn</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroService</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>使用依赖</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">appConfig</span>: <span class="title class_">ApplicationConfig</span> = &#123;</span><br><span class="line">    <span class="attr">providers</span>: [</span><br><span class="line">      &#123; <span class="attr">provide</span>: <span class="title class_">HeroService</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">AppComponent</span>, appConfig)</span><br></pre></td></tr></table></figure>

<p>使用<code>ApplicationConfig</code>方式提供的依赖有如下特点：</p>
<ol>
<li>该依赖是全局共享的的，只有一个实例。</li>
<li>所有组件、指令、服务等都可以使用该依赖。</li>
<li>不支持tree shaking, 无论是否使用，都会被打包到最终的bundle中。</li>
</ol>
<p>此方式与<code>providedIn: &#39;root&#39;</code>颇为相似，不同的是这种方式不支持tree shaking。</p>
<h2 id="NgModule-based-configuration"><a href="#NgModule-based-configuration" class="headerlink" title="NgModule based configuration"></a>NgModule based configuration</h2><p>创建依赖</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>() <span class="comment">// &lt;--- 注意这里没有provideIn</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroService</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>使用依赖</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">HeroService</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>A service provided in a module is available to all declarations of the module, or to any other modules which share the same ModuleInjector. To understand all edge-cases, see <a href="https://angular.dev/guide/di/hierarchical-dependency-injection">Hierarchical injectors</a>.</p>
<h1 id="Pros-of-DI"><a href="#Pros-of-DI" class="headerlink" title="Pros of DI:"></a>Pros of DI:</h1><ul>
<li>Loose coupling</li>
<li>Easy to test</li>
<li>Easy to maintain</li>
</ul>
<h1 id="references"><a href="#references" class="headerlink" title="references:"></a>references:</h1><ul>
<li><a href="https://angular.dev/guide/di/dependency-injection">https://angular.dev/guide/di/dependency-injection</a></li>
<li><a href="https://www.jamesshore.com/v2/blog/2006/dependency-injection-demystified">https://www.jamesshore.com/v2/blog/2006/dependency-injection-demystified</a></li>
<li><a href="https://www.codeproject.com/Articles/615139/An-Absolute-Beginners-Tutorial-on-Dependency-Inver">https://www.codeproject.com/Articles/615139/An-Absolute-Beginners-Tutorial-on-Dependency-Inver</a></li>
<li><a href="https://angular.io/guide/dependency-injection">Angular Dependency Injection</a></li>
</ul>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>design pattern</tag>
        <tag>dependency injection</tag>
        <tag>di</tag>
        <tag>ioc</tag>
        <tag>injector</tag>
        <tag>service</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-di-hierarchical-injectors</title>
    <url>/2024/12/01/angular-di-hierarchical-injectors/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Angular里面的Injector是分层级的，主要有以下两个层级：</p>
<ul>
<li>EnvironmentInjector</li>
<li>ElementInjector</li>
</ul>
<h2 id="EnvironmentInjector"><a href="#EnvironmentInjector" class="headerlink" title="EnvironmentInjector"></a>EnvironmentInjector</h2><p>EnvironmentInjector层级是通过以下两种方式创建的：</p>
<ol>
<li><code>@Injectable(&#123; providedIn: &#39;xxx&#39; &#125;)</code> - xxx 可以是 <code>root</code>, <code>platform</code>.</li>
<li><code>providers</code> array in <code>ApplicationConfig</code></li>
</ol>
<h2 id="ElementInjector"><a href="#ElementInjector" class="headerlink" title="ElementInjector"></a>ElementInjector</h2><p>ElementInjector是创建在每个Dom元素上的，初始时是空的，当我们在<code>@Directive</code>或者<code>@Component</code>中声明了一个provider时，Angular会在ElementInjector中创建一个实例。</p>
<h2 id="ModuleInjector"><a href="#ModuleInjector" class="headerlink" title="ModuleInjector"></a>ModuleInjector</h2><p>在基于模块的应用中，每个模块都有一个ModuleInjector，ModuleInjector可以通过如下方式配置：</p>
<ol>
<li><code>Injectable(&#123; providedIn: &#39;xxx&#39; &#125;)</code> - xxx 可以是 <code>platform</code>, <code>root</code>.</li>
<li><code>providers</code> array in <code>@NgModule</code></li>
</ol>
<h2 id="PlatformInjector"><a href="#PlatformInjector" class="headerlink" title="PlatformInjector"></a>PlatformInjector</h2><p>在<code>root</code>Injector之上，还有两个Injector，分别是：</p>
<ol>
<li>一个额外的EnvironmentInjector - 即<code>PlatformInjector</code>.</li>
<li>NullInjector.</li>
</ol>
<p>注意：<code>PlatformInjector</code> 是为了多个Angular app服务的，对于基于Nx的超大型Angular项目，一个项目中可能包含多个app（比如使用了Module Federation）而root injector是针对app的，如果要跨app共享服务，那么就要使用<code>PlatformInjector</code>了。</p>
<p>看一下Angular的启动代码(位于<code>src/main.ts</code>文件中)：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">AppComponent</span>, appConfig);</span><br></pre></td></tr></table></figure>
<p>当执行上述代码时，Angular首先创建一个Platform Injector(也是Environment Injector)，然后创建一个Platform Injector的child Injector，也就是root Environment Injector。而在Platform Injector之上，还有一个额外的NullInjector。</p>
<p>所以<code>NullInjector</code>是整个Injector链条的顶端，我们在查找一个依赖时，会顺着这个链条向上查找，如果到了<code>NullInjector</code>还没找到，则会抛出异常。相信很多同学都遇到过下面的错误吧，仔细看报错信息第一行，就是<code>NullInjector</code>!<br><img src="/../images/angular-injector-null_injector.png" alt="NullInjector"></p>
<h2 id="ElementInjector-1"><a href="#ElementInjector-1" class="headerlink" title="ElementInjector"></a>ElementInjector</h2><p>Angular会为每个Dom元素隐式创建一个ElementInjector，当我们在<code>@Directive</code>或者<code>@Component</code>中声明了一个<code>provider</code>或者<code>viewProvider</code>时，Angular会在ElementInjector中创建一个实例。</p>
<h2 id="依赖解决规则（查找规则）"><a href="#依赖解决规则（查找规则）" class="headerlink" title="依赖解决规则（查找规则）"></a>依赖解决规则（查找规则）</h2><p>当Angular为一个Component或者Directive查找依赖时，遵循如下规则：</p>
<ol>
<li>先查找Component或者Directive自身的ElementInjector，如果找到则返回。否则进入下一步。</li>
<li>查找Component或者Directive的Parents的ElementInjector，再查找Parents的Parents的ElementInjector，一直如此直到找到，否则进入下一步。</li>
<li>查找Component或Directive的EnvironmentInjector层级，此过程同ElementInjector，一直向上查找，如果找到则返回，否则报错。</li>
</ol>
<p>此处应该加入一张图。</p>
<h2 id="依赖解决修饰符"><a href="#依赖解决修饰符" class="headerlink" title="依赖解决修饰符"></a>依赖解决修饰符</h2><p>上面介绍的依赖解决规则，可以用以下修饰符来改变，你可以从<code>@angular/core</code>中引入这些修饰符：</p>
<ol>
<li><code>@Optional</code> - 如果找不到依赖，不会报错，而是返回<code>null</code>。</li>
<li><code>@SkipSelf</code> - 跳过当前ElementInjector，向上查找。</li>
<li><code>@Self</code> - 只在当前ElementInjector中查找依赖，不会向上查找。</li>
<li><code>@Host</code> - 只在当前Component及其Host Element的Injector中查找依赖。</li>
</ol>
<p>这些修饰符可以分为三类：</p>
<ol>
<li>What to do if Angular doesn’t find what you’re looking for, this is <code>@Optional()</code></li>
<li>Where to start looking, that is <code>@SkipSelf</code>.</li>
<li>Where to stop looking, <code>@Host</code> and <code>@Self</code>.</li>
</ol>
<h2 id="使用修饰符"><a href="#使用修饰符" class="headerlink" title="使用修饰符"></a>使用修饰符</h2><p>这些修饰符都是在<code>constructor</code>中注入依赖时使用的，比如：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="meta">@Optional</span>() <span class="keyword">private</span> <span class="attr">myService</span>: <span class="title class_">MyService</span></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>关于这些修饰符的详细使用规则，请看<a href="https://zdd.github.io/2024/12/02/angular-di-resolution-modifier/">这篇</a>。</p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>di</tag>
        <tag>injector</tag>
        <tag>hierarchical</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-di-define-dependency-providers</title>
    <url>/2024/08/12/angular-di-define-dependency-providers/</url>
    <content><![CDATA[<p>There are many ways to define a dependency provider in Angular. In this article, we will discuss the following ways:</p>
<h1 id="useClass"><a href="#useClass" class="headerlink" title="useClass"></a>useClass</h1><p><code>useClass</code>是依赖注入中提供provider最常见的方式，我们项目中90%用的都是这种方式，下面来看看怎么使用这种方式，假设我们有一个ProductComponent组件，它依赖一个OrderService服务，我们可以像下面这样提供OrderService：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-product&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">OrderService</span>], <span class="comment">// &lt;-- Provide OrderService</span></span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./product.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./product.component.scss&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductComponent</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的例子其实是简写形式，它等价于下面的完整形式：也就是当<code>provide</code>对应的值和<code>useClass</code>对应的值相同时，我们可以采用这种简写形式。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="attr">providers</span>: [&#123; <span class="attr">provide</span>: <span class="title class_">OrderService</span>, <span class="attr">useClass</span>: <span class="title class_">OrderService</span> &#125;],</span><br></pre></td></tr></table></figure>
<p>还有一点需要注意的是：如果<code>OrderService</code>是<code>providedIn: &#39;root&#39;</code>的话，那么我们就不需要在<code>providers</code>中再次提供<code>OrderService</code>了，直接在构造函数中注入即可。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">orderService</span>: <span class="title class_">OrderService</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>useClass</code>在单元测试中特别有用，如果要测试的Service很复杂，我们可以提供一个mockService来代替他，这个mockService只要满足最小测试范围内即可，这样就可以保证测试的独立性。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="attr">providers</span>: [&#123; <span class="attr">provide</span>: <span class="title class_">UserService</span>, <span class="attr">useClass</span>: mockUserService&#125;]</span><br></pre></td></tr></table></figure>

<h1 id="useExisting"><a href="#useExisting" class="headerlink" title="useExisting"></a>useExisting</h1><p><code>useExisting</code>通常用于提供一个别名，也就是说，<code>useExisting</code>提供了多种访问同一Service的方式，下面来看一个例子：<br>假设我们的Order分为线下订单和线上订单，那么线上订单我们可以单独定义一个Service，叫做<code>OnlineOrderService</code>，这个Service需要的功能OrderService中都有，所以我们可以如下使用它。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-product&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">OrderService</span>, &#123;<span class="attr">provide</span>: <span class="title class_">OnlineOrderService</span>, <span class="attr">useExisting</span>: <span class="title class_">OrderService</span>&#125;], </span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./product.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./product.component.scss&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductComponent</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里：<code>OnlineOrderService</code>是<code>OrderService</code>的别名，我们可以通过<code>OnlineOrderService</code>来访问<code>OrderService</code>的实例。</p>
<p>这种方式通常发生在旧系统到新系统的迁移时，比如迁移的时候，我们可能会更改一些Service的名字，但是为了兼容旧系统，我们可以通过<code>useExisting</code>来提供别名。</p>
<p>以Logger为例，假设旧系统使用的是OldLoggerService, 新系统使用的是NewLoggerService，那么我们可以这样定义：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="attr">providers</span>: [&#123;<span class="attr">provide</span>: <span class="title class_">OldLoggerService</span>, <span class="attr">useExisting</span>: <span class="title class_">NewLoggerService</span>&#125;]</span><br></pre></td></tr></table></figure>

<h1 id="useFactory"><a href="#useFactory" class="headerlink" title="useFactory"></a>useFactory</h1><p><code>useFactory</code>，顾名思义，这种方式使用一个工厂方法来提供依赖的实例，通常用在需要参数的Service中，上面的例子中，我们提供的Service都是无参数的，下面我们来看一个需要参数的Service。</p>
<p>下面这个<code>HeroService</code>需要一个<code>Logger</code>和一个<code>isAuthorized</code>参数，无论是<code>useClass</code>，还是<code>useExisting</code>都无法满足这个需求，这时我们就可以使用<code>useFactory</code>来提供这个Service。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HeroService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="attr">logger</span>: <span class="title class_">Logger</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="attr">isAuthorized</span>: <span class="built_in">boolean</span></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getHeroes</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> auth = <span class="variable language_">this</span>.<span class="property">isAuthorized</span> ? <span class="string">&#x27;authorized&#x27;</span> : <span class="string">&#x27;unauthorized&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">logger</span>.<span class="title function_">log</span>(<span class="string">`Getting heroes for <span class="subst">$&#123;auth&#125;</span> user.`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable constant_">HEROES</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">hero</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">isAuthorized</span> || !hero.<span class="property">isSecret</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>useFactory</code>后面跟的是一个函数，所以我们先定义这个函数。(注意Factory函数是一个<code>injection context</code>，在这个函数内部可以使用<code>inject()</code>方法来注入其他依赖。)</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">heroServiceFactory</span> = (<span class="params"><span class="attr">logger</span>: <span class="title class_">Logger</span>, <span class="attr">userService</span>: <span class="title class_">UserService</span></span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">HeroService</span>(logger, userService.<span class="property">user</span>.<span class="property">isAuthorized</span>);</span><br></pre></td></tr></table></figure>

<p>然后使用<code>useFactory</code>来提供<code>HeroService</code>。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="attr">providers</span>: [</span><br><span class="line">  <span class="title class_">Logger</span>,</span><br><span class="line">  <span class="title class_">UserService</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="title class_">HeroService</span>,</span><br><span class="line">    <span class="attr">useFactory</span>: heroServiceFactory,</span><br><span class="line">    <span class="attr">deps</span>: [<span class="title class_">Logger</span>, <span class="title class_">UserService</span>] <span class="comment">// deps是用来给工厂方法传递参数的</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>注意观察，上面的工厂函数<code>heroServiceFactory</code>中的参数<code>logger</code>和<code>userService</code>是通过<code>deps</code>传递进来的。</p>
<h1 id="useValue"><a href="#useValue" class="headerlink" title="useValue"></a>useValue</h1><p><code>useValue</code>允许你绑定一个静态值到一个token上，这种方式通常用于提供一些常量，比如配置信息等。如果我们需要运行时动态取值，就可以使用这种方式了。</p>
<p><code>useValue</code>的使用步骤如下：</p>
<ol>
<li>定义一个token</li>
<li>使用<code>useValue</code>来提供这个token</li>
<li>在构造函数中注入这个token</li>
</ol>
<h2 id="token是简单值"><a href="#token是简单值" class="headerlink" title="token是简单值"></a>token是简单值</h2><h3 id="定义一个token"><a href="#定义一个token" class="headerlink" title="定义一个token"></a>定义一个token</h3><p>首先新建一个文件<code>src/app/config/AppConfig.ts</code>用来存储token。这里我们创建一个token用来存储主题信息。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">InjectionToken</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@angular/core&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">AppTheme</span> = <span class="keyword">new</span> <span class="title class_">InjectionToken</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;appTheme&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="使用useValue来提供这个token"><a href="#使用useValue来提供这个token" class="headerlink" title="使用useValue来提供这个token"></a>使用<code>useValue</code>来提供这个token</h3><p>由于我们这个token比较简单，就是字符串类型的，所以直接用字符串’light’来提供这个token。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="attr">providers</span>: [&#123;<span class="attr">provide</span>: <span class="title class_">AppTheme</span>, <span class="attr">useValue</span>: <span class="string">&#x27;light&#x27;</span>&#125;],</span><br></pre></td></tr></table></figure>

<h3 id="在构造函数中注入这个token"><a href="#在构造函数中注入这个token" class="headerlink" title="在构造函数中注入这个token"></a>在构造函数中注入这个token</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="meta">@Inject</span>(AppTheme) <span class="keyword">private</span> <span class="attr">theme</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(theme);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="token是对象"><a href="#token是对象" class="headerlink" title="token是对象"></a>token是对象</h2><p>对于复杂的token，我们将其封装到一个JS对象中，如果一个app中有多个配置项，我们可以将这些配置项封装到一个对象<code>AppConfig</code>中，然后使用<code>useValue</code>来提供这个对象。</p>
<h3 id="定义一个token-1"><a href="#定义一个token-1" class="headerlink" title="定义一个token"></a>定义一个token</h3><p>首先定义token对应的对象类型，这里使用typescript中的interface来定义。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/app/config/AppConfig.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="attr">theme</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">version</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">production</span>: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="attr">baseUrl</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">apiEndpoint</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后定义该类型对应的token实例。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/app/config/AppConfig.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">APP_CONFIG</span> = <span class="keyword">new</span> <span class="title class_">InjectionToken</span>&lt;<span class="title class_">AppConfig</span>&gt;(<span class="string">&#x27;app config&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="使用useValue来提供这个token-1"><a href="#使用useValue来提供这个token-1" class="headerlink" title="使用useValue来提供这个token"></a>使用<code>useValue</code>来提供这个token</h3><p>先创建一个<code>AppConfig</code>对象，然后使用<code>useValue</code>来提供这个对象。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">currentAppConfig</span>: <span class="title class_">AppConfig</span> = &#123;</span><br><span class="line">  <span class="attr">theme</span>: <span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">  <span class="attr">version</span>: <span class="string">&#x27;1.0.0&#x27;</span>,</span><br><span class="line">  <span class="attr">production</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">baseUrl</span>: <span class="string">&#x27;https://example.com&#x27;</span>,</span><br><span class="line">  <span class="attr">apiEndpoint</span>: <span class="string">&#x27;https://example.com/api&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">providers</span>: [&#123;<span class="attr">provide</span>: <span class="variable constant_">APP_CONFIG</span>, <span class="attr">useValue</span>: currentAppConfig&#125;],</span><br></pre></td></tr></table></figure>

<h3 id="在构造函数中注入这个token-1"><a href="#在构造函数中注入这个token-1" class="headerlink" title="在构造函数中注入这个token"></a>在构造函数中注入这个token</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="meta">@Inject</span>(APP_CONFIG) <span class="keyword">private</span> <span class="attr">config</span>: <span class="title class_">AppConfig</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样在Component中，就可以使用<code>this.config</code>来访问这个配置对象了。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li><a href="https://angular.dev/guide/di/dependency-injection-providers">https://angular.dev/guide/di/dependency-injection-providers</a></li>
<li><a href="https://medium.com/@matsal.dev/angular-usevalue-useclass-useexisting-and-usefactory-in-a-nutshell-97db8d206084">https://medium.com/@matsal.dev/angular-usevalue-useclass-useexisting-and-usefactory-in-a-nutshell-97db8d206084</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>dependency injection</tag>
        <tag>di</tag>
        <tag>provider</tag>
        <tag>injection token</tag>
        <tag>inject</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-directive-ngfor</title>
    <url>/2024/12/31/angular-directive-ngfor/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>NgFor</code> is a structural directive in Angular, it is used to iterate over a list of items and render them in the template.</p>
<h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p>Suppose you have a months array in your component which contains ‘January’, ‘February’, ‘March’, and You want to render them in the template, you can use <code>NgFor</code> directive to achieve this.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-ng-for&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./ng-for.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./ng-for.component.less&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NgForComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="attr">months</span>: <span class="built_in">string</span>[] = [<span class="string">&#x27;January&#x27;</span>, <span class="string">&#x27;February&#x27;</span>, <span class="string">&#x27;March&#x27;</span>];</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">ngOnInit</span>(): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--app.component.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;months&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let month of months&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;month&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Note that, <code>*ngFor</code> start iteration from the element where it is placed, in this case, it starts from the <code>ul</code> element and renders as below:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;months&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>January<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>February<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>March<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>In order to render the list in a single <code>ul</code> element, you can place <code>*ngFor</code> on the <code>li</code> element:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--app.component.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;months&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let month of months&quot;</span>&gt;</span>&#123;&#123;month&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="track-index"><a href="#track-index" class="headerlink" title="track index"></a>track index</h2><p>If you want to track the index of the current item, you can use <code>index</code>, note <code>index</code> is zero-based.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--app.component.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;months&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let month of months; let i = index&quot;</span>&gt;</span>&#123;&#123;i + 1&#125;&#125;. &#123;&#123;month&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The code above will render as below:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;months&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1. January<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2. February<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3. March<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Use-for"><a href="#Use-for" class="headerlink" title="Use @for"></a>Use <code>@for</code></h2><p>With the new built-in structural <code>@for</code> directive, you can use the following syntax:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  @for(month of months; track $index) &#123;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;$index + 1&#125;&#125;. &#123;&#123; month &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://angular.dev/api/core/@for#">https://angular.dev/api/core/@for#</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>directive</tag>
        <tag>ngfor</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-di-injection-context</title>
    <url>/2025/02/18/angular-di-injection-context/</url>
    <content><![CDATA[<p><code>Injection Context</code> - 顾名思义，注入上下文，说的通俗点，就是在Angular代码中，什么位置可以注入，比如我们最常用的<code>constructor</code>就属于一个<code>Injection Context</code>，因为你可以在<code>constructor</code>中注入服务。</p>
<p>Angular支持的<code>Injection Context</code>有如下几种：</p>
<ol>
<li>In class <code>constructor</code></li>
<li>In the initializer for fields of such classes.</li>
<li>In the factory function specified for useFactory of a Provider or an @Injectable</li>
<li>In the factory function specified for an InjectionToken.</li>
<li>Within a stack frame that runs in an injection context. - 这是个啥？我咋看不懂捏？</li>
</ol>
<h2 id="In-class-constructor"><a href="#In-class-constructor" class="headerlink" title="In class constructor"></a>In class <code>constructor</code></h2><p><code>constructor</code>是我们最常用的注入位置，比如我们在组件中注入服务，就是在<code>constructor</code>中注入的。</p>
<p>新的写法, 使用<code>inject</code>函数</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">service</span>: <span class="title class_">MyService</span> = <span class="title function_">inject</span>(<span class="title class_">MyService</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>旧的写法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">service</span>: <span class="title class_">MyService</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(service);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="In-the-initializer-for-fields-of-such-classes"><a href="#In-the-initializer-for-fields-of-such-classes" class="headerlink" title="In the initializer for fields of such classes"></a>In the initializer for fields of such classes</h2><p>这个是啥意思呢？就是在类的字段初始化器中，也可以注入服务，比如下面的DataService.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">service</span>: <span class="title class_">MyService</span> = <span class="title function_">inject</span>(<span class="title class_">MyService</span>);</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">service</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Stack-frame-in-an-injection-context"><a href="#Stack-frame-in-an-injection-context" class="headerlink" title="Stack frame in an injection context"></a>Stack frame in an injection context</h2><p>有些函数被设计成可以运行在injection context中，比如我们常用的路由守卫(router guard), 之所以这样是为了能让我们在路由守卫中注入服务。比如下面的<code>canActivateTeam</code>函数，就是一个路由守卫。在这个函数里，我们可以注入<code>PermissionsService</code>和<code>UserToken</code>。这样就可以判断用户是否有权限访问某个页面。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">canActivateTeam</span>: <span class="title class_">CanActivateFn</span> =</span><br><span class="line">    <span class="function">(<span class="params"><span class="attr">route</span>: <span class="title class_">ActivatedRouteSnapshot</span>, <span class="attr">state</span>: <span class="title class_">RouterStateSnapshot</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">inject</span>(<span class="title class_">PermissionsService</span>).<span class="title function_">canActivate</span>(<span class="title function_">inject</span>(<span class="title class_">UserToken</span>), route.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Run-within-an-injection-context"><a href="#Run-within-an-injection-context" class="headerlink" title="Run within an injection context"></a>Run within an injection context</h2><p>有时候我们需要讲一个函数运行在injection context中，但是当前上下文并不是<code>injection context</code>, 这时，我们可以使用<code>runInInjectionContext</code>函数来创建一个新的injection context, 然后在这个新的injection context中运行我们的函数。</p>
<p>比如Angular框架要求<code>effect</code>函数是必须运行在<code>injection context</code>中，所以我们通常在构造函数体中运行<code>effect</code>函数，如果我们想在<code>ngOnInit</code>函数中运行<code>effect</code>函数呢？因为<code>ngOnInit</code>函数并不是<code>injection context</code>, 这时我们就可以使用<code>runInInjectionContext</code>函数来运行<code>effect</code>函数。</p>
<p>注意：使用<code>runInInjectionContext</code>函数需要一个<code>EnvironmentInjector</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CountComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  count = <span class="title function_">signal</span>(<span class="number">0</span>);</span><br><span class="line">  doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">count</span>() * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> environmentInjector = <span class="title function_">inject</span>(<span class="title class_">EnvironmentInjector</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// effect(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;count:&#x27;, this.count());</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;doubleCount:&#x27;, this.doubleCount());</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">runInInjectionContext</span>(<span class="variable language_">this</span>.<span class="property">environmentInjector</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count:&#x27;</span>, <span class="variable language_">this</span>.<span class="title function_">count</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;doubleCount:&#x27;</span>, <span class="variable language_">this</span>.<span class="title function_">doubleCount</span>());</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li><a href="https://angular.dev/guide/di/dependency-injection-context">https://angular.dev/guide/di/dependency-injection-context</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>di</tag>
        <tag>injection</tag>
        <tag>injection context</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-dynamically-load-component</title>
    <url>/2024/06/09/angular-dynamically-load-component/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In this article, we will learn how to dynamically load a component in Angular, In addition to load a component in html template directly, you can also load a component dynamically with <a href="https://angular.dev/api/common/NgComponentOutlet">NgComponentOutlet</a> or <a href="https://angular.dev/api/core/ViewContainerRef">ViewContainerRef</a></p>
<h2 id="NgComponentOutlet"><a href="#NgComponentOutlet" class="headerlink" title="NgComponentOutlet"></a>NgComponentOutlet</h2><p><code>NgComponentOutlet</code> is a directive that provide a declarative way for dynamic component creation, it requires a component type as input and create an instance of the component in the view.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">*ngComponentOutlet=<span class="string">&quot;componentType&quot;</span></span><br></pre></td></tr></table></figure>

<p>Here are the code snippets to dynamically load a component with <code>NgComponentOutlet</code>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngComponentOutlet</span>=<span class="string">&quot;getComponent()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NgComponentOutlet</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@angular/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ProductComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./product/product.component&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">CustomerComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./customer/customer.component&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">NgComponentOutlet</span>],</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./app.component.css&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  showProduct = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We return the component type by condition.</span></span><br><span class="line">  <span class="title function_">getComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">showProduct</span>? <span class="title class_">ProductComponent</span>: <span class="title class_">CustomerComponent</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Question:<br>What’s the difference between <code>*ngComponentOutlet</code> and <code>*ngIf*</code> in this case? <code>*ngIf</code> can also load the component by condition.</p>
<h2 id="ViewContainerRef"><a href="#ViewContainerRef" class="headerlink" title="ViewContainerRef"></a>ViewContainerRef</h2><p><code>ViewContainerRef</code> is a class that represents a container where one or more views can be attached to a component. It provides methods to create components and attach them to the container.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, <span class="title class_">OnInit</span>, <span class="title class_">ViewContainerRef</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ProductComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./product/product.component&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NgComponentOutlet</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@angular/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">CustomerComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./customer/customer.component&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">NgComponentOutlet</span>],</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./app.component.css&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  showProduct = <span class="literal">true</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">viewContainerRef</span>: <span class="title class_">ViewContainerRef</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">viewContainerRef</span>.<span class="title function_">createComponent</span>(<span class="variable language_">this</span>.<span class="title function_">getComponent</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">showProduct</span>? <span class="title class_">ProductComponent</span>: <span class="title class_">CustomerComponent</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The above code will create the component instance as the sibling node of the host element(the component where ViewContainerRef was declared).</p>
<h2 id="Lazy-load-component"><a href="#Lazy-load-component" class="headerlink" title="Lazy load component"></a>Lazy load component</h2><p>You can also lazy load a component with <code>ViewContainerRef</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>app works<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;lazyLoadComponent()&quot;</span>&gt;</span>Lazy load component<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, <span class="title class_">ViewContainerRef</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NgComponentOutlet</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@angular/common&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">NgComponentOutlet</span>],</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./app.component.css&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  showProduct = <span class="literal">false</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">viewContainerRef</span>: <span class="title class_">ViewContainerRef</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">lazyLoadComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">viewContainerRef</span>.<span class="title function_">clear</span>(); <span class="comment">// avoid loading multiple components</span></span><br><span class="line">    <span class="keyword">const</span> component = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getComponent</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">viewContainerRef</span>.<span class="title function_">createComponent</span>(component);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">showProduct</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;<span class="title class_">ProductComponent</span>&#125; = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;./product/product.component&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">ProductComponent</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;<span class="title class_">CustomerComponent</span>&#125; = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;./customer/customer.component&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">CustomerComponent</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Explanation: The above code decides which component should be loaded when the user clicks the button, based on the showProduct variable. After running the program, press <code>F12</code> to open the developer tools, and observe the <code>Network</code> tab. You can see that after clicking the Lazy load component button, the app initiates a request to dynamically load the Product component.</p>
<p><img src="/../images/angular-lazy-load-component.png" alt="angular-lazy-load-component"></p>
<p>The component was bundled separately with name <code>chunk-VFVWUJZL.js</code> to support lazy load, if you want to see the real name of the chunk file, you can add <code>namedChunk</code> to your <code>angular.json</code> file.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;architect&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@angular-devkit/build-angular:application&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;outputPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/my-app&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/index.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="attr">&quot;namedChunks&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// &lt;-- here</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>In this way the chunk file will got a name like <code>product.component-RGAR2EGQ.js</code></p>
<p>Finally, the getComponent method can be optimized to avoid duplicate code, but it seems that the readability is not very good after optimization. What do you think?</p>
<p>优化后的代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">getComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> component = <span class="variable language_">this</span>.<span class="property">showProduct</span> ? <span class="string">&#x27;ProductComponent&#x27;</span> : <span class="string">&#x27;CustomerComponent&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">`./<span class="subst">$&#123;component.toLowerCase()&#125;</span>/<span class="subst">$&#123;component&#125;</span>.component`</span>);</span><br><span class="line">  <span class="keyword">return</span> result[component];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] <a href="https://angular.dev/guide/components/programmatic-rendering">programmatic-rendering</a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>component</tag>
        <tag>dynamic</tag>
        <tag>named chunk</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-di-resolution-modifier</title>
    <url>/2024/12/02/angular-di-resolution-modifier/</url>
    <content><![CDATA[<p>In Angular, the resolution modifier is used to control how the dependency injector resolves dependencies. There are four resolution modifiers in Angular:</p>
<p>先来给这几个操作符分个类：</p>
<ol>
<li><code>@SkipSelf</code> - 何时开始查找。</li>
<li><code>@Self</code>, <code>@Host</code> - 何时停止查找。</li>
<li><code>@Optional</code> - 找不到时怎么办。</li>
</ol>
<h2 id="Optional"><a href="#Optional" class="headerlink" title="@Optional"></a>@Optional</h2><p>这个是最简单了修饰符了，它告诉Angular依赖注入器，如果找不到依赖项，不要抛出错误，而是返回<code>null</code>。</p>
<p>大家都见过下面这个错误吧，当Angular找不到某个依赖时，就会抛出这个错误：（注意：这种错误一般发生在某个Service没有提供<code>&#123;providedIn: &#39;root&#39;&#125;</code>，而且该Service的使用者也没有在<code>providers</code>数组中提供该Service时。）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR NullInjectorError: R3InjectorError(Environment Injector)[_OrderService -&gt; _OrderService]: </span><br><span class="line">  NullInjectorError: No provider <span class="keyword">for</span> _OrderService!</span><br><span class="line">    at NullInjector.get (core.mjs:1635:21)</span><br><span class="line">    at R3Injector.get (core.mjs:3017:27)</span><br><span class="line">    at R3Injector.get (core.mjs:3017:27)</span><br><span class="line">    at ChainedInjector.get (core.mjs:5288:32)</span><br><span class="line">    at lookupTokenUsingModuleInjector (core.mjs:5631:31)</span><br><span class="line">    at getOrCreateInjectable (core.mjs:5677:10)</span><br><span class="line">    at Module.ɵɵdirectiveInject (core.mjs:11586:17)</span><br><span class="line">    at NodeInjectorFactory.ProductComponent_Factory [as factory] (product.component.ts:21:30)</span><br><span class="line">    at getNodeInjectable (core.mjs:5871:38)</span><br><span class="line">    at createRootComponent (core.mjs:16405:31)</span><br></pre></td></tr></table></figure>
<p>如果我们在依赖注入的时候加上<code>@Optional()</code>修饰符，那么Angular就不会抛出错误，而是返回<code>null</code>。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="meta">@Optional</span>() <span class="keyword">private</span> <span class="attr">orderService</span>: <span class="title class_">OrderService</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">orderService</span>.<span class="title function_">fetchData</span>(<span class="number">1</span>).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：上面这种写法，在使用<code>orderService</code>时，需要判断是否为<code>null</code>，否则仍然会抛出<code>Cannot read properties of null (reading &#39;fetchData&#39;)</code>的错误。</p>
<p>我们可以针对<code>orderService</code>使用?(Optional Chaining Operator)，就不会抛出错误了：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="meta">@Optional</span>() <span class="keyword">private</span> <span class="attr">orderService</span>: <span class="title class_">OrderService</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">orderService</span>?.<span class="title function_">fetchData</span>(<span class="number">1</span>).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Self"><a href="#Self" class="headerlink" title="@Self"></a>@Self</h2><p><code>@Self</code>也比较简单，就是告诉Angular只在当前Component或者Directive中搜索某个依赖项，而不会去父级Component或者Directive中搜索。假设有OrderService，且是<code>providedIn: &#39;root&#39;</code>的。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>(&#123;<span class="attr">providedIn</span>: <span class="string">&quot;root&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们在注入该Service时，加上<code>@Self()</code>修饰符，那么Angular只会在当前Component或者Directive中搜索该Service，但是当前Component或者Directive中没有提供该Service时，所以就会抛出错误。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="meta">@Self</span>() <span class="keyword">private</span> <span class="attr">orderService</span>: <span class="title class_">OrderService</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">orderService</span>.<span class="title function_">fetchData</span>(<span class="number">1</span>).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意观察这个错误和上面错误的区别，这个错误的顶端不再是<code>NullInjector</code>了，因为我们只在当前Component中查找，所以永远不会到达<code>NullInjector</code>这一步。而<code>NodeInjector</code>是当前Component的Injector。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">core.mjs:7191 ERROR RuntimeError: NG0201: No provider <span class="keyword">for</span> _OrderService found <span class="keyword">in</span> NodeInjector. Find more at https://angular.dev/errors/NG0201</span><br><span class="line">    at throwProviderNotFoundError (core.mjs:986:9)</span><br><span class="line">    at notFoundValueOrThrow (core.mjs:5606:5)</span><br><span class="line">    at lookupTokenUsingModuleInjector (core.mjs:5639:10)</span><br><span class="line">    at getOrCreateInjectable (core.mjs:5677:10)</span><br><span class="line">    at Module.ɵɵdirectiveInject (core.mjs:11586:17)</span><br><span class="line">    at NodeInjectorFactory.ProductComponent_Factory [as factory] (product.component.ts:21:30)</span><br><span class="line">    at getNodeInjectable (core.mjs:5871:38)</span><br><span class="line">    at createRootComponent (core.mjs:16405:31)</span><br><span class="line">    at ComponentFactory.create (core.mjs:16262:21)</span><br><span class="line">    at ViewContainerRef2.createComponent (core.mjs:16662:43)</span><br></pre></td></tr></table></figure>

<p><code>@Self</code>和<code>@Optional</code>是可以配合使用的，为了修复上面的错误，我们可以这样写，这样就不会报错了。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="meta">@Self</span>() <span class="meta">@Optional</span>() <span class="keyword">private</span> <span class="attr">orderService</span>: <span class="title class_">OrderService</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">orderService</span>?.<span class="title function_">fetchData</span>(<span class="number">1</span>).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以，<code>@Self</code>修饰符的使用场景到底是啥？请继续往下看。</p>
<h3 id="Multiple-Directives-in-same-Dom-elements"><a href="#Multiple-Directives-in-same-Dom-elements" class="headerlink" title="Multiple Directives in same Dom elements"></a>Multiple Directives in same Dom elements</h3><p>如果一个DOM元素上应用了多个Directive, 那么当第一个Directive提供了某个Service时，后面的Directive就可以通过<code>@Self</code>来获取这个Service。</p>
<p>下面的代码，假设dir1对应Directive1，dir2对应Directive2，如果Directive1中的providers数组提供了某个Service，那么Directive2中constructor可以使用<code>@Self</code>来获取Service。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">dir1</span> <span class="attr">dir2</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Directive1中提供了OrderService</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Directive1</span></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[dir1]&#x27;</span>,</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">OrderService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Dir1Directive</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Directive2中使用<code>@Self</code>来获取OrderService。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Directive2</span></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[dir2]&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Dir2Directive</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="meta">@Self</span>() <span class="keyword">private</span> <span class="attr">orderService</span>: <span class="title class_">OrderService</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为什么这样可以呢？因为<code>dir1</code>和<code>dir2</code>位于同一个dom元素-<code>p</code>标签上，Angular会为这个p标签创建一个Injector，<code>dir1</code>和<code>dir2</code>会share这个Injector，所以<code>dir2</code>可以通过<code>@Self</code>来获取dir1中提供的OrderService。</p>
<h2 id="Host"><a href="#Host" class="headerlink" title="@Host"></a>@Host</h2><p><code>@Host</code>修饰符告诉Angular依赖注入器，只在当前Component或者Host元素中搜索某个依赖项。</p>
<ul>
<li>当不使用<code>ng-content</code>时，Host就是注入依赖的Component。</li>
<li>当使用<code>ng-content</code>时，Host就是投射内容的Component(也就是<code>ng-content</code>所在的Component)。see <a href="https://v17.angular.io/guide/dependency-injection-in-action#make-a-dependency-optional-and-limit-search-with-host">here</a> for details.</li>
</ul>
<p>@Host的作用体现在使用<code>ng-content</code>进行内容投射的时候。下面的例子中，我们有一个ProductComponent，它的模板中有<code>ng-content</code>，我们将ProductDetailComponent投射到ProductComponent中。- 此时，ProductComponent就是ProductDetailComponent的Host。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- product.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ng-content</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后我们在ProductComponent中提供OrderService，并在ProductDetailComponent中使用<code>@Host</code>来获取OrderService。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product.component.ts</span></span><br><span class="line"><span class="attr">providers</span>: [<span class="title class_">OrderService</span>],</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product-detail.component.ts</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="meta">@Host</span>() <span class="keyword">private</span> <span class="attr">orderService</span>: <span class="title class_">OrderService</span></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>最后在<code>AppComponent</code>的模板中使用<code>ProductComponent</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--app.component.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-product</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-product-detail</span>&gt;</span><span class="tag">&lt;/<span class="name">app-product-detail</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-product</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这时，<code>app-product</code>就是<code>app-product-detail</code>的<code>Host</code>，如果我们在<code>ProductDetailComponent</code>中使用<code>@Host</code>来获取<code>OrderService</code>，那么Angular会首先在<code>ProductDetailComponent</code>中查找，结果没找到，然后再去<code>ProductComponent</code>中查找OrderService，结果找到了。</p>
<h2 id="SkipSelf"><a href="#SkipSelf" class="headerlink" title="@SkipSelf"></a>@SkipSelf</h2><p><code>@SkipSelf</code>就是查找依赖时不在当前Component或者Directive中查找，而是跳过当前Component或者Directive，去父级Component或者Directive中查找。</p>
<p>所以，<code>@SkipSelf</code>修饰符的使用场景到底是啥？</p>
<h1 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h1><ol>
<li><a href="https://v17.angular.io/guide/dependency-injection-in-action#make-a-dependency-optional-and-limit-search-with-host">https://v17.angular.io/guide/dependency-injection-in-action#make-a-dependency-optional-and-limit-search-with-host</a> - 关于Host的定义，可以看这里。</li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>di</tag>
        <tag>optional</tag>
        <tag>self</tag>
        <tag>host</tag>
        <tag>skipself</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-forms</title>
    <url>/2025/02/17/angular-forms/</url>
    <content><![CDATA[<h2 id="Reactive-Forms"><a href="#Reactive-Forms" class="headerlink" title="Reactive Forms"></a>Reactive Forms</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ReactiveFormsModule</span>, <span class="title class_">FormControl</span>, <span class="title class_">FormGroup</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;form [formGroup]=&quot;profileForm&quot; (ngSubmit)=&quot;handleSubmit()&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;label&gt;</span></span><br><span class="line"><span class="string">        Name</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;text&quot; formControlName=&quot;name&quot; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/label&gt;</span></span><br><span class="line"><span class="string">      &lt;label&gt;</span></span><br><span class="line"><span class="string">        Email</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;email&quot; formControlName=&quot;email&quot; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/label&gt;</span></span><br><span class="line"><span class="string">      &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;Profile Form&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;Name: &#123;&#123;profileForm.value.name&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;Email: &#123;&#123;profileForm.value.email&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">ReactiveFormsModule</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  profileForm = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">    <span class="attr">email</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleSubmit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">profileForm</span>.<span class="property">value</span>.<span class="property">name</span> + <span class="string">&#x27; | &#x27;</span> + <span class="variable language_">this</span>.<span class="property">profileForm</span>.<span class="property">value</span>.<span class="property">email</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>form</tag>
        <tag>template driven form</tag>
        <tag>reactive form</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-directive</title>
    <url>/2024/12/03/angular-directive/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Directives are classes that add additional behavior to elements in your Angular applications.</p>
<p>Angular has many kinds of directives, including components, attribute directives, and structural directives.</p>
<h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><p>This is the most common one we used every day, a component is a directive with a template. Components are the most basic building block of an Angular application.<br><a href="https://angular.dev/guide/components">https://angular.dev/guide/components</a></p>
<h2 id="Structural-Directives"><a href="#Structural-Directives" class="headerlink" title="Structural Directives"></a>Structural Directives</h2><p>Structural directives are responsible for HTML layout. They shape or reshape the DOM’s structure, typically by adding, removing, or manipulating elements.</p>
<h3 id="NgIf"><a href="#NgIf" class="headerlink" title="NgIf"></a>NgIf</h3><p><code>NgIf</code> is used to conditionally creates or disposes of subviews in a template. see <a href="https://zdd.github.io/2024/11/30/angular-ngif/">this post</a> for more details.</p>
<h3 id="NgFor"><a href="#NgFor" class="headerlink" title="NgFor"></a>NgFor</h3><h3 id="NgSwitch"><a href="#NgSwitch" class="headerlink" title="NgSwitch"></a>NgSwitch</h3><p>Angular17引入了新的控制流语句：<code>@if</code>, <code>@for</code>, <code>@switch</code>，这些语句可以替代NgIf, NgFor, NgSwitch，更加简洁，高效，我们建议使用新的控制流语句。</p>
<h2 id="Attribute-Directives"><a href="#Attribute-Directives" class="headerlink" title="Attribute Directives"></a>Attribute Directives</h2><p>Attribute directives are used to change the appearance or behavior of an element, component, or another directive. They are usually applied to elements as attributes.</p>
<p>Attribute directives doesn’t change the layout of the template, just change the appearance of it, for example, change the color, font size, visibility etc.</p>
<p>The most common attribute directives are as follows:</p>
<h3 id="NgClass"><a href="#NgClass" class="headerlink" title="NgClass"></a>NgClass</h3><h3 id="NgStyle"><a href="#NgStyle" class="headerlink" title="NgStyle"></a>NgStyle</h3><h3 id="NgModel"><a href="#NgModel" class="headerlink" title="NgModel"></a>NgModel</h3><h2 id="Customize-Directives"><a href="#Customize-Directives" class="headerlink" title="Customize Directives"></a>Customize Directives</h2><p>如果内置的Directive不能满足我们的需求，我们可以自定义Directive，下面我们自定义一个Directive来实现一个简单Hover变色功能，当鼠标移动到元素上时，元素背景色变为红色，鼠标移出时恢复原背景色。</p>
<h3 id="Create-a-directive"><a href="#Create-a-directive" class="headerlink" title="Create a directive"></a>Create a directive</h3><p>使用以下命令创建一个新的指令：<code>HoverDirective</code>，该命令会创建文件<code>src/app/hover.directive.ts</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng g d hover</span><br></pre></td></tr></table></figure>

<h3 id="Implement-the-directive"><a href="#Implement-the-directive" class="headerlink" title="Implement the directive"></a>Implement the directive</h3><p>以下是该指令的实现代码：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Directive</span>, <span class="title class_">ElementRef</span>, <span class="title class_">HostListener</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[appHover]&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HoverDirective</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">element</span>: <span class="title class_">ElementRef</span></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>) <span class="title function_">onMouseEnter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setHoverColor</span>(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>) <span class="title function_">onMouseLeave</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setHoverColor</span>(<span class="string">&#x27;white&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">setHoverColor</span>(<span class="params"><span class="attr">color</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">nativeElement</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单解释一下上述代码：</p>
<ol>
<li>selector: <code>appHover</code>，这个是Directive的名字，我们在HTML中使用这个名字来引用这个Directive。</li>
<li>constructor中注入了<code>ElementRef</code>，这个是Angular提供的一个服务，用来获取当前元素的引用。这里的当前元素就是使用了该Directive的元素。</li>
<li>两个HostListener分别监听<code>mouseenter</code>和<code>mouseleave</code>事件，当鼠标移入时，设置背景色为红色，移出时恢复原色。</li>
</ol>
<h3 id="Use-the-directive"><a href="#Use-the-directive" class="headerlink" title="Use the directive"></a>Use the directive</h3><p>首先，在需要使用这个指令的组件或者模块中的<code>imports</code>数组中导入这个Directive。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="attr">imports</span>: [<span class="title class_">HoverDirective</span>],</span><br></pre></td></tr></table></figure>
<p>然后，在需要使用这个Directive的元素上加上<code>appHover</code>属性即可(注意：<code>appHover</code>就是定义Directive时指定的<code>selector</code>)。此时，当鼠标移入时，该段落的背景色会变为红色，移出时恢复原背景色。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">appHover</span>&gt;</span>Hover me<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个自定义指令非常简单，虽然现在可以工作，但是有一个缺点，就是颜色的变化是固定的，如果我想让用户自定义Hover时的颜色，该怎么办呢？这就涉及到如何给自定义指令传递参数了。</p>
<p>我们修改一下实现，将颜色作为参数传递给Directive，这里我们定义了一个@Input属性，用来接收参数。@Input属性的名字是<code>appHover</code>，所以这里<code>appHover</code>同时作为Directive的selector和Input属性的名字。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Add an input property to the directive</span></span><br><span class="line"><span class="meta">@Input</span>(<span class="string">&#x27;appHover&#x27;</span>) <span class="attr">hoverColor</span>: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use this.hoverColor in setHoverColor method</span></span><br><span class="line"><span class="meta">@HostListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>) <span class="title function_">onMouseEnter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setHoverColor</span>(<span class="variable language_">this</span>.<span class="property">hoverColor</span> || <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外，为了防止用户忘记传递参数，我们给hoverColor设置了一个默认值<code>&#39;red&#39;</code>，这样即使用户不传递参数，也不会报错。</p>
<p>现在，我们可以在HTML中传递颜色参数了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">appHover</span>=<span class="string">&quot;green&quot;</span>&gt;</span>Hover me<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的例子只有一个参数，所以我们在定义<code>@Input</code>的时候，直接把参数定义到了Directive的selector上，如果有多个参数，这种方法就不好使了，为了说明问题，我们再加一个参数，字体颜色，就是当鼠标Hover时改变背景色，同时也改变字体颜色。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Directive</span>, <span class="title class_">ElementRef</span>, <span class="title class_">HostListener</span>, <span class="title class_">Input</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[appHover]&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HoverDirective</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>(<span class="string">&#x27;hoverBackgroundColor&#x27;</span>) <span class="attr">hoverColor</span>: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="meta">@Input</span>(<span class="string">&#x27;hoverFontColor&#x27;</span>) <span class="attr">hoverFontColor</span>: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">element</span>: <span class="title class_">ElementRef</span></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>) <span class="title function_">onMouseEnter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setHoverColor</span>(<span class="variable language_">this</span>.<span class="property">hoverFontColor</span> || <span class="string">&#x27;black&#x27;</span>, <span class="variable language_">this</span>.<span class="property">hoverColor</span> || <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>) <span class="title function_">onMouseLeave</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setHoverColor</span>(<span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;white&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">setHoverColor</span>(<span class="params"><span class="attr">fontColor</span>: <span class="built_in">string</span>, <span class="attr">backgroundColor</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">nativeElement</span>.<span class="property">style</span>.<span class="property">color</span> = fontColor;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">nativeElement</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = backgroundColor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用时：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">appHover</span> <span class="attr">hoverFontColor</span>=<span class="string">&quot;red&quot;</span> <span class="attr">hoverBackgroundColor</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span>This is a paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>directive</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-host-host_context-ng_deep</title>
    <url>/2024/11/27/angular-host-host-context-ng-deep/</url>
    <content><![CDATA[<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li><a href="https://medium.com/geekculture/angular-this-is-how-i-finally-understood-host-and-ng-deep-selectors-c829098cf194">https://medium.com/geekculture/angular-this-is-how-i-finally-understood-host-and-ng-deep-selectors-c829098cf194</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>host</tag>
        <tag>host context</tag>
        <tag>ng-deep</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-how-angular-app-runs(production)</title>
    <url>/2024/12/22/angular-how-angular-app-runs-production/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>今天我们一起研究一下Angular App是如何运行的，今天主要讨论的是在生产环境下，Angular App是如何运行的。既然限定了生产环境，那么就不讨论开发环境相关的东西了，我们直接看编译后的代码如何运行。</p>
<h1 id="Create-Angular-app"><a href="#Create-Angular-app" class="headerlink" title="Create Angular app"></a>Create Angular app</h1><p>首先，我们需要创建一个Angular项目，这里我们使用<code>Angular CLI</code>来创建一个项目，具体的步骤可以参考<a href="https://zdd.github.io/2024/05/05/angular-how-to-create-an-angular-app/">这篇文章</a>。</p>
<h1 id="Build-Angular-App"><a href="#Build-Angular-App" class="headerlink" title="Build Angular App"></a>Build Angular App</h1><p>然后，我们使用<code>ng build --prod</code>命令来构建我们的Angular项目，这个命令会将我们的项目编译成生产环境下的代码。编译完成后，我们会得到一个<code>dist</code>目录，里面包含了我们的项目的所有文件，如下图所示：</p>
<p><img src="/../images/angular-dist-folder.png" alt="dist"></p>
<p>众所周知，<code>index.html</code>是前端项目的入口文件，我们看看这个文件的内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Angular15<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.ef46db3751d8e999.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-root</span>&gt;</span><span class="tag">&lt;/<span class="name">app-root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;runtime.17ade4109dbace19.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;polyfills.7488d7e9e1657922.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.301f0813b18ba60a.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>该文件主要执行以下操作：</p>
<ol>
<li>加载<code>styles.ef46db3751d8e999.css</code>样式文件 - 这是项目打包后的样式文件。</li>
<li>加载<code>runtime.17ade4109dbace19.js</code>文件 - 这个文件的作用是初始化webpack相关的设置，比如加载模块的方法，为后续的代码运行做准备。</li>
<li>加载<code>polyfills.7488d7e9e1657922.js</code>文件 - 这个文件主要是加载一些polyfills，用来兼容一些老的浏览器，当然也做一些额外的操作，比如zone.js的monkey patch。</li>
<li>加载<code>main.301f0813b18ba60a.js</code>文件 - 这个文件是我们的项目的主要代码，我们书写的所有组件，服务等代码都会被编译到这个文件。</li>
</ol>
<p>由于runtime&#x2F;polyfills&#x2F;main这三个文件打包后都是混淆的，我们无法查看其代码，所以我们还是借助开发环境，使用<code>ng serve</code>命令来查看这三个文件的内容。</p>
<p>以下是<code>runtime.js</code>的内容：<br>该文件主要是初始化一些Webpack的相关函数，用来为后续加载<code>polyfills</code>和<code>main</code>文件做准备。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="string">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> __webpack_modules__ = (&#123;&#125;);</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// The module cache</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// The require function</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">function</span> <span class="title function_">__webpack_require__</span>(<span class="params">moduleId</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// Check if module is in cache</span></span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">return</span> cachedModule.<span class="property">exports</span>;</span><br><span class="line"><span class="comment">/******/</span> 		&#125;</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> <span class="variable language_">module</span> = __webpack_module_cache__[moduleId] = &#123;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="comment">// no module.id needed</span></span><br><span class="line"><span class="comment">/******/</span> 			<span class="comment">// no module.loaded needed</span></span><br><span class="line"><span class="comment">/******/</span> 			<span class="attr">exports</span>: &#123;&#125;</span><br><span class="line"><span class="comment">/******/</span> 		&#125;;</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// Execute the module function</span></span><br><span class="line"><span class="comment">/******/</span> 		__webpack_modules__[moduleId].<span class="title function_">call</span>(<span class="variable language_">module</span>.<span class="property">exports</span>, <span class="variable language_">module</span>, <span class="variable language_">module</span>.<span class="property">exports</span>, __webpack_require__);</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// Return the exports of the module</span></span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line"><span class="comment">/******/</span> 	&#125;</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line"><span class="comment">/******/</span> 	__webpack_require__.<span class="property">m</span> = __webpack_modules__;</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">/* webpack/runtime/chunk loaded */</span></span><br><span class="line"><span class="comment">/******/</span> 	(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> deferred = [];</span><br><span class="line"><span class="comment">/******/</span> 		__webpack_require__.<span class="property">O</span> = <span class="function">(<span class="params">result, chunkIds, fn, priority</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">if</span>(chunkIds) &#123;</span><br><span class="line"><span class="comment">/******/</span> 				priority = priority || <span class="number">0</span>;</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">for</span>(<span class="keyword">var</span> i = deferred.<span class="property">length</span>; i &gt; <span class="number">0</span> &amp;&amp; deferred[i - <span class="number">1</span>][<span class="number">2</span>] &gt; priority; i--) deferred[i] = deferred[i - <span class="number">1</span>];</span><br><span class="line"><span class="comment">/******/</span> 				deferred[i] = [chunkIds, fn, priority];</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">return</span>;</span><br><span class="line"><span class="comment">/******/</span> 			&#125;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">var</span> notFulfilled = <span class="title class_">Infinity</span>;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; deferred.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">var</span> [chunkIds, fn, priority] = deferred[i];</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">var</span> fulfilled = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; chunkIds.<span class="property">length</span>; j++) &#123;</span><br><span class="line"><span class="comment">/******/</span> 					<span class="keyword">if</span> ((priority &amp; <span class="number">1</span> === <span class="number">0</span> || notFulfilled &gt;= priority) &amp;&amp; <span class="title class_">Object</span>.<span class="title function_">keys</span>(__webpack_require__.<span class="property">O</span>).<span class="title function_">every</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> (__webpack_require__.<span class="property">O</span>[key](chunkIds[j])))) &#123;</span><br><span class="line"><span class="comment">/******/</span> 						chunkIds.<span class="title function_">splice</span>(j--, <span class="number">1</span>);</span><br><span class="line"><span class="comment">/******/</span> 					&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 						fulfilled = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">/******/</span> 						<span class="keyword">if</span>(priority &lt; notFulfilled) notFulfilled = priority;</span><br><span class="line"><span class="comment">/******/</span> 					&#125;</span><br><span class="line"><span class="comment">/******/</span> 				&#125;</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">if</span>(fulfilled) &#123;</span><br><span class="line"><span class="comment">/******/</span> 					deferred.<span class="title function_">splice</span>(i--, <span class="number">1</span>)</span><br><span class="line"><span class="comment">/******/</span> 					<span class="keyword">var</span> r = <span class="title function_">fn</span>();</span><br><span class="line"><span class="comment">/******/</span> 					<span class="keyword">if</span> (r !== <span class="literal">undefined</span>) result = r;</span><br><span class="line"><span class="comment">/******/</span> 				&#125;</span><br><span class="line"><span class="comment">/******/</span> 			&#125;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">return</span> result;</span><br><span class="line"><span class="comment">/******/</span> 		&#125;;</span><br><span class="line"><span class="comment">/******/</span> 	&#125;)();</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">/* webpack/runtime/compat get default export */</span></span><br><span class="line"><span class="comment">/******/</span> 	(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// getDefaultExport function for compatibility with non-harmony modules</span></span><br><span class="line"><span class="comment">/******/</span> 		__webpack_require__.<span class="property">n</span> = <span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">var</span> getter = <span class="variable language_">module</span> &amp;&amp; <span class="variable language_">module</span>.<span class="property">__esModule</span> ?</span><br><span class="line"><span class="comment">/******/</span> 				<span class="function">() =&gt;</span> (<span class="variable language_">module</span>[<span class="string">&#x27;default&#x27;</span>]) :</span><br><span class="line"><span class="comment">/******/</span> 				<span class="function">() =&gt;</span> (<span class="variable language_">module</span>);</span><br><span class="line"><span class="comment">/******/</span> 			__webpack_require__.<span class="title function_">d</span>(getter, &#123; <span class="attr">a</span>: getter &#125;);</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">return</span> getter;</span><br><span class="line"><span class="comment">/******/</span> 		&#125;;</span><br><span class="line"><span class="comment">/******/</span> 	&#125;)();</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">/* webpack/runtime/define property getters */</span></span><br><span class="line"><span class="comment">/******/</span> 	(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// define getter functions for harmony exports</span></span><br><span class="line"><span class="comment">/******/</span> 		__webpack_require__.<span class="property">d</span> = <span class="function">(<span class="params"><span class="built_in">exports</span>, definition</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">if</span>(__webpack_require__.<span class="title function_">o</span>(definition, key) &amp;&amp; !__webpack_require__.<span class="title function_">o</span>(<span class="built_in">exports</span>, key)) &#123;</span><br><span class="line"><span class="comment">/******/</span> 					<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, key, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">get</span>: definition[key] &#125;);</span><br><span class="line"><span class="comment">/******/</span> 				&#125;</span><br><span class="line"><span class="comment">/******/</span> 			&#125;</span><br><span class="line"><span class="comment">/******/</span> 		&#125;;</span><br><span class="line"><span class="comment">/******/</span> 	&#125;)();</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">/* webpack/runtime/getFullHash */</span></span><br><span class="line"><span class="comment">/******/</span> 	(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 		__webpack_require__.<span class="property">h</span> = <span class="function">() =&gt;</span> (<span class="string">&quot;14f1d830efa2381d&quot;</span>)</span><br><span class="line"><span class="comment">/******/</span> 	&#125;)();</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">/* webpack/runtime/hasOwnProperty shorthand */</span></span><br><span class="line"><span class="comment">/******/</span> 	(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 		__webpack_require__.<span class="property">o</span> = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(obj, prop))</span><br><span class="line"><span class="comment">/******/</span> 	&#125;)();</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">/* webpack/runtime/make namespace object */</span></span><br><span class="line"><span class="comment">/******/</span> 	(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// define __esModule on exports</span></span><br><span class="line"><span class="comment">/******/</span> 		__webpack_require__.<span class="property">r</span> = <span class="function">(<span class="params"><span class="built_in">exports</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="title class_">Symbol</span>.<span class="property">toStringTag</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span> 				<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="title class_">Symbol</span>.<span class="property">toStringTag</span>, &#123; <span class="attr">value</span>: <span class="string">&#x27;Module&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">/******/</span> 			&#125;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&#x27;__esModule&#x27;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="comment">/******/</span> 		&#125;;</span><br><span class="line"><span class="comment">/******/</span> 	&#125;)();</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">/* webpack/runtime/jsonp chunk loading */</span></span><br><span class="line"><span class="comment">/******/</span> 	(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// no baseURI</span></span><br><span class="line"><span class="comment">/******/</span> 		</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// object to store loaded and loading chunks</span></span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// undefined = chunk not loaded, null = chunk preloaded/prefetched</span></span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded</span></span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> installedChunks = &#123;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="string">&quot;runtime&quot;</span>: <span class="number">0</span></span><br><span class="line"><span class="comment">/******/</span> 		&#125;;</span><br><span class="line"><span class="comment">/******/</span> 		</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// no chunk on demand loading</span></span><br><span class="line"><span class="comment">/******/</span> 		</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// no prefetching</span></span><br><span class="line"><span class="comment">/******/</span> 		</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// no preloaded</span></span><br><span class="line"><span class="comment">/******/</span> 		</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// no HMR</span></span><br><span class="line"><span class="comment">/******/</span> 		</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// no HMR manifest</span></span><br><span class="line"><span class="comment">/******/</span> 		</span><br><span class="line"><span class="comment">/******/</span> 		__webpack_require__.<span class="property">O</span>.<span class="property">j</span> = <span class="function">(<span class="params">chunkId</span>) =&gt;</span> (installedChunks[chunkId] === <span class="number">0</span>);</span><br><span class="line"><span class="comment">/******/</span> 		</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// install a JSONP callback for chunk loading</span></span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> <span class="title function_">webpackJsonpCallback</span> = (<span class="params">parentChunkLoadingFunction, data</span>) =&gt; &#123;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">var</span> [chunkIds, moreModules, runtime] = data;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="comment">// add &quot;moreModules&quot; to the modules object,</span></span><br><span class="line"><span class="comment">/******/</span> 			<span class="comment">// then flag all &quot;chunkIds&quot; as loaded and fire callback</span></span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">var</span> moduleId, chunkId, i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">if</span>(chunkIds.<span class="title function_">some</span>(<span class="function">(<span class="params">id</span>) =&gt;</span> (installedChunks[id] !== <span class="number">0</span>))) &#123;</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">for</span>(moduleId <span class="keyword">in</span> moreModules) &#123;</span><br><span class="line"><span class="comment">/******/</span> 					<span class="keyword">if</span>(__webpack_require__.<span class="title function_">o</span>(moreModules, moduleId)) &#123;</span><br><span class="line"><span class="comment">/******/</span> 						__webpack_require__.<span class="property">m</span>[moduleId] = moreModules[moduleId];</span><br><span class="line"><span class="comment">/******/</span> 					&#125;</span><br><span class="line"><span class="comment">/******/</span> 				&#125;</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">if</span>(runtime) <span class="keyword">var</span> result = <span class="title function_">runtime</span>(__webpack_require__);</span><br><span class="line"><span class="comment">/******/</span> 			&#125;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">if</span>(parentChunkLoadingFunction) <span class="title function_">parentChunkLoadingFunction</span>(data);</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">for</span>(;i &lt; chunkIds.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="comment">/******/</span> 				chunkId = chunkIds[i];</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">if</span>(__webpack_require__.<span class="title function_">o</span>(installedChunks, chunkId) &amp;&amp; installedChunks[chunkId]) &#123;</span><br><span class="line"><span class="comment">/******/</span> 					installedChunks[chunkId][<span class="number">0</span>]();</span><br><span class="line"><span class="comment">/******/</span> 				&#125;</span><br><span class="line"><span class="comment">/******/</span> 				installedChunks[chunkId] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/******/</span> 			&#125;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">return</span> __webpack_require__.<span class="title function_">O</span>(result);</span><br><span class="line"><span class="comment">/******/</span> 		&#125;</span><br><span class="line"><span class="comment">/******/</span> 		</span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> chunkLoadingGlobal = self[<span class="string">&quot;webpackChunkangular_15&quot;</span>] = self[<span class="string">&quot;webpackChunkangular_15&quot;</span>] || [];</span><br><span class="line"><span class="comment">/******/</span> 		chunkLoadingGlobal.<span class="title function_">forEach</span>(webpackJsonpCallback.<span class="title function_">bind</span>(<span class="literal">null</span>, <span class="number">0</span>));</span><br><span class="line"><span class="comment">/******/</span> 		chunkLoadingGlobal.<span class="property">push</span> = webpackJsonpCallback.<span class="title function_">bind</span>(<span class="literal">null</span>, chunkLoadingGlobal.<span class="property">push</span>.<span class="title function_">bind</span>(chunkLoadingGlobal));</span><br><span class="line"><span class="comment">/******/</span> 	&#125;)();</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> &#125;)()</span><br><span class="line">;</span><br><span class="line"><span class="comment">//# sourceMappingURL=runtime.js.map</span></span><br></pre></td></tr></table></figure>
<p>注意代码末尾的<code>self[&quot;webpackChunkangular_15&quot;]</code>, 这里<code>angular_15</code>是我们的项目名称，<code>webpackChunk</code>是前缀。<code>self</code>是浏览器Window对象的一个属性。它就指向Window对象本身。详情参考这里：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/self">https://developer.mozilla.org/en-US/docs/Web/API/Window/self</a></p>
<p>其余代码我就不细说了，大伙有空自己看吧，都比较简单。</p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>webpack</tag>
        <tag>run</tag>
        <tag>runtime</tag>
        <tag>polyfills</tag>
        <tag>main</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-host-listener</title>
    <url>/2024/10/03/angular-host-listener/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><code>HostListener</code> is an Angular <code>Decorator</code> that declares a DOM event to listen for, and provides a handler method to run when that event occurs.</p>
<h2 id="What-is-a-Host"><a href="#What-is-a-Host" class="headerlink" title="What is a Host?"></a>What is a Host?</h2><p>先看一下Host的含义，Host是指Directive或者Component的宿主元素，假设有一个<code>ProductComponent</code>组件，它的模板如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-product&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;Product&lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductComponent</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们在<code>app.component.html</code>中使用<code>ProductComponent</code>组件，代码如下：在这里，<code>app-product</code>就是<code>ProductComponent</code>的Host。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-product</span>&gt;</span><span class="tag">&lt;/<span class="name">app-product</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Render后的DOM结构如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-product</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Product<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-product</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以这样理解，一个组件（指令）的Host就是在使用组件（指令）时，它们的选择器对应的元素。</p>
<p>See <a href="https://angular.dev/guide/components/host-elements#">here</a> for details.</p>
<p>Here is an example of using <code>HostListener</code> to listen for the <code>click</code> event on a button element:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, <span class="title class_">HostListener</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-test&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button&gt;Click me&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TestComponent</span> &#123;</span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">  <span class="title function_">onClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Button clicked&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The above code is equivalent to the following code:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, <span class="title class_">HostListener</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-test&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;onClick()&quot;&gt;Click me&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TestComponent</span> &#123;</span><br><span class="line">  <span class="title function_">onClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Button clicked&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>HostListener</code> is a more powerful way to listen for events because it allows you to listen for events on any element, not just the element that the <code>HostListener</code> is attached to. For example, you can listen for the events from document or window object.</p>
<ul>
<li>document:click</li>
<li>window:keydown</li>
<li>window:scroll</li>
<li>window:resize</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, <span class="title class_">HostListener</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-test&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;onClick()&quot;&gt;Click me&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TestComponent</span> &#123;</span><br><span class="line">  <span class="title function_">onClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Button clicked&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">&#x27;document:click&#x27;</span>, [<span class="string">&#x27;$event&#x27;</span>])</span><br><span class="line">  <span class="title function_">documentClick</span>(<span class="params"><span class="attr">event</span>: <span class="title class_">MouseEvent</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Document clicked at (<span class="subst">$&#123;event.clientX&#125;</span>, <span class="subst">$&#123;event.clientY&#125;</span>)`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">&#x27;window:keydown&#x27;</span>, [<span class="string">&#x27;$event&#x27;</span>])</span><br><span class="line">  <span class="title function_">keydown</span>(<span class="params"><span class="attr">event</span>: <span class="title class_">KeyboardEvent</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`event.key: <span class="subst">$&#123;event.key&#125;</span> was pressed`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">&#x27;window:scroll&#x27;</span>, [<span class="string">&#x27;$event&#x27;</span>])</span><br><span class="line">  <span class="title function_">onScroll</span>(<span class="params"><span class="attr">event</span>: <span class="title class_">Event</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Window scrolled`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">&#x27;window:resize&#x27;</span>, [<span class="string">&#x27;$event&#x27;</span>])</span><br><span class="line">  <span class="title function_">onResize</span>(<span class="params"><span class="attr">event</span>: <span class="title class_">Event</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Window resized`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://angular.dev/api/core/HostListener?tab=usage-notes">https://angular.dev/api/core/HostListener?tab=usage-notes</a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>decorator</tag>
        <tag>hostlistener</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-how-ng-serve-works</title>
    <url>/2024/09/09/angular-how-ng-serve-works/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Angular的CLI(Command Line Interface)系统非常强大，它提供了丰富的命令用来构建，测试，运行Angular程序，今天我们就从源码的角度来看看cli中的<code>ng serve</code>命令是如何工作的。</p>
<p><code>ng serve</code>是我们日常频繁使用的命令，它用来本地启动Angular项目，检测代码更新以做出响应，但是用了这么久的命令，你了解它的底层逻辑吗？下面的几个问题你是否思考过？</p>
<ol>
<li><code>ng serve</code>命令为什么没有输出文件到dist目录？</li>
<li><code>ng serve</code>命令是如何启动一个web server的？</li>
<li><code>ng serve</code>命令是如何监控文件变化的？</li>
<li><code>ng serve</code>命令是如何实现热更新的？</li>
</ol>
<p>下面就让我们开始这段愉快而又漫长的探索之旅吧！</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>为了调试<code>ng serve</code>命令，我们需要准备一个Angular项目，为了方便查看源码，我们将<a href="https://github.com/angular/angular-cli">angluar-cli</a>的源码也下载到本地，然后打开两个IDE，一个查看待调试的项目代码，一个查看<code>angular-cli</code>的源码。对照起来看，简直不要太爽！</p>
<h2 id="从命令行开始"><a href="#从命令行开始" class="headerlink" title="从命令行开始"></a>从命令行开始</h2><p>如果你直接查看<code>ng serve</code>命令的源码，可能得不到什么有用的信息，<code>serve</code>命令对应的源码在这里：<code>packages/angular/cli/src/commands/serve/cli.ts</code>， 从以下代码可知，<code>serve</code>命令是继承自<code>ArchitectCommandModule</code>的，同时也实现了<code>CommandModuleImplementation</code>接口。而该文件本身只是做了一个简单的配置，具体的实现逻辑都在<code>ArchitectCommandModule</code>和<code>CommandModuleImplementation</code>中。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">ServeCommandModule</span></span><br><span class="line">  <span class="keyword">extends</span> <span class="title class_ inherited__">ArchitectCommandModule</span></span><br><span class="line">  <span class="keyword">implements</span> <span class="title class_">CommandModuleImplementation</span></span><br><span class="line">&#123;</span><br><span class="line">  multiTarget = <span class="literal">false</span>;</span><br><span class="line">  command = <span class="string">&#x27;serve [project]&#x27;</span>;</span><br><span class="line">  aliases = <span class="title class_">RootCommands</span>[<span class="string">&#x27;serve&#x27;</span>].<span class="property">aliases</span>;</span><br><span class="line">  describe = <span class="string">&#x27;Builds and serves your application, rebuilding on file changes.&#x27;</span>;</span><br><span class="line">  <span class="attr">longDescriptionPath</span>?: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还是调试吧，我们打开Angular项目，然后打开项目根目录下的<code>package.json</code>文件，找到<code>scripts</code>字段，你会看到如下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;ng&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ng&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ng serve&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ng build&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;watch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ng build --watch --configuration development&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ngc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest --verbose&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;test:watch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest --watch&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;prepare&quot;</span><span class="punctuation">:</span> <span class="string">&quot;husky install&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>想要深入理解<code>ng serve</code>命令，我们需要先了解<code>start</code>命令是如何工作的。我们通过调式该命令的方式来了解<code>ng serve</code>的底层逻辑。不同的IDE对应不同的调试方式：</p>
<ul>
<li>WebStorm: 点击<code>start</code>命令左侧的绿色三角按钮，然后选择<code>Debug &#39;start&#39;</code>，这样就可以进入<code>ng serve</code>的源码了。</li>
<li>VSCode: 鼠标悬停到<code>start</code>命令上，点击<code>Debug</code>按钮，这样就可以进入<code>ng serve</code>的源码了。</li>
</ul>
<p>使用这种方法可以进入调试状态，但是我们要在哪里设置断点呢？</p>
<p>对于<code>package.json</code>中的script区块中的命令，其实他们都对应<code>node_modules/.bin</code>下面的一个文件。以<code>ng serve</code>为例，因为它的命令由<code>ng</code>来引导，那么我们首先到<code>node_modules/.bin</code>目录下找到<code>ng</code>文件。</p>
<p>可是我们找到了三个<code>ng</code>文件，分别是<code>ng</code>, <code>ng.cmd</code>, <code>ng.ps1</code>，那么我们应该选择哪一个呢？其实通过扩展名就能看出来，我这里使用的是Windows系统，所以我们选择<code>ng.cmd</code>文件。</p>
<ul>
<li>ng - Unix shell script</li>
<li>ng.cmd - Windows batch file</li>
<li>ng.ps1 - Windows PowerShell script</li>
</ul>
<p>用记事本打开这个文件看看它的代码:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">ECHO</span> off</span><br><span class="line"><span class="keyword">GOTO</span> <span class="built_in">start</span></span><br><span class="line">:find_dp0</span><br><span class="line"><span class="built_in">SET</span> dp0=%~dp0</span><br><span class="line"><span class="keyword">EXIT</span> /b</span><br><span class="line">:<span class="built_in">start</span></span><br><span class="line"><span class="built_in">SETLOCAL</span></span><br><span class="line"><span class="keyword">CALL</span> :find_dp0</span><br><span class="line"></span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">EXIST</span> &quot;<span class="variable">%dp0%</span>\node.exe&quot; (</span><br><span class="line">  <span class="built_in">SET</span> &quot;_prog=<span class="variable">%dp0%</span>\node.exe&quot;</span><br><span class="line">) <span class="keyword">ELSE</span> (</span><br><span class="line">  <span class="built_in">SET</span> &quot;_prog=node&quot;</span><br><span class="line">  <span class="built_in">SET</span> PATHEXT=<span class="variable">%PATHEXT:;.JS;=;%</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">endLocal</span> &amp; <span class="keyword">goto</span> #_undefined_# <span class="number">2</span>&gt;<span class="built_in">NUL</span> || <span class="built_in">title</span> <span class="variable">%COMSPEC%</span> &amp; &quot;<span class="variable">%_prog%</span>&quot;  &quot;<span class="variable">%dp0%</span>\..\@angular\cli\bin\ng.js&quot; %*</span><br></pre></td></tr></table></figure>
<p>我们不必纠结于每一行代码的含义，简单分析下来，我们可以推断出这个脚本的作用就是用<code>node.exe</code>来调用<code>@angular/cli/bin/ng.js</code>文件。</p>
<p>好了，我们再去看一下这个<code>ng.js</code>文件，这个文件就是Angular CLI的入口文件。ng.js调用了同一目录下的<code>bootstrap.js</code>文件，<code>bootstrap.js</code>文件调用了<code>lib/init.ts</code>文件。<code>init.ts</code>又调用了<code>lib/cli/index.ts</code>文件，后续又有一大堆的调用。</p>
<p><code>bin/ng.js</code> –&gt; <code>bin/bootstrap.js</code> –&gt; <code>lib/init.ts</code> –&gt; <code>lib/cli/index.ts</code> –&gt; …</p>
<p>通过不断的设置断点并调试得知，最终在文件<code>packages/angular/cli/src/command-builder/architect-base-command-module.ts</code>中通过解析项目的配置文件<code>angular.json</code>，找到<code>serve</code>命令对应的<code>builder</code>，然后通过调用那个<code>builder</code>来启动一个web server。</p>
<p><code>architect-base-command-module.ts</code>对应的代码如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">async</span> <span class="title function_">runSingleTarget</span>(<span class="attr">target</span>: <span class="title class_">Target</span>, <span class="attr">options</span>: <span class="title class_">OtherOptions</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> architectHost = <span class="variable language_">this</span>.<span class="title function_">getArchitectHost</span>();</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">builderName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    builderName = <span class="keyword">await</span> architectHost.<span class="title function_">getBuilderNameForTarget</span>(target); <span class="comment">// 获取builder名称</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="title function_">assertIsError</span>(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">onMissingTarget</span>(e.<span class="property">message</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h2 id="Webpack配置在哪里？"><a href="#Webpack配置在哪里？" class="headerlink" title="Webpack配置在哪里？"></a>Webpack配置在哪里？</h2><p>我们都知道，<code>ng serve</code>命令启动的是一个web server，而这是通过<code>webpack-dev-server</code>来实现的，那么这个webpack-dev-server的配置在哪里呢？我么可以在源码中找到如下目录：<br><code>packages/angular_devkit/build_angular/src/tools/webpack/configs/common.ts</code>，这个目录下有四个文件：</p>
<ul>
<li><code>common.ts</code> - 通用配置，主要是打包配置</li>
<li><code>dev-server.ts</code> - 开发服务器配置 - 我们要找的配置就在这里。</li>
<li><code>styles.ts</code> - 样式配置，用来处理各种样式文件, 如css, scss&#x2F;sass, less等</li>
<li><code>index.ts</code> - 导出上面三个文件</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Angular的CLI命令对应的逻辑源码并不在CLI命令本身中，而是在对应的builder中，builder源码在这个目录下：</p>
<ul>
<li><code>packages/angular/build/src/builders</code> - application builder</li>
<li><code>packages/angular_devkit/build_angular/src/builders</code> - other builders</li>
</ul>
<p>关于builder的详细介绍，可以参考之前的一篇博文：<a href="https://zdd.github.io/2024/06/06/angular-builders/%EF%BC%8C">https://zdd.github.io/2024/06/06/angular-builders/，</a> 也可以参考Angular官方文档：<a href="https://angular.dev/tools/cli/cli-builder/">https://angular.dev/tools/cli/cli-builder/</a></p>
<ul>
<li>ng server works in memory and never generate files to dist folder</li>
</ul>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>cli</tag>
        <tag>source code</tag>
        <tag>ng serve</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-how does an angular app start</title>
    <url>/2024/05/05/angular-how-does-an-angular-app-start/</url>
    <content><![CDATA[<p>今天从源码的角度来看一下Angular是如何启动一个应用的。</p>
<h2 id="创建Angular项目"><a href="#创建Angular项目" class="headerlink" title="创建Angular项目"></a>创建Angular项目</h2><p>首先，参照<a href="https://zdd.github.io/2024/05/05/angular-how-to-create-an-angular-app/">这篇文章</a>创建一个Angular项目</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>关于如何阅读Angular源码，请参考这里<a href="https://zdd.github.io/2024/04/30/angular-how-to-read-angular-source-code/">如何阅读Angular源码</a>。</p>
<p>使用<code>VSCode</code>或者<code>WebStorm</code>打开项目，找到<code>src/main.ts</code>文件，这是Angular应用的入口文件。可以看到如下代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; enableProdMode &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; platformBrowserDynamic &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser-dynamic&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; environment &#125; <span class="keyword">from</span> <span class="string">&#x27;./environments/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (environment.<span class="property">production</span>) &#123;</span><br><span class="line">  <span class="title function_">enableProdMode</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">platformBrowserDynamic</span>().<span class="title function_">bootstrapModule</span>(<span class="title class_">AppModule</span>)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br></pre></td></tr></table></figure>

<p>这里调用platformBrowserDynamic().bootstrapModule来启动Angular项目，我们到源码里面搜索<code>bootstrapModule</code>，找到如下代码：</p>
<p><code>packages/core/src/platform/platform_ref.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">bootstrapModule&lt;M&gt;(</span><br><span class="line">  <span class="attr">moduleType</span>: <span class="title class_">Type</span>&lt;M&gt;,</span><br><span class="line">  <span class="attr">compilerOptions</span>:</span><br><span class="line">    | (<span class="title class_">CompilerOptions</span> &amp; <span class="title class_">BootstrapOptions</span>)</span><br><span class="line">    | <span class="title class_">Array</span>&lt;<span class="title class_">CompilerOptions</span> &amp; <span class="title class_">BootstrapOptions</span>&gt; = [],</span><br><span class="line">): <span class="title class_">Promise</span>&lt;<span class="title class_">NgModuleRef</span>&lt;M&gt;&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> options = <span class="title function_">optionsReducer</span>(&#123;&#125;, compilerOptions);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">compileNgModuleFactory</span>(<span class="variable language_">this</span>.<span class="property">injector</span>, options, moduleType).<span class="title function_">then</span>(<span class="function">(<span class="params">moduleFactory</span>) =&gt;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">bootstrapModuleFactory</span>(moduleFactory, options), <span class="comment">// &lt;------- Here</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>bootstrapModule</code>方法内部调用了 <code>bootstrapModuleFactory</code> 方法，我们继续搜索<code>bootstrapModuleFactory</code>，找到如下代码：</p>
<p><code>packages/core/src/platform/platform_ref.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">bootstrapModuleFactory&lt;M&gt;(</span><br><span class="line">  <span class="attr">moduleFactory</span>: <span class="title class_">NgModuleFactory</span>&lt;M&gt;,</span><br><span class="line">  <span class="attr">options</span>?: <span class="title class_">BootstrapOptions</span>,</span><br><span class="line">): <span class="title class_">Promise</span>&lt;<span class="title class_">NgModuleRef</span>&lt;M&gt;&gt; &#123;</span><br><span class="line">  <span class="comment">// Note: We need to create the NgZone _before_ we ins</span></span><br><span class="line">  <span class="comment">// as instantiating the module creates some providers</span></span><br><span class="line">  <span class="comment">// So we create a mini parent injector that just cont</span></span><br><span class="line">  <span class="comment">// pass that as parent to the NgModuleFactory.</span></span><br><span class="line">  <span class="keyword">const</span> ngZone = <span class="title function_">getNgZone</span>(</span><br><span class="line">    options?.<span class="property">ngZone</span>,</span><br><span class="line">    <span class="title function_">getNgZoneOptions</span>(&#123;</span><br><span class="line">      <span class="attr">eventCoalescing</span>: options?.<span class="property">ngZoneEventCoalescing</span>,</span><br><span class="line">      <span class="attr">runCoalescing</span>: options?.<span class="property">ngZoneRunCoalescing</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Note: Create ngZoneInjector within ngZone.run so that all of the instantiated services are</span></span><br><span class="line">  <span class="comment">// created within the Angular zone</span></span><br><span class="line">  <span class="comment">// Do not try to replace ngZone.run with ApplicationRef#run because ApplicationRef would then be</span></span><br><span class="line">  <span class="comment">// created outside of the Angular zone.</span></span><br><span class="line">  <span class="keyword">return</span> ngZone.<span class="title function_">run</span>(<span class="function">() =&gt;</span> &#123;...&#125;); <span class="comment">// &lt;------- Here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意<code>bootstrapModuleFactory</code>这个方法比较长，我们简化一下，只截取其中的关键部分，首先这里创建了一个<code>ngZone</code>，用来做更新检测。然后调用了<code>ngZone.run</code>方法，这个方法是<code>NgZone</code>的方法，用来运行一个函数，并且确保这个函数在Angular的Zone中运行。在<code>return ngZone.run()</code>方法中的最后，又调用了<code>_moduleDoBootstrap</code>。</p>
<p><code>packages/core/src/platform/platform_ref.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">_moduleDoBootstrap</span>(<span class="attr">moduleRef</span>: <span class="title class_">InternalNgModuleRef</span>&lt;<span class="built_in">any</span>&gt;): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> appRef = moduleRef.<span class="property">injector</span>.<span class="title function_">get</span>(<span class="title class_">ApplicationRef</span>);</span><br><span class="line">  <span class="keyword">if</span> (moduleRef.<span class="property">_bootstrapComponents</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    moduleRef.<span class="property">_bootstrapComponents</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">f</span>) =&gt;</span> appRef.<span class="title function_">bootstrap</span>(f)); <span class="comment">// &lt;------- Here</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (moduleRef.<span class="property">instance</span>.<span class="property">ngDoBootstrap</span>) &#123;</span><br><span class="line">    moduleRef.<span class="property">instance</span>.<span class="title function_">ngDoBootstrap</span>(appRef);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeError</span>(</span><br><span class="line">      <span class="title class_">RuntimeErrorCode</span>.<span class="property">BOOTSTRAP_COMPONENTS_NOT_FOUND</span>,</span><br><span class="line">      ngDevMode &amp;&amp;</span><br><span class="line">        <span class="string">`The module <span class="subst">$&#123;stringify(moduleRef.instance.constructor)&#125;</span> was bootstrapped, `</span> +</span><br><span class="line">          <span class="string">`but it does not declare &quot;@NgModule.bootstrap&quot; components nor a &quot;ngDoBootstrap&quot; method. `</span> +</span><br><span class="line">          <span class="string">`Please define one of these.`</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_modules</span>.<span class="title function_">push</span>(moduleRef);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在该方法中，对于每个声明的<code>bootstrap</code>组件，都会调用<code>appRef.bootstrap</code>方法，这个方法是<code>ApplicationRef</code>的方法，用来启动一个组件。通常Angular程序只有一个bootstrap组件，就是<code>AppComponent</code>。<br>再来看<code>appRef.bootstrap</code>方法：</p>
<p><code>packages/core/src/application/application_ref.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">bootstrap&lt;C&gt;(</span><br><span class="line">  <span class="attr">componentOrFactory</span>: <span class="title class_">ComponentFactory</span>&lt;C&gt; | <span class="title class_">Type</span>&lt;C&gt;,</span><br><span class="line">  <span class="attr">rootSelectorOrNode</span>?: <span class="built_in">string</span> | <span class="built_in">any</span>,</span><br><span class="line">): <span class="title class_">ComponentRef</span>&lt;C&gt; &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">const</span> selectorOrNode = rootSelectorOrNode || componentFactory.<span class="property">selector</span>;</span><br><span class="line">  <span class="keyword">const</span> compRef = componentFactory.<span class="title function_">create</span>(<span class="title class_">Injector</span>.<span class="property">NULL</span>, [], selectorOrNode, ngModule); <span class="comment">// 1</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">_loadComponent</span>(compRef); <span class="comment">// 2</span></span><br><span class="line">  <span class="comment">// ... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法同样很大，如前，这里省略一些细枝末节，直接展示最重要的代码。</p>
<ol>
<li>首先根据bootstrap方法的第一个参数（通常是<code>AppComponent</code>）创建component。</li>
<li>然后调用内部方法<code>_loadComponent</code>来加载组件。</li>
</ol>
<p>继续看<code>_loadComponent</code>方法：<br><code>packages/core/src/application/application_ref.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">_loadComponent</span>(<span class="attr">componentRef</span>: <span class="title class_">ComponentRef</span>&lt;<span class="built_in">any</span>&gt;): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">attachView</span>(componentRef.<span class="property">hostView</span>); <span class="comment">// 1</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">tick</span>(); <span class="comment">// 2</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>首先调用<code>attachView</code>方法, 将组件的视图添加到视图树中。</li>
<li>然后调用<code>tick</code>方法，用来触发变更检测。</li>
</ol>
<p><code>tick</code>后续的方法调用如下：<br><code>tick</code> -&gt; <code>_tick</code> -&gt; <code>detectChangesInAttachedViews</code> -&gt; <code>detectChangesInViewIfRequired</code> -&gt; <code>detectChangesInternal</code></p>
<p>再看<code>detectChangesInternal</code>方法：<br><code>packages/core/src/render3/instructions/change_detection.ts</code></p>
<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>bootstrap</tag>
        <tag>start</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-how to create an angular app</title>
    <url>/2024/05/05/angular-how-to-create-an-angular-app/</url>
    <content><![CDATA[<h2 id="Install-Node-js"><a href="#Install-Node-js" class="headerlink" title="Install Node.js"></a>Install Node.js</h2><p>Download and install <a href="https://nodejs.org/en/">Node.js</a>.</p>
<h2 id="Install-Angular-CLI"><a href="#Install-Angular-CLI" class="headerlink" title="Install Angular CLI"></a>Install Angular CLI</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @angular/cli</span><br></pre></td></tr></table></figure>

<h2 id="Create-Angular-project"><a href="#Create-Angular-project" class="headerlink" title="Create Angular project"></a>Create Angular project</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng new my-app</span><br></pre></td></tr></table></figure>
<p>If you want to project with specific angular version, use the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx @angular/cli@15 new angular15-app</span><br></pre></td></tr></table></figure>

<h2 id="Start-project"><a href="#Start-project" class="headerlink" title="Start project"></a>Start project</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-app</span><br><span class="line">ng serve</span><br></pre></td></tr></table></figure>

<h2 id="Open-browser"><a href="#Open-browser" class="headerlink" title="Open browser"></a>Open browser</h2><p>Open browser and navigate to <code>http://localhost:4200/</code>.</p>
<h2 id="Create-angular-app-with-specific-version"><a href="#Create-angular-app-with-specific-version" class="headerlink" title="Create angular app with specific version"></a>Create angular app with specific version</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx @angular/cli@15 new angular15-app</span><br></pre></td></tr></table></figure>

<h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><ul>
<li><a href="https://nodejs.org/en/">Node.js</a></li>
<li><a href="https://angular.io/cli">Angular CLI</a></li>
<li><a href="https://angular.io/">Angular</a></li>
<li><a href="https://angular.dev/">Angular new site</a></li>
</ul>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>specific</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-how-to-read-angular-source-code</title>
    <url>/2024/04/30/angular-how-to-read-angular-source-code/</url>
    <content><![CDATA[<h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p>Angular的源码托管在<a href="https://github.com/angular/angular">GitHub</a>上，通过<code>git clone</code>命令下载源码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/angular/angular.git</span><br></pre></td></tr></table></figure>

<h2 id="创建Angular项目"><a href="#创建Angular项目" class="headerlink" title="创建Angular项目"></a>创建Angular项目</h2><p>参考<a href="https://zdd.github.io/2024/05/05/angular-how-to-create-an-angular-app/">这里</a>创建Angular项目</p>
<p>用<code>VSCode</code>或者<code>WebStorm</code>打开项目，找到<code>src/main.ts</code>文件，这是Angular应用的入口文件。可以看到如下代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; enableProdMode &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; platformBrowserDynamic &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser-dynamic&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; environment &#125; <span class="keyword">from</span> <span class="string">&#x27;./environments/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (environment.<span class="property">production</span>) &#123;</span><br><span class="line">  <span class="title function_">enableProdMode</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">platformBrowserDynamic</span>().<span class="title function_">bootstrapModule</span>(<span class="title class_">AppModule</span>)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br></pre></td></tr></table></figure>

<p>此处通过调用<code>platformBrowserDynamic().bootstrapModule(AppModule)</code>来启动应用。那么<code>bootstrapModule</code>是什么呢？通过在Angular源码中搜索<code>bootstrapModule</code>，可以找到如下代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">bootstrapModule&lt;M&gt;(</span><br><span class="line">    <span class="attr">moduleType</span>: <span class="title class_">Type</span>&lt;M&gt;,</span><br><span class="line">    <span class="attr">compilerOptions</span>:</span><br><span class="line">      | (<span class="title class_">CompilerOptions</span> &amp; <span class="title class_">BootstrapOptions</span>)</span><br><span class="line">      | <span class="title class_">Array</span>&lt;<span class="title class_">CompilerOptions</span> &amp; <span class="title class_">BootstrapOptions</span>&gt; = [],</span><br><span class="line">  ): <span class="title class_">Promise</span>&lt;<span class="title class_">NgModuleRef</span>&lt;M&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> options = <span class="title function_">optionsReducer</span>(&#123;&#125;, compilerOptions);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">compileNgModuleFactory</span>(<span class="variable language_">this</span>.<span class="property">injector</span>, options, moduleType).<span class="title function_">then</span>(<span class="function">(<span class="params">moduleFactory</span>) =&gt;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">bootstrapModuleFactory</span>(moduleFactory, options),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="快速定位源码的位置"><a href="#快速定位源码的位置" class="headerlink" title="快速定位源码的位置"></a>快速定位源码的位置</h3><p>我的习惯是，同时打开两个IDE，一个用来查看应用代码，一个用来查看<a href="https://github.com/angular/angular">Angular源码</a>。这样可以快速定位源码的位置。<br>比如对于上面的<code>bootstrapModule</code>, 则可以复制一份，到Angular源码所在的IDE中（WebStorm), 连按两下<code>Shift</code>键，然后粘贴<code>bootstrapModule</code>，就可以找到源码。</p>
<p>IDE本身提供的<code>Go to Definition/implementation</code>（或者按住<code>Ctrl</code>点击方法名）功能对于源码来说并不好用，只能定位到<code>*.d.ts</code>类型文件，而不能定位到源码文件。</p>
<h2 id="如何调试源码"><a href="#如何调试源码" class="headerlink" title="如何调试源码"></a>如何调试源码</h2><p>阅读源码的最好方式就是单步调试，一步一步观察程序是如何运行的。</p>
<h3 id="浏览器调试"><a href="#浏览器调试" class="headerlink" title="浏览器调试"></a>浏览器调试</h3><h4 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h4><p>Angular App默认使用Webpack打包，Webpack打包后的代码是经过压缩和混淆的，不利于调试。但是Webpack提供了SourceMap功能，可以将打包后的代码映射到源码，方便调试。</p>
<p>运行Angular程序后，在浏览器地址栏输入<code>localhost:4200</code>，按键盘上的<code>F12</code>键打开开发者工具，切换到<code>Source</code>选项卡，可以看到项目的源码。在<code>Webpack</code>结点下找到<code>src/main.ts</code>文件，点击行号，可以在代码中打断点。然后按<code>F5</code>刷新页面，就可以看到断点被触发了。<br><img src="/../images/browser-debug.png" alt="browser-debug"></p>
<p>但是当你step into源码时，会发现并没有进入到<code>bootstrapModule</code>方法中，而是停在了<code>core.mjs</code>文件的末尾，这时我们需要在<code>core.mjs</code>文件中找到<code>bootstrapModule</code>方法，然后在方法体内打断点。注意bootstrapModule会在<code>core.mjs</code>文件中出现多次，有些甚至是注释，可以搜索<code>bootstrapModule(</code>来定位。<br><img src="/../images/angular_core.png" alt="angular-core"></p>
<h4 id="ESBuild"><a href="#ESBuild" class="headerlink" title="ESBuild"></a>ESBuild</h4><p>Angular 17以后也支持esbuild打包，而且打包后的代码调试更方便，如下图。<br><img src="/../images/browser-debug-esbuild.png" alt="esbuild-debug"></p>
<h3 id="WebStorm调试"><a href="#WebStorm调试" class="headerlink" title="WebStorm调试"></a>WebStorm调试</h3><p>WebStorm调试十分简单，现在代码中打上断点，然后在<code>Run Configuration</code>列表中选择<code>Angular Application</code>，点击绿色的<code>Debug</code>按钮，就可以开始调试了。<br><img src="/../images/webstorm-debug.png" alt="webstorm-debug"></p>
<h3 id="VSCode调试"><a href="#VSCode调试" class="headerlink" title="VSCode调试"></a>VSCode调试</h3><p>待补充</p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>bootstrap</tag>
        <tag>source code</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-how-to-upgrade-angular</title>
    <url>/2024/06/09/angular-how-to-upgrade-angular/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In this post, we’ll discuss how to upgrade Angular to the latest version.</p>
<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><p>Suppose the current Angular version is 16.0.0, and the latest version is 17.0.0. Here are the steps to upgrade Angular to the latest version:</p>
<h3 id="Update-Node-js"><a href="#Update-Node-js" class="headerlink" title="Update Node.js"></a>Update Node.js</h3><p>First, make sure you have the latest version of Node.js installed on your machine. You can download the latest version from the <a href="https://nodejs.org/">official Node.js website</a>.</p>
<h3 id="Update-Angular-core-cli"><a href="#Update-Angular-core-cli" class="headerlink" title="Update Angular core&#x2F;cli"></a>Update Angular core&#x2F;cli</h3><p>Navigate to your Angular project root directory and run the following command to update Angular CLI to the latest version:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng update @angular/core@16 @angular/cli@16</span><br></pre></td></tr></table></figure>

<h3 id="Update-Angular-Material-CDK"><a href="#Update-Angular-Material-CDK" class="headerlink" title="Update Angular Material&#x2F;CDK"></a>Update Angular Material&#x2F;CDK</h3><p>If your project use Angular Material or Angular CDK, you can update them to the latest version by running the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng update @angular/material@16 @angular/cdk@16</span><br></pre></td></tr></table></figure>

<h3 id="Update-3rd-party-libraries"><a href="#Update-3rd-party-libraries" class="headerlink" title="Update 3rd-party libraries"></a>Update 3rd-party libraries</h3><p>If your project uses any 3rd-party libraries, make sure to update them to the latest compatible version with Angular 17.</p>
<ul>
<li>Jest</li>
<li>Cypress</li>
<li>…</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] <a href="https://angular.dev/update-guide">Angular Update Guide</a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>upgrade</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular lifecycle</title>
    <url>/2023/08/18/angular-lifecycle/</url>
    <content><![CDATA[<h1 id="Angular-Lifecycle"><a href="#Angular-Lifecycle" class="headerlink" title="Angular Lifecycle"></a>Angular Lifecycle</h1><p>今天我们来深入学习一下Angular的Lifecycle方法，Lifecycle方法是Angular中非常重要的一个概念，我们在开发中经常会用到这些方法，比如在<code>ngOnInit</code>中初始化数据，或者在<code>ngOnDestroy</code>中取消订阅等等。</p>
<p>首先在项目中生成一个组件，命名为<code>lifecycle</code>，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng g component lifecycle</span><br></pre></td></tr></table></figure>

<p>将<code>lifecycle.component.html</code>中的内容清空.然后在<code>lifecycle.component.ts</code>中添加如下代码。组件中的<code>count</code>变量用来标记每个Lifecycle方法调用的序号，这样我们就可以清楚的看到每个方法的调用顺序了。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">AfterContentChecked</span>,</span><br><span class="line">  <span class="title class_">AfterContentInit</span>,</span><br><span class="line">  <span class="title class_">AfterViewChecked</span>,</span><br><span class="line">  <span class="title class_">AfterViewInit</span>,</span><br><span class="line">  <span class="title class_">Component</span>,</span><br><span class="line">  <span class="title class_">DoCheck</span>,</span><br><span class="line">  <span class="title class_">OnChanges</span>,</span><br><span class="line">  <span class="title class_">OnDestroy</span>,</span><br><span class="line">  <span class="title class_">OnInit</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-order&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./order.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./order.component.less&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderComponent</span></span><br><span class="line">  <span class="keyword">implements</span></span><br><span class="line">    <span class="title class_">OnInit</span>,</span><br><span class="line">    <span class="title class_">AfterViewInit</span>,</span><br><span class="line">    <span class="title class_">OnChanges</span>,</span><br><span class="line">    <span class="title class_">AfterContentInit</span>,</span><br><span class="line">    <span class="title class_">AfterContentChecked</span>,</span><br><span class="line">    <span class="title class_">AfterViewChecked</span>,</span><br><span class="line">    <span class="title class_">OnDestroy</span>,</span><br><span class="line">    <span class="title class_">DoCheck</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> constructor`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> ngOnInit`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngDoCheck</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> ngDoCheck`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngAfterContentInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> ngAfterContentInit`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngAfterContentChecked</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> ngAfterContentChecked`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngAfterViewInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> ngAfterViewInit`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngAfterViewChecked</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> ngAfterViewChecked`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnChanges</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> ngOnChanges`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> ngOnDestroy`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行程序，会得到如下输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 constructor</span><br><span class="line">2 ngOnInit</span><br><span class="line">3 ngDoCheck</span><br><span class="line">4 ngAfterContentInit</span><br><span class="line">5 ngAfterContentChecked</span><br><span class="line">6 ngAfterViewInit</span><br><span class="line">7 ngAfterViewChecked</span><br></pre></td></tr></table></figure>
<p><code>constructor</code>是构造函数，并不能算是Angular生命周期函数，但是为了图个全乎，我们一并介绍。</p>
<h2 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h2><p><code>constructor</code>是构造函数，它是在组件被创建时调用的，它的调用顺序是最早的，也就是说它是第一个被调用的方法，它的调用顺序是固定的，不会因为其他因素而改变。  </p>
<h3 id="构造函数中应该做哪些事情"><a href="#构造函数中应该做哪些事情" class="headerlink" title="构造函数中应该做哪些事情"></a>构造函数中应该做哪些事情</h3><p>一般在构造函数中会做一些初始化的工作，比如</p>
<ol>
<li>初始化变量</li>
<li>订阅事件</li>
</ol>
<h3 id="构造函数中不应该做哪些事情？"><a href="#构造函数中不应该做哪些事情？" class="headerlink" title="构造函数中不应该做哪些事情？"></a>构造函数中不应该做哪些事情？</h3><ol>
<li>与View相关的操作，比如操作DOM元素(应该在<code>ngAfterViewInit</code>中进行)</li>
<li>获取后台数据（应该在<code>ngOnInit</code>中获取）</li>
</ol>
<h2 id="ngOnChanges"><a href="#ngOnChanges" class="headerlink" title="ngOnChanges"></a>ngOnChanges</h2><p><code>ngOnChanges</code>是当组件的<code>@Input</code>属性发生变化时调用的，它接受一个<code>SimpleChanges</code>类型的参数，这个参数中包含了变化的属性的信息，比如变化前的值和变化后的值等等。</p>
<p><strong>调用时机：</strong></p>
<ol>
<li>当且仅当组件中有<code>@Input</code>属性时才会被调用。</li>
<li>先在<code>ngOnInit</code>之前调用一次。（为什么？）</li>
<li>后续每当<code>@Input</code>属性发生变化时调用一次。</li>
</ol>
<p>由于我们这个组件中没有<code>@Input</code>属性，所以这个方法没有被调用。</p>
<h2 id="ngOnInit"><a href="#ngOnInit" class="headerlink" title="ngOnInit"></a>ngOnInit</h2><p>Initialize the directive or component after Angular first displays the data-bound properties and sets the directive or component’s input properties</p>
<p><strong>调用时机</strong></p>
<ol>
<li>在<code>ngOnChanges</code>之后调用一次。</li>
<li>不管<code>ngOnChanges</code>是否被调用，<code>ngOnInit</code>都会被调用一次。</li>
<li>整个生命周期中只调用一次。</li>
</ol>
<p>所以上面例子中构造函数调用之后，立即调用了<code>ngOnInit</code>方法。</p>
<h2 id="ngDoCheck"><a href="#ngDoCheck" class="headerlink" title="ngDoCheck"></a>ngDoCheck</h2><p>Detect and act upon changes that Angular can’t or won’t detect on its own</p>
<p>该方法主要用来做自定义的更新检测。</p>
<p><strong>调用时机</strong><br>2. 在<code>ngOnInit</code>调用之后调用一次。</p>
<ol>
<li>每次<code>ngOnChanges</code>调用之后，都会调用该方法。</li>
</ol>
<p>在上例中，虽然没有调用<code>ngOnChanges</code>，但是<code>ngOnInit</code>调用了，所以该方法也调用了一次。</p>
<p>注意：这里的第一点Angular官网的解释并不准确，确切的说，是每次Angular进行更新检测之后，都会调用该方法，即使更新检测后，绑定的值没有任何变化，也会调用该方法。为了验证，我们可以在<code>ngInit</code>中添加如下代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="keyword">private</span> <span class="attr">changeDetector</span>: <span class="title class_">ChangeDetectorRef</span>, <span class="comment">// 注入ChangeDetectorRef</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> constructor`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ngOnInit</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> ngOnInit`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每隔一秒手动触发一次更新检测。</span></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">changeDetector</span>.<span class="title function_">detectChanges</span>();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时观察控制台，输出如下，可见，每当change detection发生时，<code>ngDoCheck</code>都会被调用。<code>ngAfterContentChecked</code>和<code>ngAfterViewChecked</code>也会跟着被调用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 constructor</span><br><span class="line">2 ngOnInit</span><br><span class="line">3 ngDoCheck</span><br><span class="line">4 ngAfterContentInit</span><br><span class="line">5 ngAfterContentChecked</span><br><span class="line">6 ngAfterViewInit</span><br><span class="line">7 ngAfterViewChecked</span><br><span class="line"></span><br><span class="line">8 ngDoCheck</span><br><span class="line">9 ngAfterContentChecked</span><br><span class="line">10 ngAfterViewChecked</span><br><span class="line"></span><br><span class="line">11 ngDoCheck</span><br><span class="line">12 ngAfterContentChecked</span><br><span class="line">13 ngAfterViewChecked</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="ngAfterContentInit"><a href="#ngAfterContentInit" class="headerlink" title="ngAfterContentInit"></a>ngAfterContentInit</h2><p>Respond after Angular projects external content into the component’s view。该方法与<code>&lt;ng-content&gt;</code>标签相关。但是需要注意的是，无论组件中是否包含<code>&lt;ng-content&gt;</code>标签，该方法都会被调用。</p>
<p><strong>调用时机</strong></p>
<ol>
<li>在<code>ngDoCheck</code>第一次调用之后，调用一次。</li>
<li>整个生命周期中只调用一次。</li>
</ol>
<h2 id="ngAfterContentChecked"><a href="#ngAfterContentChecked" class="headerlink" title="ngAfterContentChecked"></a>ngAfterContentChecked</h2><p>当Angular检测完组件内容变化之后调用。</p>
<p><strong>调用时机</strong></p>
<ol>
<li>在<code>ngAfterContentInit</code>之后调用一次。</li>
<li>在每次<code>ngDoCheck</code>之后调用一次。</li>
</ol>
<h2 id="ngAfterViewInit"><a href="#ngAfterViewInit" class="headerlink" title="ngAfterViewInit"></a>ngAfterViewInit</h2><p>当Angular初始化完组件视图及其子视图之后调用。如果是directive中的ngAfterViewInit，则在初始化完包含该directive的视图之后调用。</p>
<p><strong>调用时机</strong></p>
<ol>
<li>在<code>ngAfterContentChecked</code>第一次调用之后调用一次。</li>
<li>整个生命周期中只调用一次。</li>
</ol>
<h2 id="ngAfterViewChecked"><a href="#ngAfterViewChecked" class="headerlink" title="ngAfterViewChecked"></a>ngAfterViewChecked</h2><p>当Angular检测完组件视图及其子视图之后调用。如果是directive中的ngAfterViewChecked，则在检测完包含该directive的视图之后调用。</p>
<p><strong>调用时机</strong></p>
<ol>
<li>在<code>ngAfterViewInit</code>之后调用一次。</li>
<li>在每次<code>ngAfterContentChecked</code>之后调用一次。</li>
</ol>
<h2 id="ngOnDestroy"><a href="#ngOnDestroy" class="headerlink" title="ngOnDestroy"></a>ngOnDestroy</h2><p>当Angular销毁组件之前调用。</p>
<p><strong>调用时机</strong></p>
<ol>
<li>在组件被销毁之前调用。</li>
<li>整个生命周期中只调用一次。</li>
</ol>
<p>要想看到该方法被调用，必须切换到切他页面，也就是离开该组件所在的页面才行。</p>
<p>下面我们改变页面内容，看看这些生命周期是否有变化，首先给模板文件添加内容，在<code>lifecycle.component.html</code>中添加如下内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Lifecycle component works<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>保存并刷新页面，可以看到输出并未变化。</p>
<p>接下来我们给组件添加一个<code>@Input</code>属性，修改<code>lifecycle.component.ts</code>文件，添加如下内容：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Input</span>() <span class="attr">nameList</span>: <span class="built_in">string</span>[] = [];</span><br></pre></td></tr></table></figure>

<p>修改模板文件，添加如下内容，用来显示输入的名字列表。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let name of nameList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>name: &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后我们创建一个父组件，用来调用<code>LifecycleComponent</code>组件，并传入<code>nameList</code>属性。<br>lifecycle-parent.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">lifecycle-order</span> [<span class="attr">nameList</span>]=<span class="string">&quot;nameList&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">lifecycle-order</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后运行程序，切换到life-cycle页面，可以看到控制台输出如下内容，从第二行可以看出，<code>ngOnChanges</code>方法被调用了，而且是在<code>ngOnInit</code>之前调用的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 - OrderComponent: constructor</span><br><span class="line">2 - OrderComponent: ngOnChanges</span><br><span class="line">3 - OrderComponent: ngOnInit</span><br><span class="line">4 - OrderComponent: ngDoCheck</span><br><span class="line">5 - OrderComponent: ngAfterContentInit</span><br><span class="line">6 - OrderComponent: ngAfterContentChecked</span><br><span class="line">7 - OrderComponent: ngAfterViewInit</span><br><span class="line">8 - OrderComponent: ngAfterViewChecked</span><br></pre></td></tr></table></figure>
<p>由于我们并没有在父组件中修改<code>nameList</code>属性，所以<code>ngOnChanges</code>方法只被调用了一次。<br>我们可以打印一下<code>changes</code>参数，看看里面有什么内容。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ngOnChanges</span>(<span class="params"><span class="attr">simpleChanges</span>: <span class="title class_">SimpleChanges</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;++OrderComponent.count&#125;</span> - <span class="subst">$&#123;<span class="variable language_">this</span>.className&#125;</span>: ngOnChanges`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(simpleChanges); <span class="comment">// print changes</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制台输出如下内容：<br><img src="/../images/ngOnChanges-simpleChanges.png" alt="Alt text"><br>因为是第一次赋值，所以<code>previousValue</code>是<code>undefined</code>，<code>currentValue</code>是<code>[&#39;John, &#39;Mary&#39;, &#39;Joe&#39;]</code>。并且firstChange为<code>true</code>。</p>
<p>接下来我们在父组件中添加一个按钮，用来修改<code>nameList</code>属性，修改<code>lifecycle-parent.component.html</code>文件，添加如下内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;changeNameList()&quot;</span>&gt;</span>Change Name List<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改<code>lifecycle-parent.component.ts</code>文件，添加如下内容：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">changeNameList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">nameList</span> = [<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Mary&#x27;</span>, <span class="string">&#x27;Joe&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行程序，切换到life-cycle页面，点击按钮，可以看到控制台输出如下内容：可以看到，由于这次我们修改了<code>nameList</code>属性，所以<code>ngOnChanges</code>方法又被调了一次。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">9 - OrderComponent: ngOnChanges</span><br><span class="line">10 - OrderComponent: ngDoCheck</span><br><span class="line">11 - OrderComponent: ngAfterContentChecked</span><br><span class="line">12 - OrderComponent: ngAfterViewChecked</span><br></pre></td></tr></table></figure>

<p>这次<code>changes</code>参数的内容如下图所示：<br><img src="/../images/ngOnChanges-second-change.png" alt="Alt text"></p>
<p>接下来，我们修改一下代码，添加一个input框，让用户输入名字，然后将该名字显示到页面上，修改<code>lifecycle-parent.component.html</code>文件，添加如下内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;addName()&quot;</span>&gt;</span>Add Name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改<code>lifecycle-parent.component.ts</code>文件，添加如下内容：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"><span class="title function_">addName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">name</span>.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nameList</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行程序，输入<code>zdd</code>到input框，点击Add Name按钮，可以看到新添加的name显示到了页面上，但是<code>onChanges</code>方法并没有被调用，这是为什么呢？</p>
<p><img src="/../images/ngOnChanges-input.png" alt="Alt text"></p>
<p>这是因为，Angular默认的change detection比较的是Input值的<code>引用</code>，而不是值本身。所以，当我们重新给<code>nameList</code>赋值时，<code>ngOnChanges</code>方法被调用了，因为此时<code>nameList</code>的引用改变了，但是当我们使用<code>Array.prototype.push</code>向<code>nameList</code>中添加元素时，<code>ngOnChanges</code>方法并没有被调用，因为<code>nameList</code>的引用并没有变化。</p>
<p>要想让<code>ngOnChanges</code>方法被调用，我们可以这样给<code>nameList</code>属性赋值：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">nameList</span> = [...<span class="variable language_">this</span>.<span class="property">nameList</span>, <span class="variable language_">this</span>.<span class="property">name</span>];</span><br></pre></td></tr></table></figure>
<p>这样，<code>nameList</code>的引用就变化了，<code>ngOnChanges</code>方法就会被调用。</p>
<p>不知道大家是否注意到这样一个情况，我们在input框每输入一个字符，控制台都会打印一下内容，甚至在我们删除输入框内容的时候，也会打印。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">96 - OrderComponent: ngDoCheck</span><br><span class="line">97 - OrderComponent: ngAfterContentChecked</span><br><span class="line">98 - OrderComponent: ngAfterViewChecked</span><br></pre></td></tr></table></figure>
<p>看来，每当我们输入值的时候，都触发了Angular change detection，这并不是我们想要的，我们只想在点击Add Name按钮的时候，触发change detection，这样才能保证性能。</p>
<p>用Angular Dev tool分析一下程序的性能。</p>
<p>首先打开Chrome的插件商店，搜索<code>Angular DevTools</code>，然后安装该插件。</p>
<p>然后运行程序，打开该插件，切换到<code>Profiler</code>页面。点击<code>Start recording</code>，然后在input框中输入几个字符，并停止录制。</p>
<p><img src="/../images/angular-devtools-profiler.png" alt="Alt text"></p>
<p>可以看到，输入框的input事件触发了<code>OrderComponent</code>的change detection,这不是我们想要的。我们可以使用<code>ChangeDetectorRef</code>来禁用change detection.</p>
<p>修改<code>lifecycle.component.ts</code>文件，添加如下内容：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">changeDetector</span>: <span class="title class_">ChangeDetectorRef</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ngAfterViewInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 注意，不能在ngOnInit方法中调用以下方法，否则初始数据无法显示到页面上。</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">changeDetector</span>.<span class="title function_">detach</span>(); <span class="comment">// 禁用change detection.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onInput</span>(<span class="params"><span class="attr">event</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">addName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">name</span>.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nameList</span> = [...<span class="variable language_">this</span>.<span class="property">nameList</span>, <span class="variable language_">this</span>.<span class="property">name</span>];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">changeDetector</span>.<span class="title function_">detectChanges</span>(); <span class="comment">// 更新数据时，要手动触发change detection.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次运行程序，在input框中输入字符，观察控制台，你会发现，input事件不再触发change detection了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">12</span><br><span class="line">123</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>

<p>使用<code>ChangeDetectionStrategy.OnPush</code>可以提高性能，但是要注意，如果我们使用了<code>ChangeDetectionStrategy.OnPush</code>，那么我们就必须使用<code>@Input</code>属性，否则，<code>ngOnChanges</code>方法不会被调用。而且使用这种策略时，只有当<code>@Input</code>属性的<code>引用</code>发生变化时，才会触发change detection，如果<code>@Input</code>属性的<code>值</code>发生变化，是不会触发change detection的。</p>
<p>比如，这样可以触发<code>ngOnChanges</code>方法：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">name</span>.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nameList</span> = [...<span class="variable language_">this</span>.<span class="property">nameList</span>, <span class="variable language_">this</span>.<span class="property">name</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这样不会触发<code>ngOnChanges</code>方法：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">name</span>.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nameList</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Nested-Components"><a href="#Nested-Components" class="headerlink" title="Nested Components"></a>Nested Components</h1><p>In Angular, components can be nested, for example, a <code>Parent</code> component can contain a <code>Child</code> component. Here is the lifecycle method order for nested components.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ParentComponent.constructor</span><br><span class="line">ChildComponent.constructor</span><br><span class="line">ParentComponent.ngOnChanges</span><br><span class="line">ParentComponent.ngOnInit</span><br><span class="line">ParentComponent.ngDoCheck</span><br><span class="line">ParentComponent.ngAfterContentInit</span><br><span class="line">ParentComponent.ngAfterContentChecked</span><br><span class="line">ChildComponent.ngOnChanges</span><br><span class="line">ChildComponent.ngOnInit</span><br><span class="line">ChildComponent.ngDoCheck</span><br><span class="line">ChildComponent.ngAfterContentInit</span><br><span class="line">ChildComponent.ngAfterContentChecked</span><br><span class="line">ChildComponent.ngAfterViewInit</span><br><span class="line">ChildComponent.ngAfterViewChecked</span><br><span class="line">ParentComponent.ngAfterViewInit</span><br><span class="line">ParentComponent.ngAfterViewChecked</span><br><span class="line">ChildComponent.ngOnDestroy</span><br><span class="line">ParentComponent.ngOnDestroy</span><br></pre></td></tr></table></figure>

<h1 id="Deep-nested-components"><a href="#Deep-nested-components" class="headerlink" title="Deep nested components"></a>Deep nested components</h1><p>What if the <code>Child</code> component also has a child component <code>Descendant</code>? Here is the lifecycle method order for deep nested components.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ParentComponent.constructor</span><br><span class="line">ChildComponent.constructor</span><br><span class="line">DescendantComponent.constructor</span><br><span class="line">ParentComponent.ngOnChanges</span><br><span class="line">ParentComponent.ngOnInit</span><br><span class="line">ParentComponent.ngDoCheck</span><br><span class="line">ParentComponent.ngAfterContentInit</span><br><span class="line">ParentComponent.ngAfterContentChecked</span><br><span class="line">ChildComponent.ngOnChanges</span><br><span class="line">ChildComponent.ngOnInit</span><br><span class="line">ChildComponent.ngDoCheck</span><br><span class="line">ChildComponent.ngAfterContentInit</span><br><span class="line">ChildComponent.ngAfterContentChecked</span><br><span class="line">DescendantComponent.ngOnChanges</span><br><span class="line">DescendantComponent.ngOnInit</span><br><span class="line">DescendantComponent.ngDoCheck</span><br><span class="line">DescendantComponent.ngAfterContentInit</span><br><span class="line">DescendantComponent.ngAfterContentChecked</span><br><span class="line">DescendantComponent.ngAfterViewInit</span><br><span class="line">DescendantComponent.ngAfterViewChecked</span><br><span class="line">ChildComponent.ngAfterViewInit</span><br><span class="line">ChildComponent.ngAfterViewChecked</span><br><span class="line">ParentComponent.ngAfterViewInit</span><br><span class="line">ParentComponent.ngAfterViewChecked</span><br><span class="line">DescendantComponent.ngOnDestroy</span><br><span class="line">ChildComponent.ngOnDestroy</span><br><span class="line">ParentComponent.ngOnDestroy</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>生命周期钩子</th>
<th>调用时机</th>
<th>调用次数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>ngOnChanges</code></td>
<td>输入属性（<code>@Input</code>）变化时触发</td>
<td>多次</td>
<td>响应输入属性的变化，获取新旧值并执行逻辑</td>
</tr>
<tr>
<td><code>ngOnInit</code></td>
<td>组件初始化后触发（在首次 <code>ngOnChanges</code> 之后）</td>
<td>一次</td>
<td>初始化数据（如从服务获取数据），适合执行一次性操作</td>
</tr>
<tr>
<td><code>ngDoCheck</code></td>
<td>每次变更检测周期中触发</td>
<td>多次</td>
<td>手动检测变更（如复杂对象变更），用于扩展默认变更检测</td>
</tr>
<tr>
<td><code>ngAfterContentInit</code></td>
<td>组件内容投影（如 <code>&lt;ng-content&gt;</code>）初始化完成后触发</td>
<td>一次</td>
<td>操作投影内容（如访问 <code>@ContentChild</code> 引用的子组件）</td>
</tr>
<tr>
<td><code>ngAfterContentChecked</code></td>
<td>每次内容投影变更检测完成后触发</td>
<td>多次</td>
<td>响应投影内容的变更（如动态插入子组件）</td>
</tr>
<tr>
<td><code>ngAfterViewInit</code></td>
<td>组件视图及子视图初始化完成后触发</td>
<td>一次</td>
<td>操作视图元素（如访问 <code>@ViewChild</code> 引用的 DOM 或子组件）</td>
</tr>
<tr>
<td><code>ngAfterViewChecked</code></td>
<td>每次视图及子视图变更检测完成后触发</td>
<td>多次</td>
<td>响应视图变更（如动态修改子组件属性），需避免在此修改状态以防止无限循环</td>
</tr>
<tr>
<td><code>ngOnDestroy</code></td>
<td>组件销毁前触发</td>
<td>一次</td>
<td>清理资源（如取消订阅、移除事件监听器）</td>
</tr>
</tbody></table>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://angular.dev/guide/components/lifecycle#summary">https://angular.dev/guide/components/lifecycle#summary</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>lifecycle</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-interview-questions</title>
    <url>/2024/12/03/angular-interview-questions/</url>
    <content><![CDATA[<h1 id="Angular-Interview-Questions"><a href="#Angular-Interview-Questions" class="headerlink" title="Angular Interview Questions"></a>Angular Interview Questions</h1><p>总结一些Angular的面试题，希望对大家有所帮助。</p>
<ol>
<li>简单描述Angular框架的特点，可以对比其他框架，比如React、Vue等。</li>
<li>Angular的生命周期钩子有哪些，分别在什么时候调用？<a href="https://zdd.github.io/2023/08/18/Angular-lifecycle/">详情</a></li>
<li>Angular数据绑定方式有哪些？<a href="https://zdd.github.io/2024/05/06/angular-data-binding/">详情</a></li>
<li>Angular指令是什么？有哪些种类？<a href="https://zdd.github.io/2024/12/03/angular-directive/">详情</a></li>
<li>Angular View Encapsulation有哪些方式？<a href="https://zdd.github.io/2024/11/30/angular-view-encapsulation/">详情</a></li>
<li><code>:host</code>和<code>::ng-deep</code>的作用是什么？<a href="https://zdd.github.io/2025/02/16/angular-ngdeep/">详情</a></li>
<li>Angular的依赖注入是如何实现的？<a href="https://zdd.github.io/tags/di/">详情</a><ol>
<li>Angular依赖注入有哪些Injector？</li>
<li>提供Provider的方式有哪些？</li>
<li>如果Service带参数，该如何为其提供Provider？ - 使用<code>useFactory</code>。- 唯有此法能传参数。</li>
</ol>
</li>
<li>Angular的路由是如何实现的？<a href="https://zdd.github.io/2024/04/18/angular-router/">详情</a></li>
<li>Angular的变更检测是如何实现的？<a href="https://zdd.github.io/tags/change-detection/">Change Detection</a><ol>
<li>基于zone.js的变更检测</li>
<li>zoneless变更检测</li>
<li>OnPush变更检测的原理是怎样的？如果有子组件呢？<a href="https://zdd.github.io/2024/06/09/angular-change-detection-on-push/">详情</a></li>
<li><code>detectChanges</code>和<code>markForCheck</code>有什么区别? [详情]（<a href="https://zdd.github.io/2024/12/16/angular-change-detection-markforcheck/%EF%BC%89">https://zdd.github.io/2024/12/16/angular-change-detection-markforcheck/）</a></li>
<li><code>runOutsideAngular</code>的作用是什么？<a href="https://zdd.github.io/2025/02/12/angular-run-outside-angular/">详情</a></li>
</ol>
</li>
<li>Angular组件间通信有哪些方式？各有什么优缺点？<a href="https://zdd.github.io/2025/02/10/angular-communication-between-parent-and-child-component/">详情</a></li>
<li>Angular如何实现性能优化？</li>
<li>Angular injection context有哪些？[详情]（<a href="https://zdd.github.io/2025/02/18/angular-di-injection-context/%EF%BC%89">https://zdd.github.io/2025/02/18/angular-di-injection-context/）</a></li>
<li>Angular @Input, <a href="https://zdd.github.io/2025/02/18/angular-component-input/">@Input</a></li>
<li>Angular Form - 重点复习一下，比如如何自定义验证器，如何自定义表单控件等。</li>
</ol>
<h2 id="Angular新特性"><a href="#Angular新特性" class="headerlink" title="Angular新特性"></a>Angular新特性</h2><ol>
<li>什么是signal? <a href="https://zdd.github.io/2025/02/18/angular-signal/">详情</a></li>
<li>signal与OnPush的关系，对于使用了OnPush更新策略的组件，如果内部使用了signal，Angular会将signal视为该组件的一个依赖，当这个signal变化时，Angular会将组件标记为待更新（markForCheck）。</li>
<li>Angular deferrable view, <a href="https://zdd.github.io/2025/01/04/angular-deferrable-views/">详情</a></li>
<li>Angular SSR - 这个要重点复习一下。</li>
</ol>
<h2 id="What-is-Angular"><a href="#What-is-Angular" class="headerlink" title="What is Angular?"></a>What is Angular?</h2><p>Angular is a web framework which help developers to build fast and scalable web applications. It is developed and maintained by Google.</p>
<p>It’s a MVC(or MVVM) framework to build SPA (Single Page Application) using HTML, CSS and JavaScript&#x2F;TypeScript.</p>
<p>Angular has a lot of features like:</p>
<ol>
<li>Two-way data binding</li>
<li>Dependency Injection</li>
<li>Routing</li>
<li>Directives</li>
<li>Pipes</li>
<li>Services</li>
<li>Forms</li>
<li>HttpClient</li>
<li>Animations</li>
<li>SSR (Server Side Rendering)</li>
</ol>
<h2 id="Differences-between-Angular-and-AngularJS"><a href="#Differences-between-Angular-and-AngularJS" class="headerlink" title="Differences between Angular and AngularJS"></a>Differences between Angular and AngularJS</h2><table>
<thead>
<tr>
<th></th>
<th>AngularJS</th>
<th>Angular</th>
</tr>
</thead>
<tbody><tr>
<td>Version</td>
<td>1.x</td>
<td>2+</td>
</tr>
<tr>
<td>Language</td>
<td>JavaScript</td>
<td>TypeScript</td>
</tr>
<tr>
<td>Architecture</td>
<td>Controller</td>
<td>Components</td>
</tr>
<tr>
<td>Mobile Support</td>
<td>No</td>
<td>Yes(Ionic)</td>
</tr>
<tr>
<td>CLI</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr>
<td>Lazy loading</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr>
<td>SSR</td>
<td>No</td>
<td>Yes</td>
</tr>
</tbody></table>
<h1 id="What-are-directives-in-Angular"><a href="#What-are-directives-in-Angular" class="headerlink" title="What are directives in Angular?"></a>What are directives in Angular?</h1><p>Directives are classes that add additional behavior to elements in your Angular applications. Angular has many kinds of directives, including:</p>
<ul>
<li>Component</li>
<li>Attribute Directives<ul>
<li>NgClass</li>
<li>NgStyle</li>
<li>NgModel</li>
</ul>
</li>
<li>Structural Directives<ul>
<li>NgIf</li>
<li>NgFor</li>
<li>NgSwitch</li>
</ul>
</li>
</ul>
<h1 id="Component-vs-Module"><a href="#Component-vs-Module" class="headerlink" title="Component vs Module"></a>Component vs Module</h1><p>Component is where you write you binding code, and Module groups components. An app contains many modules, and a module contains many components.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">app</span><br><span class="line">├─ Login Module</span><br><span class="line">│  ├─ Login Component</span><br><span class="line">│  ├─ Register Component</span><br><span class="line">│  ├─ Forgot Password Component</span><br><span class="line">│  ├─ Reset Password Component</span><br></pre></td></tr></table></figure>
<p>Before standalone component, Two components in different module can’t communicate with each other directly, they need to communicate by their enclosing module. See <a href="https://zdd.github.io/2023/09/02/Angular-module/">here</a> for more details.</p>
<h1 id="Angular-and-MVVM"><a href="#Angular-and-MVVM" class="headerlink" title="Angular and MVVM"></a>Angular and MVVM</h1><p>Angular is a MVVM framework, it’s a bit different from MVC. </p>
<ul>
<li>Model: Data types and Services</li>
<li>View: HTML template</li>
<li>ViewModel: Component</li>
</ul>
<p>In MVVM pattern, Model and View doesn’t communicate directly. ViewModel is a mediator between Model and View, it’s a class that contains the business logic of the application. In Angular, ViewModel is a Component.</p>
<h1 id="What’s-signal-in-Angular"><a href="#What’s-signal-in-Angular" class="headerlink" title="What’s signal in Angular?"></a>What’s signal in Angular?</h1><h1 id="What’s-deferrable-component"><a href="#What’s-deferrable-component" class="headerlink" title="What’s deferrable component?"></a>What’s deferrable component?</h1><h1 id="Angular如何实现性能优化？"><a href="#Angular如何实现性能优化？" class="headerlink" title="Angular如何实现性能优化？"></a>Angular如何实现性能优化？</h1><ol>
<li>使用OnPush策略 - reduce change detection counts.</li>
<li>使用trackBy</li>
<li>使用lazy load components - 減少initial bundle size, decrease first screen loading time.</li>
<li>图片优化：<a href="https://angular.dev/tutorials/learn-angular/11-optimizing-images">https://angular.dev/tutorials/learn-angular/11-optimizing-images</a> - increase images loading speed.</li>
<li>合并API call（特别是使用GraphQL时），減少API call次数。这项优化非Angular特有，但是在Angular中也是适用的。</li>
<li>减小bundle size - 使用tree shaking, code splitting, lazy loading等技术。也要分析哪些npm包体积过大，是否有替代品。</li>
</ol>
<p>#工作中遇到的真实案例</p>
<h2 id="ng-if问题"><a href="#ng-if问题" class="headerlink" title="ng-if问题"></a>ng-if问题</h2><p>之前一个同事写了一个很大的组件，就是一个左侧边栏菜单，这个边栏要加载用户账号，有的用户有上千个账号，而这个边栏还有一个收起和展开的操作。测试人员发现，当用户的账号很多时，收起和展开就特别卡。调查发现，收起和展开是通过ng-if实现的，而ng-if在显示和隐藏时是要操作DOM将对应的组件重建或删除的。这个组件很大，所以导致了卡顿。解决方案是使用ng-show&#x2F;ng-hide，这样就不会导致组件的重建和删除。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h1><ol>
<li><a href="https://dev.to/renukapatil/angular-interview-questions-4i4k">https://dev.to/renukapatil/angular-interview-questions-4i4k</a> 3.</li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>interview</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-lifecyle-ngonchanges</title>
    <url>/2024/12/05/angular-lifecyle-ngonchanges/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>ngOnChanges</code>是Angular中非常重要的一个生命周期函数，今天我们来详细讨论一下它的用法。</p>
<h2 id="Angular什么时候调用ngOnChanges？"><a href="#Angular什么时候调用ngOnChanges？" class="headerlink" title="Angular什么时候调用ngOnChanges？"></a>Angular什么时候调用<code>ngOnChanges</code>？</h2><p><code>ngOnChanges</code>是一个生命周期钩子，当Angular检测到组件的输入属性发生变化时，就会调用<code>ngOnChanges</code>函数。这意味着，只有当组件的输入属性发生变化时，<code>ngOnChanges</code>才会被调用。</p>
<h2 id="我们什么时候需要重写ngOnChanges？"><a href="#我们什么时候需要重写ngOnChanges？" class="headerlink" title="我们什么时候需要重写ngOnChanges？"></a>我们什么时候需要重写<code>ngOnChanges</code>？</h2><p>通常情况下，我们不需要重写<code>ngOnChanges</code>函数，因为Angular会自动调用它。但是，以下几种情况都需要重写<code>ngOnChanges</code>函数：</p>
<ol>
<li>当我们使用了<code>OnPush</code>时，且需要根据Input变化做相应操作时，那么就要响应<code>ngOnChanges</code>。</li>
<li>当我们需要在组件的输入属性发生变化时执行一些自定义逻辑时，我们就需要重写<code>ngOnChanges</code>函数。</li>
</ol>
<h2 id="配合OnPush"><a href="#配合OnPush" class="headerlink" title="配合OnPush"></a>配合OnPush</h2><p>假设有一个父组件：ParentComponent，一个子组件ChildComponent，父组件中调用一个API，返回值作为Input传递给子组件，子组件要根据这个Input继续调用另外一个API，这时候就需要在子组件中重写<code>ngOnChanges</code>函数。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-child&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;p&gt;Child Component&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">changeDetection</span>: <span class="title class_">ChangeDetectionStrategy</span>.<span class="property">OnPush</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> <span class="keyword">implements</span> <span class="title class_">OnChanges</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">data</span>: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnChanges</span>(<span class="params"><span class="attr">changes</span>: <span class="title class_">SimpleChanges</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (changes.<span class="property">data</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">fetchData</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Call API</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义逻辑"><a href="#自定义逻辑" class="headerlink" title="自定义逻辑"></a>自定义逻辑</h2>]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>lifecycle</tag>
        <tag>ngonchanges</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-loop-specific-times-in-template</title>
    <url>/2025/03/15/angular-loop-specific-times-in-template/</url>
    <content><![CDATA[<p>今天在HackerRank上做Angular题目，偶然遇到一个循环固定次数的问题，这里记录一下。</p>
<p>假设需要在template里面循环<code>count</code>次，每次生成一个div，而<code>count</code>是后台api返回的一个变量，该如何实现呢？</p>
<h2 id="方法一，使用数组"><a href="#方法一，使用数组" class="headerlink" title="方法一，使用数组"></a>方法一，使用数组</h2><p>我能想到的最简单的方法，就是定义一个含有<code>count</code>个元素的数组，然后使用<code>ngFor</code>遍历这个数组。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="attr">nums</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function"><span class="params">count</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 创建含有count个元素的数组，数组元素的值无所谓，我们只用到元素个数。</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">nums</span> = <span class="title class_">Array</span>(count).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模拟后台api返回的count</span></span><br><span class="line">  <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Random int between 0 - 10</span></span><br><span class="line">    <span class="keyword">const</span> randomInt = <span class="title class_">Math</span>.<span class="title function_">floor</span>((<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(randomInt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后使用<code>ngFor</code>遍历这个数组。这样会循环生成<code>count</code>个div元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let n of nums; let i = index&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="方法二，在模板中构造数组"><a href="#方法二，在模板中构造数组" class="headerlink" title="方法二，在模板中构造数组"></a>方法二，在模板中构造数组</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let i of [].constructor(count).keys()&quot;</span>&gt;</span></span><br><span class="line">  第 &#123;&#123;i + 1&#125;&#125; 次循环 <span class="comment">&lt;!-- 显示从1开始的序号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：该方法会导致一个错误：需要研究一下，为什么？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">core.mjs:6662 ERROR RuntimeError: NG0100: ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: <span class="string">&#x27;[object Array Iterator]&#x27;</span>. Current value: <span class="string">&#x27;[object Array Iterator]&#x27;</span>. Expression location: _AppComponent component. Find more at</span><br></pre></td></tr></table></figure>

<h2 id="方法三，使用自定义指令"><a href="#方法三，使用自定义指令" class="headerlink" title="方法三，使用自定义指令"></a>方法三，使用自定义指令</h2><p>使用时，需要在模块或者独立组件的<code>imports</code>中引入<code>RepeatDirective</code>，否则会报错。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义指令代码</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Directive</span>, <span class="title class_">Input</span>, <span class="title class_">TemplateRef</span>, <span class="title class_">ViewContainerRef</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[appRepeat]&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">RepeatDirective</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="attr">templateRef</span>: <span class="title class_">TemplateRef</span>&lt;<span class="built_in">any</span>&gt;,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="attr">viewContainer</span>: <span class="title class_">ViewContainerRef</span>,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Input</span>(<span class="string">&#x27;appRepeat&#x27;</span>) <span class="keyword">set</span> <span class="title function_">count</span>(<span class="params"><span class="attr">value</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">viewContainer</span>.<span class="title function_">clear</span>(); <span class="comment">// 清空容器</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; value; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">viewContainer</span>.<span class="title function_">createEmbeddedView</span>(<span class="variable language_">this</span>.<span class="property">templateRef</span>, &#123;</span><br><span class="line">        <span class="attr">$implicit</span>: i + <span class="number">1</span>, <span class="comment">// 传递索引值</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用自定义指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">appRepeat</span>=<span class="string">&quot;count; let i&quot;</span>&gt;</span></span><br><span class="line">  这是第 &#123;&#123; i &#125;&#125; 次循环</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="方法四：自定义管道"><a href="#方法四：自定义管道" class="headerlink" title="方法四：自定义管道"></a>方法四：自定义管道</h2><p>使用时，需要在模块或者独立组件的<code>imports</code>中引入<code>RangePipe</code>，否则会报错。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Pipe</span>, <span class="title class_">PipeTransform</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pipe</span>(&#123;</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;range&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">RangePipe</span> <span class="keyword">implements</span> <span class="title class_">PipeTransform</span> &#123;</span><br><span class="line">  <span class="title function_">transform</span>(<span class="attr">value</span>: <span class="built_in">number</span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: value &#125;, <span class="function">(<span class="params">_, i</span>) =&gt;</span> i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用自定义管道</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let i of count | range&quot;</span>&gt;</span></span><br><span class="line">  第 &#123;&#123;i + 1&#125;&#125; 次循环 <span class="comment">&lt;!-- 显示从1开始的序号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>loop</tag>
        <tag>angular</tag>
        <tag>template</tag>
        <tag>directive</tag>
        <tag>ngfor</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-material-design-custom-theme</title>
    <url>/2024/06/16/angular-material-design-custom-theme/</url>
    <content><![CDATA[<h2 id="How-to-apply-custom-theme-to-Angular-project"><a href="#How-to-apply-custom-theme-to-Angular-project" class="headerlink" title="How to apply custom theme to Angular project."></a>How to apply custom theme to Angular project.</h2><ol>
<li>Create a custom file under project root</li>
</ol>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Custom Theming for Angular Material</span></span><br><span class="line"><span class="comment">// For more information: https://material.angular.io/guide/theming</span></span><br><span class="line"><span class="keyword">@use</span> <span class="string">&#x27;@angular/material&#x27;</span> as mat;</span><br><span class="line"><span class="comment">// Plus imports for other components in your app.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Include the common styles for Angular Material. We include this here so that you only</span></span><br><span class="line"><span class="comment">// have to load a single css file for Angular Material in your app.</span></span><br><span class="line"><span class="comment">// Be sure that you only ever include this mixin once!</span></span><br><span class="line"><span class="keyword">@include</span> mat.core();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define the palettes for your theme using the Material Design palettes available in palette.scss</span></span><br><span class="line"><span class="comment">// (imported above). For each palette, you can optionally specify a default, lighter, and darker</span></span><br><span class="line"><span class="comment">// hue. Available color palettes: https://material.io/design/color/</span></span><br><span class="line"><span class="variable">$my-app-primary</span>: mat.<span class="built_in">define-palette</span>(mat.<span class="variable">$teal-palette</span>);</span><br><span class="line"><span class="variable">$my-app-accent</span>: mat.<span class="built_in">define-palette</span>(mat.<span class="variable">$teal-palette</span>, A200, A100, A400);</span><br><span class="line"></span><br><span class="line"><span class="comment">// The warn palette is optional (defaults to red).</span></span><br><span class="line"><span class="variable">$my-app-warn</span>: mat.<span class="built_in">define-palette</span>(mat.<span class="variable">$red-palette</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the theme object. A theme consists of configurations for individual</span></span><br><span class="line"><span class="comment">// theming systems such as &quot;color&quot; or &quot;typography&quot;.</span></span><br><span class="line"><span class="variable">$my-app-theme</span>: mat.<span class="built_in">define-light-theme</span>((</span><br><span class="line">  color: (</span><br><span class="line">    primary: <span class="variable">$my-app-primary</span>,</span><br><span class="line">    accent: <span class="variable">$my-app-accent</span>,</span><br><span class="line">    warn: <span class="variable">$my-app-warn</span>,</span><br><span class="line">  ),</span><br><span class="line">  typography: mat.<span class="built_in">define-typography-config</span>(),</span><br><span class="line">  density: <span class="number">0</span></span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Include theme styles for core and each component used in your app.</span></span><br><span class="line"><span class="comment">// Alternatively, you can import and @include the theme mixins for each component</span></span><br><span class="line"><span class="comment">// that you are using.</span></span><br><span class="line"><span class="keyword">@include</span> mat.all-component-themes(<span class="variable">$my-app-theme</span>);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Put the theme file in <code>angular.json</code> or <code>project.json</code>(for Nx monorepo), <code>Architect</code> -&gt; <code>build</code> -&gt; <code>options</code> -&gt; <code>styles</code></li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;styles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="string">&quot;src/styles.scss&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;src/custom-theme.scss&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>material design</tag>
        <tag>theme</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-lifecyle-ondocheck</title>
    <url>/2024/12/05/angular-lifecyle-ondocheck/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>ngDoCheck</code> runs before every time Angular checks a component’s template for changes. </p>
<h2 id="常见的误解"><a href="#常见的误解" class="headerlink" title="常见的误解"></a>常见的误解</h2><p>很多人误以为，只要这个函数调用了，那么就证明Angular对当前组件进行了变更检测，这是一个常见的误解。注意看这个函数的<a href="https://angular.dev/guide/components/lifecycle#ngdocheck">定义</a>：它是在每次Angular检查组件的模板变化之前运行的。所以不能以这个函数的调用作为Angular进行了变更检测的依据。</p>
<p>我们来看一个实际的例子：</p>
<ol>
<li>一个父组件<code>ParentComponent</code>, 采用<code>ChangeDetectionStrategyDefault</code>模式</li>
<li>一个子组件<code>ChildComponent</code>，采用<code>ChangeDetectionStrategy.OnPush</code>模式</li>
<li>当父组件处理点击事件时，子组件的<code>ngDoCheck</code>函数会被调用吗？</li>
<li>再添加一个孙子组件<code>GrandChildComponent</code>，采用<code>ChangeDetectionStrategy.OnPush</code>模式，当父组件处理点击事件时，孙子组件的<code>ngDoCheck</code>函数会被调用吗？</li>
</ol>
<p><code>ParentComponent</code>采用默认的<code>ChangeDetectionStrategyDefault</code>模式，并且添加了一个按钮，当我们点击这个按钮时，Angular会触发变更检测。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// parent.component.ts</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-parent&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">ChildComponent</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;p&gt;parent works!&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;app-child /&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;onParentButtonClick()&quot;&gt;Parent&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./parent.component.scss&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ParentComponent</span> &#123;</span><br><span class="line">  <span class="title function_">onParentButtonClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`click in ParentComponent`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ChildComponent</code>采用<code>ChangeDetectionStrategy.OnPush</code>模式，只有当Input属性发生变化时，或者响应自身事件，或者手动触发了变更检测时，<code>ngDoCheck</code>函数才会被调用。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// child.component.ts</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-child&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">GrandChildComponent</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;p&gt;child works!&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;app-grand-child /&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./child.component.scss&#x27;</span>,</span><br><span class="line">  <span class="attr">changeDetection</span>: <span class="title class_">ChangeDetectionStrategy</span>.<span class="property">OnPush</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> <span class="keyword">implements</span> <span class="title class_">DoCheck</span> &#123;</span><br><span class="line">  <span class="title function_">ngDoCheck</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`ngDoCheck in ChildComponent`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>GrandChildComponent</code>同样采用了<code>ChangeDetectionStrategy.OnPush</code>模式。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// grand-child.component.ts</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-grand-child&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;p&gt;grand-child works!&lt;/p&gt;`</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./grand-child.component.scss&#x27;</span>,</span><br><span class="line">  <span class="attr">changeDetection</span>: <span class="title class_">ChangeDetectionStrategy</span>.<span class="property">OnPush</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">GrandChildComponent</span> <span class="keyword">implements</span> <span class="title class_">DoCheck</span> &#123;</span><br><span class="line">    <span class="title function_">ngDoCheck</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`ngDoCheck in GrandChildComponent`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们点击Parent按钮时，控制台输出包含如下一行，说明ChildComponent的<code>ngDoCheck</code>函数被调用了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ngDoCheck in ChildComponent</span><br></pre></td></tr></table></figure>

<p>可是我们明明指定了<code>ChangeDetectionStrategy.OnPush</code>模式，为什么会调用<code>ngDoCheck</code>函数呢？难道<code>OnPush</code>模式失效了吗？</p>
<p>其实不然，正如前面所说的，<code>ngDoCheck</code>函数是在每次Angular检查组件的模板变化之前运行的。所以，即使<code>ChildComponent</code>采用了<code>ChangeDetectionStrategy.OnPush</code>模式，<code>ngDoCheck</code>也被调用了，但是这并不意味着Angular对<code>ChildComponent</code>进行了变更检测。</p>
<p>这种情况只发生在<code>OnPush</code>根组件上，上面的<code>GrandChildComponent</code>并没有被调用，因为它是<code>ChildComponent</code>的子组件，所以它的<code>ngDoCheck</code>不会调用。</p>
<p>有此类行为的生命周期函数还有<code>ngAfterViewChecked</code>，无论Angular是否进行了变更检测，这个函数都会被调用。</p>
<h2 id="如何确定Angular是否进行了变更检测？"><a href="#如何确定Angular是否进行了变更检测？" class="headerlink" title="如何确定Angular是否进行了变更检测？"></a>如何确定Angular是否进行了变更检测？</h2><p>对于一个组件来说，我如何确定Angular是否对它进行了变更检测呢？这个问题，其实困扰了我很久，以前我一直以为<code>ngDoCheck</code>函数的调用就是Angular进行了变更检测的标志，由上面的结论可知，这是不准确的。而其他生命周期函数也无法准确的告诉我们Angular是否进行了变更检测。</p>
<p>真的没办法了吗？</p>
<p>有的！其实之所以有这个困惑，还是对Angular变更检测理解不够深入，Angular的变更检测到底做了什么？其中必然有一个步骤是对template进行检查，如果template中绑定的值发生了变化，那么Angular就会更新视图。所以，我们可以通过template是否发生变化来判断Angular是否进行了变更检测。</p>
<p>代码很简单，只要在ChildComponent的模板中插入一个随机值即可，如果Angular进行了变更检测，那么每次这个值都会变化。如果这个值没有变，那么Angular就没有进行变更检测。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-child&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">GrandChildComponent</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;p&gt;child works! &#123;&#123;Math.random()&#125;&#125;&lt;/p&gt; </span></span><br><span class="line"><span class="string">    &lt;app-grand-child /&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">changeDetection</span>: <span class="title class_">ChangeDetectionStrategy</span>.<span class="property">OnPush</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这时我们再点击Parent按钮，发现ChildComponent的模板中的随机值是不变的，这证明Angular没有进行变更检测。</p>
<h2 id="ngDoCheck到底怎么用？"><a href="#ngDoCheck到底怎么用？" class="headerlink" title="ngDoCheck到底怎么用？"></a><code>ngDoCheck</code>到底怎么用？</h2><p>其实<code>ngDoCheck</code>是在Angular进行变更检测之前给用户一个机会，执行一些自定义逻辑。注意看官网的这句话：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">You can use this lifecycle hook to manually check <span class="keyword">for</span> state changes outside of Angular<span class="string">&#x27;s normal change detection, manually updating the component&#x27;</span>s state.</span><br></pre></td></tr></table></figure>

<p>所以到底要怎么使用它？恕我经验不够，我至今还未在项目中实际使用过<code>ngDoCheck</code>函数。但是我在网上找到了一些资料，可以参考一下：</p>
<ol>
<li>使用第三方库时，如果你的组件中使用了第三方库，而第三方库改变了DOM状态，但是Angular没有检测到，这时可以使用<code>ngDoCheck</code>函数来手动检测状态变化。</li>
<li>自定义变更检测的逻辑，比如在某些条件下不进行变更检测，可以在<code>ngDoCheck</code>函数中实现。</li>
<li>子组件接收一个对象作为Input属性，而父组件只改变了对象的属性，这时<code>ngOnChanges</code>函数不会被调用的，这时可以使用<code>ngDoCheck</code>函数来检测对象的属性变化。<br>说实话，这个例子非常的牵强，父组件只该变对象的一个属性这不是好的编程习惯，这种情况应该直接传递一个新的对象给子组件。但是作为例子，我们还是说一下这个情况。</li>
</ol>
<h3 id="使用第三方库"><a href="#使用第三方库" class="headerlink" title="使用第三方库"></a>使用第三方库</h3><p>组件中使用第三方库改变了DOM状态，但是Angular没有检测到，这时可以使用<code>ngDoCheck</code>函数来手动检测状态变化。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ngDoCheck</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">cdf</span>.<span class="title function_">markForCheck</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义变更检测逻辑"><a href="#自定义变更检测逻辑" class="headerlink" title="自定义变更检测逻辑"></a>自定义变更检测逻辑</h3><p>假设有一个父组件ParentComponent，一个子组件ChildComponent，父组件给子组件传递一个User对象，我们将User的年龄显示到子组件页面上，我们希望达到一个效果，如果年龄小于50岁时，子组件不进行变更检测，这种情况就需要使用<code>ngDoCheck</code>函数。</p>
<p>父组件定义如下，注意在<code>onParentButtonClick</code>函数中要重新赋值一个新的User对象，而不是改变User对象的属性。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-parent&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">ChildComponent</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;p&gt;parent works!&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;app-child [user]=&quot;user&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;onParentButtonClick()&quot;&gt;Parent&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./parent.component.scss&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ParentComponent</span> &#123;</span><br><span class="line">  <span class="attr">user</span>: <span class="title class_">User</span> = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Philip&#x27;</span>, <span class="attr">age</span>: <span class="number">40</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onParentButtonClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> age = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">user</span> = &#123;...<span class="variable language_">this</span>.<span class="property">user</span>, age&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子组件定义如下，我们需要在<code>ngDoCheck</code>中自定义变更检测的逻辑。(注意，<code>ngDoCheck</code>在每次<code>ngOnChanges</code>之后调用。), 如果年龄小于50岁时，我们是用<code>ChangeDetectorRef.detach()</code>函数来停止变更检测，大于50岁时，我们使用<code>ChangeDetectorRef.reattach()</code>函数来恢复变更检测。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-child&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">GrandChildComponent</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;p&gt;child works!&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&#123;&#123;user?.age&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;app-grand-child/&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">changeDetection</span>: <span class="title class_">ChangeDetectionStrategy</span>.<span class="property">OnPush</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> <span class="keyword">implements</span> <span class="title class_">DoCheck</span>, <span class="title class_">OnChanges</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">user</span>: <span class="title class_">User</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="attr">currentAge</span>: <span class="built_in">number</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">cdf</span>: <span class="title class_">ChangeDetectorRef</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnChanges</span>(<span class="attr">changes</span>: <span class="title class_">SimpleChanges</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">currentAge</span> = changes[<span class="string">&#x27;user&#x27;</span>].<span class="property">currentValue</span>.<span class="property">age</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngDoCheck</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">currentAge</span>! &lt; <span class="number">50</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cdf</span>.<span class="title function_">detach</span>(); <span class="comment">// stop change detection</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cdf</span>.<span class="title function_">reattach</span>(); <span class="comment">// restore change detection</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：这个例子十分牵强，现实中不会有这种情况的。</p>
<h3 id="子组件接收对象作为Input属性，父组件只改变了对象的属性"><a href="#子组件接收对象作为Input属性，父组件只改变了对象的属性" class="headerlink" title="子组件接收对象作为Input属性，父组件只改变了对象的属性"></a>子组件接收对象作为Input属性，父组件只改变了对象的属性</h3><p>User类型定义：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>父组件定义如下，初始化时，我们传递一个user对象给<code>ChildComponent</code>, 点击按钮时，改变user对象的age属性。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-parent&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">ChildComponent</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;p&gt;parent works!&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;app-child [user]=&quot;user&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;onParentButtonClick()&quot;&gt;Parent&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./parent.component.scss&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ParentComponent</span> &#123;</span><br><span class="line">  <span class="attr">user</span>: <span class="title class_">User</span> = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Philip&#x27;</span>, <span class="attr">age</span>: <span class="number">40</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onParentButtonClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子组件定义如下，当父组件点击按钮时，子组件的页面上，age值并没有变化，还是40.<br>子组件的<code>ngDoCheck</code>函数会被调用，我们可以在<code>ngDoCheck</code>函数中检测user对象的属性变化，并打印出变化的值。<br>但是子组件的<code>ngOnChanges</code>函数不会被调用，因为父组件只改变了user对象的属性，而没有改变user对象本身。而<code>ngOnChanges</code>比较的是对象的引用，而不是对象内部的值。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-child&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">GrandChildComponent</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;p&gt;child works!&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&#123;&#123;user?.age&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">changeDetection</span>: <span class="title class_">ChangeDetectionStrategy</span>.<span class="property">OnPush</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span>, <span class="title class_">DoCheck</span>, <span class="title class_">OnChanges</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">user</span>: <span class="title class_">User</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="attr">differ</span>: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">differs</span>: <span class="title class_">KeyValueDiffers</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">differ</span> = <span class="variable language_">this</span>.<span class="property">differs</span>.<span class="title function_">find</span>(<span class="variable language_">this</span>.<span class="property">user</span>).<span class="title function_">create</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnChanges</span>(<span class="attr">changes</span>: <span class="title class_">SimpleChanges</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(changes[<span class="number">0</span>].<span class="property">currentValue</span>.<span class="property">age</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngDoCheck</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`ngDoCheck in ChildComponent`</span>);</span><br><span class="line">    <span class="keyword">const</span> userChanges = <span class="variable language_">this</span>.<span class="property">differ</span>.<span class="title function_">diff</span>(<span class="variable language_">this</span>.<span class="property">user</span>);</span><br><span class="line">    <span class="keyword">if</span> (userChanges) &#123;</span><br><span class="line">      userChanges.<span class="title function_">forEachChangedItem</span>(<span class="function">(<span class="params"><span class="attr">changeRecord</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;item changed : &#x27;</span> + changeRecord.<span class="property">key</span> + <span class="string">&#x27; &#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(changeRecord.<span class="property">currentValue</span>))</span><br><span class="line">      &#125;);</span><br><span class="line">      userChanges.<span class="title function_">forEachAddedItem</span>(<span class="function">(<span class="params"><span class="attr">changeRecord</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;item added : &#x27;</span> + changeRecord.<span class="property">key</span> + <span class="string">&#x27; &#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(changeRecord.<span class="property">currentValue</span>))</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们想让子组件页面上的age值变化，那么只需要手动触发一次变更检测即可。此时再点击父组件中的按钮，子组件的age值会变为18。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">cdf</span>: <span class="title class_">ChangeDetectorRef</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ngDoCheck</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">cdf</span>.<span class="title function_">markForCheck</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://angular.dev/guide/components/lifecycle#ngdocheck">https://angular.dev/guide/components/lifecycle#ngdocheck</a></li>
<li><a href="https://stackoverflow.com/a/45522199/1487475">https://stackoverflow.com/a/45522199/1487475</a></li>
<li><a href="https://medium.com/@tehseen_ullah786/here-is-why-we-should-use-ngdocheck-in-angular-28bc98a86d85#:~:text=Integration%20with%20third%2Dparty%20libraries,and%20updates%20the%20view%20accordingly">https://medium.com/@tehseen_ullah786/here-is-why-we-should-use-ngdocheck-in-angular-28bc98a86d85#:~:text=Integration%20with%20third%2Dparty%20libraries,and%20updates%20the%20view%20accordingly</a>.</li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>change detection</tag>
        <tag>lifecycle</tag>
        <tag>ngdocheck</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-module-federation-deep-dive</title>
    <url>/2024/10/03/angular-module-federation-deep-dive/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In this article, we will explore the Angular Module Federation feature in depth. Please read the <a href="https://zdd.github.io/2024/05/26/angular-module-federation/">first article</a> in this series to get a basic understanding of Module Federation.</p>
<h2 id="remoteEntry-js"><a href="#remoteEntry-js" class="headerlink" title="remoteEntry.js"></a>remoteEntry.js</h2><p>Each time you call <code>loadRemoteModule</code>, Angular will fetch the <code>remoteEntry.js</code> file first from the remote server. What is this file? Let’s take a look at the <code>remoteEntry.js</code> file in the <code>remote</code> project.</p>
<p>You can find the <code>remoteEntry.js</code> file in the <code>dist</code> folder of the <code>remote</code> project. The file is generated by the ModuleFederationPlugin in the webpack configuration. But the file under the <code>dist</code> folder is minimized and hard to read. You can read it on Chrome network tab when you call <code>loadRemoteModule</code>.</p>
<p>This file is very large and contains lots of code, you can scroll down to the bottom or search <code>container entry</code> to find key part.</p>
<p>remoteEntry.js mainly contains the following information:</p>
<h3 id="1-The-list-of-modules-that-are-exposed-by-the-remote-project"><a href="#1-The-list-of-modules-that-are-exposed-by-the-remote-project" class="headerlink" title="1. The list of modules that are exposed by the remote project."></a>1. The list of modules that are exposed by the remote project.</h3><p>In the following example, the remote project exposes a module named <code>./Component</code> from its <code>./projects/mfe1/src/app/product/product.component.ts</code> file.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> moduleMap = &#123;</span><br><span class="line">	<span class="string">&quot;./Component&quot;</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> __webpack_require__.<span class="title function_">e</span>(<span class="string">&quot;projects_mfe1_src_app_product_product_component_ts&quot;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> (<span class="function">() =&gt;</span> ((<span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./projects/mfe1/src/app/product/product.component.ts */</span> <span class="number">1585</span>)))));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-The-list-of-shared-libraries"><a href="#2-The-list-of-shared-libraries" class="headerlink" title="2. The list of shared libraries."></a>2. The list of shared libraries.</h3><p>From the following code in remoteEntry.js the remote project shares the common angular and rxjs libraries.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(name) &#123;</span><br><span class="line"> 	<span class="keyword">case</span> <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line"> 		<span class="title function_">register</span>(<span class="string">&quot;@angular/common/http&quot;</span>, <span class="string">&quot;17.3.0&quot;</span>, <span class="function">() =&gt;</span> (__webpack_require__.<span class="title function_">e</span>(<span class="string">&quot;node_modules_angular_common_fesm2022_http_mjs-_f9340&quot;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> (<span class="function">() =&gt;</span> (<span class="title function_">__webpack_require__</span>(<span class="number">6443</span>))))));</span><br><span class="line"> 		<span class="title function_">register</span>(<span class="string">&quot;@angular/common&quot;</span>, <span class="string">&quot;17.3.0&quot;</span>, <span class="function">() =&gt;</span> (__webpack_require__.<span class="title function_">e</span>(<span class="string">&quot;node_modules_angular_common_fesm2022_common_mjs-_b4621&quot;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> (<span class="function">() =&gt;</span> (<span class="title function_">__webpack_require__</span>(<span class="number">316</span>))))));</span><br><span class="line"> 		<span class="title function_">register</span>(<span class="string">&quot;@angular/core/primitives/signals&quot;</span>, <span class="string">&quot;17.3.0&quot;</span>, <span class="function">() =&gt;</span> (__webpack_require__.<span class="title function_">e</span>(<span class="string">&quot;node_modules_angular_core_fesm2022_primitives_signals_mjs&quot;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> (<span class="function">() =&gt;</span> (<span class="title function_">__webpack_require__</span>(<span class="number">5689</span>))))));</span><br><span class="line"> 		<span class="title function_">register</span>(<span class="string">&quot;@angular/core&quot;</span>, <span class="string">&quot;17.3.0&quot;</span>, <span class="function">() =&gt;</span> (__webpack_require__.<span class="title function_">e</span>(<span class="string">&quot;node_modules_angular_core_fesm2022_core_mjs&quot;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> (<span class="function">() =&gt;</span> (<span class="title function_">__webpack_require__</span>(<span class="number">7580</span>))))));</span><br><span class="line"> 		<span class="title function_">register</span>(<span class="string">&quot;@angular/platform-browser&quot;</span>, <span class="string">&quot;17.3.0&quot;</span>, <span class="function">() =&gt;</span> (__webpack_require__.<span class="title function_">e</span>(<span class="string">&quot;node_modules_angular_platform-browser_fesm2022_platform-browser_mjs-_e89f0&quot;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> (<span class="function">() =&gt;</span> (<span class="title function_">__webpack_require__</span>(<span class="number">436</span>))))));</span><br><span class="line"> 		<span class="title function_">register</span>(<span class="string">&quot;@angular/router&quot;</span>, <span class="string">&quot;17.3.0&quot;</span>, <span class="function">() =&gt;</span> (__webpack_require__.<span class="title function_">e</span>(<span class="string">&quot;node_modules_angular_router_fesm2022_router_mjs-_5a221&quot;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> (<span class="function">() =&gt;</span> (<span class="title function_">__webpack_require__</span>(<span class="number">5072</span>))))));</span><br><span class="line"> 		<span class="title function_">register</span>(<span class="string">&quot;rxjs/operators&quot;</span>, <span class="string">&quot;7.8.0&quot;</span>, <span class="function">() =&gt;</span> (__webpack_require__.<span class="title function_">e</span>(<span class="string">&quot;node_modules_rxjs_dist_esm_operators_index_js&quot;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> (<span class="function">() =&gt;</span> (<span class="title function_">__webpack_require__</span>(<span class="number">8219</span>))))));</span><br><span class="line"> 		<span class="title function_">register</span>(<span class="string">&quot;rxjs&quot;</span>, <span class="string">&quot;7.8.0&quot;</span>, <span class="function">() =&gt;</span> (__webpack_require__.<span class="title function_">e</span>(<span class="string">&quot;node_modules_rxjs_dist_esm_index_js&quot;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> (<span class="function">() =&gt;</span> (<span class="title function_">__webpack_require__</span>(<span class="number">845</span>))))));</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><ol>
<li>remoteEntry.js is a file that contains the list of modules that are exposed by the remote project.</li>
<li>Angular fetches the remoteEntry.js file first before loading the remote module.</li>
<li>The remoteEntry.js file is generated by the ModuleFederationPlugin in the webpack configuration.</li>
<li>shell&#x2F;host project does not have a remoteEntry.js file.</li>
</ol>
<h2 id="loadRemoteModule"><a href="#loadRemoteModule" class="headerlink" title="loadRemoteModule"></a>loadRemoteModule</h2><p>How loadRemoteModule works in Angular Module Federation? Let’s take a look at the source code of the <code>loadRemoteModule</code> function in the <code>@angular-architects/module-federation</code> package.</p>
<p>The entry point is from the router file, we call <code>loadRemoteModule</code> function to load the remote module. The <code>loadRemoteModule</code> function is defined in the <code>load-remote-module.ts</code> file in the <code>@angular-architects/module-federation</code> package.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">  <span class="attr">loadComponent</span>: <span class="function">() =&gt;</span></span><br><span class="line">    <span class="title function_">loadRemoteModule</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;module&#x27;</span>,</span><br><span class="line">      <span class="attr">remoteEntry</span>: <span class="string">&#x27;http://localhost:4201/remoteEntry.js&#x27;</span>,</span><br><span class="line">      <span class="attr">exposedModule</span>: <span class="string">&#x27;./Component&#x27;</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">m</span> =&gt;</span> m.<span class="property">ProductComponent</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Here is the source code of the <code>loadRemoteModule</code> function from <code>webpack:///node_modules/@angular-architects/module-federation-runtime/fesm2022/angular-architects-module-federation-runtime.mjs</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadRemoteModule</span>(<span class="params">optionsOrRemoteName, exposedModule</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> loadRemoteEntryOptions;</span><br><span class="line">    <span class="keyword">let</span> key;</span><br><span class="line">    <span class="keyword">let</span> remoteEntry;</span><br><span class="line">    <span class="keyword">let</span> options;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> optionsOrRemoteName === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        options = &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;manifest&#x27;</span>,</span><br><span class="line">            <span class="attr">remoteName</span>: optionsOrRemoteName,</span><br><span class="line">            <span class="attr">exposedModule</span>: exposedModule,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        options = optionsOrRemoteName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// To support legacy API (&lt; ng 13)</span></span><br><span class="line">    <span class="keyword">if</span> (!options.<span class="property">type</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> hasManifest = <span class="title class_">Object</span>.<span class="title function_">keys</span>(config).<span class="property">length</span> &gt; <span class="number">0</span>;</span><br><span class="line">        options.<span class="property">type</span> = hasManifest ? <span class="string">&#x27;manifest&#x27;</span> : <span class="string">&#x27;script&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">type</span> === <span class="string">&#x27;manifest&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> manifestEntry = config[options.<span class="property">remoteName</span>];</span><br><span class="line">        <span class="keyword">if</span> (!manifestEntry) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Manifest does not contain &#x27;</span> + options.<span class="property">remoteName</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        options = &#123;</span><br><span class="line">            <span class="attr">type</span>: manifestEntry.<span class="property">type</span>,</span><br><span class="line">            <span class="attr">exposedModule</span>: options.<span class="property">exposedModule</span>,</span><br><span class="line">            <span class="attr">remoteEntry</span>: manifestEntry.<span class="property">remoteEntry</span>,</span><br><span class="line">            <span class="attr">remoteName</span>: manifestEntry.<span class="property">type</span> === <span class="string">&#x27;script&#x27;</span> ? options.<span class="property">remoteName</span> : <span class="literal">undefined</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        remoteEntry = manifestEntry.<span class="property">remoteEntry</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        remoteEntry = options.<span class="property">remoteEntry</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">type</span> === <span class="string">&#x27;script&#x27;</span>) &#123;</span><br><span class="line">        loadRemoteEntryOptions = &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;script&#x27;</span>,</span><br><span class="line">            <span class="attr">remoteEntry</span>: options.<span class="property">remoteEntry</span>,</span><br><span class="line">            <span class="attr">remoteName</span>: options.<span class="property">remoteName</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        key = options.<span class="property">remoteName</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">type</span> === <span class="string">&#x27;module&#x27;</span>) &#123;</span><br><span class="line">        loadRemoteEntryOptions = &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;module&#x27;</span>,</span><br><span class="line">            <span class="attr">remoteEntry</span>: options.<span class="property">remoteEntry</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        key = options.<span class="property">remoteEntry</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (remoteEntry) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">loadRemoteEntry</span>(loadRemoteEntryOptions);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">lookupExposedModule</span>(key, options.<span class="property">exposedModule</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The key part is the last <code>if</code> branch in this file.<br>first: it load the <code>remoteEntry.js</code> file by calling <code>loadRemoteEntry</code> function.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (remoteEntry) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">loadRemoteEntry</span>(loadRemoteEntryOptions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>loadREmoteEntry</code> function then calls <code>loadRemoteModuleEntry</code> function to load the remote module.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// remoteEntry = &#x27;http://localhost:4201/remoteEntry.js&#x27;</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadRemoteModuleEntry</span>(<span class="params">remoteEntry</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (containerMap[remoteEntry]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="keyword">import</span>(<span class="comment">/* webpackIgnore:true */</span> remoteEntry).<span class="title function_">then</span>(<span class="function">(<span class="params">container</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">initRemote</span>(container, remoteEntry);</span><br><span class="line">        containerMap[remoteEntry] = container;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We can see that it uses the <code>import</code> function to load the remoteEntry.js file. The <code>import</code> function is a dynamic import function that fetches the remoteEntry.js file from the remote server. After loading the remoteEntry.js file, it calls the <code>initRemote</code> function to initialize the remote container. This container is used to get the remote module later.</p>
<p>After loading the remoteEntry.js file, then it calls <code>lookupExposedModule</code> function to get the module from the remote project.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// key = &#x27;http://localhost:4201/remoteEntry.js&#x27;</span></span><br><span class="line"><span class="comment">// exposedModule = &#x27;./Component&#x27;</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">lookupExposedModule</span>(<span class="params">key, exposedModule</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> container = containerMap[key];</span><br><span class="line">  <span class="keyword">const</span> factory = <span class="keyword">await</span> container.<span class="title function_">get</span>(exposedModule);</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Module</span> = <span class="title function_">factory</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Module</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>webpack</tag>
        <tag>module federation</tag>
        <tag>remoteentry</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-module-federation</title>
    <url>/2024/05/26/angular-module-federation/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This article will introduce Angular Module Federation, a new feature in Webpack 5 that allows you to share code between Angular applications.</p>
<p>Module Federation is a new feature in Webpack 5 that allows you to share code between applications. It enables your application to load remote modules at runtime from another application and share dependencies between applications. This feature is particularly useful for micro-frontends, where you have multiple applications that need to share code.</p>
<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><h3 id="Create-an-empty-angular-workspace"><a href="#Create-an-empty-angular-workspace" class="headerlink" title="Create an empty angular workspace"></a>Create an empty angular workspace</h3><p>Option <code>--no-create-application</code> is used to create an empty workspace without an initial application.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng new angular-module-federation --no-create-application</span><br></pre></td></tr></table></figure>

<h3 id="Generate-shell-application-shell"><a href="#Generate-shell-application-shell" class="headerlink" title="Generate shell application shell"></a>Generate shell application <code>shell</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> angular-module-federation</span><br><span class="line">ng generate application shell</span><br></pre></td></tr></table></figure>

<h3 id="Generate-remote-application-mfe1"><a href="#Generate-remote-application-mfe1" class="headerlink" title="Generate remote application mfe1"></a>Generate remote application <code>mfe1</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng generate application mfe1</span><br></pre></td></tr></table></figure>

<h3 id="Add-plugin-angular-architects-module-federation-to-shell-app"><a href="#Add-plugin-angular-architects-module-federation-to-shell-app" class="headerlink" title="Add plugin @angular-architects/module-federation to shell app"></a>Add plugin <code>@angular-architects/module-federation</code> to <code>shell</code> app</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng add @angular-architects/module-federation --project shell --port 4200 --<span class="built_in">type</span> host</span><br></pre></td></tr></table></figure>

<p>This command will do the following:</p>
<ol>
<li><p>Add <code>@angular-architects/module-federation</code> and <code>ngx-build-plus</code> to file <code>package.json</code> under workspace root.</p>
</li>
<li><p>Add command <code>&quot;run:all&quot;: &quot;node node_modules/@angular-architects/module-federation/src/server/mf-dev-server.js&quot;</code> to <code>scripts</code> section in file <code>package.json</code>. This command will start the module federation development server, which will run app shell and app mfe1 at the same time.</p>
</li>
<li><p>Add file <code>bootstrap.ts</code> under <code>projects/shell/src</code> folder, its content was copied from <code>main.ts</code></p>
 <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; bootstrapApplication &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; appConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.config&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">AppComponent</span>, appConfig)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br></pre></td></tr></table></figure></li>
<li><p>Update file <code>projects/shell/src/main.ts</code> to import <code>bootstrap.ts</code>(Note, when a file was imported, it was executed automatically)</p>
 <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./bootstrap&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>Add file <code>webpack.config.js</code> under <code>projects/shell</code> folder, </p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; shareAll, withModuleFederationPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@angular-architects/module-federation/webpack&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">withModuleFederationPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">remotes</span>: &#123;</span><br><span class="line">    <span class="string">&quot;mfe1&quot;</span>: <span class="string">&quot;http://localhost:4200/remoteEntry.js&quot;</span>,    </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">shared</span>: &#123;</span><br><span class="line">    ...<span class="title function_">shareAll</span>(&#123; <span class="attr">singleton</span>: <span class="literal">true</span>, <span class="attr">strictVersion</span>: <span class="literal">true</span>, <span class="attr">requiredVersion</span>: <span class="string">&#x27;auto&#x27;</span> &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>Add file <code>webpack.prod.config.js</code> under <code>projects/shell</code> folder, </p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.config&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>Update file <code>angular.json</code> under workspace root.</p>
<ol>
<li>projects&#x2F;shell&#x2F;architect&#x2F;build&#x2F;builder: <code>&quot;@angular-devkit/build-angular:application&quot;</code> —&gt; <code>ngx-build-plus:browser</code> - The reason for this change is that module federation is a feature provided by <code>WebPack</code>, but <code>&quot;@angular-devkit/build-angular:application&quot;</code> is for ESBuild, so we need to change it to <code>ngx-build-plus:browser</code> which is for <code>WebPack</code>. see <a href="https://zdd.github.io/2024/06/06/angular-builders/">here</a> for details.</li>
<li>projects&#x2F;shell&#x2F;architect&#x2F;build&#x2F;builder&#x2F;extraWebpackConfig: <code>&quot;projects/shell/webpack.config.js&quot;</code></li>
<li>projects&#x2F;shell&#x2F;architect&#x2F;build&#x2F;configurations&#x2F;production&#x2F;extraWebpackConfig: <code>&quot;projects/shell/webpack.prod.config.js&quot;</code></li>
<li>projects&#x2F;shell&#x2F;architect&#x2F;serve&#x2F;configurations&#x2F;extraWebpackConfig: <code>&quot;projects/shell/webpack.prod.config.js&quot;</code></li>
<li>projects&#x2F;shell&#x2F;architect&#x2F;serve&#x2F;options: <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">4200</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;publicHost&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:4200&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;extraWebpackConfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;projects/shell/webpack.config.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<p>Note that: <code>extraWebpackConfig</code> is an option from <a href="https://github.com/manfredsteyer/ngx-build-plus/"><code>ngx-build-plus</code></a>, it allows you to add additional webpack configuration to the project.</p>
<h3 id="Add-plugin-angular-architects-module-federation-to-mfe1-app"><a href="#Add-plugin-angular-architects-module-federation-to-mfe1-app" class="headerlink" title="Add plugin @angular-architects/module-federation to mfe1 app"></a>Add plugin <code>@angular-architects/module-federation</code> to <code>mfe1</code> app</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng add @angular-architects/module-federation --project mfe1 --port 4201 --<span class="built_in">type</span> remote</span><br></pre></td></tr></table></figure>

<p>This command will do the same thing as the previous command, but for the <code>mfe1</code> app with a little difference.</p>
<ol>
<li>webpack.config.js <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; shareAll, withModuleFederationPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@angular-architects/module-federation/webpack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">withModuleFederationPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;mfe1&#x27;</span>,</span><br><span class="line">  <span class="attr">exposes</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;./Component&#x27;</span>: <span class="string">&#x27;./projects/mfe1/src/app/app.component.ts&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">shared</span>: &#123;</span><br><span class="line">    ...<span class="title function_">shareAll</span>(&#123; <span class="attr">singleton</span>: <span class="literal">true</span>, <span class="attr">strictVersion</span>: <span class="literal">true</span>, <span class="attr">requiredVersion</span>: <span class="string">&#x27;auto&#x27;</span> &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li>Serve options in <code>angular.json</code> <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">4201</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;publicHost&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:4201&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extraWebpackConfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;projects/mfe1/webpack.config.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Add-home-component-to-shell-app"><a href="#Add-home-component-to-shell-app" class="headerlink" title="Add home component to shell app"></a>Add <code>home</code> component to <code>shell</code> app</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng generate component home --project=shell</span><br></pre></td></tr></table></figure>

<h3 id="Add-product-component-to-mfe1-app"><a href="#Add-product-component-to-mfe1-app" class="headerlink" title="Add product component to mfe1 app"></a>Add <code>product</code> component to <code>mfe1</code> app</h3><p>app <code>mfe1</code> will expose a component <code>product</code> to shell app.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng generate component product --project=mfe1</span><br></pre></td></tr></table></figure>

<h3 id="Update-webpack-config-js-in-app-mfe1"><a href="#Update-webpack-config-js-in-app-mfe1" class="headerlink" title="Update webpack.config.js in app mfe1"></a>Update webpack.config.js in app mfe1</h3><p>We’ll expose the <code>product</code> component to the <code>shell</code> app.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; shareAll, withModuleFederationPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@angular-architects/module-federation/webpack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">withModuleFederationPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;mfe1&#x27;</span>,</span><br><span class="line">  <span class="attr">exposes</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;./Component&#x27;</span>: <span class="string">&#x27;./projects/mfe1/src/app/product/product.component.ts&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">shared</span>: &#123;</span><br><span class="line">    ...<span class="title function_">shareAll</span>(&#123; <span class="attr">singleton</span>: <span class="literal">true</span>, <span class="attr">strictVersion</span>: <span class="literal">true</span>, <span class="attr">requiredVersion</span>: <span class="string">&#x27;auto&#x27;</span> &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Update-app-routers-ts-in-app-mfe1"><a href="#Update-app-routers-ts-in-app-mfe1" class="headerlink" title="Update app.routers.ts in app mfe1"></a>Update app.routers.ts in app mfe1</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">ProductComponent</span>,</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h3 id="Update-webpack-config-js-in-app-shell"><a href="#Update-webpack-config-js-in-app-shell" class="headerlink" title="Update webpack.config.js in app shell"></a>Update webpack.config.js in app shell</h3><p>Note the generated <code>port</code> in webpack.config.js, its value is <code>4200</code>, we should change it to <code>4201</code> since mfe1 runs on this port.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; shareAll, withModuleFederationPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@angular-architects/module-federation/webpack&#x27;</span>);</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">withModuleFederationPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">remotes</span>: &#123;</span><br><span class="line">        <span class="string">&quot;mfe1&quot;</span>: <span class="string">&quot;http://localhost:4201/remoteEntry.js&quot;</span>, <span class="comment">// &lt;--- 4201</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">shared</span>: &#123;</span><br><span class="line">        ...<span class="title function_">shareAll</span>(&#123; <span class="attr">singleton</span>: <span class="literal">true</span>, <span class="attr">strictVersion</span>: <span class="literal">true</span>, <span class="attr">requiredVersion</span>: <span class="string">&#x27;auto&#x27;</span> &#125;),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Update-app-routes-ts-in-app-shell"><a href="#Update-app-routes-ts-in-app-shell" class="headerlink" title="Update app.routes.ts in app shell"></a>Update app.routes.ts in app shell</h3><p>Add a route path <code>product</code> to load the <code>product</code> component remotely from <code>mfe1</code>.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeComponent</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">    <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;mfe1/Component&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">m</span> =&gt;</span> m.<span class="property">ProductComponent</span>),</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h3 id="Add-typescript-declaration-file-decl-d-ts-under-projects-shell-src"><a href="#Add-typescript-declaration-file-decl-d-ts-under-projects-shell-src" class="headerlink" title="Add typescript declaration file decl.d.ts under projects&#x2F;shell&#x2F;src"></a>Add typescript declaration file <code>decl.d.ts</code> under projects&#x2F;shell&#x2F;src</h3><p>If you don’t add this file, you will get an error when you import the remote module <code>mfe1</code> in the shell app.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;mfe1/Component&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Workspace-structure"><a href="#Workspace-structure" class="headerlink" title="Workspace structure"></a>Workspace structure</h3><p>Here is the file structure of the workspace till now.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">angular-module-federation/</span><br><span class="line">├─ projects/</span><br><span class="line">│  ├─ mfe1/</span><br><span class="line">│  │  ├─ src/</span><br><span class="line">│  │  ├─ webpack.config.js</span><br><span class="line">│  │  ├─ webpack.prod.config.js</span><br><span class="line">│  ├─ shell/</span><br><span class="line">│  │  ├─ src/</span><br><span class="line">│  │  ├─ webpack.config.js</span><br><span class="line">│  │  ├─ webpack.prod.config.js</span><br><span class="line">├─ angular.json</span><br><span class="line">├─ package.json</span><br></pre></td></tr></table></figure>

<h3 id="Start-the-development-server"><a href="#Start-the-development-server" class="headerlink" title="Start the development server"></a>Start the development server</h3><p>You can run shell and mef1 app separately by running the following command.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng serve shell - o</span><br><span class="line">ng serve mfe1 - o</span><br></pre></td></tr></table></figure>

<p>Or run them at the same time by running the following command.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run run:all</span><br></pre></td></tr></table></figure>

<p>Change the shell app url in browser to <code>localhost:4200/product</code>, you will see the product component from mfe1 app.</p>
<h3 id="Remote-entry-file"><a href="#Remote-entry-file" class="headerlink" title="Remote entry file"></a>Remote entry file</h3><p>If you look into the webpack.config.js file in the <code>shell</code> app, you will see the following configuration.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">remotes</span>: &#123;</span><br><span class="line">  <span class="string">&quot;mfe1&quot;</span>: <span class="string">&quot;http://localhost:4200/remoteEntry.js&quot;</span>,    </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>Here we use <code>remoteEntry.js</code> as the entry point of the remote expose module, this is the default file name, However, if you want to change it, you can update the configuration in the webpack.config.js file in the <code>mfe1</code> app.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">withModuleFederationPlugin</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&#x27;myEntryName.js&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>and then update the configuration in the webpack.config.js file in the <code>shell</code> app.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">withModuleFederationPlugin</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">remotes</span>: &#123;</span><br><span class="line">    <span class="string">&quot;mfe1&quot;</span>: <span class="string">&quot;http://localhost:4200/myEntryName.js&quot;</span>,    </span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="namedChunk"><a href="#namedChunk" class="headerlink" title="namedChunk"></a>namedChunk</h3><p>When you run the shell app, switch to <code>network</code> tab in the browser’s developer tool, you will see the response of the javascript file name as a random string, that’s because <code>Webpack</code> generates a random name for the chunk file, you can change it to a named chunk by adding the following configuration in the <code>angular.json</code> file in the <code>mfe1</code> app.(under <code>architect | build | configuration | development</code>)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">withModuleFederationPlugin</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&#x27;myEntryName.js&#x27;</span>,</span><br><span class="line">  <span class="attr">namedChunk</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Dynamic-loading"><a href="#Dynamic-loading" class="headerlink" title="Dynamic loading"></a>Dynamic loading</h3><p>You can remove the <code>remotes</code> part in app shell’s <code>webpack.config.js</code> file, and update the <code>app.routes.ts</code> file in the shell app to load the remote module dynamically.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">  <span class="attr">loadComponent</span>: <span class="function">() =&gt;</span></span><br><span class="line">    <span class="title function_">loadRemoteModule</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;module&#x27;</span>,</span><br><span class="line">      <span class="attr">remoteEntry</span>: <span class="string">&#x27;http://localhost:4201/remoteEntry.js&#x27;</span>,</span><br><span class="line">      <span class="attr">exposedModule</span>: <span class="string">&#x27;./Component&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">m</span> =&gt;</span> m.<span class="property">ProductComponent</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can found the options of <code>withModuleFederationPlugin</code> in WebPack’s official documentation <a href="https://webpack.js.org/plugins/module-federation-plugin/#options">here</a>, unfortunately, some property was even not mentioned in this document, you can found them in the source code of the plugin(schema file) from <a href="https://github.com/webpack/webpack/blob/main/schemas/plugins/container/ModuleFederationPlugin.json">here</a></p>
<h2 id="loadRemoteEntry-vs-loadRemoteModule"><a href="#loadRemoteEntry-vs-loadRemoteModule" class="headerlink" title="loadRemoteEntry vs loadRemoteModule"></a>loadRemoteEntry vs loadRemoteModule</h2><p><code>loadRemoteEntry</code> is used to load the remote entry file, and <code>loadRemoteModule</code> is used to load the remote module.</p>
<p><code>loadRemoteEntry</code> is not required, but nice to have, here is the description from <a href="https://github.com/angular-architects/module-federation-plugin/blob/main/libs/mf/README.md">github</a><br>If somehow possible, load the remoteEntry upfront. This allows Module Federation to take the remote’s metadata in consideration when negotiating the versions of the shared libraries.</p>
<p>For this, you could call loadRemoteEntry BEFORE bootstrapping Angular:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; loadRemoteEntry &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular-architects/module-federation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">  <span class="title function_">loadRemoteEntry</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;module&#x27;</span>,</span><br><span class="line">    <span class="attr">remoteEntry</span>: <span class="string">&#x27;http://localhost:3000/remoteEntry.js&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">])</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error loading remote entries&#x27;</span>, err))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./bootstrap&#x27;</span>))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br></pre></td></tr></table></figure>

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li>Mono repo with Angular CLI: <a href="https://angular.dev/reference/configs/file-structure#multiple-projects">https://angular.dev/reference/configs/file-structure#multiple-projects</a></li>
<li>Module federation with Angular: <a href="https://module-federation.io/practice/frameworks/angular/angular-cli.html">https://module-federation.io/practice/frameworks/angular/angular-cli.html</a></li>
<li><a href="https://github.com/manfredsteyer/ngx-build-plus/">https://github.com/manfredsteyer/ngx-build-plus/</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>webpack</tag>
        <tag>module federation</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular-module</title>
    <url>/2023/09/02/angular-module/</url>
    <content><![CDATA[<h1 id="Angular-Module"><a href="#Angular-Module" class="headerlink" title="Angular Module"></a>Angular Module</h1><p>Angular是模块化的，模块是Angular应用的基本构建块，每个Angular应用都至少有一个模块，即根模块，Angular模块是一个带有<code>@NgModule</code>装饰器的类。</p>
<p>模块是一个逻辑单元，是一个自我完备的功能集合，它可以包含组件、服务、指令、管道等，模块可以导入其他模块，也可以导出组件、指令、管道等供其他模块使用，模块还可以提供Service。</p>
<p>以一个电商网站App为例，可以包含如下模块：登录模块（包含登录，注册，找回密码等功能），购物模块，订单模块，支付模块等等。</p>
<h2 id="Generate-Angular-module-with-Angular-CLI"><a href="#Generate-Angular-module-with-Angular-CLI" class="headerlink" title="Generate Angular module with Angular CLI"></a>Generate Angular module with Angular CLI</h2><p>使用Angular CLI生成一个新的模块，运行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng generate module moduleName // or ng g m moduleName</span><br></pre></td></tr></table></figure>

<h2 id="NgModule的组成"><a href="#NgModule的组成" class="headerlink" title="NgModule的组成"></a>NgModule的组成</h2><p>以下是一个典型的入口模块的代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    <span class="title class_">AppComponent</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span>,</span><br><span class="line">    <span class="title class_">AppRoutingModule</span>,</span><br><span class="line">    <span class="title class_">FormsModule</span>,</span><br><span class="line">    <span class="title class_">HttpClientModule</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="declarations"><a href="#declarations" class="headerlink" title="declarations"></a>declarations</h3><p><code>declarations</code>属性用来声明<code>属于该模块</code>的组件、指令、管道等，这些组件、指令、管道等只能在该模块中使用，其他模块不能使用。</p>
<ul>
<li><code>declarations</code>只能包含<code>component</code>, <code>directive</code>,<code>pipe</code>.</li>
<li><code>component</code>, <code>directive</code>,<code>pipe</code> - 统称为<code>declarable</code>, 每个<code>declarable</code>只能隶属于一个NgModule，如果在多个NgModule中导入同一个declarable，那么会出现如下错误：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xxx is declared <span class="keyword">in</span> multiple Angular modules: AppModule and AppContentModule</span><br></pre></td></tr></table></figure>

<h3 id="imports"><a href="#imports" class="headerlink" title="imports"></a>imports</h3><p><code>imports</code>属性用来导入其他模块，一经导入，那么被导入的模块中包含的组件、指令、管道等可以在当前模块中使用。比如当前模块依赖另一个模块A，那么要把模块A导入到当前模块中，这样当前模块才可以使用模块A中的组件、指令、管道等。</p>
<ul>
<li><code>imports</code>只能包含<code>module</code>, 或者<code>standalone component</code>.</li>
</ul>
<h3 id="providers"><a href="#providers" class="headerlink" title="providers"></a>providers</h3><p><code>providers</code>属性用来声明该模块中的服务，这些服务可以在该模块中使用，也可以在该模块导入的其他模块中使用。（我在现实中看见有人把Component放到providers中也能work，这不是好的编程习惯。）</p>
<h3 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h3><p><code>exports</code>属性用来声明该模块中<code>导出</code>的组件、指令、管道等，这些导出的组件、指令、管道等可以在该模块导入的其他模块中使用。注意导出的组件、指令、管道等必须同时在<code>declarations</code>属性中声明。<br>也就是说<code>exports</code>是<code>declarations</code>的子集。</p>
<p>Angular应用的主模块<code>app.module.ts</code>中的<code>exports</code>属性是空的，因为根模块中的组件、指令、管道等都是可以在其他模块中使用的，所以不需要导出。</p>
<h3 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h3><p><code>bootstrap</code>属性用来声明该模块的根组件，根组件是Angular应用的入口组件，一个Angular应用只能有一个根组件，根组件只能在根模块中声明。<code>bootstrap</code>中声明的组件会插入到<code>index.html</code>中的<code>&lt;app-root&gt;&lt;/app-root&gt;</code>标签中。</p>
<p>注意：<code>bootstrap</code>中可以指定多个组件，这些组件会被插入到<code>index.html</code>中，<code>index.html</code>中根据组件的选择器加在不同的组件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>LearningAngular<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-header</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-content</span>&gt;</span><span class="tag">&lt;/<span class="name">app-content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-footer</span>&gt;</span><span class="tag">&lt;/<span class="name">app-footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HttpClientModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppHeaderComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app-header/app-header.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppContentComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app-content/app-content.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppFooterComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app-footer/app-footer.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    <span class="title class_">AppHeaderComponent</span>,</span><br><span class="line">    <span class="title class_">AppContentComponent</span>,</span><br><span class="line">    <span class="title class_">AppFooterComponent</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span>,</span><br><span class="line">    <span class="title class_">HttpClientModule</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppHeaderComponent</span>, <span class="title class_">AppContentComponent</span>, <span class="title class_">AppFooterComponent</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 只有根模块才需要声明根组件，其他模块不需要声明根组件。所以除了<code>app.module.ts</code>之外，其他的module都不需要声明bootstrap属性。</p>
<h2 id="component-and-module"><a href="#component-and-module" class="headerlink" title="component and module"></a>component and module</h2><p>在Angular <code>standalone</code> component出现以前，任何一个component都必须隶属于一个module。但是在Angular <code>standalone component</code>出现以后，<code>component</code>就可以不用隶属于一个module了，这种component称为<code>standalone</code> component，也就是独立的component。</p>
<p>详情请看<a href="https://zdd.github.io/2023/09/02/Angular-standalone-component/">Angular Standalone Component</a></p>
<h2 id="How-Angular-module-identifies-components"><a href="#How-Angular-module-identifies-components" class="headerlink" title="How Angular module identifies components?"></a>How Angular module identifies components?</h2><p>Angular module是如何识别<code>Component</code>的呢？对于非<code>standalone</code> component，Angular module是通过<code>declaration</code>来标记的。对于<code>standalone</code> component，Angular module是通过<code>imports</code>来标记的。</p>
<p>非独立组件还分为两种情况，有对应的<code>angular module</code>或者没有对应的<code>angular module</code></p>
<ul>
<li>有<code>angular module</code> - 当前module需要导入对应的<code>angular module</code>，才能使用导入module中的<code>component</code>。（待使用的component需在其module中exports数组中导出）</li>
<li>没有<code>angular module</code> - 则需要将component声明在当前module的<code>declarations</code>中。</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>假设我们需要定义如下两个组件, 这两个组件都有对应的module</p>
<ul>
<li><code>ProductHomeModule</code>包含<code>ProductHomeComponent</code> - 产品首页, 该组件内部又调用了<code>ProductDetailComponent</code></li>
<li><code>ProductDetailModule</code>包含<code>ProductDetailComponent</code> - 产品详情页</li>
</ul>
<p>首先，需要在<code>ProductDetailModule</code>中声明<code>ProductDetailComponent</code>，并导出<code>ProductDetailComponent</code>。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product-detail.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommonModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ProductDetailComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./product-detail.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">ProductDetailComponent</span>], <span class="comment">// &lt;-- declare ProductDetailComponent</span></span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">CommonModule</span>],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">ProductDetailComponent</span>], <span class="comment">// &lt;-- export ProductDetailComponent</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductDetailModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>然后，需要在<code>ProductHomeModule</code>中导入<code>ProductDetailModule</code>，这样<code>ProductHomeComponent</code>就可以使用<code>ProductDetailComponent</code>了。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product-home.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommonModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ProductHomeComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./product-home.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ProductDetailModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../product-detail/product-detail.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">ProductHomeComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">CommonModule</span>, <span class="title class_">ProductDetailModule</span>], <span class="comment">// &lt;-- import ProductDetailModule</span></span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">ProductHomeComponent</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductHomeModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>最后，在<code>ProductHomeComponent</code>模板中使用<code>ProductDetailComponent</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- product-home.component.html --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">app-product-detail</span> /&gt;</span> <span class="comment">&lt;!-- use ProductDetailComponent --&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h1><ul>
<li><a href="https://angular.dev/guide/ngmodules">Angular Module</a></li>
</ul>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>ngmodule</tag>
        <tag>module</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-ng-class</title>
    <url>/2024/07/20/angular-ng-class/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>ngClass</code> is a directive in Angular that allows you to add or remove classes on an HTML element.</p>
<h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p>First, create a <code>Student</code> component in your app.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng generate component student</span><br></pre></td></tr></table></figure>

<h2 id="1-import-NgClass-from-angular-common"><a href="#1-import-NgClass-from-angular-common" class="headerlink" title="1. import NgClass from @angular/common;"></a>1. import <code>NgClass</code> from <code>@angular/common</code>;</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NgClass</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@angular/common&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="2-Add-NgClass-to-the-imports-array-in-the-component-module"><a href="#2-Add-NgClass-to-the-imports-array-in-the-component-module" class="headerlink" title="2. Add NgClass to the imports array in the component&#x2F;module;"></a>2. Add <code>NgClass</code> to the <code>imports</code> array in the component&#x2F;module;</h2><p>We’re using standalone component here.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-student&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./student.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">NgClass</span>], <span class="comment">// &lt;--- here</span></span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./student.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="3-Use-the-ngClass-directive-in-the-HTML-template"><a href="#3-Use-the-ngClass-directive-in-the-HTML-template" class="headerlink" title="3. Use the ngClass directive in the HTML template."></a>3. Use the <code>ngClass</code> directive in the HTML template.</h2><p>We’ll categorize students based on their grades, different grades will have different colors.</p>
<p><code>ngClass</code> accepts <code>string</code>, <code>array</code>, <code>object</code>, <code>map</code>, <code>set</code>, <code>function</code>, and <code>binding to a CSS class</code>. we’ll use all of them in the following examples.</p>
<h3 id="1-String-syntax"><a href="#1-String-syntax" class="headerlink" title="1. String syntax"></a>1. String syntax</h3><p>Note, since <code>ngClass</code> is a property binding, we need to wrap the class name in <code>&#39;&#39;</code> to make it a hard-coded string, otherwise the class name will be treated as a variable in your component.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;&#x27;grade-A&#x27;&quot;</span>&gt;</span>Student A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>ngClass</code> is commonly used to bind a variable in component, for example, we can define a variable <code>grade</code> in the component, and bind it to the <code>ngClass</code> directive.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">grade = <span class="string">&#x27;grade-A&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;grade&quot;</span>&gt;</span>Student A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>If you want to apply a class without a condition, you can simply use the following syntax.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grade-A&quot;</span>&gt;</span>Student A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Array-syntax"><a href="#2-Array-syntax" class="headerlink" title="2. Array syntax"></a>2. Array syntax</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;[&#x27;grade-A&#x27;, &#x27;grade-B&#x27;]&quot;</span>&gt;</span>Student B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Object-syntax"><a href="#3-Object-syntax" class="headerlink" title="3. Object syntax"></a>3. Object syntax</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;&#123;&#x27;grade-A&#x27;: true, &#x27;grade-B&#x27;: false&#125;&quot;</span>&gt;</span>Student C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-Map-syntax"><a href="#4-Map-syntax" class="headerlink" title="4. Map syntax"></a>4. Map syntax</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;gradeMap&quot;</span>&gt;</span>Student D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">gradeMap = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="built_in">boolean</span>&gt;([</span><br><span class="line">  [<span class="string">&#x27;grade-A&#x27;</span>, <span class="literal">true</span>],</span><br><span class="line">  [<span class="string">&#x27;grade-B&#x27;</span>, <span class="literal">false</span>]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<h3 id="5-Set-syntax"><a href="#5-Set-syntax" class="headerlink" title="5. Set syntax"></a>5. Set syntax</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;gradeSet&quot;</span>&gt;</span>Student E<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">gradeSet = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="built_in">string</span>&gt;([<span class="string">&#x27;grade-A&#x27;</span>, <span class="string">&#x27;grade-B&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p><span style="color:#d7520e">With any object-like bindings such as <code>Array</code>, <code>Object</code>, <code>Map</code>, and <code>Set</code> syntax, the identity of the object must change for Angular to apply the new class. Updating the property without changing the identify has no effect</span>, for example:</p>
<p>This one doesn’t work, because <code>gradeObject</code> is the same object.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">gradeObject</span>[<span class="string">&quot;grade-b&quot;</span>] = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<p>This one works, because <code>gradeObject</code> is a new object.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">gradeObject</span> = &#123;...<span class="variable language_">this</span>.<span class="property">gradeObject</span>, <span class="string">&quot;grade-b&quot;</span>: <span class="literal">false</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>Note that, <code>Map</code> and <code>Set</code> syntax are rarely used, <code>object</code> and <code>array</code> syntax are the most common.</p>
<h3 id="6-Expression-syntax"><a href="#6-Expression-syntax" class="headerlink" title="6. Expression syntax"></a>6. Expression syntax</h3><p><code>grade</code> is a component variable, we can use it in the expression.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;grade === &#x27;isGradeA&#x27; ? &#x27;grade-A&#x27; : &#x27;&#x27;&quot;</span>&gt;</span>Student F<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-Function-syntax"><a href="#7-Function-syntax" class="headerlink" title="7. Function syntax"></a>7. Function syntax</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;getGrade()&quot;</span>&gt;</span>Student F<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getGrade</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;grade-A&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Difference-between-ngClass-and-class"><a href="#Difference-between-ngClass-and-class" class="headerlink" title="Difference between [ngClass] and [class]"></a>Difference between <code>[ngClass]</code> and <code>[class]</code></h2><p><code>[ngClass]</code> is a directive that allows you to add or remove classes based on conditions, while <code>[class]</code> is a property binding that allows you to add a class without a condition.</p>
<p>Most of the above case can be achieved by <code>[class]</code> as well, except the following case.</p>
<p>This one works</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;&#123;&#x27;grade-a grade-b&#x27;: true&#125;&quot;</span>&gt;</span>Student<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>But this one <code>doesn&#39;t</code> work</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">class</span>]=<span class="string">&quot;&#123;&#x27;grade-a grade-b&#x27;: true&#125;&quot;</span>&gt;</span>Student<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://angular.dev/api/common/NgClass?tab=api">https://angular.dev/api/common/NgClass?tab=api</a></li>
<li><a href="https://angular.dev/guide/directives#import-ngclass-in-the-component">https://angular.dev/guide/directives#import-ngclass-in-the-component</a></li>
</ul>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>style</tag>
        <tag>ngclass</tag>
        <tag>class</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-ng-container</title>
    <url>/2024/07/09/angular-ng-container/</url>
    <content><![CDATA[<h1 id="What’s-ng-container"><a href="#What’s-ng-container" class="headerlink" title="What’s ng-container?"></a>What’s ng-container?</h1><p>来看一下官方定义：<br><code>ng-container</code> is a special element that can hold structural directives like <code>*ngIf</code>, <code>*ngFor</code>, etc. without adding an extra element to the DOM.</p>
<p>翻译过来就是：<code>ng-container</code> 是一个特殊的元素，可以包含结构性指令，比如 <code>*ngIf</code>, <code>*ngFor</code> 等等，而不会在 DOM 中添加额外的元素。</p>
<p>从名字来看，<code>ng-container</code> 是一个容器，而且是一个隐形的容器，渲染后<code>ng-container</code>本身不会在DOM中生成任何元素。</p>
<p>比如下面的代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngIf</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>渲染后的结果是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，上面仅仅是一个例子，现实中没人会如此这般写代码，我们一般都这么写。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;true&quot;</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h1><h2 id="1-使用-ng-container-来包裹多个元素，而不需要额外的-div-或者-span-等元素。"><a href="#1-使用-ng-container-来包裹多个元素，而不需要额外的-div-或者-span-等元素。" class="headerlink" title="1. 使用 ng-container 来包裹多个元素，而不需要额外的 div 或者 span 等元素。"></a>1. 使用 <code>ng-container</code> 来包裹多个元素，而不需要额外的 <code>div</code> 或者 <code>span</code> 等元素。</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- This way will generate an extra div element --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Content 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Content 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- This way will not generate any extra div element --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngIf</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Content 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Content 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-使用-ng-container来分隔多个结构化指令。"><a href="#2-使用-ng-container来分隔多个结构化指令。" class="headerlink" title="2. 使用 ng-container来分隔多个结构化指令。"></a>2. 使用 <code>ng-container</code>来分隔多个结构化指令。</h2><p>在Angular中，一个元素只能有一个结构性指令，比如 <code>*ngIf</code>, <code>*ngFor</code> 等等。如果需要在一个元素上使用多个结构性指令，可以使用 <code>ng-container</code> 来分隔。<br>比如下面的代码我们在<code>li</code>元素上同时使用了<code>ngFor</code>和<code>ngIf</code>，这会导致编译错误：<code>Only one structural directive can be applied</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of items&quot;</span> *<span class="attr">ngIf</span>=<span class="string">&quot;item.isValid&quot;</span>&gt;</span> &#123;&#123; item.name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以使用 <code>ng-container</code> 来分隔这两个指令。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of items&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngIf</span>=<span class="string">&quot;item.isValid&quot;</span>&gt;</span> &#123;&#123; item.name &#125;&#125; /&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意下面的代码虽然也能工作，但是会生成多个<code>ul</code>元素（每个<code>ul</code>元素包含一个<code>li</code>元素），这可能不是我们想要的结果。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of items&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngIf</span>=<span class="string">&quot;item.isValid&quot;</span>&gt;</span> &#123;&#123; item.name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-配合-ng-template-来实现-else-逻辑。"><a href="#3-配合-ng-template-来实现-else-逻辑。" class="headerlink" title="3. 配合 ng-template 来实现 else 逻辑。"></a>3. 配合 <code>ng-template</code> 来实现 <code>else</code> 逻辑。</h2><p>注意：<code>#elseBlock</code> 是一个模板引用变量，只能在<code>ng-template</code>中使用。在<code>ng-container</code>中使用<code>#elseBlock</code>是不会生效的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngIf</span>=<span class="string">&quot;true; else elseBlock&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Content 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">elseBlock</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Content 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-配合-ngTemplateOutlet-来实现动态模板。"><a href="#4-配合-ngTemplateOutlet-来实现动态模板。" class="headerlink" title="4. 配合 ngTemplateOutlet 来实现动态模板。"></a>4. 配合 <code>ngTemplateOutlet</code> 来实现动态模板。</h2><p>详情看<a href="https://zdd.github.io/2024/07/09/angular-ngtemplateoutlet/">这里</a></p>
<h1 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h1><ol>
<li><a href="https://angular.dev/api/core/ng-container">https://angular.dev/api/core/ng-container</a></li>
<li><code>ng-template</code>: <a href="https://zdd.github.io/2024/07/09/angular-ng-template/">https://zdd.github.io/2024/07/09/angular-ng-template/</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>ng-container</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-ng-content</title>
    <url>/2024/07/09/angular-ng-content/</url>
    <content><![CDATA[<h1 id="What-is-ng-content-in-Angular"><a href="#What-is-ng-content-in-Angular" class="headerlink" title="What is ng-content in Angular?"></a>What is ng-content in Angular?</h1><p>Angular’s <code>ng-content</code> element is used to project content into a component.</p>
<p>通常我们定义一个组件时，都会在某个html模板中使用组件对应的selector来引用组件。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">app-my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意观察以上组件的html结构，<code>app-my-component</code>标签中间是没有内容的。这种组件的特点是静态的，无法动态插入内容。如果我们需要动态的更改组件中的某个部分，那就需要用到<code>ng-content</code>了。</p>
<p>考虑下面的例子，假设我们有一个Card组件，我们希望Card组件的内容是动态的，可以根据不同的需求插入不同的内容。但是我们又希望Card的Header和Footer是固定的，不会变化。这个需求就可以用<code>ng-content</code>来实现。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>Card Header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-content</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>Card Footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>假设我们要创建一个内容为<code>Hello, world!</code>的Card组件，我们可以这样写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-card</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-card</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Angular最终会将<code>&lt;p&gt;Hello, world!&lt;/p&gt;</code>插入到<code>&lt;ng-content&gt;&lt;/ng-content&gt;</code>标签的位置，渲染结果如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>Card Header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>Card Footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这就是<code>ng-content</code>的作用。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用<code>ng-content</code>可以实现动态插入内容到组件中，使得组件更加灵活。</p>
<ol>
<li>固定不变的内容直接书写到组件模板中。</li>
<li>动态的内容使用<code>ng-content</code>来插入。</li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>ng-content</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-ng-template</title>
    <url>/2024/07/09/angular-ng-template/</url>
    <content><![CDATA[<h1 id="What-is-ng-template-in-Angular"><a href="#What-is-ng-template-in-Angular" class="headerlink" title="What is ng-template in Angular?"></a>What is ng-template in Angular?</h1><p>Angular’s <code>ng-template</code> element defines a template that is not rendered by default.</p>
<p><code>ng-template</code>必须配合Angular指令使用，例如<code>ngIf</code>、<code>ngFor</code>、<code>ngSwitch</code>等。或者定义模板变量以做他用（详情看<a href="https://zdd.github.io/2023/07/22/Angular-template-reference-variables/">这里</a>），单纯使用<code>ng-template</code>是不会渲染的。</p>
<p>以下内容不会渲染。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-template</span>&gt;</span></span><br><span class="line">  Hello, world!</span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以下内容也不会渲染，为什么？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> *<span class="attr">ngIf</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  Hello, world!</span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以下内容可以渲染：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> [<span class="attr">ngIf</span>]=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  Hello, world!</span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="指令的简写形式"><a href="#指令的简写形式" class="headerlink" title="指令的简写形式"></a>指令的简写形式</h2><p>Angular会将指令的简写形式转换成<code>ng-template</code>的完整形式。<br>以下代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;true&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>会被Angular内部转换为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> [<span class="attr">ngIf</span>]=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是渲染的时候，<code>&lt;ng-template&gt;</code>不会被渲染，只会渲染<code>&lt;div&gt;</code>。<code>ng-container</code>和<code>ng-template</code>一样，都不会向DOM中插入元素，而只会渲染他们所包裹的元素。</p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>ng-template</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-ngdeep</title>
    <url>/2025/02/16/angular-ngdeep/</url>
    <content><![CDATA[<p>这篇探讨一下Angular中::ng-deep伪类的用法。</p>
<h2 id="ng-deep是什么？"><a href="#ng-deep是什么？" class="headerlink" title="::ng-deep是什么？"></a><code>::ng-deep</code>是什么？</h2><p>以下是<code>::ng-deep</code>的官方描述：</p>
<p>(deprecated) &#x2F;deep&#x2F;, &gt;&gt;&gt;, and ::ng-deep<br>Component styles normally apply only to the HTML in the component’s own template.</p>
<p>Applying the ::ng-deep pseudo-class to any CSS rule completely disables view-encapsulation for that rule. Any style with ::ng-deep applied becomes a global style. In order to scope the specified style to the current component and all its descendants, be sure to include the :host selector before ::ng-deep. If the ::ng-deep combinator is used without the :host pseudo-class selector, the style can bleed into other components.</p>
<h2 id="为什么需要-ng-deep"><a href="#为什么需要-ng-deep" class="headerlink" title="为什么需要::ng-deep?"></a>为什么需要<code>::ng-deep</code>?</h2><p>根据我的经验，使用<code>::ng-deep</code>的场景有：</p>
<ol>
<li>第三方库的样式覆盖，因为第三方库的样式有时候是无法直接通过选择器来修改的，这时候就需要使用<code>::ng-deep</code>。</li>
</ol>
<h2 id="为什么要配合-host一起使用"><a href="#为什么要配合-host一起使用" class="headerlink" title="为什么要配合:host一起使用?"></a>为什么要配合<code>:host</code>一起使用?</h2><p>在我们日常的项目中，<code>::ng-deep</code>很少单独使用，由上面对ng<code>::deep</code>的描述可知，它相当于将样式变成了全局样式，如果不加<code>:host</code>，那么这个样式会影响到所有的组件，加了<code>:host</code>,则只会影响到当前组件及其后代组件。</p>
<p>注意：</p>
<ol>
<li>使用了<code>::ng-deep</code>的组件，只有显示在页面上时（该组建对应的前端路由生效时），才会影响其他组件的样式。如果该组件没有显示在页面上，那么它的样式是不会影响其他组件的。</li>
<li>如果当前页面只显示了使用了<code>::ng-deep</code>的组件，而没有显示其他组件，那么<code>ng::deep</code>的样式也不会影响到其他组件。</li>
</ol>
<p>也就是说使用了<code>::ng-deep</code>的组件，只有和其他组件一起显示在页面上，才会影响其他组件的样式。</p>
<p>实际的例子，假设有组件A在其样式文件中使用了<code>ng::deep</code>，对于三级标题，将其文本设置为红色。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style for Component A */</span></span><br><span class="line">::ng-deep h3 &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组件B也有一个三级标题，但是没有设置样式。</p>
<p>如果组件A和组件B同时显示在页面上，那么组件A的样式会覆盖组件B的样式，此时页面上的所有h3标题都会显示为红色。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-component-a</span>&gt;</span><span class="tag">&lt;/<span class="name">app-component-a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-component-b</span>&gt;</span><span class="tag">&lt;/<span class="name">app-component-b</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们在浏览器中inspect，可以看到组件A设置的三级标题样式放到了整个html的head部分。</p>
<p>如果组件A中在<code>::ng-deep</code>前加上<code>:host</code>，则只有组件A中的h3标题显示为红色，组件B中的h3标题不会受到影响。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style for Component A */</span></span><br><span class="line"><span class="selector-pseudo">:host</span> ::ng-deep h3 &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为啥加上<code>:host</code>后，就不影响别的组件了呢，因为:host表示这个样式只针对当前组件和其子组件生效，由生成后的css文件也可看出这点，请看下图。</p>
<p>在<code>h3</code>之前多了一个限定字符串<code>_nghost-ng-c2124967347</code>,这个字符串正好是组件A的选择器，这样就保证了这个样式只会影响到组件A。而组件B有一个不同的选择器<code>_nghost-ng-c2124967348</code>，所以组件B的h3标题不会受到影响。</p>
<p>如果我们不加<code>:host</code>，那么生成的css文件中就没有这个限定字符串，这样就会影响到所有的组件。</p>
<p><img src="/../images/angular-style-ngdeep.png" alt="angular-style-ngdeep"></p>
<h2 id="ng-deep只对ViewEncapsulation-Emulated有效"><a href="#ng-deep只对ViewEncapsulation-Emulated有效" class="headerlink" title="::ng-deep只对ViewEncapsulation.Emulated有效"></a><code>::ng-deep</code>只对<code>ViewEncapsulation.Emulated</code>有效</h2><p><code>::ng-deep</code>只对<code>encapsulation: ViewEncapsulation.Emulated</code>有效，对于<code>encapsulation: ViewEncapsulation.ShadowDom</code>和<code>encapsulation: ViewEncapsulation.None</code>无效。</p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>style</tag>
        <tag>ng-deep</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-ngc</title>
    <url>/2024/05/21/angular-ngc/</url>
    <content><![CDATA[<h2 id="What-is-angular-ngc"><a href="#What-is-angular-ngc" class="headerlink" title="What is angular ngc?"></a>What is angular ngc?</h2><p><code>ngc</code> stands fore Angular Compiler. It is a tool that compiles Angular applications. ngc was built on tsc(TypeScript Compiler) and extends it to support Angular.</p>
<h2 id="Angular-compile-options"><a href="#Angular-compile-options" class="headerlink" title="Angular compile options"></a>Angular compile options</h2><p>You can see the ngc compile options in the <code>tsconfig.json</code> file under your Angular project root.</p>
<p>We can see that the output directory is set to <code>dist/out-tsc</code>. and there is a special section <code>angularCompilerOptions</code> used for angular.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compileOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/out-tsc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;angularCompilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;enableI18nLegacyMessageIdFormat&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strictInjectionParameters&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strictInputAccessModifiers&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strictTemplates&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Run-ngc-manually"><a href="#Run-ngc-manually" class="headerlink" title="Run ngc manually"></a>Run <code>ngc</code> manually</h2><p>You can run <code>ngc</code> manually by using the command <code>ngc</code> in the terminal. and then found the compiled files in the dist&#x2F;out-tsc directory.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://blog.angular.io/how-the-angular-compiler-works-42111f9d2549">https://blog.angular.io/how-the-angular-compiler-works-42111f9d2549</a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>ngc</tag>
        <tag>compile</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-ngIf</title>
    <url>/2024/11/30/angular-ngif/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>ngIf</code> is a structural directive in Angular, it is used to conditionally render content in a template. Remember to import <code>CommonModule</code> in the module where you want to use <code>ngIf</code>.</p>
<h2 id="Full-syntax-with-ng-template"><a href="#Full-syntax-with-ng-template" class="headerlink" title="Full syntax with ng-template"></a>Full syntax with <code>ng-template</code></h2><p><code>Structural directives</code> are used in <code>ng-template</code>, here is an example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> [<span class="attr">ngIf</span>]=<span class="string">&quot;hero&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123;hero.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Shorthand-syntax"><a href="#Shorthand-syntax" class="headerlink" title="Shorthand syntax"></a>Shorthand syntax</h2><p>But, in practice, we often use <code>ngIf</code> in a more concise way by prefix a <code>*</code> before it, this is called the shorthand syntax:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;hero&quot;</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123;hero.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Note, even we write it in the shorthand syntax, Angular will still convert it to the <code>ng-template</code> syntax after compiling.</p>
<p>The above template will create a <code>div</code> element in the template, What if you don’t want to create a <code>div</code> element? You can use <code>ng-container</code> instead of <code>div</code>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngIf</span>=<span class="string">&quot;condition&quot;</span>&gt;</span></span><br><span class="line">  Content to render when condition is true</span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>In this way, Angular will render the text directly without creating a <code>div</code> element.</p>
<h2 id="New-syntax-with-if"><a href="#New-syntax-with-if" class="headerlink" title="New syntax with @if"></a>New syntax with <code>@if</code></h2><p>With the new built-in structural @if directive, you can use the following syntax:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@if (condition) &#123;</span><br><span class="line">  Content to render when condition is true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="If-else-then-with-ngIf"><a href="#If-else-then-with-ngIf" class="headerlink" title="If else then with *ngIf"></a>If else then with *ngIf</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;case-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngIf</span>=<span class="string">&quot;condition; then thenBlock else elseBlock&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">thenBlock</span>&gt;</span></span><br><span class="line">    Content to render when condition is true</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">elseBlock</span>&gt;</span></span><br><span class="line">    Content to render when condition is false</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="If-else-then-with-if"><a href="#If-else-then-with-if" class="headerlink" title="If else then with @if"></a>If else then with @if</h2><p>With <code>@if</code> directive, you can use the following syntax, it’s more simple and readable:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;case-3&quot;</span>&gt;</span></span><br><span class="line">  @if (condition) &#123;</span><br><span class="line">    Content to render when condition is true</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    Content to render when condition is false</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>既然Angular已经有<code>ngIf</code>, <code>ngFor</code>, ngSwitch等内置的结构性指令，为什么还要引入新的<code>@if</code>，<code>@for</code>, <code>@switch</code>呢？主要有以下原因</p>
<ol>
<li>更简洁的语法，比如要实现if - else if - … - else的逻辑，使用<code>ngIf</code>就会显得很臃肿。而使用<code>@if</code>就可以很好的解决这个问题。</li>
<li>更好的类型检查机制，这个不知道是怎么实现的。</li>
<li>更好的运行时性能，Angular编译器会将<code>@if</code>，<code>@for</code>，<code>@switch</code>编译成更高效的代码，这样可以减少运行时的开销。</li>
<li>更小的包体积，最多可以减少30kb的包体积。</li>
<li>不需要额外导入<code>CommonModule</code>模块，直接使用即可，<code>ngIf</code>等指令则需要导入<code>CommonModule</code>模块。</li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>directive</tag>
        <tag>ngif</tag>
      </tags>
  </entry>
  <entry>
    <title>ng-template</title>
    <url>/2023/04/16/angular-ng-template1/</url>
    <content><![CDATA[<h1 id="ng-template"><a href="#ng-template" class="headerlink" title="ng-template"></a>ng-template</h1><p>顾名思义，<code>ng-template</code>是一个模板元素，通常与结构化指令<code>ng-if</code>, <code>ng-for</code>, <code>ng-switch</code>及模板变量配合使用.</p>
<h2 id="ng-template配合ng-if"><a href="#ng-template配合ng-if" class="headerlink" title="ng-template配合ng-if"></a>ng-template配合ng-if</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> [<span class="attr">ngIf</span>]=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在实际编程中，我们一般不用上面的写法，而是采用指令的简写形式，也就是用<code>*ngIf</code>代替<code>[ngIf]</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;true&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这段代码编译后的结果和第一段代码是相同的。关于指令的简写形式，请参考这篇。注意：在<code>ng-template</code>上使用指令的简写形式是无效的，必须使用属性绑定的方式，下面的代码无法正常工作。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> *<span class="attr">ngIf</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="作为elseBlock使用"><a href="#作为elseBlock使用" class="headerlink" title="作为elseBlock使用"></a>作为elseBlock使用</h2><p>假设有如下需求，当<code>condition</code>为<code>true</code>时，显示<code>Hello, world!</code>，否则显示<code>Goodbye, world!</code>, 该如何实现呢？<br>我们可以在<code>ngIf</code>指令后面添加<code>else</code>关键字，然后在<code>else</code>后面添加一个模板引用变量，然后定义一个<code>ng-template</code>并用该模版变量标识之，如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;condition else otherTemplate&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">otherTemplate</span>&gt;</span>Goodbye, world!<span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你使用的是Angular17及以上版本，那么你可以使用<a href="https://zdd.github.io/2024/06/16/what-s-new-in-angular-17/">built-in control flow</a>语法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@if(condition) &#123;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#125; @else &#123;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Goodbye, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="If-then-else"><a href="#If-then-else" class="headerlink" title="If-then-else"></a>If-then-else</h2><p>如果两个分支对应的模板都很大，那么可以采用这种方式，使结构更清晰，代码更易读。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;condition; then thenBlock else elseBlock&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">thenBlock</span>&gt;</span>Content to render when condition is true.<span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">elseBlock</span>&gt;</span>Content to render when condition is false.<span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>同样的，如果你使用的是Angular17及以上版本，那么你可以使用<a href="https://zdd.github.io/2024/06/16/what-s-new-in-angular-17/">built-in control flow</a>语法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@if(condition) &#123;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#125; @else &#123;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Goodbye, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到了吗，built-in control flow语法的可读性更强，更符合人类的思维方式。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><ol>
<li><a href="https://angular.dev/api/core/ng-template#">Angular ng-template</a></li>
<li><code>ng-container</code> - <a href="https://zdd.github.io/2024/07/09/angular-ng-container/">https://zdd.github.io/2024/07/09/angular-ng-container/</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>directives</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-ngswitch</title>
    <url>/2024/11/30/angular-ngswitch/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>ngSwitch</code> is a structural directive in Angular, it is used to conditionally render a template based on the value of an expression.</p>
<h2 id="Use-ngSwitch-with-enum"><a href="#Use-ngSwitch-with-enum" class="headerlink" title="Use ngSwitch with enum."></a>Use <code>ngSwitch</code> with enum.</h2><p>注意：我发现下面每个<code>*ngSwitchCase</code>分支都只包含一个<code>&lt;p&gt;</code>元素，所以我们可以将<code>ng-container</code>拿掉，直接把<code>*ngSwitchCase</code>放在<code>&lt;p&gt;</code>标签上。<br>但是如果case分支中有多个元素，那么就需要用ng-container包裹起来。</p>
<p>default分支用<code>*ngSwitchDefault</code>来标记。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--app.component.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;account-feature-container&quot;</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ng-container</span> [<span class="attr">ngSwitch</span>]=<span class="string">&quot;accountStatus&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngSwitchCase</span>=<span class="string">&quot;AccountStatus.CLOSED&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a closed account<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngSwitchCase</span>=<span class="string">&quot;AccountStatus.AUTHORIZED&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is an authorized account<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngSwitchCase</span>=<span class="string">&quot;AccountStatus.NORMAL&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is an normal account<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngSwitchDefault</span>&gt;</span>This is the default branch<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在Component中定义一个枚举类型，注意<code>AccountStatus = AccountStatus;</code>这一行是必须的，否则编译报错。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-ng-switch&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./ng-switch.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./ng-switch.component.less&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NgSwitchComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="title class_">AccountStatus</span> = <span class="title class_">AccountStatus</span>; <span class="comment">// Make enum visible in component.ts file.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="attr">accountStatus</span>: <span class="title class_">AccountStatus</span> = <span class="title class_">AccountStatus</span>.<span class="property">AUTHORIZED</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">ngOnInit</span>(): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Use-built-in-structural-directive-switch"><a href="#Use-built-in-structural-directive-switch" class="headerlink" title="Use built-in structural directive @switch."></a>Use built-in structural directive <code>@switch</code>.</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;use_built-in_control_flow&quot;</span>&gt;</span></span><br><span class="line">  @switch (accountStatus) &#123; </span><br><span class="line">      @case (AccountStatus.CLOSED) &#123;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a closed account<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      &#125; @case (AccountStatus.AUTHORIZED) &#123;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is an authorized account<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      &#125; @case (AccountStatus.NORMAL) &#123;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is an normal account<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      &#125; @default &#123;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is the default branch<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Tips:</p>
<ol>
<li>Remember to add the <code>@default</code> branch at the end, if no case matched, and no <code>@default</code> is provided, nothing will be rendered.</li>
<li>There is no <code>fallthrough</code> in the <code>@switch</code> directive, so you don’t need to add <code>break</code> or <code>return</code> in each <code>@case</code> branch.</li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>directive</tag>
        <tag>ngswitch</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-ngTemplateOutlet</title>
    <url>/2024/07/09/angular-ngtemplateoutlet/</url>
    <content><![CDATA[<h1 id="What’s-ngTemplateOutlet"><a href="#What’s-ngTemplateOutlet" class="headerlink" title="What’s ngTemplateOutlet?"></a>What’s ngTemplateOutlet?</h1><p><code>ngTemplateOutlet</code> is a directive that allows you to render a template dynamically.</p>
<h1 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h1><p>一个大的页面，可能有一部分会多次被渲染，这种情况下，我们可以使用 <code>ngTemplateOutlet</code> 来减少重复的代码。</p>
<p>考虑如下需求：我们需要在一个页面上多次渲染某个产品信息，首先可以将产品信息的模板放在一个 <code>ng-template</code>中，并给它起一个名字叫做<code>product</code>, 然后通过 <code>ngTemplateOutlet</code> 来渲染。<code>ngTemplateOutlet</code>接受一个模板变量作为参数，然后将这个模板变量所指向的模板渲染到当前的位置。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Product 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngTemplateOutlet</span>=<span class="string">&quot;product&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Product 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngTemplateOutlet</span>=<span class="string">&quot;product&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">product</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Product name: computer<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Product price: 100$<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>ngTemplateOutlet</code> 还可以接受一个上下文参数，用来传递数据到模板中。比如上例中，我们可以把Product name和price进行参数化。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Product 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngTemplateOutlet</span>=<span class="string">&quot;product; context: &#123;name: &#x27;computer&#x27;, price: 100&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Product 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngTemplateOutlet</span>=<span class="string">&quot;product; context: &#123;name: &#x27;phone&#x27;, price: 200&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">product</span> <span class="attr">let-name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">let-price</span>=<span class="string">&quot;price&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Product name: &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Product price: &#123;&#123; price &#125;&#125;$<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>更进一步的，我们可以把name和price封装到一个对象中，然后传递这个对象。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Product 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngTemplateOutlet</span>=<span class="string">&quot;product; context: &#123;product: &#123;name: &#x27;computer&#x27;, price: 100&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Product 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngTemplateOutlet</span>=<span class="string">&quot;product; context: &#123;product: &#123;name: &#x27;phone&#x27;, price: 200&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">product</span> <span class="attr">let-product</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Product name: &#123;&#123; product.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Product price: &#123;&#123; product.price &#125;&#125;$<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>渲染结果如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Product 1</span><br><span class="line">Product name: computer</span><br><span class="line">Product price: 100$</span><br><span class="line"></span><br><span class="line">Product 2</span><br><span class="line">Product name: phone</span><br><span class="line">Product price: 200$</span><br></pre></td></tr></table></figure>

<p>再进一步，我们可以将product信息放到组件中，然后通过<code>ngTemplateOutlet</code>来渲染。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line">products = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;Book 1&#x27;</span>, <span class="attr">price</span>: <span class="number">100</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;Book 2&#x27;</span>, <span class="attr">price</span>: <span class="number">200</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;Book 3&#x27;</span>, <span class="attr">price</span>: <span class="number">300</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Product 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngTemplateOutlet</span>=<span class="string">&quot;product; context: &#123;product: products[0]&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Product 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngTemplateOutlet</span>=<span class="string">&quot;product; context: &#123;product: products[1]&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">product</span> <span class="attr">let-product</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Product name: &#123;&#123; product.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Product price: &#123;&#123; product.price &#125;&#125;$<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再再进一步，我们可以用ngFor来循环渲染。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let product of products&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngTemplateOutlet</span>=<span class="string">&quot;productTemplate; context: &#123;$implicit: product&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">productTemplate</span> <span class="attr">let-product</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Product name: &#123;&#123; product.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Product price: &#123;&#123; product.price &#125;&#125;$<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意，这里使用了<code>$implicit</code>, 这是一个特殊的关键字，表示默认的上下文参数。如果不指定上下文参数，<code>$implicit</code>会被用作默认的上下文参数。也就是说，<code>let-product=&quot;product&quot;</code>可以简写为<code>let-product</code>。而<code>$implicit</code>后面的参数就是product. (注意，这句我已经看不懂了，有空重新整理一下。)</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://angular.dev/api/common/NgTemplateOutlet?tab=usage-notes">https://angular.dev/api/common/NgTemplateOutlet?tab=usage-notes</a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>ngtemplateoutlet</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-output-decorator</title>
    <url>/2024/06/16/angular-output-decorator/</url>
    <content><![CDATA[<p>The <code>@Output</code> decorator is used to define an output property in a component. The output property is used to emit events from the component to the parent component. The <code>@Output</code> decorator is used in conjunction with the <code>EventEmitter</code> class to emit events.</p>
<h2 id="How-to-use-the-Output-decorator"><a href="#How-to-use-the-Output-decorator" class="headerlink" title="How to use the @Output decorator"></a>How to use the @Output decorator</h2><ol>
<li>Create a Child component</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--child.component.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;onClick()&quot;</span>&gt;</span>Update parent name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// child.component.t</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-child&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> &#123;</span><br><span class="line">  <span class="meta">@Output</span>() updateParentName = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">updateParentName</span>.<span class="title function_">emit</span>(<span class="string">&#x27;new name&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Create a parent component</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--parent.component.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Parent name: &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-child</span> (<span class="attr">updateParentName</span>)=<span class="string">&quot;updateName($event)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// parent.component.ts</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-parent&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">ChildComponent</span>],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ParentComponent</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;parent&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">updateName</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The connection between child component and parent component is established by binding the <code>updateParentName</code> output property of the child component to the <code>updateName</code> method of the parent component.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// child.component.ts</span></span><br><span class="line"><span class="meta">@Output</span>() updateParentName = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>&lt;<span class="built_in">string</span>&gt;();</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--parent.component.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-child</span> (<span class="attr">updateParentName</span>)=<span class="string">&quot;updateName($event)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="New-output-api-in-Angular-17-3"><a href="#New-output-api-in-Angular-17-3" class="headerlink" title="New output api in Angular 17.3"></a>New <code>output</code> api in Angular 17.3</h2><p>Angular 17.3 provide a new <code>output</code> api to simplify the usage of <code>@Output</code> decorator.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;output&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> &#123;</span><br><span class="line">  updateParentName = output&lt;<span class="built_in">string</span>&gt;(); <span class="comment">// &lt;--- new output api</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">onClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">updateParentName</span>.<span class="title function_">emit</span>(<span class="string">&#x27;new name&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Naming-conventions"><a href="#Naming-conventions" class="headerlink" title="Naming conventions"></a>Naming conventions</h2><p>Always use camelCase output names. Avoid prefixing output names with “on”.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><p><a href="https://angular.dev/guide/components/outputs">https://angular.dev/guide/components/outputs</a><br><a href="https://blog.angular.dev/meet-angulars-new-output-api-253a41ffa13c">https://blog.angular.dev/meet-angulars-new-output-api-253a41ffa13c</a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>output</tag>
        <tag>decorator</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-pipe-async</title>
    <url>/2025/01/01/angular-pipe-async/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Angular has a built-in pipe <code>async</code> that can be used to subscribe to an Observable or Promise and return the latest value it has emitted. </p>
<h1 id="Without-async-pipe"><a href="#Without-async-pipe" class="headerlink" title="Without async pipe"></a>Without async pipe</h1><p>Let’s see how we write the code without using the <code>async</code> pipe. In the following <code>OrderComponent</code>, we have a <code>todo</code> object that is fetched from the <code>DataService</code> using the <code>fetchTodoById</code> method which returns an Promise. We call the <code>fetchTodos</code> method in the <code>ngOnInit</code> lifecycle hook and assign the result to the <code>todo</code> property.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="attr">todo</span>: <span class="title class_">Todo</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">dataService</span>: <span class="title class_">DataService</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">fetchTodos</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">dataService</span>.<span class="title function_">fetchTodoById</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">fetchTodos</span>().<span class="title function_">then</span>(<span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">todo</span> = todo</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>id: &#123;&#123;todo?.id&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>userId: &#123;&#123;todo?.userId&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>title: &#123;&#123;todo?.title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>completed: &#123;&#123;todo?.completed&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="With-async-pipe"><a href="#With-async-pipe" class="headerlink" title="With async pipe"></a>With async pipe</h1><p>With <code>async</code> pipe, we don’t need to call <code>then</code> method on Promise, the async pipe will take care of it. We can directly assign the result of <code>fetchTodos</code> method to the <code>todo</code> property and use the <code>async</code> pipe in the template to subscribe to the Promise.</p>
<p>We need two changes in the code:</p>
<ol>
<li>Change the type of <code>todo</code> property to <code>Promise&lt;Todo&gt; | null</code>.</li>
<li>Assign the result of <code>fetchTodos</code> method to the <code>todo</code> property.</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="attr">todo</span>: <span class="title class_">Promise</span>&lt;<span class="title class_">Todo</span>&gt; | <span class="literal">null</span> = <span class="literal">null</span>; <span class="comment">// &lt;--- 1</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">dataService</span>: <span class="title class_">DataService</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">fetchTodos</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">dataService</span>.<span class="title function_">fetchTodoById</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todo</span> = <span class="variable language_">this</span>.<span class="title function_">fetchTodos</span>(); <span class="comment">// &lt;--- 2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Note that we use the <code>as</code> syntax to assign the result of the <code>async</code> pipe to a template variable <code>todo</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;todo | async as todo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>id: &#123;&#123;todo.id&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>userId: &#123;&#123;todo.userId&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>title: &#123;&#123;todo.title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>completed: &#123;&#123;todo.completed&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Using-with-Observables"><a href="#Using-with-Observables" class="headerlink" title="Using with Observables"></a>Using with Observables</h2><p>If using with <code>Observable</code>, just change the type of <code>todo</code> property to <code>Observable&lt;Todo&gt; | null</code>.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">todo</span>: <span class="title class_">Observable</span>&lt;<span class="title class_">Todo</span>&gt; | <span class="literal">null</span> = <span class="literal">null</span>; <span class="comment">// If using Observable</span></span><br></pre></td></tr></table></figure>

<h2 id="Using-with-ngFor"><a href="#Using-with-ngFor" class="headerlink" title="Using with ngFor"></a>Using with <code>ngFor</code></h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let todo of todos | async&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>id: &#123;&#123;todo.id&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>userId: &#123;&#123;todo.userId&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>title: &#123;&#123;todo.title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>completed: &#123;&#123;todo.completed&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h1><ol>
<li>When use with Observables, the <code>async</code> pipe automatically subscribes to the Observable, renders the output within the template, and then unsubscribes when the component is destroyed. - You don’t need to manually subscribe and unsubscribe.</li>
<li>Works with Promises as well.</li>
</ol>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://angular.dev/api/common/AsyncPipe?tab=usage-notes">https://angular.dev/api/common/AsyncPipe?tab=usage-notes</a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>pipe</tag>
        <tag>async</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-pipe-json</title>
    <url>/2025/01/06/angular-pipe-json/</url>
    <content><![CDATA[<p>The built-in pipe <code>json</code> is used to convert a JavaScript object into a JSON string. It is useful for debugging purposes or when you need to display the raw JSON data in your Angular application.</p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>Assume you have a data object in your components which is an javascript object:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;userId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="string">&quot;title&quot;</span>: <span class="string">&quot;ullam nobis libero sapiente ad optio sint&quot;</span>,</span><br><span class="line">  <span class="string">&quot;completed&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In your template file, you can use the <code>json</code> pipe to convert the object into a JSON string:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;&#123; data | json &#125;&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>You will get the following output on the rendered page:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123; &quot;userId&quot;: 1, &quot;id&quot;: 20, &quot;title&quot;: &quot;ullam nobis libero sapiente ad optio sint&quot;, &quot;completed&quot;: true &#125;</span><br></pre></td></tr></table></figure>

<p>Without the <code>json</code> pipe, you will get <code>[object Object]</code> in the output.</p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>pipe</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-pipe</title>
    <url>/2024/05/18/angular-pipe/</url>
    <content><![CDATA[<h2 id="What-is-a-pipe"><a href="#What-is-a-pipe" class="headerlink" title="What is a pipe"></a>What is a pipe</h2><p>Angular中的pipe就是一个简单的函数，该函数接收一个输入值，然后返回一个转换后的值。pipe只需在一处定义，然后任意模板都可使用。</p>
<h2 id="Generate-pipe"><a href="#Generate-pipe" class="headerlink" title="Generate pipe"></a>Generate pipe</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng generate pipe full-name</span><br></pre></td></tr></table></figure>

<p>This will create a new file <code>full-name.pipe.ts</code> in the <code>src/app</code> folder.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Pipe</span>, <span class="title class_">PipeTransform</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">lastName</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pipe</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;fullName&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">FullNamePipe</span> <span class="keyword">implements</span> <span class="title class_">PipeTransform</span> &#123;</span><br><span class="line">  <span class="title function_">transform</span>(<span class="attr">value</span>: <span class="title class_">Person</span>, ...<span class="attr">args</span>: <span class="built_in">unknown</span>[]): <span class="built_in">unknown</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.<span class="property">lastName</span> + <span class="string">&#x27;, &#x27;</span> + value.<span class="property">firstName</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用@Pipe装饰器来定义pipe，<code>name</code>属性是pipe的名字，<code>standalone</code>属性是可选的，如果设置为<code>true</code>，则表示该pipe是一个独立的pipe，不依赖于任何Module。<code>pure</code>参数是可选的，默认为true。pure pipe只有当输入变化时才重新计算。</p>
<p>每个Pipe都实现了<code>PipeTransform</code>接口，该接口只有一个方法<code>transform</code>，该方法接收一个输入值和一些可选参数，然后返回一个转换后的值。在这里，我们根据输入的Person变量，返回对应的全名。</p>
<h2 id="How-to-use-pipe"><a href="#How-to-use-pipe" class="headerlink" title="How to use pipe"></a>How to use pipe</h2><p>在component中引入pipe，然后在模板中使用。上面的FullNamePipe可以这样使用：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">FullNamePipe</span>&#125; <span class="keyword">from</span> <span class="string">&quot;../full-name.pipe&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">FullNamePipe</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">person = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;Philip&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;Zhang&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- component.html --&gt;</span></span><br><span class="line">&#123;&#123; person | fullName &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>也可以直接在代码中使用pipe：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FullNamePipe</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../full-name.pipe&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">FullNamePipe</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">YourComponent</span> &#123;</span><br><span class="line">  person = &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Philip&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Zhang&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">fullNamePipe</span>: <span class="title class_">FullNamePipe</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> fullName = <span class="variable language_">this</span>.<span class="property">fullNamePipe</span>.<span class="title function_">transform</span>(<span class="variable language_">this</span>.<span class="property">person</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(fullName); <span class="comment">// logs &quot;Zhang, Philip&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Naming-convention"><a href="#Naming-convention" class="headerlink" title="Naming convention"></a>Naming convention</h2><ol>
<li><code>pipe</code> name should be in <code>camelCase</code>. - <code>fullName</code></li>
<li><code>pipe</code> class should be in <code>PascalCase</code> and end with <code>Pipe</code>. - <code>FullNamePipe</code></li>
</ol>
<h2 id="Pass-parameter-to-pipe"><a href="#Pass-parameter-to-pipe" class="headerlink" title="Pass parameter to pipe"></a>Pass parameter to pipe</h2><p>pipe可以接收多个参数，参数之间使用<code>:</code>分隔。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value | pipe:param1:param2... &#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Pipe-chaining"><a href="#Pipe-chaining" class="headerlink" title="Pipe chaining"></a>Pipe chaining</h2><p>多个pipe可以使用<code>|</code>符号连接在一起，前一个pipe的输出会作为后一个pipe的输入。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value | pipe1 | pipe2 | pipe3 &#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Pipe-precedence"><a href="#Pipe-precedence" class="headerlink" title="Pipe precedence"></a>Pipe precedence</h2><p>pipe的执行顺序是从左到右，并且pipe的优先级高于 :?操作符.</p>
<p>Bad</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value &gt; 0 ? expression1 : expression2 | pipe &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>is equal to</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value &gt; 0 ? expression1 : (expression2 | pipe) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>Good</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; (value &gt; 0 ? expression1 : expression2) | pipe &#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://angular.io/guide/pipes-custom-data-trans">https://angular.io/guide/pipes-custom-data-trans</a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>pipe</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-provider-multi</title>
    <url>/2024/12/16/angular-provider-multi/</url>
    <content><![CDATA[<p>在Angular中，我们可以通过<code>useClass</code>、<code>useValue</code>、<code>useFactory</code>、<code>useExisting</code>等属性来指定依赖注入的提供者，但是这些属性只能指定一个提供者，如果我们需要指定多个提供者，该怎么办呢？这时候就需要使用<code>multi</code>属性了。</p>
<p>比如下面这个例子：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">InjectionToken</span>, <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">MY_MULTI_TOKEN</span> = <span class="keyword">new</span> <span class="title class_">InjectionToken</span>&lt;<span class="built_in">string</span>[]&gt;(<span class="string">&#x27;MyMultiToken&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    &#123; <span class="attr">provide</span>: <span class="variable constant_">MY_MULTI_TOKEN</span>, <span class="attr">useValue</span>: <span class="string">&#x27;Value1&#x27;</span>, <span class="attr">multi</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">provide</span>: <span class="variable constant_">MY_MULTI_TOKEN</span>, <span class="attr">useValue</span>: <span class="string">&#x27;Value2&#x27;</span>, <span class="attr">multi</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>对于<code>MY_MULTI_TOKEN</code>，我们多次使用<code>useValue</code>属性来指定提供者，然后通过<code>multi: true</code>来指定这是一个多提供者。Angular最终会将这些值放到一个数组中返回。所以<code>MY_MULTI_TOKEN</code>最终的值是<code>[&#39;Value1&#39;, &#39;Value2&#39;]</code></p>
<p>Angular内置的<code>ROUTES</code>token也是multi的，从它的定义就可以看出来，它返回的是<code>Route[]</code>的数组。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">ROUTES</span>: <span class="title class_">InjectionToken</span>&lt;<span class="title class_">Route</span>[][]&gt;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>di</tag>
        <tag>provider</tag>
        <tag>multi</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-router-guard</title>
    <url>/2024/10/20/angular-router-guard/</url>
    <content><![CDATA[<h2 id="What-is-Angular-Router-Guard"><a href="#What-is-Angular-Router-Guard" class="headerlink" title="What is Angular Router Guard?"></a>What is Angular Router Guard?</h2><p>Router Guard is a feature in Angular Router that allows you to run some code before the route is activated. It can be used to protect routes from unauthorized access, redirect users to a login page, or perform any other action before the route is activated.</p>
<h2 id="canActivate"><a href="#canActivate" class="headerlink" title="canActivate"></a>canActivate</h2><p>Use case: Only allow authenticated users to access the <code>/product</code> page, otherwise redirect them to the login page.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.routes.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeComponent</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">ProductComponent</span>,</span><br><span class="line">    <span class="attr">canActivate</span>: [<span class="title class_">AuthGuard</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">LoginComponent</span>,</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// auth-guard.service.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthGuard</span> <span class="keyword">implements</span> <span class="title class_">CanActivate</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">authService</span>: <span class="title class_">AuthService</span>, <span class="keyword">private</span> <span class="attr">router</span>: <span class="title class_">Router</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">canActivate</span>(<span class="attr">route</span>: <span class="title class_">ActivatedRouteSnapshot</span>, <span class="attr">state</span>: <span class="title class_">RouterStateSnapshot</span>): <span class="title class_">MaybeAsync</span>&lt;<span class="title class_">GuardResult</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">authService</span>.<span class="title function_">isAuthenticated</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([<span class="string">&#x27;login&#x27;</span>]);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">isAuthenticated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Put authentication logic here</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="canActivateChild"><a href="#canActivateChild" class="headerlink" title="canActivateChild"></a>canActivateChild</h2><p>Similar to <code>canActivate</code>, but it is used to protect child routes.<br>In the following example, only authenticated users can access the child routes of the <code>/product</code> page.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.routes.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeComponent</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">ProductComponent</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ProductDetailComponent</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;edit&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ProductEditComponent</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">canActivateChild</span>: [<span class="title class_">AuthGuard</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">LoginComponent</span>,</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h2 id="canDeactivate"><a href="#canDeactivate" class="headerlink" title="canDeactivate"></a>canDeactivate</h2><p>Use case: Confirm with the user before leaving the page. For example, make sure the user wants to leave the page without saving changes.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.routes.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeComponent</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">PostComponent</span>,</span><br><span class="line">    <span class="attr">canDeactivate</span>: [<span class="title class_">SaveGuard</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// save-guard.service.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SaveGuard</span> <span class="keyword">implements</span> <span class="title class_">CanDeactivate</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">saveService</span>: <span class="title class_">SaveService</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">canDeactivate</span>(<span class="attr">component</span>: <span class="built_in">any</span>, <span class="attr">currentRoute</span>: <span class="title class_">ActivatedRouteSnapshot</span>, <span class="attr">currentState</span>: <span class="title class_">RouterStateSnapshot</span>, <span class="attr">nextState</span>: <span class="title class_">RouterStateSnapshot</span>): <span class="title class_">MaybeAsync</span>&lt;<span class="title class_">GuardResult</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">saveService</span>.<span class="title function_">hasSavedData</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">confirm</span>(<span class="string">&#x27;You have unsaved changes. Do you really want to leave?&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// save.service.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SaveService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">hasSavedData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Put logic to check if data is saved</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="canLoad"><a href="#canLoad" class="headerlink" title="canLoad"></a>canLoad</h2><p>Use case: Guard when calling <code>loadChildren</code> in the route configuration. Note that <code>canLoad</code> not works for <code>loadComponent</code>.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;premium&#x27;</span>,</span><br><span class="line">    <span class="attr">canLoad</span>: [<span class="title class_">PremiumFeatureGuard</span>], <span class="comment">// Apply PremiumFeatureGuard to prevent lazy loading</span></span><br><span class="line">    <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./premium-feature.module&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">m</span> =&gt;</span> m.<span class="property">PremiumFeatureModule</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>Note that <code>canLoad</code> is deprecated, use <code>canMatch</code> instead.</p>
<h2 id="canMatch"><a href="#canMatch" class="headerlink" title="canMatch"></a>canMatch</h2><p>Use case: Guard when matching the route. If the guard returns false, the route will not be matched.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.routes.ts</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">  <span class="attr">loadComponent</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./product/product.component&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">m</span> =&gt;</span> m.<span class="property">ProductComponent</span>),</span><br><span class="line">  <span class="attr">canMatch</span>: [<span class="title class_">CanMatchGuard</span>],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// can-match.guard.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CanMatchGuard</span> <span class="keyword">implements</span> <span class="title class_">CanMatch</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">canMatch</span>(<span class="attr">route</span>: <span class="title class_">Route</span>, <span class="attr">segments</span>: <span class="title class_">UrlSegment</span>[]): <span class="title class_">MaybeAsync</span>&lt;<span class="title class_">GuardResult</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>router</tag>
        <tag>canactivate</tag>
        <tag>guard</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-route-interface NavigationExtras</title>
    <url>/2024/06/03/angular-route-interface-navigationextras/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>今天我们来介绍一下Angular中的<a href="https://angular.dev/api/router/NavigationExtras">NavigationExtras</a>接口，我们在使用<a href="https://angular.dev/api/router/Router">Router</a>进行导航时，可以通过<code>NavigationExtras</code>接口来传递额外的导航参数。</p>
<p><code>NavigationExtras</code>接口定义如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">NavigationExtras</span> &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="attr">relativeTo</span>?: <span class="title class_">ActivatedRoute</span>;</span><br><span class="line">  <span class="keyword">override</span> <span class="attr">queryParams</span>?: <span class="title class_">Params</span>;</span><br><span class="line">  <span class="keyword">override</span> <span class="attr">fragment</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">override</span> <span class="attr">queryParamsHandling</span>?: <span class="title class_">QueryParamsHandling</span>;</span><br><span class="line">  <span class="keyword">override</span> <span class="attr">preserveFragment</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="keyword">override</span> <span class="attr">onSameUrlNavigation</span>?: <span class="title class_">OnSameUrlNavigation</span>;</span><br><span class="line">  <span class="keyword">override</span> <span class="attr">skipLocationChange</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="keyword">override</span> <span class="attr">replaceUrl</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="keyword">override</span> <span class="attr">state</span>?: &#123; [<span class="attr">k</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>; &#125;;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="keyword">override</span> <span class="attr">info</span>?: <span class="built_in">unknown</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="relativeTo"><a href="#relativeTo" class="headerlink" title="relativeTo"></a>relativeTo</h2><p><code>relativeTo</code>属性是一个<code>ActivatedRoute</code>对象，用来指定导航的相对路径。假设有如下路由配置，<code>ParentComponent</code>下有两个子路由<code>ListComponent</code>和<code>ChildComponent</code>.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;parent&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">ParentComponent</span>,</span><br><span class="line">  <span class="attr">children</span>: [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">ListComponent</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;child&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">ChildComponent</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>

<p>如果我们当前位于<code>ChildComponent</code>，想要导航到<code>ListComponent</code>，可以使用<code>relativeTo</code>属性来指定相对路径，其中<code>..</code>表示上一级路径，也就是<code>ParentComponent</code>。<code>../list</code>表示导航到<code>parent/list</code>路径，也就是ParentComponent<code>下的</code>ListComponent&#96;。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;...&#125;)</span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> &#123;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">router</span>: <span class="title class_">Router</span>, <span class="keyword">private</span> <span class="attr">route</span>: <span class="title class_">ActivatedRoute</span></span>) &#123;&#125;</span><br><span class="line">   <span class="title function_">go</span>(<span class="params"></span>) &#123;</span><br><span class="line">     router.<span class="title function_">navigate</span>([<span class="string">&#x27;../list&#x27;</span>], &#123; <span class="attr">relativeTo</span>: <span class="variable language_">this</span>.<span class="property">route</span> &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="queryParams"><a href="#queryParams" class="headerlink" title="queryParams"></a>queryParams</h2><p><code>queryParams</code>属性是一个<code>Params</code>对象，用来指定导航时的查询参数。比如我们要导航到<code>/list</code>路径，并且带上查询参数<code>page=1</code>，可以使用<code>queryParams</code>属性。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Navigate to /results?page=1</span></span><br><span class="line">router.<span class="title function_">navigate</span>([<span class="string">&#x27;/results&#x27;</span>], &#123; <span class="attr">queryParams</span>: &#123; <span class="attr">page</span>: <span class="number">1</span> &#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Navigate to /results?page=1&amp;sort=desc</span></span><br><span class="line">router.<span class="title function_">navigate</span>([<span class="string">&#x27;/results&#x27;</span>], &#123; <span class="attr">queryParams</span>: &#123; <span class="attr">page</span>: <span class="number">1</span>, <span class="attr">sort</span>: <span class="string">&#x27;desc&#x27;</span> &#125; &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="fragment"><a href="#fragment" class="headerlink" title="fragment"></a>fragment</h2><p><code>fragment</code>属性是一个字符串，用来指定导航时的<code>fragment</code>，<code>fragment</code>是以<code>#</code>号开头的标识符。比如我们要导航到<code>/list</code>路径，并且带上片段标识符<code>top</code>，可以使用<code>fragment</code>属性。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Navigate to /results#top</span></span><br><span class="line">router.<span class="title function_">navigate</span>([<span class="string">&#x27;/results&#x27;</span>], &#123; <span class="attr">fragment</span>: <span class="string">&#x27;top&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="queryParamsHandling"><a href="#queryParamsHandling" class="headerlink" title="queryParamsHandling"></a>queryParamsHandling</h2><p><code>queryParamsHandling</code>属性是一个枚举类型，用来指定导航时如何处理查询参数。有以下几种取值：</p>
<ul>
<li>preserve : Preserve parameters in original url and discard new parameters in target url</li>
<li>merge : Merge target url query params with original url parameters.</li>
</ul>
<p>在下面的代码中使用了<code>preserve</code>参数，表示保留原始url中的查询参数。而目标url中的查询参数<code>&#123;page: 2&#125;</code>将被忽略。导航结束后，url为<code>/view2?page=1</code>。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// from /view1?page=1 to /view2?page=1</span></span><br><span class="line">router.<span class="title function_">navigate</span>([<span class="string">&#x27;/view2&#x27;</span>], &#123; <span class="attr">queryParams</span>: &#123; <span class="attr">page</span>: <span class="number">2</span> &#125;,  <span class="attr">queryParamsHandling</span>: <span class="string">&quot;preserve&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在下面的代码中使用了<code>merge</code>参数，表示将目标url中的查询参数与原始url中的查询参数合并。导航结束后，url为<code>/view2?page=1&amp;otherKey=2</code>。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// from /view1?page=1 to /view2?page=1&amp;otherKey=2</span></span><br><span class="line">router.<span class="title function_">navigate</span>([<span class="string">&#x27;/view2&#x27;</span>], &#123; <span class="attr">queryParams</span>: &#123; <span class="attr">otherKey</span>: <span class="number">2</span> &#125;,  <span class="attr">queryParamsHandling</span>: <span class="string">&quot;merge&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>需要注意，如果源url和目标url中都有相同的查询参数，那么目标url中的查询参数会覆盖源url中的查询参数。下面的例子中，导航后，url为<code>/view2?page=2&amp;id=2</code>。<code>page</code>参数的值被目标url中的值覆盖了。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// from /view1?page=1 to /view2?page=2&amp;id=2</span></span><br><span class="line">router.<span class="title function_">navigate</span>([<span class="string">&#x27;/view2&#x27;</span>], &#123; <span class="attr">queryParams</span>: &#123; <span class="attr">page</span>: <span class="number">2</span>, <span class="attr">id</span>: <span class="number">2</span> &#125;,  <span class="attr">queryParamsHandling</span>: <span class="string">&quot;merge&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="preserveFragment"><a href="#preserveFragment" class="headerlink" title="preserveFragment"></a>preserveFragment</h2><p><code>preserveFragment</code>属性是一个布尔值，用来指定导航时是否保留原始url中的<code>fragment</code>标识符。如果设置为<code>true</code>，则保留原始url中的片段标识符，否则忽略。默认值为<code>false</code>。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// from /view1#top to /view2#top</span></span><br><span class="line">router.<span class="title function_">navigate</span>([<span class="string">&#x27;/view2&#x27;</span>], &#123; <span class="attr">preserveFragment</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// from /view1#top to /view2</span></span><br><span class="line">router.<span class="title function_">navigate</span>([<span class="string">&#x27;/view2&#x27;</span>]);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">router.<span class="title function_">navigate</span>([<span class="string">&#x27;/view2&#x27;</span>], &#123; <span class="attr">preserveFragment</span>: <span class="literal">false</span> &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="onSameUrlNavigation"><a href="#onSameUrlNavigation" class="headerlink" title="onSameUrlNavigation"></a>onSameUrlNavigation</h2><p><a href="https://angular.dev/api/router/OnSameUrlNavigation?tab=description">onSameUrlNavigation</a>属性是一个枚举类型，用来指定当导航到相同url时的行为。有以下几种取值：</p>
<ul>
<li>reload : Reload the page</li>
<li>ignore : Ignore the navigation</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// from /view1 to /view1</span></span><br><span class="line">router.<span class="title function_">navigate</span>([<span class="string">&#x27;/view1&#x27;</span>], &#123; <span class="attr">onSameUrlNavigation</span>: <span class="string">&#x27;reload&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="skipLocationChange"><a href="#skipLocationChange" class="headerlink" title="skipLocationChange"></a>skipLocationChange</h2><p><code>skipLocationChange</code>属性是一个布尔值，用来指定是否在url中添加一个新的历史记录。如果设置为<code>true</code>，则不会添加新的历史记录，导航结束后，浏览器的历史记录不会改变。默认值为<code>false</code>。</p>
<p>假设有如下导航：<code>view1</code> -&gt; <code>view2</code> -&gt; <code>view3</code>, 如果在<code>view2</code> -&gt; <code>view3</code>的导航中设置<code>skipLocationChange</code>为<code>true</code>，则导航结束后，浏览器的历史记录为<code>view1</code> -&gt; <code>view2</code>，而不是<code>view1</code> -&gt; <code>view2</code> -&gt; <code>view3</code>。导航结束后，浏览器的url为<code>/view2</code>，点击浏览器的回退按钮，会回到<code>/view1</code>。</p>
<p>注意以上只是本质行为，还有一个视觉行为，如果设置为<code>true</code>，则导航结束后，浏览器的url不会改变，但是页面内容会改变。这样用户在浏览器的历史记录中看不到导航记录。</p>
<p>以下代码从<code>/view1</code>导航到<code>/view2</code>，导航结束后，浏览器的url不会改变，仍然是<code>/view1</code>,但是页面内容会改变, 显示<code>/view2</code>的内容。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// from /view1 to /view2</span></span><br><span class="line">router.<span class="title function_">navigate</span>([<span class="string">&#x27;/view2&#x27;</span>], &#123; <span class="attr">skipLocationChange</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="replaceUrl"><a href="#replaceUrl" class="headerlink" title="replaceUrl"></a>replaceUrl</h2><p><code>replaceUrl</code>属性是一个布尔值，用来指定导航时是否替换当前的历史记录。如果设置为<code>true</code>，则替换当前的历史记录，默认值为<code>false</code>。</p>
<p>假设有如下导航，<code>view1</code> -&gt; <code>view2</code> -&gt; <code>view3</code>，如果在<code>view2</code> -&gt; <code>view3</code>的导航中设置<code>replaceUrl</code>为<code>true</code>，则导航结束后，浏览器url为<code>/view3</code> 浏览器的历史记录为<code>view1</code> -&gt; <code>view3</code>，而不是<code>view1</code> -&gt; <code>view2</code> -&gt; <code>view3</code>(<code>view2</code>被<code>view3</code>替换掉)。导航结束后，浏览器的url为<code>/view3</code>，点击浏览器的回退按钮，会回到<code>/view1</code>。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// from /view2 to /view3</span></span><br><span class="line">router.<span class="title function_">navigate</span>([<span class="string">&#x27;/view3&#x27;</span>], &#123; <span class="attr">replaceUrl</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>待续</p>
<h2 id="info"><a href="#info" class="headerlink" title="info"></a>info</h2><p>待续</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://angular.dev/api/router/NavigationExtras">NavigationExtras</a></li>
</ul>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>route</tag>
        <tag>navigationextras</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-proxy-config</title>
    <url>/2024/09/29/angular-proxy-config/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>When you are developing an Angular application, you may need to call some APIs from the backend server. But in the development environment, the backend server may not be ready yet, or you want to use a local backend server for testing. In this case, you can use the proxy configuration to redirect the API requests to another server.</p>
<h2 id="1-Create-proxy-file"><a href="#1-Create-proxy-file" class="headerlink" title="1. Create proxy file"></a>1. Create proxy file</h2><p>Create a new file named <code>proxy.conf.json</code> in the root <code>src</code> folder of your Angular project. The content of the file should look like this:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;/api&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:3000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;secure&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>In this example, we are redirecting all requests that start with <code>/api</code> to <code>http://localhost:3000</code>. You can change the target URL to your backend server address.</p>
<h2 id="2-Update-angular-json"><a href="#2-Update-angular-json" class="headerlink" title="2. Update angular.json"></a>2. Update <code>angular.json</code></h2><p>Open the <code>angular.json</code> file in the root of your Angular project. Find the <code>serve</code> section under <code>projects &gt; your-project-name &gt; architect &gt; serve &gt; configuration &gt; development</code>. Add the <code>proxyConfig</code> option with the path to the <code>proxy.conf.json</code> file.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@angular-devkit/build-angular:dev-server&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;production&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;browserTarget&quot;</span><span class="punctuation">:</span> <span class="string">&quot;angular-16:build:production&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;development&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;proxyConfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/proxy.conf.json&quot;</span><span class="punctuation">,</span> <span class="comment">// &lt;--- Add this line</span></span><br><span class="line">      <span class="attr">&quot;browserTarget&quot;</span><span class="punctuation">:</span> <span class="string">&quot;angular-16:build:development&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong> you can also serve the proxy file in <code>ng serve</code> command as below.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng serve --proxy-config src/proxy.conf.json</span><br></pre></td></tr></table></figure>

<h2 id="3-Start-the-development-server"><a href="#3-Start-the-development-server" class="headerlink" title="3. Start the development server"></a>3. Start the development server</h2><p>Now you can start the development server with the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng serve</span><br></pre></td></tr></table></figure>

<h2 id="4-Example-of-backend-server-Express"><a href="#4-Example-of-backend-server-Express" class="headerlink" title="4. Example of backend server(Express)"></a>4. Example of backend server(Express)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sample user information</span></span><br><span class="line"><span class="keyword">const</span> userInfo = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;john.doe@example.com&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define the /api/user route</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(userInfo);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start the server</span></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h2 id="5-Troubleshooting"><a href="#5-Troubleshooting" class="headerlink" title="5. Troubleshooting"></a>5. Troubleshooting</h2><ol>
<li>Make sure your backend server is running on the specified target URL. you can test your api from the browser or using tools like Postman to make sure it works.</li>
<li>Don’t call backend api directly, only calls made to dev server will be proxied.<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetchUser</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="property">get</span>&lt;<span class="built_in">any</span>&gt;(<span class="string">&#x27;/api/user&#x27;</span>); <span class="comment">// OK </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchUser</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="property">get</span>&lt;<span class="built_in">any</span>&gt;(<span class="string">&#x27;http://localhost:4200/api/user&#x27;</span>); <span class="comment">// OK </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchUser</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="property">get</span>&lt;<span class="built_in">any</span>&gt;(<span class="string">&#x27;http://localhost:3000/api/user&#x27;</span>); <span class="comment">// Won&#x27;t work! </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Make sure the path of proxy config file is correct in <code>angular.json</code> file.</li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>proxy</tag>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-router-nested_routes</title>
    <url>/2024/04/17/angular-router-nested-routes/</url>
    <content><![CDATA[<h1 id="Angular中如何实现嵌套路由。"><a href="#Angular中如何实现嵌套路由。" class="headerlink" title="Angular中如何实现嵌套路由。"></a>Angular中如何实现嵌套路由。</h1><p>需求，一个Angular App，根路由包含三个组件，<code>home</code>, <code>product</code>, <code>about</code>。 <code>product</code>组件下有两个子路由<code>product-list</code>和<code>product-detail</code>。如何实现这个需求呢？</p>
<p>首先定义路由文件：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app-routing.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Routes</span>, <span class="title class_">RouterModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HomeComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./home/home.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AboutComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./about/about.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HelpComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./help/help.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AbcComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./home/abc/abc.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DefComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./home/def/def.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeComponent</span>,</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">AboutComponent</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HelpComponent</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;product-list&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">AbcComponent</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;product-detail&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">DefComponent</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes)],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">RouterModule</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppRoutingModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>然后在template文件中定义导航链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/product&quot;</span>&gt;</span>Product<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后在根模块中引入路由模块：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppRoutingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app-routing.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HomeComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./home.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AboutComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./about.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ProductComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./product.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    <span class="title class_">AppComponent</span>,</span><br><span class="line">    <span class="title class_">AboutComponent</span>,</span><br><span class="line">    <span class="title class_">ProductComponent</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span>,</span><br><span class="line">    <span class="title class_">AppRoutingModule</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在<code>product</code>组件的模板文件中定义子路由导航：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- product.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/product/product-list&quot;</span>&gt;</span>Product List<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/product/product-detail&quot;</span>&gt;</span>Product Detail<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>router</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-router-style</title>
    <url>/2024/10/18/angular-router-style/</url>
    <content><![CDATA[<p>This post will show you how to style the active link in Angular Router with <code>routerLinkActive</code> and <code>routerLinkActiveOptions</code>.</p>
<h2 id="routerLinkActive"><a href="#routerLinkActive" class="headerlink" title="routerLinkActive"></a><code>routerLinkActive</code></h2><p><code>routerLinkActive</code> is a directive that adds a CSS class to the element when the link’s route becomes active. </p>
<p>We set a class name <code>active</code> to the active link, and apply a red background color to the active link. When user click the home or about link, the background color of the active link will change to red.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">routerLinkActive</span>=<span class="string">&quot;active&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">routerLinkActive</span>=<span class="string">&quot;active&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="routerLinkActiveOptions"><a href="#routerLinkActiveOptions" class="headerlink" title="routerLinkActiveOptions"></a><code>routerLinkActiveOptions</code></h2><p><code>routerLinkActiveOptions</code> is an input property of <code>routerLinkActive</code> directive that allows you to set the options for the active link. It provides a finer-grained control over the behavior of the active link.</p>
<p>Let’s take a look at the definition of <code>routerLinkActiveOptions</code>:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">routerLinkActiveOptions</span>: &#123;</span><br><span class="line">        <span class="attr">exact</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125; | <span class="title class_">IsActiveMatchOptions</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="keyword">interface</span> <span class="title class_">IsActiveMatchOptions</span> &#123;</span><br><span class="line">    <span class="attr">matrixParams</span>: <span class="string">&#x27;exact&#x27;</span> | <span class="string">&#x27;subset&#x27;</span> | <span class="string">&#x27;ignored&#x27;</span>;</span><br><span class="line">    <span class="attr">queryParams</span>: <span class="string">&#x27;exact&#x27;</span> | <span class="string">&#x27;subset&#x27;</span> | <span class="string">&#x27;ignored&#x27;</span>;</span><br><span class="line">    <span class="attr">paths</span>: <span class="string">&#x27;exact&#x27;</span> | <span class="string">&#x27;subset&#x27;</span>;</span><br><span class="line">    <span class="attr">fragment</span>: <span class="string">&#x27;exact&#x27;</span> | <span class="string">&#x27;ignored&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Scenario-1-exact-true"><a href="#Scenario-1-exact-true" class="headerlink" title="Scenario 1: exact: true"></a>Scenario 1: <code>exact: true</code></h3><p>When <code>exact: true</code>, the active link will only be set when the URL is exactly the same as the link’s URL.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">routerLinkActive</span>=<span class="string">&quot;active&quot;</span> [<span class="attr">routerLinkActiveOptions</span>]=<span class="string">&quot;&#123;exact: true&#125;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">routerLinkActive</span>=<span class="string">&quot;active&quot;</span> [<span class="attr">routerLinkActiveOptions</span>]=<span class="string">&quot;&#123;exact: true&#125;&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>With this settings, when user input <code>/home/123</code> in the browser, the home link will not be active, since <code>/home</code> is not exactly the same as <code>/home/123</code>.</p>
<h3 id="Scenario-2-match-fragment"><a href="#Scenario-2-match-fragment" class="headerlink" title="Scenario 2: match fragment"></a>Scenario 2: match fragment</h3><p>When <code>fragment: &#39;exact&#39;</code>, the active link will only be set when the URL’s fragment is exactly the same as the link’s fragment.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">isActiveMatchOptions</span>: <span class="title class_">IsActiveMatchOptions</span> = &#123;</span><br><span class="line">  <span class="attr">matrixParams</span>: <span class="string">&#x27;exact&#x27;</span>,</span><br><span class="line">  <span class="attr">queryParams</span>: <span class="string">&#x27;exact&#x27;</span>,</span><br><span class="line">  <span class="attr">paths</span>: <span class="string">&#x27;exact&#x27;</span>,</span><br><span class="line">  <span class="attr">fragment</span>: <span class="string">&#x27;exact&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">routerLinkActive</span>=<span class="string">&quot;active&quot;</span> [<span class="attr">routerLinkActiveOptions</span>]=<span class="string">&quot;isActiveMatchOptions&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">routerLinkActive</span>=<span class="string">&quot;active&quot;</span> [<span class="attr">routerLinkActiveOptions</span>]=<span class="string">&quot;isActiveMatchOptions&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>With this settings, when user input <code>/home#section1</code> in the browser, the home link will not be active, since the fragment is not exactly the same as the link’s fragment.</p>
<p>You can also config the <code>matrixParams</code>, <code>queryParams</code>, and <code>paths</code> in the <code>IsActiveMatchOptions</code> object to control the active link behavior.</p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>router</tag>
        <tag>routerlinkactive</tag>
        <tag>routerlinkactiveoptions</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-router-troubleshooting</title>
    <url>/2024/10/20/angular-router-troubleshooting/</url>
    <content><![CDATA[<h2 id="1-Url-changed-but-page-not-loaded"><a href="#1-Url-changed-but-page-not-loaded" class="headerlink" title="1. Url changed but page not loaded"></a>1. Url changed but page not loaded</h2><blockquote>
<p>Reason: The <code>&lt;router-outlet&gt;</code> is not in the html template.<br>Solution: Add the <code>&lt;router-outlet&gt;</code> to the template file.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/product&quot;</span>&gt;</span>Product<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span> <span class="comment">&lt;!-- Add this line --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-ERROR-RuntimeError-NG04002-Cannot-match-any-routes-URL-Segment-‘login’"><a href="#2-ERROR-RuntimeError-NG04002-Cannot-match-any-routes-URL-Segment-‘login’" class="headerlink" title="2. ERROR RuntimeError: NG04002: Cannot match any routes. URL Segment: ‘login’"></a>2. ERROR RuntimeError: NG04002: Cannot match any routes. URL Segment: ‘login’</h2><blockquote>
<p>Reason: Route ‘login’ is not defined in the router configuration.<br>Solution: Add the route to the router configuration.</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app-routes.ts</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;login&#x27;</span>, <span class="attr">component</span>: <span class="title class_">LoginComponent</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Reason 2: You use <code>canMatch</code> guard in route configuration and the guard return false.<br>Solution: Make sure the guard returns true.</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">  <span class="attr">loadComponent</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./product/product.component&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">m</span> =&gt;</span> m.<span class="property">ProductComponent</span>),</span><br><span class="line">  <span class="attr">canMatch</span>: [<span class="title class_">CanMatchGuard</span>], <span class="comment">// &lt;-- CanMatchGuard return false cause this error.</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="3-NG8001-‘router-outlet’-is-not-a-known-element"><a href="#3-NG8001-‘router-outlet’-is-not-a-known-element" class="headerlink" title="3. NG8001: ‘router-outlet’ is not a known element"></a>3. NG8001: ‘router-outlet’ is not a known element</h2><blockquote>
<p>Reason: The <code>RouterModule</code> is not imported in the module.<br>Solution: Import the <code>RouterModule</code> in the module.</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Module based component(app.module.ts)</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>] <span class="comment">// &lt;-- Add this line</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Standalone component</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterOutlet</span>], <span class="comment">// &lt;-- Add this line</span></span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./app.component.scss&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>router</tag>
        <tag>troubleshooting</tag>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-service</title>
    <url>/2024/05/19/angular-service/</url>
    <content><![CDATA[<h2 id="Angular-Service"><a href="#Angular-Service" class="headerlink" title="Angular Service"></a>Angular Service</h2><p>在Angular中，<code>Service</code>是一个可注入的类，用于封装可重用的功能。<code>Service</code>可以在任何<code>Component</code>中使用，也可以用于其他<code>Service</code>。</p>
<p>Service可以完成以下工作，很多和UI无关的操作都可以用Service来完成，这样可以保持<code>Component</code>的简洁。</p>
<ul>
<li>调用API获取后台数据 - API Service</li>
<li>验证用户输入 - Form Validation</li>
<li>日志服务 - Logging Service</li>
<li>数据库操作 - Database Service</li>
</ul>
<h2 id="创建Service"><a href="#创建Service" class="headerlink" title="创建Service"></a>创建Service</h2><p>使用Angular CLI创建Service，下面的CLI命令生成一个<code>OrderService</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng generate service order <span class="comment"># or, ng g s order</span></span><br></pre></td></tr></table></figure>
<p>该命令会在项目根目录下生成一个<code>order.service.ts</code>文件，我们在其中添加一个<code>getOrder</code>方法，用于获取订单信息。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// order.service.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Order</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./Order&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getOrder</span>():<span class="title class_">Promise</span>&lt;<span class="title class_">Order</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(&#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;Order 1&#x27;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Order类型定义如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// order.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，<code>OrderService</code>对应的Class是用<code>@Injectable</code>装饰器修饰的，这样Angular就可以将其注入到<code>Component</code>中。我们还给<code>@Injectable</code>传递了一个参数<code>providedIn: &#39;root&#39;</code>，这表示该Service是一个全局Service，可以在整个Application中使用。</p>
<h2 id="使用Service"><a href="#使用Service" class="headerlink" title="使用Service"></a>使用Service</h2><h3 id="通过构造函数注入Service"><a href="#通过构造函数注入Service" class="headerlink" title="通过构造函数注入Service"></a>通过构造函数注入Service</h3><p>在<code>ProductComponent</code>中使用<code>OrderService</code>，我们需要在<code>ProductComponent</code>的构造函数中注入<code>OrderService</code>，然后调用<code>OrderService</code>的方法。（注意，由于OrderService是<code>providedIn: &#39;root&#39;</code>的，所以使用者不需要在<code>providers</code>数组中声明它）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">OrderService</span>&#125; <span class="keyword">from</span> <span class="string">&quot;../order.service&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Order</span>&#125; <span class="keyword">from</span> <span class="string">&quot;../Order&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="attr">order</span>: <span class="title class_">Order</span> | <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// inject OrderService</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">orderService</span>: <span class="title class_">OrderService</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">order</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">order</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">orderService</span>.<span class="title function_">getOrder</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">order</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过inject函数注入Service"><a href="#通过inject函数注入Service" class="headerlink" title="通过inject函数注入Service"></a>通过<code>inject</code>函数注入Service</h3><p><code>Angular 14</code>引入了一个新的函数<code>inject</code>, 可以用来注入Service，如下: 使用这种方式，我们不必再依赖构造函数的参数，可以在任何地方注入Service。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">OrderService</span>&#125; <span class="keyword">from</span> <span class="string">&quot;../order.service&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  orderService = <span class="title function_">inject</span>(<span class="title class_">OrderService</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="两种注入方式的区别"><a href="#两种注入方式的区别" class="headerlink" title="两种注入方式的区别"></a>两种注入方式的区别</h3><p>那么使用<code>inject</code>函数注入比使用<code>constructor</code>注入有何好处呢？主要体现在继承时，假设我有一个<code>BaseComponent</code>，其构造函数中注入了某个service, 另外一个组件<code>ProductComponent</code>继承自<code>BaseComponent</code>，则<code>ProductComponent</code>的构造函数也需要注入这个<code>service</code>才能调用<code>super</code>方法。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// base.component.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">BaseComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">protected</span> <span class="attr">orderService</span>: <span class="title class_">OrderService</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product.component.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">BaseComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">override</span> <span class="attr">orderService</span>: <span class="title class_">OrderService</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(orderService);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而使用<code>inject</code>函数注入则不需要。父组件的service会自动注入到子组件中。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// base.component.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">BaseComponent</span> &#123;</span><br><span class="line">  orderService = <span class="title function_">inject</span>(<span class="title class_">OrderService</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product.component.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">BaseComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// this.orderService is available here</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">orderService</span>.<span class="title function_">getOrder</span>().<span class="title function_">then</span>(<span class="function"><span class="params">order</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(order);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="providedIn-vs-providers"><a href="#providedIn-vs-providers" class="headerlink" title="providedIn vs providers"></a>providedIn vs providers</h2><p>在Angular中，我们可以使用<code>providedIn</code>或者<code>providers</code>来指定Service的提供范围。<code>providedIn</code>是Angular 6中引入的新特性，用于替代<code>providers</code>。</p>
<p>如果在定义Service时指定了<code>providedIn: &#39;root&#39;</code>，那么Angular会在应用启动时自动将该Service注入到根模块中，这样就可以在整个应用中使用该Service。在使用该Service的Component中，就不必再在<code>providers</code>中声明该Service。</p>
<p>如果定义Service时没有指定<code>providedIn</code>，那么就需要在使用该Service的Component中的<code>providers</code>中声明该Service。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-product&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line"> </span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./product.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./product.component.css&#x27;</span>,</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">OrderService</span>] <span class="comment">// &lt;--- provide service here</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>当Angular找不到一个Service的提供者时，会抛出一个错误，相信大家都见过这个错误，从下面的错误可知，<code>_OrderService</code>没有提供者。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR Error [NullInjectorError]: R3InjectorError(Environment Injector)[_OrderService -&gt; _OrderService]: </span><br><span class="line">  NullInjectorError: No provider <span class="keyword">for</span> _OrderService!</span><br></pre></td></tr></table></figure>

<p>更进一步，我们可以将Service的使用范围限定在某个Component中，这样其他Component就无法使用该Service。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// order.service.ts</span></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="title class_">ProductComponent</span>, <span class="comment">// --- only available in ProductComponent</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>，以上代码无法在应用启动时自动注入Service，使用者仍然需要在<code>providers</code>中声明该Service。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product.component.ts</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-product&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line"> </span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./product.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./product.component.css&#x27;</span>,</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">OrderService</span>] <span class="comment">// &lt;--- provide service here</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>如果在其他Component中尝试使用该Service，会抛出一个错误，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR TypeError: Cannot <span class="built_in">read</span> properties of undefined (reading <span class="string">&#x27;provide&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Service的Scope"><a href="#Service的Scope" class="headerlink" title="Service的Scope"></a>Service的Scope</h2><h3 id="providedIn-‘root’"><a href="#providedIn-‘root’" class="headerlink" title="providedIn: ‘root’"></a>providedIn: ‘root’</h3><p><code>providedIn: &#39;root&#39;</code> - 表示Service是一个全局Service，可以在整个应用中使用。Angular会在应用启动时自动将该Service注入到根模块中。</p>
<h3 id="providedIn-‘platform’"><a href="#providedIn-‘platform’" class="headerlink" title="providedIn: ‘platform’"></a>providedIn: ‘platform’</h3><p><code>providedIn: &#39;platform&#39;</code> - 表示Service是一个平台Service，这种服务可以跨越多个Angular应用实例共享同一个实例，只要这些应用实例运行在同一页面上。这个主要在微前端项目中使用，单体Angular应用用不到。</p>
<h3 id="providedIn-‘any’"><a href="#providedIn-‘any’" class="headerlink" title="providedIn: ‘any’"></a>providedIn: ‘any’</h3><p><code>providedIn: &#39;any&#39;</code> - 这种方式下，每个lazy load的module都会有一个独立的Service实例。而所有的eager load的module共享一个Service实例。</p>
<h2 id="lazy-loading与Service实例"><a href="#lazy-loading与Service实例" class="headerlink" title="lazy loading与Service实例"></a>lazy loading与Service实例</h2><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li><a href="https://angular.dev/api/core/Injectable#providedIn">https://angular.dev/api/core/Injectable#providedIn</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>service</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-run-outside-angular</title>
    <url>/2025/02/12/angular-run-outside-angular/</url>
    <content><![CDATA[<p><code>runOutsideAngular</code>是<code>NgZone</code>的一个方法，它接受一个函数作为参数，该函数会在Angular的<code>NgZone</code>之外执行。这个方法的作用是什么呢？</p>
<p>在<code>runOutsideAngular</code>函数中运行的代码不会触发Angular变更检测。这里的outside并不是真的在Angular之外运行，而是在Angular的Zone之外运行。</p>
<ol>
<li><p>在执行一些性能敏感的操作时，比如处理大量DOM事件或者动画，避免频繁的变更检测导致性能问题。比如，如果有一个画布应用，用户拖动元素的时候，每次<code>mousemove</code>事件都触发变更检测可能不太高效，这时候用runOutsideAngular可以让这些事件处理在Angular Zone外运行，减少不必要的检测。</p>
</li>
<li><p>第三方库的集成,比如使用D3.js或者Three.js这些库，它们可能有自己的渲染循环，这时候用runOutsideAngular可以避免Angular的变更检测干扰这些库的性能。</p>
</li>
<li><p>另外，长时间运行的计算任务，比如Web Worker中的处理，可能也需要用这个方法，确保这些任务不会触发变更检测，直到真正需要更新UI的时候再手动触发。</p>
</li>
</ol>
<p>所有上面这些情况都需要用到<code>runOutsideAngular</code>方法，它可以让我们更好地控制变更检测的时机，避免不必要的性能损耗。</p>
<p>频繁的DOM操作</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">NgZone</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;...&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CanvasComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">ngZone</span>: <span class="title class_">NgZone</span></span>) &#123;</span><br><span class="line">    ngZone.<span class="title function_">runOutsideAngular</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      canvasElement.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 处理鼠标移动，不触发变更检测</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">updateCanvasPosition</span>(event);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>集成第三方库</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">ngZone.<span class="title function_">runOutsideAngular</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> chart = d3.<span class="title function_">select</span>(<span class="string">&#x27;#chart&#x27;</span>);</span><br><span class="line">  chart.<span class="title function_">on</span>(<span class="string">&#x27;zoom&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// D3 的缩放操作，避免 Angular 频繁检查</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">handleZoom</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Web workers或耗时计算</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">ngZone.<span class="title function_">runOutsideAngular</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;data-processor.worker.ts&#x27;</span>);</span><br><span class="line">  worker.<span class="property">onmessage</span> = <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 手动触发变更检测以更新 UI</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ngZone</span>.<span class="title function_">run</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">data</span> = result);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="回到Angular-Zone"><a href="#回到Angular-Zone" class="headerlink" title="回到Angular Zone"></a>回到Angular Zone</h2><p>如果在<code>runOutsideAngular</code>中执行的代码需要更新Angular的UI，可以在需要的时候手动调用<code>ngZone.run</code>方法，把这些代码放回Angular的Zone中，这样就可以触发变更检测了。</p>
<p>这个过程相当于先跳出Angular的Zone，做一些不需要变更检测的操作，然后再手动回到Angular的Zone，触发变更检测。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">ngZone.<span class="title function_">runOutsideAngular</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 长时间运行的计算任务</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="title function_">longRunningTask</span>();</span><br><span class="line">  <span class="comment">// 手动触发变更检测以更新 UI</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ngZone</span>.<span class="title function_">run</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">data</span> = result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>change detection</tag>
        <tag>runoutsideangular</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-signal</title>
    <url>/2025/02/18/angular-signal/</url>
    <content><![CDATA[<h2 id="What’s-Signal"><a href="#What’s-Signal" class="headerlink" title="What’s Signal?"></a>What’s Signal?</h2><p>先看一下官方定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A signal is a wrapper around a value that notifies interested consumers when that value changes. Signals can contain any value, from primitives to complex data structures.</span><br></pre></td></tr></table></figure>
<p>翻译一下：Signal是一个包装器，它包装了一个值，并在该值发生变化时通知感兴趣的消费者。Signal可以包含任何值，从基本类型到复杂的数据结构。据说signal借鉴了<code>solid.js</code>的思想（看<a href="https://fullstackladder.dev/blog/2023/05/07/introduction-angular-signals/">这里</a>），但是我没有考证过。</p>
<p>Signal是Angular中重要的新特性，从xxx版开始引入，至xxx版本稳定，Signal的出现，彻底更改了Angular的变更检测机制，原本基于<code>Zone.js</code>的变更检测机制被<code>Signal</code> + <code>OnPush</code>取代，Signal的出现，使得Angular的性能得到了极大的提升。</p>
<p>今天，我们就来揭开Signal的神秘面纱。</p>
<h2 id="Why-Signal"><a href="#Why-Signal" class="headerlink" title="Why Signal?"></a>Why Signal?</h2><p>首先，我们来探讨一下Angular为什么要引入Signal？</p>
<p>在Signal之前，Angular是基于Zone.js做变更检测的，不可否认Zone.js是一个非常强大的库，但是它也有一些缺点，比如：</p>
<ol>
<li>性能问题：Zone.js的性能并不是很好，特别是在大型项目中，Zone.js的性能问题会暴露的更加明显。除非你使用了<code>OnPush</code>策略，否则Zone.js会在每次异步操作后都会触发变更检测，这样会导致性能问题。</li>
<li>由于Zone.js要monkey patch所有的异步操作（在Angular app启动时），所以Angular项目在启动的时候会有一些性能损失。</li>
<li>有些异步操作无法monkey patch，比如<code>async/await</code>，Angular的解决办法是将其降级到<code>Promise</code>。如今几乎所有浏览器都支持<code>async/await</code>，这种做法显然不太合理。</li>
</ol>
<p>基于以上原因，Angular Team很早就考虑移除Zone.js，但是Zone.js的变更检测机制是Angular的核心，移除Zone.js，意味着Angular无法自动进行变更检测，也就是说变更检测的触发机制由Angular通过Zone.js自动检测，变成了需要用户手动触发，而Signal就是为此而服务的。</p>
<p>通过Signal定义的数据，当它变化时，Angular会自动进行变更检测，这样就不需要Zone.js了，也就解决了上面提到的问题。</p>
<h2 id="signal-语法"><a href="#signal-语法" class="headerlink" title="signal 语法"></a>signal 语法</h2><p>Signal语法非常简单，下面来看看如何定义和使用signal。</p>
<h3 id="定义signal"><a href="#定义signal" class="headerlink" title="定义signal"></a>定义signal</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">signal</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>上面是一个简单的signal定义，它的初始值是0。如果要定义复杂的值，可以使用泛型：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = signal&lt;<span class="title class_">User</span>&gt;(&#123;<span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;); <span class="comment">// generic type</span></span><br></pre></td></tr></table></figure>

<h3 id="读取signal的值"><a href="#读取signal的值" class="headerlink" title="读取signal的值"></a>读取signal的值</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Signals are getter functions - calling them reads their value.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The count is: &#x27;</span> + <span class="title function_">count</span>());</span><br></pre></td></tr></table></figure>

<h3 id="设置signal的值"><a href="#设置signal的值" class="headerlink" title="设置signal的值"></a>设置signal的值</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">count.<span class="title function_">set</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h3 id="更新signal的值（根据前一个值）"><a href="#更新signal的值（根据前一个值）" class="headerlink" title="更新signal的值（根据前一个值）"></a>更新signal的值（根据前一个值）</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Signals can also be updated by passing a function that receives the current value and returns the new value.</span></span><br><span class="line">count.<span class="title function_">update</span>(<span class="function"><span class="params">value</span> =&gt;</span> value + <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h2 id="signal的分类"><a href="#signal的分类" class="headerlink" title="signal的分类"></a>signal的分类</h2><p>Signal有两种类型：<code>Signal</code>和<code>Compute Signal</code>。<code>Signal</code>是指普通的signal，它是可读写的；<code>Compute Signal</code>是指由其他signal计算得到的signal，它是只读的。</p>
<p>上面的count就是普通的Signal，可读写，下面我们看一个compute signal的例子。下面代码中，doubleCount是一个compute signal，它的值是由count的值乘以2得到的。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">signal</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="title function_">count</span>() * <span class="number">2</span>); <span class="comment">// </span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th></th>
<th>Signal</th>
<th>Compute Signal</th>
</tr>
</thead>
<tbody><tr>
<td>读写性</td>
<td>可读写</td>
<td>只读</td>
</tr>
</tbody></table>
<h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><p>我们以一个todo list为例，来看看Signal的使用。首先我们来定义List组件：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// list-item.model.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, signal&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ListItemComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;../list-item/list-item.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ListItem</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;../list-item/list-item.model&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-list&#x27;</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">ListItemComponent</span>],</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./list.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./list.component.scss&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ListComponent</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> listItems = signal&lt;<span class="title class_">ListItem</span>[]&gt;([</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;item 1&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;item 2&#x27;</span>&#125;,</span><br><span class="line">  ])</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addItem</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> nextId = (<span class="variable language_">this</span>.<span class="title function_">listItems</span>().<span class="property">length</span> + <span class="number">1</span>).<span class="title function_">toString</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">listItems</span>.<span class="title function_">set</span>([...<span class="variable language_">this</span>.<span class="title function_">listItems</span>(), &#123;<span class="attr">id</span>: nextId, <span class="attr">name</span>: <span class="string">`item <span class="subst">$&#123;nextId&#125;</span>`</span>&#125;]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">removeItem</span>(<span class="params"><span class="attr">id</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">listItems</span>.<span class="title function_">set</span>(<span class="variable language_">this</span>.<span class="title function_">listItems</span>().<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== id));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们使用<code>readonly listItems = signal&lt;ListItem[]&gt;([...]);</code>定义了一个signal, 它的初始值是一个包含两个ListItem的数组。我们还定义了一个<code>addItem</code>方法，用来添加一个新的ListItem，以及一个<code>removeItem</code>方法，用来删除一个ListItem。<br>signal与普通的js变量不同，它的读取和写入需要特殊的语法。</p>
<ul>
<li>读取signal的值：<code>this.listItems()</code> - 注意不是<code>this.listItems</code>，后面要加括号，有点像函数调用。</li>
<li>写入signal的值：<code>this.listItems.set(newValue)</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--list.component.html--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>list works!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  @for (item of listItems(); track item.id) &#123;</span><br><span class="line">    <span class="tag">&lt;<span class="name">app-list-item</span> [<span class="attr">id</span>]=<span class="string">&quot;item.id&quot;</span> [<span class="attr">name</span>]=<span class="string">&quot;item.name&quot;</span> (<span class="attr">removeItem</span>)=<span class="string">&quot;removeItem($event)&quot;</span> /&gt;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;add-button&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;addItem()&quot;</span>&gt;</span>Add Item<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后我们来定义ListItem组件：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// list-item.model.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, input, output&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-list-item&#x27;</span>,</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;list-item&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;div class=&quot;list-item-content&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;id: &#123;&#123;id()&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;name: &#123;&#123;name()&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;div class=&quot;list-item-actions&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;button (click)=&quot;onRemoveItem(id())&quot;&gt;Remove&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;list-item.component.scss&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ListItemComponent</span> &#123;</span><br><span class="line">  id = input.<span class="property">required</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">  name = <span class="title function_">input</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 注意，这是新的input语法。</span></span><br><span class="line"></span><br><span class="line">  removeItem = output&lt;<span class="built_in">string</span>&gt;(); <span class="comment">// 这是新的output语法。</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">onRemoveItem</span>(<span class="params"><span class="attr">id</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">removeItem</span>.<span class="title function_">emit</span>(id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Compute-Signal"><a href="#Compute-Signal" class="headerlink" title="Compute Signal"></a>Compute Signal</h2><p><code>Compute Signal</code>是指依赖于其他Signal计算得到的Signal，它是只读的，当依赖的signal值变化时，compute signal的值也会相应变化。下面是一个例子：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">count</span>: <span class="title class_">WritableSignal</span>&lt;<span class="built_in">number</span>&gt; = <span class="title function_">signal</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="attr">doubleCount</span>: <span class="title class_">Signal</span>&lt;<span class="built_in">number</span>&gt; = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="title function_">count</span>() * <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p><code>Computed signal</code>有两个重要特性：</p>
<ol>
<li>lazy load - 直到你第一次读取它的值时，它才会计算。</li>
<li>memoization - 第一次读取后缓存值，当依赖的signal值没有变化时，它不会重新计算，而是直接读取缓存的值。当依赖的signal值变化时，重新计算并缓存。</li>
</ol>
<h2 id="比较函数"><a href="#比较函数" class="headerlink" title="比较函数"></a>比较函数</h2><p>signal是如何比较新旧值的呢？signal使用<code>Object.is</code>来比较新旧值，如果新旧值相等，那么signal不会触发变更检测。对于js对象来说，<code>Object.is</code>相当于引用（地址）比较，也就是说只有两个对象引用相等时，<code>Object.is</code>才会返回true。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> c = a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(a, b)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(a, c)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>创建signal时，你可以指定一个比较函数来改变默认的比较方式，比如使用<code>lodash</code>的<code>isEqual</code>函数来进行深比较，这样当两个对象的值相等时，signal也会触发变更检测。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> data = <span class="title function_">signal</span>([<span class="string">&#x27;test&#x27;</span>], &#123;<span class="attr">equal</span>: _.<span class="property">isEqual</span>&#125;);</span><br><span class="line"><span class="comment">// Even though this is a different array instance, the deep equality</span></span><br><span class="line"><span class="comment">// function will consider the values to be equal, and the signal won&#x27;t</span></span><br><span class="line"><span class="comment">// trigger any updates.</span></span><br><span class="line">data.<span class="title function_">set</span>([<span class="string">&#x27;test&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li><a href="https://angular.dev/guide/signals">https://angular.dev/guide/signals</a></li>
<li><a href="https://fullstackladder.dev/blog/2023/05/07/introduction-angular-signals/">https://fullstackladder.dev/blog/2023/05/07/introduction-angular-signals/</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>input</tag>
        <tag>output</tag>
        <tag>signal</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-signal-effect</title>
    <url>/2025/03/07/angular-signal-effect/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>今天来聊一聊Angular中的<code>effect</code>, 使用过React框架的同学对<code>effect</code>应该都不陌生，不过，Angular中的<code>effect</code>和React中的<code>effect</code>有所不同。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The current count is: <span class="subst">$&#123;count()&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="effect函数特点"><a href="#effect函数特点" class="headerlink" title="effect函数特点"></a><code>effect</code>函数特点</h2><p><code>effect</code>函数有如下特点：</p>
<ol>
<li><code>effect</code>函数至少运行一次，无论<code>effect</code>函数中是否读取<code>signal</code>，也无论<code>signal</code>的值是否发生变化。</li>
<li>如果<code>effect</code>函数中读取了<code>signal</code>，那么当<code>signal</code>的值发生变化时，<code>effect</code>函数会再次运行。</li>
<li>如果<code>effect</code>函数中没有读取<code>signal</code>，那么<code>effect</code>函数只会运行一次。当signal变化时，<code>effect</code>函数不会再次运行。</li>
<li><code>effect</code>函数中不要更新<code>signal</code>的值，否则会导致死循环。（因为signal更新—&gt;effect运行—&gt;更新signal—&gt;effect运行…）</li>
</ol>
<p>比如下面这个<code>effect</code>函数，只会运行一次，因为<code>effect</code>函数中没有读取<code>count</code>。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is a effect function&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>比如下面这个<code>effect</code>函数，会导致死循环。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  count.<span class="title function_">set</span>(<span class="title function_">count</span>() + <span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>effect</code>函数只能运行在injection context中（比如构造函数体内）, 如果<code>effect</code>函数的使用位置不对（比如放到了ngOnInit函数中），那么Angular会报如下错误：关于injection context的更多信息，可以查看<a href="https://zdd.github.io/2025/02/18/angular-di-injection-context/">这里</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">core.mjs:6643 ERROR RuntimeError: NG0203: effect() can only be used within an injection context such as a constructor, a factory <span class="keyword">function</span>, a field initializer, or a <span class="keyword">function</span> used with `runInInjectionContext`. Find more at https://angular.dev/errors/NG0203</span><br></pre></td></tr></table></figure>

<h2 id="effect函数的使用场景"><a href="#effect函数的使用场景" class="headerlink" title="effect函数的使用场景"></a><code>effect</code>函数的使用场景</h2><p>Effects are rarely needed in most application code, but may be useful in specific circumstances. Here are some examples of situations where an effect might be a good solution:</p>
<ul>
<li>Logging data being displayed and when it changes, either for analytics or as a debugging tool.</li>
<li>Keeping data in sync with window.localStorage.</li>
<li>Adding custom DOM behavior that can’t be expressed with template syntax.</li>
<li>Performing custom rendering to a <code>&lt;canvas&gt;</code>, charting library, or other third party UI library.</li>
</ul>
<h2 id="Destroy-effect"><a href="#Destroy-effect" class="headerlink" title="Destroy effect"></a>Destroy effect</h2><p>effect函数会在组件销毁时自动销毁，不需要手动清理。当然effect函数返回<code>EffectRef</code>对象，可以手动调用<code>destroy</code>方法销毁effect函数。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> effectRef = <span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is a effect function&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">effectRef.<span class="title function_">destroy</span>();</span><br></pre></td></tr></table></figure>

<h2 id="untrack模式"><a href="#untrack模式" class="headerlink" title="untrack模式"></a>untrack模式</h2><p><a href="https://angular.dev/guide/signals#reading-without-tracking-dependencies">https://angular.dev/guide/signals#reading-without-tracking-dependencies</a></p>
<h2 id="cleanup-function"><a href="#cleanup-function" class="headerlink" title="cleanup function."></a>cleanup function.</h2><p><code>effect</code>函数中可以定义一个清理函数<code>onCleanup</code>，当<code>effect</code>函数被销毁时，清理函数会被调用。下面的代码演示了如何使用<code>onCleanup</code>函数清理定时器。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">effect</span>(<span class="function">(<span class="params">onCleanup</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="title function_">currentUser</span>();</span><br><span class="line">  <span class="keyword">const</span> timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`1 second ago, the user became <span class="subst">$&#123;user&#125;</span>`</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onCleanup</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://angular.dev/guide/signals#effects">https://angular.dev/guide/signals#effects</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>signal</tag>
        <tag>effect</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular-standalone-component</title>
    <url>/2023/09/02/angular-standalone-component/</url>
    <content><![CDATA[<h1 id="Angular-Standalone-Component"><a href="#Angular-Standalone-Component" class="headerlink" title="Angular Standalone Component"></a>Angular Standalone Component</h1><p><code>standalone component</code>是Angular 14的一个新特性，它可以让我们在不创建module的情况下创建一个component。注意：<code>Directive</code>和<code>Pipe</code>也可以是standalone的。</p>
<h2 id="创建一个standalone-component"><a href="#创建一个standalone-component" class="headerlink" title="创建一个standalone component"></a>创建一个standalone component</h2><p>组件代码如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>, <span class="comment">// 添加这一句，表示这是一个standalone component。</span></span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">CommonModule</span>],</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;lifecycle-order&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./order.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./order.component.less&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OrderComponent</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>standalone component和module的交互使用有如下两种情况。</p>
<h2 id="standalone-component引入其他module"><a href="#standalone-component引入其他module" class="headerlink" title="standalone component引入其他module"></a>standalone component引入其他module</h2><p>如果standalone component需要引入其他module，那么需要在<code>imports</code>属性中引入其他module，比如上面代码中引入的<code>CommonModule</code>。</p>
<p>注意：只有standalone component才能引入其他module，<code>普通的component(non-standalone component)不能引入其他module</code>。所以只有standalone component才能使用<code>imports</code>属性。</p>
<p>如果你遇到如下报错，那么说明你在非standalone组件中使用了<code>imports</code>属性，这是不允许的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error NG2010: <span class="string">&#x27;imports&#x27;</span> is only valid on a component that is standalone.</span><br></pre></td></tr></table></figure>

<p>这种情况经常发生在，ComponentA(非独立组件)想在template中使用ComponentB(独立组件)，那么应该在ComponentA所在的module中的imports属性中引入ComponentB。</p>
<h2 id="module引入standalone-component"><a href="#module引入standalone-component" class="headerlink" title="module引入standalone component"></a>module引入standalone component</h2><p>如果一个module要使用一个standalone component，那么<code>不再</code>需要在<code>declarations</code>属性中声明这个standalone component，只需要在<code>imports</code>属性中引入这个standalone component所在的module即可。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    <span class="title class_">AppComponent</span>,</span><br><span class="line">    <span class="comment">// OrderComponent, // no need to declare standalone component here</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span>,</span><br><span class="line">    <span class="title class_">OrderComponent</span>, <span class="comment">// imports standalone component here</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="lazy-load-module"><a href="#lazy-load-module" class="headerlink" title="lazy load module"></a>lazy load module</h2><p>在NgModel时代，我们可以使用<code>loadChildren</code>来实现懒加载，比如下面的<code>product module</code>：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>, <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./product/product.module&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">m</span> =&gt;</span> m.<span class="property">ProductModule</span>)&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AboutComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;**&#x27;</span>, <span class="attr">component</span>: <span class="title class_">NotFoundComponent</span>&#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h2 id="Lazy-load-standalone-component"><a href="#Lazy-load-standalone-component" class="headerlink" title="Lazy load standalone component"></a>Lazy load standalone component</h2><p>在Angular 14中，我们可以使用<code>loadComponent</code>来实现懒加载standalone component，比如下面的<code>order component</code>：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;order&#x27;</span>, <span class="attr">loadComponent</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./order/order.component&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">m</span> =&gt;</span> m.<span class="property">OrderComponent</span>)&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AboutComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;**&#x27;</span>, <span class="attr">component</span>: <span class="title class_">NotFoundComponent</span>&#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<h3 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h3><ul>
<li>lazy load module: <code>loadChildren</code></li>
<li>lazy load standalone component: <code>loadComponent</code></li>
</ul>
<h2 id="Bootstrap-standalone-component"><a href="#Bootstrap-standalone-component" class="headerlink" title="Bootstrap standalone component"></a>Bootstrap standalone component</h2><p>See <a href="https://zdd.github.io/2024/04/20/angular-bootstrap-standalone-component/">here</a></p>
<h1 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h1><p><a href="https://angular.io/guide/standalone-components">Angular standalone component</a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>standalone</tag>
        <tag>component</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-router</title>
    <url>/2024/04/18/angular-router/</url>
    <content><![CDATA[<p>本文讲解一下如何在<code>Angular</code>项目中使用<code>router</code>。</p>
<h2 id="路由配置（NgModule-based-apps）"><a href="#路由配置（NgModule-based-apps）" class="headerlink" title="路由配置（NgModule based apps）"></a>路由配置（NgModule based apps）</h2><h3 id="创建一个Angular项目"><a href="#创建一个Angular项目" class="headerlink" title="创建一个Angular项目"></a>创建一个Angular项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng new angular-router</span><br></pre></td></tr></table></figure>
<p>在创建过程中，<code>Angular CLI</code>会询问是否使用router，选择<code>Yes</code>。</p>
<h3 id="创建三个组件。"><a href="#创建三个组件。" class="headerlink" title="创建三个组件。"></a>创建三个组件。</h3><p>使用<code>WebStorm</code>或者<code>VSCode</code>打开上面创建的项目，呼出<code>Terminal</code>，执行以下命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng generate component home</span><br><span class="line">ng generate component product</span><br><span class="line">ng generate component about</span><br></pre></td></tr></table></figure>
<p>然后打开<code>app-routing.module.ts</code>文件，创建路由。注意，path不能以<code>/</code>开头。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app-routing.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NgModule</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">RouterModule</span>, <span class="title class_">Routes</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HomeComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./home/home.component&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ProductComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./product/product.component&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">AboutComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./about/about.component&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add Routes here</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">redirectTo</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">pathMatch</span>: <span class="string">&#x27;full&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ProductComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AboutComponent</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes)],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">RouterModule</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppRoutingModule</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加导航链接"><a href="#添加导航链接" class="headerlink" title="添加导航链接"></a>添加导航链接</h3><p>打开<code>app.component.html</code>文件，添加导航链接。注意，<code>routerLink</code>的值要和<code>path</code>一致。如果是根路由，可以使用<code>/</code>。文档末尾的<code>router-outlet</code>是用来显示路由对应的组件的。当点击某一个链接的时候，Angular会找到对应的组件，并将其加载到<code>router-outlet</code>中。所以<code>router-outlet</code>相当于一个占位符，与html中的<code>slot</code>类似。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Angular Router Demo<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/product&quot;</span>&gt;</span>Product<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>在<code>Terminal</code>中执行以下命令。打开浏览器，输入<code>http://localhost:4200</code>，就可以看到导航链接了。依次点击页面上的Home，Product，About链接，可以看到页面跳转了，并且浏览器中的地址也发生了变化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng serve</span><br></pre></td></tr></table></figure>

<h3 id="基于ROUTES的路由配置"><a href="#基于ROUTES的路由配置" class="headerlink" title="基于ROUTES的路由配置"></a>基于<code>ROUTES</code>的路由配置</h3><p><code>ROUTES</code>是Angular内置的一个Injection Token，在一些比较老的Angular app中，也有使用<code>ROUTES</code>来配置路由的，现举例如下：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    <span class="title class_">AppComponent</span>,</span><br><span class="line">    <span class="title class_">ProductComponent</span>,</span><br><span class="line">    <span class="title class_">ParentComponent</span>,</span><br><span class="line">    <span class="title class_">ChildComponent</span>,</span><br><span class="line">    <span class="title class_">HomeComponent</span>,</span><br><span class="line">    <span class="title class_">AboutComponent</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span>,</span><br><span class="line">    <span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>([]), <span class="comment">// This line is must!</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: <span class="variable constant_">ROUTES</span>,</span><br><span class="line">      <span class="attr">useFactory</span>: <span class="function">() =&gt;</span> [</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ProductComponent</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AboutComponent</span>&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">multi</span>: <span class="literal">true</span>, <span class="comment">// This line is must!</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>useFactory</code>后面跟的是一个工厂函数，这个函数我们直接返回一个路由数组。<br>使用这种方法后，我们就不需要路由文件<code>app-routing.module.ts</code>了，可以将它删除掉。</p>
<h2 id="路由配置-Standalone-apps"><a href="#路由配置-Standalone-apps" class="headerlink" title="路由配置(Standalone apps)"></a>路由配置(Standalone apps)</h2><p>基于<code>standalone</code>组件的app，路由配置稍有不同。</p>
<ol>
<li>在<code>main.ts</code>文件中启动app时会传递<code>appConfig</code>进去，我们的路由配置就在这个<code>appConfig</code>中。</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;bootstrapApplication&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;appConfig&#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.config&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">AppComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">AppComponent</span>, appConfig)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在<code>app.config.ts</code>文件中通过<code>provideRouter</code>函数提供路由。</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;provideRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;routes&#125; <span class="keyword">from</span> <span class="string">&#x27;./app.routes&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">appConfig</span>: <span class="title class_">ApplicationConfig</span> = &#123;</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="title function_">provideRouter</span>(routes),</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在<code>app.routes.ts</code>文件中定义路由。</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.routes.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ProductComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AboutComponent</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>可见，路由的结构是十分清晰的。</p>
<h2 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h2><p>如果我们在浏览器中随意输入一个不存在的路径，比如<code>http://localhost:4200/abc</code>，会发现页面是空白的。这是因为我们没有处理404页面。我们可以在<code>app-routing.module.ts</code>中添加一个<code>**</code>路径，用来匹配所有路径，然后将其重定向到一个<code>404</code>组件。</p>
<h3 id="创建404页面组件"><a href="#创建404页面组件" class="headerlink" title="创建404页面组件"></a>创建404页面组件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng generate component not-found</span><br></pre></td></tr></table></figure>

<h3 id="修改404页面内容"><a href="#修改404页面内容" class="headerlink" title="修改404页面内容"></a>修改404页面内容</h3><p>打开<code>not-found.component.html</code>，输入以下内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>404: Not Found!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="添加404路由"><a href="#添加404路由" class="headerlink" title="添加404路由"></a>添加404路由</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app-routing.module.ts</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ProductComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AboutComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;**&#x27;</span>, <span class="attr">component</span>: <span class="title class_">NotFoundComponent</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>此时，如果在浏览器里面输入一个不存在的路径，比如<code>http://localhost:4200/abc</code>，则会显示<code>404: Not Found!</code>。</p>
<h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>如果我们想要在<code>product</code>组件中添加两个子路由，<code>product-a</code>和<code>product-a</code>，可以在<code>app-routing.module.ts</code>中添加如下代码。</p>
<h3 id="新建两个组件"><a href="#新建两个组件" class="headerlink" title="新建两个组件"></a>新建两个组件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng generate component product-a</span><br><span class="line">ng generate component product-b</span><br></pre></td></tr></table></figure>

<h3 id="在product页面添加router-outlet"><a href="#在product页面添加router-outlet" class="headerlink" title="在product页面添加router-outlet"></a>在product页面添加router-outlet</h3><p>这个<code>router-outlet</code>用来显示ProductA和ProductB对应的的组件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- product.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>product works!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="添加子路由"><a href="#添加子路由" class="headerlink" title="添加子路由"></a>添加子路由</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span>&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">    <span class="comment">// pathMatch: &#x27;full&#x27;, 注意这一句不能写！否则子路由无法匹配，会导致404！</span></span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">ProductComponent</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;<span class="attr">path</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ProductAComponent</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">path</span>: <span class="string">&#x27;b&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ProductBComponent</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AboutComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;about-me&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AboutmeComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;**&#x27;</span>, <span class="attr">component</span>: <span class="title class_">NotFoundComponent</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>此时，如果在浏览器中输入<code>http://localhost:4200/product/a</code>，会显示<code>ProductA works!</code>，输入<code>http://localhost:4200/product/b</code>，会显示<code>ProductB works!</code>。同时也会显示<code>product works!</code>，因为<code>product.component.html</code>中除了有<code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>。还有<code>&lt;p&gt;product works!&lt;/p&gt;</code>。</p>
<h2 id="严格匹配"><a href="#严格匹配" class="headerlink" title="严格匹配"></a>严格匹配</h2><p>上面的例子中，product的path不能使用严格匹配选项<code>pathMath: &#39;full&#39;</code>，否则子路由无法匹配，会导致404。这是为什么呢？<br>因为匹配子路由的时候，必须先匹配父级路由，而由于父级路由使用了<code>pathMatch: &#39;full&#39;</code>，所以无法匹配，父级路由无法匹配导致子路由的匹配无法进行，所以导致了404！</p>
<p>如果你非要使用<code>pathMatch: &#39;full&#39;</code>，可以如下定义路由表。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span>&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">    <span class="attr">pathMatch</span>: <span class="string">&#x27;full&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">ProductComponent</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;product/a&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ProductAComponent</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;product/b&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ProductBComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AboutComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;about-me&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AboutmeComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;**&#x27;</span>, <span class="attr">component</span>: <span class="title class_">NotFoundComponent</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>这样就可以使用<code>pathMatch: &#39;full&#39;</code>了。但是这么做也有一个弊端，就是a和b从逻辑上讲不再是product子路由了。而是平级路由，只不过路径中包含了字符串<code>product</code>而已。这会导致product页面的内容无法显示。通常父级路由都会显示一些公共信息，差异化的信息放到子路由中。如果你使用了<code>pathMatch: &#39;full&#39;</code>，则会导致父级页面内容无法显示。请酌情使用此方法。</p>
<p>注意，如果你使用了嵌套路由，或者lazy load, 请谨慎使用<code>pathMatch: &#39;full&#39;</code>。详情请看这里：<a href="https://dev.to/raj_sekhar/angular-route-pathmatch-full-when-to-not-use-4mb1">detail</a></p>
<h2 id="路由拆分"><a href="#路由拆分" class="headerlink" title="路由拆分"></a>路由拆分</h2><p>如果product中的子路由越来越多，都放到一个文件中会显得很臃肿。这时候我们可以将子路由拆分到单独的文件中。将子路由定义到product组件中。</p>
<h3 id="基于NgModule的路由拆分"><a href="#基于NgModule的路由拆分" class="headerlink" title="基于NgModule的路由拆分"></a>基于NgModule的路由拆分</h3><p>进入<code>product</code>文件夹，执行以下命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng generate module product-routing --flat</span><br><span class="line">ng generate module product --flat</span><br></pre></td></tr></table></figure>
<p><code>--flat</code>选项表示不创建文件夹。</p>
<p>在<code>product-routing.module.ts</code>中添加如下代码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product-routing.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NgModule</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">CommonModule</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ProductBComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;../product-b/product-b.component&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ProductAComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;../product-a/product-a.component&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ProductComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./product.component&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">RouterModule</span>, <span class="title class_">Routes</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@angular/router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 注意这里不能写product，因为`app-routing.module.ts`中已经定义了product路由, 并且指定了path: &#x27;product&#x27;</span></span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">ProductComponent</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;<span class="attr">path</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ProductAComponent</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">path</span>: <span class="string">&#x27;b&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ProductBComponent</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">CommonModule</span>,</span><br><span class="line">    <span class="title class_">RouterModule</span>.<span class="title function_">forChild</span>(routes),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">RouterModule</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductRoutingModule</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>product.module.ts文件中添加如下代码，导入<code>ProductRoutingModule</code>。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NgModule</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">CommonModule</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ProductComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./product.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ProductRoutingModule</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./product-routing.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ProductAComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;../product-a/product-a.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ProductBComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;../product-b/product-b.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    <span class="title class_">ProductComponent</span>,</span><br><span class="line">    <span class="title class_">ProductAComponent</span>,</span><br><span class="line">    <span class="title class_">ProductBComponent</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">CommonModule</span>,</span><br><span class="line">    <span class="title class_">ProductRoutingModule</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductModule</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改app-routing.module.ts<br>注意，这里必须使用loadChildren, 否则子路由无法显示。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app-routing.module.ts</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>, <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./product/product.module&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">m</span> =&gt;</span> m.<span class="property">ProductModule</span>)&#125;,</span><br><span class="line">  <span class="comment">// ... </span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>这样就可以将product中的子路由拆分到单独的文件中了。</p>
<h3 id="基于Standalone组件的路由拆分"><a href="#基于Standalone组件的路由拆分" class="headerlink" title="基于Standalone组件的路由拆分"></a>基于Standalone组件的路由拆分</h3><p>如果你的组件是standalone的，没有对应的module文件，那么可以使用如下方法拆分路由。注意<code>loadChildren</code>中加载的是<code>路由文件</code>，而不是module文件，也不是component文件。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.routers.ts</span></span><br><span class="line">&#123;<span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>, <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./product/product.routers&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">routes</span>) =&gt;</span> routes.<span class="property">productRouters</span>)&#125;,</span><br></pre></td></tr></table></figure>

<p>在Product组件文件夹下新建路由文件<code>product.routers.ts</code>，添加如下代码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product.routers.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Routes</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@angular/router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ProductComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./product.component&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ProductDetailComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;../product-detail/product-detail.component&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">productRouters</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ProductComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;product-detail&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ProductDetailComponent</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>注意这种方式下，点击product-detail链接时，会显示product-detail组件。<code>product</code>组件的内容不会显示。</p>
<p>如果要显示<code>product</code>组件的内容，需要将<code>product-detail</code>组件定义为<code>product</code>组件的子路由。如下所示。这种方式在导航时很方便，比如左侧是导航菜单，点击不同菜单显示不同的组件。对于整个页面来说，导航菜单一直显示，而右侧的内容会随着导航的变化而变化。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product.routers.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Routes</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@angular/router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ProductComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./product.component&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ProductDetailComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;../product-detail/product-detail.component&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">productRouters</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ProductComponent</span>, <span class="attr">children</span>: [</span><br><span class="line">      &#123;<span class="attr">path</span>: <span class="string">&#x27;product-detail&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ProductDetailComponent</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="监听路由变化"><a href="#监听路由变化" class="headerlink" title="监听路由变化"></a>监听路由变化</h2><p>如果我们想要在路由变化的时候做一些事情，比如打印路由信息，可以在<code>app.component.ts</code>中添加如下代码。此时会监听整个app所有路由的变化，如果只想监控某个组件的路由变化，那么可以在该组件中添监听代码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">router</span>: <span class="title class_">Router</span></span>) &#123;&#125;</span><br><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">router</span>.<span class="property">events</span>.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Route:&#x27;</span>, event);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>路由变化时会依次触发以下事件：</p>
<ul>
<li>NavigationStart</li>
<li>RoutesRecognized</li>
<li>GuardsCheckStart</li>
<li>ChildActivationStart</li>
<li>ActivationStart</li>
<li>GuardsCheckEnd</li>
<li>ResolveStart</li>
<li>ResolveEnd</li>
<li>ActivationEnd</li>
<li>ChildActivationEnd</li>
<li>NavigationEnd</li>
</ul>
<p>我们一般在<code>NavigationEnd</code>事件中做一些事情。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">router.<span class="property">events</span>.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (event <span class="keyword">instanceof</span> <span class="title class_">NavigationEnd</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：<p style="color:#d7520e;">即使使用了<code>skipLocationChange</code>选项，也可以通过以上方法获取完整的路由信息，因为<code>skipLocationChange</code>只是不改变浏览器地址栏的URL，但是路由信息还是会变化的。<p></p>
<h2 id="获取路由信息"><a href="#获取路由信息" class="headerlink" title="获取路由信息"></a>获取路由信息</h2><p>如果想要获取路由对应的url，路由中的参数等信息，可以在组件中注入<a href="https://angular.io/api/router/ActivatedRoute">ActivatedRoute</a>服务。</p>
<h3 id="使用ActivatedRoute-snapshot获取路由信息"><a href="#使用ActivatedRoute-snapshot获取路由信息" class="headerlink" title="使用ActivatedRoute.snapshot获取路由信息"></a>使用<code>ActivatedRoute.snapshot</code>获取路由信息</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.routers.ts</span></span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;product/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ProductDetailComponent</span> &#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- product.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is product: &#123;&#123;id&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product-detail.component.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductDetailComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span> = -<span class="number">1</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">activatedRoute</span>: <span class="title class_">ActivatedRoute</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="variable language_">this</span>.<span class="property">activatedRoute</span>.<span class="property">snapshot</span>.<span class="property">paramMap</span>.<span class="title function_">get</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (id) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">id</span> = <span class="built_in">parseInt</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用ActivatedRoute-params订阅路由变化"><a href="#使用ActivatedRoute-params订阅路由变化" class="headerlink" title="使用ActivatedRoute.params订阅路由变化"></a>使用<code>ActivatedRoute.params</code>订阅路由变化</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product-detail.component.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductDetailComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span> = -<span class="number">1</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">activatedRoute</span>: <span class="title class_">ActivatedRoute</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">activatedRoute</span>.<span class="property">params</span>.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">id</span> = <span class="built_in">parseInt</span>(params.<span class="property">id</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p style="color:#d7520e;">snapshop和params的区别:</p>

<ul>
<li><code>snapshot</code>只会获取一次路由信息，它是静态的，获取之后就不会再变化了。</li>
<li><code>params</code>会订阅路由变化，当路由变化时，会重新获取路由信息。</li>
</ul>
<p style="color:#d7520e;">params和queryParams的区别：</p>

<ul>
<li>params: 获取路由中的参数，比如<code>/product/1</code>中的<code>1</code>。</li>
<li>queryParams: 获取路由中的查询参数，比如<code>/product?id=1&amp;name=zdd</code>中的<code>id</code>, <code>name</code>。</li>
<li>matrixParameters: 获取路由中的矩阵参数，比如<code>/product;id=1;name=zdd</code>中的<code>id</code>, <code>name</code>。</li>
</ul>
<p>queryParams和matrixParameters的区别</p>
<ul>
<li>queryParams: 使用<code>?</code>开头，使用<code>&amp;</code>分隔每组参数，比如<code>/product?id=1&amp;name=zdd</code>。</li>
<li>matrixParameters: 使用<code>;</code>开头，使用<code>;</code>分隔每组参数，比如<code>/product;id=1;name=zdd</code>。</li>
<li>两者都以<code>=</code>分隔键值对。</li>
</ul>
<h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><p>待整理</p>
<h2 id="路由传递数据"><a href="#路由传递数据" class="headerlink" title="路由传递数据"></a>路由传递数据</h2><h3 id="定义Router时发送数据"><a href="#定义Router时发送数据" class="headerlink" title="定义Router时发送数据"></a>定义Router时发送数据</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.routers.ts</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>, </span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">ProductComponent</span>, </span><br><span class="line">  <span class="attr">data</span>: &#123;<span class="attr">category</span>: <span class="string">&#x27;digital&#x27;</span>&#125; <span class="comment">// send data to component</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="组件中接收数据"><a href="#组件中接收数据" class="headerlink" title="组件中接收数据"></a>组件中接收数据</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product.component.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">activatedRoute</span>: <span class="title class_">ActivatedRoute</span></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;category&#125; = <span class="variable language_">this</span>.<span class="property">activatedRoute</span>.<span class="property">snapshot</span>.<span class="property">data</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(category);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// or </span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">activatedRoute</span>.<span class="property">data</span>.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;category&#125; = data;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(category);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="navigation时发送数据"><a href="#navigation时发送数据" class="headerlink" title="navigation时发送数据"></a><code>navigation</code>时发送数据</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([<span class="string">&#x27;/product&#x27;</span>], &#123;<span class="attr">state</span>: &#123;<span class="attr">category</span>: <span class="string">&#x27;digital&#x27;</span>&#125;&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="组件中接收数据-1"><a href="#组件中接收数据-1" class="headerlink" title="组件中接收数据"></a>组件中接收数据</h3><p>After Angular 16, must call this on constructor or you will get null, see <a href="https://stackoverflow.com/questions/54891110/router-getcurrentnavigation-always-returns-null">here</a> for detail</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product.component.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">router</span>: <span class="title class_">Router</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">getCurrentNavigation</span>()?.<span class="property">extras</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123;category&#125; = state || &#123;<span class="attr">category</span>: <span class="string">&#x27;none&#x27;</span>&#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(category);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="定义routerLink时发送数据"><a href="#定义routerLink时发送数据" class="headerlink" title="定义routerLink时发送数据"></a>定义<code>routerLink</code>时发送数据</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;[&#x27;/product&#x27;]&quot;</span> [<span class="attr">state</span>]=<span class="string">&quot;&#123;category: &#x27;digital&#x27;&#125;&quot;</span>&gt;</span>Product<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="组件中接收数据-2"><a href="#组件中接收数据-2" class="headerlink" title="组件中接收数据"></a>组件中接收数据</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product.component.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">router</span>: <span class="title class_">Router</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">getCurrentNavigation</span>()?.<span class="property">extras</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123;category&#125; = state || &#123;<span class="attr">category</span>: <span class="string">&#x27;none&#x27;</span>&#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(category);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="保持Fragment不丢失"><a href="#保持Fragment不丢失" class="headerlink" title="保持Fragment不丢失"></a>保持Fragment不丢失</h2><p>Url中<code>#</code>后面紧跟的内容为<code>Fragment</code>，比如<code>http://localhost:4200/book#b123</code>中的<code>b123</code>就是<code>Fragment</code>。</p>
<p>首先在Component中定义Fragment变量</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  bookId = <span class="string">&#x27;b123&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在routerLink中添加Fragment"><a href="#在routerLink中添加Fragment" class="headerlink" title="在routerLink中添加Fragment"></a>在routerLink中添加Fragment</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;[&#x27;book&#x27;, &#123;&#125;]&quot;</span> [<span class="attr">fragment</span>]=<span class="string">&quot;bookId&quot;</span>&gt;</span>Book<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在navigate中添加Fragment"><a href="#在navigate中添加Fragment" class="headerlink" title="在navigate中添加Fragment"></a>在navigate中添加Fragment</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([<span class="string">&#x27;book&#x27;</span>], &#123;<span class="attr">fragment</span>: <span class="variable language_">this</span>.<span class="property">bookId</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>激活后路由为：<code>http://localhost:4200/book#b123</code></p>
<h3 id="保持Fragment不变"><a href="#保持Fragment不变" class="headerlink" title="保持Fragment不变"></a>保持Fragment不变</h3><p>当我们从一个带Fragment的路由跳转到其他路由时（比如辅助路由），Fragment会丢失。如果我们想要保持Fragment不变，可以在navigate中添加<code>preserveFragment</code>选项。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([&#123;<span class="attr">outlets</span>: &#123;<span class="attr">primary</span>: <span class="string">&#x27;book/book1/book2&#x27;</span>, <span class="attr">detail</span>: <span class="string">&#x27;book-detail&#x27;</span>&#125;&#125;, &#123;<span class="attr">preserveFragment</span>: <span class="literal">true</span>&#125;]);</span><br></pre></td></tr></table></figure>

<p>此时路由变为：<code>http://localhost:4200/book(detail:book-detail//list:book-list)#b123</code> - 注意Fragment在url末尾。</p>
<p>注意关闭辅助路由时，也要添加此选项，否则Fragment仍会丢失。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([&#123;<span class="attr">outlets</span>: &#123;<span class="attr">list</span>: <span class="literal">null</span>&#125;&#125;], &#123;<span class="attr">preserveFragment</span>: <span class="literal">true</span>&#125;); </span><br></pre></td></tr></table></figure>

<p>此时路由变为：<code>http://localhost:4200/book(detail:book-detail)#b123</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([&#123;<span class="attr">outlets</span>: &#123;<span class="attr">detail</span>: <span class="literal">null</span>&#125;&#125;], &#123;<span class="attr">preserveFragment</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure>

<p>此时路由变为：<code>http://localhost:4200/book#b123</code></p>
<h2 id="路由三要素"><a href="#路由三要素" class="headerlink" title="路由三要素"></a>路由三要素</h2><ol>
<li>路由对应的路径及组件 - Routes配置文件</li>
<li>路由显示的位置 - Outlet</li>
<li>路由的触发方式<ul>
<li>点击触发，比如<code>routerLink</code>, <code>button</code>等。</li>
<li>编程触发，比如<code>navigate</code>， <code>navigateByUrl</code>等。</li>
<li>动态加载，比如动态创建组件并加载。</li>
</ul>
</li>
</ol>
<h2 id="待商榷："><a href="#待商榷：" class="headerlink" title="待商榷："></a>待商榷：</h2><ol>
<li>没有module时如何拆分router文件？ - 可以直接使用路由module文件，不需要组件对应的module文件。目前standalone组件无法做到路由文件的拆分，必须有module支持。</li>
<li></li>
</ol>
<p><a href="https://www.angulararchitects.io/en/blog/routing-and-lazy-loading-with-standalone-components/">https://www.angulararchitects.io/en/blog/routing-and-lazy-loading-with-standalone-components/</a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>router</tag>
        <tag>routes</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-ssr</title>
    <url>/2024/08/18/angular-ssr/</url>
    <content><![CDATA[<h1 id="Angular-Server-Side-Rendering-For-New-Project"><a href="#Angular-Server-Side-Rendering-For-New-Project" class="headerlink" title="Angular Server Side Rendering For New Project"></a>Angular Server Side Rendering For New Project</h1><h2 id="Step-by-step-guide"><a href="#Step-by-step-guide" class="headerlink" title="Step by step guide"></a>Step by step guide</h2><p>Start from Angular 17, SSR was enabled by default when you create a new Angular project. To create a new Angular project, run the following command.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng new angular-ssr</span><br></pre></td></tr></table></figure>
<p>Press <code>Y</code> on keyboard when prompted with the following question, then Angular will generate the boilerplate code for you.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Do you want to <span class="built_in">enable</span> Server-Side Rendering (SSR) and Static Site Generation (SSG/Prerendering)? (y/N)</span><br></pre></td></tr></table></figure>
<p>Compared with the traditional pure client-side rendering project, the Angular SSR project has the following differences:</p>
<h2 id="Project-structure-changes-for-SSR"><a href="#Project-structure-changes-for-SSR" class="headerlink" title="Project structure changes for SSR"></a>Project structure changes for SSR</h2><p>The following new files were added to the project:</p>
<ol>
<li>The <code>server.ts</code> file is added to the project root directory.</li>
<li>The <code>src/main.server.ts</code> file is added to the project source directory.</li>
<li>The <code>src/app/app.config.server.ts</code> file is added to the project source directory.</li>
</ol>
<p>The following changes were made to the existing files:</p>
<ol>
<li>The <code>package.json</code> file has a new <code>server</code> script.<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">   <span class="attr">&quot;serve:ssr:angular-ssr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node dist/angular-ssr/server/server.mjs&quot;</span> <span class="comment">// &lt;--- new</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
<li>The <code>angular.json</code> file has a new <code>server</code> configuration under the <code>architect | build | options</code> section.<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/main.server.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;prerender&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ssr&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;entry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;server.ts&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
<li>The <code>tsconfig.app.json</code> file <code>file</code> section is updated to include the <code>src/main.server.ts</code> file.<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line"> <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">   <span class="string">&quot;src/main.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="string">&quot;src/main.server.ts&quot;</span><span class="punctuation">,</span> <span class="comment">// &lt;--- new</span></span><br><span class="line">   <span class="string">&quot;server.ts&quot;</span> <span class="comment">// &lt;--- new</span></span><br><span class="line"> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>The <code>src/app/app.config.ts</code> file add <code>provideClientHydration</code> in <code>providers</code>.<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">appConfig</span>: <span class="title class_">ApplicationConfig</span> = &#123;</span><br><span class="line">   <span class="attr">providers</span>: [<span class="title function_">provideRouter</span>(routes), <span class="title function_">provideClientHydration</span>()]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Run-app"><a href="#Run-app" class="headerlink" title="Run app"></a>Run app</h2><h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><h2 id="How-to-check-if-page-is-rendered-by-server-or-client"><a href="#How-to-check-if-page-is-rendered-by-server-or-client" class="headerlink" title="How to check if page is rendered by server or client"></a>How to check if page is rendered by server or client</h2><ol>
<li>Open the page in Chrome browser.</li>
<li>Right-click on the page and select <code>View page source</code>.</li>
<li>Check the body tag, if the body tag is empty, it means the page is rendered in client side, the following page is a CSR page, since the body tag only contains <code>&lt;app-root&gt;&lt;/app-root&gt;</code>. that’s for the client side rendering.<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/@vite/client&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">title</span>&gt;</span>Angular SSR In Depth<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css?family=Roboto:300,400,500<span class="symbol">&amp;amp;</span> display=swap&quot;</span>   <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;mat-typography&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">app-root</span>&gt;</span><span class="tag">&lt;/<span class="name">app-root</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;polyfills.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>    <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml">&lt;/  script&gt;<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Angular-SSR-for-existing-project"><a href="#Angular-SSR-for-existing-project" class="headerlink" title="Angular SSR for existing project"></a>Angular SSR for existing project</h1><p>If you have an existing project and want to enable SSR, you can follow the steps below.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng add @angular/ssr</span><br></pre></td></tr></table></figure>
<p>This command will add the necessary files and configurations to your project to enable SSR.</p>
<ol>
<li><p>Create <code>src/main.server.ts</code> file.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; bootstrapApplication &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; config &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.config.server&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">bootstrap</span> = (<span class="params"></span>) =&gt; <span class="title function_">bootstrapApplication</span>(<span class="title class_">AppComponent</span>, config);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> bootstrap;</span><br></pre></td></tr></table></figure></li>
<li><p>Create <code>src/app/app.config.server.ts</code> file.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mergeApplicationConfig, <span class="title class_">ApplicationConfig</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; provideServerRendering &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-server&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; appConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.config&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">serverConfig</span>: <span class="title class_">ApplicationConfig</span> = &#123;</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    <span class="title function_">provideServerRendering</span>()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config = <span class="title function_">mergeApplicationConfig</span>(appConfig, serverConfig);</span><br></pre></td></tr></table></figure></li>
<li><p>Create <code>server.ts</code> file.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">APP_BASE_HREF</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommonEngine</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/ssr&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; dirname, join, resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;node:path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> bootstrap <span class="keyword">from</span> <span class="string">&#x27;./src/main.server&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The Express app is exported so that it can be used by serverless Functions.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">app</span>(<span class="params"></span>): express.<span class="property">Express</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> server = <span class="title function_">express</span>();</span><br><span class="line">  <span class="keyword">const</span> serverDistFolder = <span class="title function_">dirname</span>(<span class="title function_">fileURLToPath</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>));</span><br><span class="line">  <span class="keyword">const</span> browserDistFolder = <span class="title function_">resolve</span>(serverDistFolder, <span class="string">&#x27;../browser&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> indexHtml = <span class="title function_">join</span>(serverDistFolder, <span class="string">&#x27;index.server.html&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> commonEngine = <span class="keyword">new</span> <span class="title class_">CommonEngine</span>();</span><br><span class="line"></span><br><span class="line">  server.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  server.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, browserDistFolder);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Example Express Rest API endpoints</span></span><br><span class="line">  <span class="comment">// server.get(&#x27;/api/**&#x27;, (req, res) =&gt; &#123; &#125;);</span></span><br><span class="line">  <span class="comment">// Serve static files from /browser</span></span><br><span class="line">  server.<span class="title function_">get</span>(<span class="string">&#x27;**&#x27;</span>, express.<span class="title function_">static</span>(browserDistFolder, &#123;</span><br><span class="line">    <span class="attr">maxAge</span>: <span class="string">&#x27;1y&#x27;</span>,</span><br><span class="line">    <span class="attr">index</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// All regular routes use the Angular engine</span></span><br><span class="line">  server.<span class="title function_">get</span>(<span class="string">&#x27;**&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; protocol, originalUrl, baseUrl, headers &#125; = req;</span><br><span class="line">    commonEngine</span><br><span class="line">      .<span class="title function_">render</span>(&#123;</span><br><span class="line">        bootstrap,</span><br><span class="line">        <span class="attr">documentFilePath</span>: indexHtml,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;protocol&#125;</span>://<span class="subst">$&#123;headers.host&#125;</span><span class="subst">$&#123;originalUrl&#125;</span>`</span>,</span><br><span class="line">        <span class="attr">publicPath</span>: browserDistFolder,</span><br><span class="line">        <span class="attr">providers</span>: [&#123; <span class="attr">provide</span>: <span class="variable constant_">APP_BASE_HREF</span>, <span class="attr">useValue</span>: baseUrl &#125;],</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">html</span>) =&gt;</span> res.<span class="title function_">send</span>(html))</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="title function_">next</span>(err));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> server;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> port = process.<span class="property">env</span>[<span class="string">&#x27;PORT&#x27;</span>] || <span class="number">4000</span>;</span><br><span class="line">  <span class="comment">// Start up the Node server</span></span><br><span class="line">  <span class="keyword">const</span> server = <span class="title function_">app</span>();</span><br><span class="line">  server.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Node Express server listening on http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">run</span>();</span><br></pre></td></tr></table></figure></li>
<li><p>Update <code>angular.json</code> file. </p>
<p>Add the following in <code>architect | build | options</code> section.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/main.server.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;prerender&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;ssr&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;entry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;server.ts&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Update <code>tsconfig.app.json</code> file.</p>
</li>
<li><p>Update <code>src/app/app.config.ts</code> file.</p>
</li>
<li><p>Update <code>package.json</code> file.</p>
</li>
</ol>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li><a href="https://www.youtube.com/watch?v=U1MP4uCuUVI">https://www.youtube.com/watch?v=U1MP4uCuUVI</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>ssr</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular template reference variables</title>
    <url>/2023/07/22/angular-template-reference-variables/</url>
    <content><![CDATA[<h1 id="Angular-template-reference-variables"><a href="#Angular-template-reference-variables" class="headerlink" title="Angular template reference variables"></a>Angular template reference variables</h1><p>Template reference variables - 模板引用变量，是指在模板中声明的变量，它可以在模板中的任何地方使用，比如在模板中的表单元素中，可以使用模板引用变量来获取表单元素的值。模板引用变量的名字以<code>#</code>开头，比如<code>#name</code>，<code>#age</code>等。模板引用变量的作用域是模板，不能在组件中使用。</p>
<p>模板引用变量可以引用如下内容</p>
<ul>
<li>A DOM element in a template</li>
<li>a directive or component</li>
<li>a TemplateRef from an ng-template</li>
<li>a web component</li>
</ul>
<h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><p>模板引用变量以<code>#</code>开头，比如下面的代码中，<code>#phone</code>就是一个模板引用变量, 它引用了<code>&lt;input&gt;</code>元素。就是说，我们可以通过<code>#phone</code>这个模板引用变量来获取<code>&lt;input&gt;</code>元素的值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> #<span class="attr">phone</span> <span class="attr">placeholder</span>=<span class="string">&quot;phone number&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="引用DOM元素"><a href="#引用DOM元素" class="headerlink" title="引用DOM元素"></a>引用DOM元素</h2><p>下面的代码使用<code>#phone</code>变量引用了<code>input</code>元素，在点击button的时候，获取input元素的值，并调用相应的方法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> #<span class="attr">phone</span> <span class="attr">placeholder</span>=<span class="string">&quot;phone number&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;callPhone(phone.value)&quot;</span>&gt;</span>Call<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果想在页面上显示input中输入的值，可以使用双向绑定，如下所示：注意这里添加了<code>ngModel</code>，没有这个的话，<code>phone.value</code>是获取不到值的，因为初始的时候输入框并并没有值，而且input值改变的时候，phone.value也无法感知更新。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ngModel</span> #<span class="attr">phone</span> <span class="attr">placeholder</span>=<span class="string">&quot;phone number&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;phone.value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>引用DOM元素应该是模板变量最常用的场景了，有了它，我们就可以不用再使用<code>document.getElementById()</code>这样的方法来获取DOM元素了。</p>
<h2 id="使用模板变量创建ViewChild"><a href="#使用模板变量创建ViewChild" class="headerlink" title="使用模板变量创建ViewChild"></a>使用模板变量创建<code>ViewChild</code></h2><p>模板引用变量可以用来创建<code>ViewChild</code>，比如下面的代码中，<code>#phone</code>就是一个模板引用变量，它引用了<code>&lt;input&gt;</code>元素，然后我们就可以在组件中使用<code>@ViewChild</code>装饰器来获取<code>&lt;input&gt;</code>元素。</p>
<p>template.html代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> #<span class="attr">phone</span> <span class="attr">placeholder</span>=<span class="string">&quot;phone number&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>component.ts代码</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ViewChild</span>(<span class="string">&#x27;phone&#x27;</span>) <span class="attr">phone</span>: <span class="title class_">ElementRef</span>;</span><br></pre></td></tr></table></figure>
<p>这样我们就可以在组件中调用input元素的方法，比如点击某个按钮时，让input元素获取焦点。</p>
  <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">focusPhone</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">phone</span>.<span class="property">nativeElement</span>.<span class="title function_">focus</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="引用Component"><a href="#引用Component" class="headerlink" title="引用Component"></a>引用Component</h2><p>模板引用变量可以引用组件，比如下面的代码中，<code>#child</code>就是一个模板引用变量，它引用了<code>&lt;child-component&gt;</code>组件，然后我们就可以在模板中使用<code>#child</code>这个模板引用变量来调用<code>&lt;child-component&gt;</code>组件中的方法和属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child-component</span> #<span class="attr">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;child.childMethod()&quot;</span>&gt;</span>Call child method<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="引用Directive"><a href="#引用Directive" class="headerlink" title="引用Directive"></a>引用Directive</h2><p><code>Directive</code>中有一个属性：<code>exportAs</code>, 这个属性对应的值，就是模板引用变量中可以使用的名字。<br>下面是一个自定Directive，用来给某一段文字添加背景色。</p>
  <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Directive</span>, <span class="title class_">ElementRef</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[appHighlight]&#x27;</span>,</span><br><span class="line">  <span class="attr">exportAs</span>: <span class="string">&#x27;highlightDirective&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HighlightDirective</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">element</span>: <span class="title class_">ElementRef</span></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">nativeElement</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;background-color: yellow;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setBackgroundColor</span>(<span class="params"><span class="attr">color</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">nativeElement</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">`background-color: <span class="subst">$&#123;color&#125;</span>;`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是使用这个自定义指令的component对应的模板代码：页面加载后，文字的背景色为黄色，点击按钮后，文字的背景色变为红色。注意<code>#highlight=&quot;highlightDirective&quot;</code>这句话，<code>highlight</code>是模板引用变量，<code>highlightDirective</code>是<code>Directive</code>中<code>exportAs</code>属性对应的值。这样就把模板变量和其引用的指令关联起来了。</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">appHighlight</span> #<span class="attr">highlight</span>=<span class="string">&quot;highlightDirective&quot;</span>&gt;</span>test-component works!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;highlight.setBackgroundColor(&#x27;red&#x27;)&quot;</span>&gt;</span>Reset color<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="引用TemplateRef"><a href="#引用TemplateRef" class="headerlink" title="引用TemplateRef"></a>引用TemplateRef</h2><p>模板引用变量可以引用<code>&lt;ng-template&gt;</code>元素，这种情形经常出现在条件渲染中，就是根据不同的条件渲染不同的内容，比如下面的代码中，当<code>condition</code>为<code>true</code>时，渲染<code>thenBlock</code>，当<code>condition</code>为<code>false</code>时，渲染<code>elseBlock</code>。这里面的<code>thenBlock</code>和<code>elseBlock</code>引用的都是<code>&lt;ng-template&gt;</code>元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;condition; then thenBlock else elseBlock&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">thenBlock</span>&gt;</span>Content to render when condition is true.<span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">elseBlock</span>&gt;</span>Content to render when condition is false.<span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="引用Web-Component"><a href="#引用Web-Component" class="headerlink" title="引用Web Component"></a>引用Web Component</h2><p>模板引用变量可以引用Web Component，比如下面的代码中，<code>#wc</code>就是一个模板引用变量，它引用了<code>&lt;my-custom-element&gt;</code>元素，然后我们就可以在模板中使用<code>#wc</code>这个模板引用变量来调用<code>&lt;my-custom-element&gt;</code>元素中的方法和属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-custom-element</span> #<span class="attr">wc</span>&gt;</span><span class="tag">&lt;/<span class="name">my-custom-element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;wc.webComponentMethod()&quot;</span>&gt;</span>Call web component method<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>template</tag>
        <tag>variables</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-styles</title>
    <url>/2025/02/16/angular-styles/</url>
    <content><![CDATA[<p>今天这篇主要讨论一下Angular框架如何处理样式。</p>
<h2 id="Angular如何隔离样式"><a href="#Angular如何隔离样式" class="headerlink" title="Angular如何隔离样式"></a>Angular如何隔离样式</h2><p>因为Angular是组件话的，每一个Component有自己的样式文件，那么Angular是如何保证多个组件之间的样式不会互相影响的呢？</p>
<h2 id="Angular的样式封装"><a href="#Angular的样式封装" class="headerlink" title="Angular的样式封装"></a>Angular的样式封装</h2><p>Angular中有三种样式封装方式：</p>
<ul>
<li><code>Emulated</code>：默认的样式封装方式，通过给每个组件的样式添加一个唯一的属性，来实现样式的隔离。</li>
<li><code>ShadowDom</code>：使用原生的Shadow DOM来实现样式的隔离。</li>
<li><code>None</code>：不对样式进行封装，直接使用全局样式。<br>关于这三种样式封装方式的详细介绍，可以参考<a href="https://zdd.github.io/2024/11/30/angular-view-encapsulation/">angular-view-encapsulation</a>。</li>
</ul>
<h2 id="ng-deep"><a href="#ng-deep" class="headerlink" title="ng::deep"></a>ng::deep</h2><h2 id="如何处理全局样式"><a href="#如何处理全局样式" class="headerlink" title="如何处理全局样式"></a>如何处理全局样式</h2>]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>styles</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-test-fixture</title>
    <url>/2024/09/03/angular-test-fixture/</url>
    <content><![CDATA[<h2 id="What’s-Fixture"><a href="#What’s-Fixture" class="headerlink" title="What’s Fixture?"></a>What’s Fixture?</h2><p>先解释一下<code>fixture</code>这个单词，它的意思是固定设施，比如室内的浴缸或抽水马桶。当然这里指的是测试中的固定设施，也就是我们要测试的组件。在Angular中，我们可以通过<code>TestBed</code>来创建一个组件的<code>fixture</code>，然后对这个<code>fixture</code>进行测试。</p>
<p>通常来说，<code>fixture</code>都是在<code>beforeEach</code>中创建。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;ProductComponent&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">component</span>: <span class="title class_">ProductComponent</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">fixture</span>: <span class="title class_">ComponentFixture</span>&lt;<span class="title class_">ProductComponent</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">imports</span>: [<span class="title class_">ProductComponent</span>] <span class="comment">// import standalone component</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">compileComponents</span>();</span><br><span class="line"></span><br><span class="line">    fixture = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">ProductComponent</span>); <span class="comment">// create fixture</span></span><br><span class="line">    component = fixture.<span class="property">componentInstance</span>;</span><br><span class="line">    fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should create&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(component).<span class="title function_">toBeTruthy</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="fixture-detectChanges"><a href="#fixture-detectChanges" class="headerlink" title="fixture.detectChanges()"></a>fixture.detectChanges()</h2><p><code>fixture.detectChanges()</code>是用来触发组件的变更检测的，也就是说，当我们对组件的状态进行了修改之后，我们需要调用<code>fixture.detectChanges()</code>来通知Angular进行变更检测，以便更新视图。<br>如果你的测试中包含对UI的检测，那么你就需要调用<code>fixture.detectChanges()</code>。否则不需要。<br>来，举个例子！</p>
<p>We have a product component which just display the product name as ‘Computer’, and when user click the <code>Change product name</code> button, we’ll update the product name to ‘Phone’.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-product&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./product.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./product.component.css&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductComponent</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;Computer&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">changeName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Phone&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;product-name&quot;</span>&gt;</span>Product name: &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;changeName()&quot;</span>&gt;</span>Change product name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Does this test case work?</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should have name as Computer&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  component.<span class="title function_">changeName</span>();</span><br><span class="line">  fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">name</span>).<span class="title function_">toEqual</span>(<span class="string">&#x27;Phone&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Yes, it works, but, we don’t need to call <code>fixture.detectChanges()</code> here, because we are testing the component’s property <code>name</code> change directly, not the UI changes.</p>
<p>Does the following test case work?</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should change name&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  component.<span class="title function_">changeName</span>();</span><br><span class="line">  <span class="keyword">const</span> compiled = fixture.<span class="property">nativeElement</span>;</span><br><span class="line">  <span class="title function_">expect</span>(compiled.<span class="title function_">querySelector</span>(<span class="string">&#x27;#product-name&#x27;</span>).<span class="property">textContent</span>).<span class="title function_">toContain</span>(<span class="string">&#x27;Phone&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>No, it doesn’t work, because, you call <code>component.changeName()</code> to change the product name, but you didn’t call <code>fixture.detectChanges()</code> to trigger the change detection and update the view. so the product name on page is still ‘Computer’.</p>
<p>We can call <code>fixture.detectChanges()</code> after <code>component.changeName()</code> to fix this issue.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should change name&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  component.<span class="title function_">changeName</span>();</span><br><span class="line">  fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line">  <span class="keyword">const</span> compiled = fixture.<span class="property">nativeElement</span>;</span><br><span class="line">  <span class="title function_">expect</span>(compiled.<span class="title function_">querySelector</span>(<span class="string">&#x27;#product-name&#x27;</span>).<span class="property">textContent</span>).<span class="title function_">toContain</span>(<span class="string">&#x27;Phone&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="fixture-whenStable"><a href="#fixture-whenStable" class="headerlink" title="fixture.whenStable()"></a>fixture.whenStable()</h2><p><code>fixture.whenStable()</code>是用来等待异步任务完成的，为了使用这个函数，我们给product component添加一个异步任务，比如通过<code>setTimeout</code>来模拟一个异步任务。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;Keyboard&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">updateName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getData</span>() <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;updateName()&quot;</span>&gt;</span>Update name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来，我们测试一下<code>updateName</code>方法。下面这个test case,没有调用<code>fixture.detectChanges()</code>，但是仍然可以通过测试，为什么呢？</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should update name&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  component.<span class="title function_">updateName</span>();</span><br><span class="line">  fixture.<span class="title function_">whenStable</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(component.<span class="property">name</span>).<span class="title function_">toEqual</span>(<span class="string">&#x27;Keyboard&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> compiled = fixture.<span class="property">nativeElement</span>;</span><br><span class="line">    <span class="title function_">expect</span>(compiled.<span class="title function_">querySelector</span>(<span class="string">&#x27;#product-name&#x27;</span>).<span class="property">textContent</span>).<span class="title function_">toContain</span>(<span class="string">&#x27;Keyboard&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>其实，这个test case是有问题的，它根本没有通过测试，虽然我们使用<code>async</code>标记了测试方法，但是<code>async</code>要配合<code>await</code>使用，而不是<code>then</code>，实际上，这里的<code>then</code>根本没有执行！</p>
<p>为了修复这个test case，我们可以将<code>async</code>删除。（<strong>这里有待验证！！！</strong>）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should update name&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> component.<span class="title function_">updateName</span>();</span><br><span class="line">  fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line">  fixture.<span class="title function_">whenStable</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(component.<span class="property">name</span>).<span class="title function_">toEqual</span>(<span class="string">&#x27;Keyboard&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> compiled = fixture.<span class="property">nativeElement</span>;</span><br><span class="line">    <span class="title function_">expect</span>(compiled.<span class="title function_">querySelector</span>(<span class="string">&#x27;#product-name&#x27;</span>).<span class="property">textContent</span>).<span class="title function_">toContain</span>(<span class="string">&#x27;Keyboard&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>其实，这里根本就不需要<code>fixture.whenStable()</code>，因为我们使用了<code>await</code>，它会等待异步任务完成，所以我们可以直接这样写：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should update name&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> component.<span class="title function_">updateName</span>();</span><br><span class="line">  fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">name</span>).<span class="title function_">toEqual</span>(<span class="string">&#x27;Keyboard&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> compiled = fixture.<span class="property">nativeElement</span>;</span><br><span class="line">  <span class="title function_">expect</span>(compiled.<span class="title function_">querySelector</span>(<span class="string">&#x27;#product-name&#x27;</span>).<span class="property">textContent</span>).<span class="title function_">toContain</span>(<span class="string">&#x27;Keyboard&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>那到底什么时候需要使用<code>fixture.whenStable()</code>呢？当你测试的方法里面包含异步操作，但是这个方法又不返回Promise的时候，你就需要使用<code>fixture.whenStable()</code>来等待异步任务完成。</p>
<p>思考题：<br>下面的代码能通过测试吗？</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should update name&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  fixture.<span class="title function_">whenStable</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(<span class="literal">false</span>).<span class="title function_">toBe</span>(<span class="literal">true</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>答案是：能！因为<code>fixture.whenStable()</code>里面的代码根本就没有执行，如何修复？</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should update name&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> fixture.<span class="title function_">whenStable</span>();</span><br><span class="line">  <span class="title function_">expect</span>(<span class="literal">false</span>).<span class="title function_">toBe</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>还可以在<code>fixture.whenStable()</code>前面加上<code>return</code>,因为Jest中如果返回一个Promise，Jest会等待这个Promise执行完成。详情看<a href="https://zdd.github.io/2024/07/16/jest-test-async-functions/">这里</a></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should update name&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> fixture.<span class="title function_">whenStable</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(<span class="literal">false</span>).<span class="title function_">toBe</span>(<span class="literal">true</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><h3 id="fixture-detectChanges-1"><a href="#fixture-detectChanges-1" class="headerlink" title="fixture.detectChanges()"></a><code>fixture.detectChanges()</code></h3><ol>
<li>This function will trigger change detection.</li>
<li>Change detection will updates the view.</li>
<li>If you test UI changes, you need to call <code>fixture.detectChanges()</code>.</li>
</ol>
<h3 id="fixture-whenStable-1"><a href="#fixture-whenStable-1" class="headerlink" title="fixture.whenStable()"></a><code>fixture.whenStable()</code></h3><ol>
<li>This function will wait for the asynchronous tasks to complete.</li>
<li>You should use this function in <code>async</code> function.</li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>detectchanges</tag>
        <tag>test</tag>
        <tag>fixture</tag>
        <tag>whenstable</tag>
      </tags>
  </entry>
  <entry>
    <title>Test async task with angular and jest</title>
    <url>/2023/11/21/angular-test-async-task-with-angular-and-jest/</url>
    <content><![CDATA[<h1 id="Test-async-task-with-Angular-Jest"><a href="#Test-async-task-with-Angular-Jest" class="headerlink" title="Test async task with Angular + Jest"></a>Test async task with Angular + Jest</h1><p>在前端开发中，Unit Test是很重要的一个环节，而异步任务测试又是Unit Test不可避免的一个环节。本文将介绍如何使用Angular + Jest来测试异步任务。</p>
<h2 id="待测试函数返回一个Promise"><a href="#待测试函数返回一个Promise" class="headerlink" title="待测试函数返回一个Promise"></a>待测试函数返回一个Promise</h2><p>这是最简单的情况了，直接使用<code>async/await</code>即可。</p>
<p><strong>待测函数</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getPromise</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试代码</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test getPromise&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> service.<span class="title function_">getPromise</span>();</span><br><span class="line">  <span class="title function_">expect</span>(result).<span class="title function_">toBe</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在实际项目中不会有这么简单的情况，大部分都是一个async函数，里面await了其他异步操作，比如下面代码中的handleData，我们该如何测试它呢？</p>
<p><strong>待测函数</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">handleData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getData</span>();</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    data,</span><br><span class="line">    <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先来分析一下，<code>handleData</code>是一个async方法，而async方法一定返回一个Promise(如果函数实际返回值不是Promise，那么async方法会用Promise包裹该返回值)，所以我们还是可以直接使用<code>async/await</code>来测试。</p>
<p><strong>测试代码</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test handle data&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> component.<span class="title function_">handleData</span>();</span><br><span class="line">  <span class="title function_">expect</span>(data.<span class="property">data</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>最新版的Angular推荐使用<code>waitForAsync</code>来测试异步任务，所以我们也可以使用waitForAsync来测试。(注意<code>waitForAsync</code>中不能使用await。)</p>
<p><strong>测试代码</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test handle data&#x27;</span>, <span class="title function_">waitForAsync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  component.<span class="title function_">handleData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(data.<span class="property">data</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<p>当然也可以使用<code>fakeAsync</code>来测试，这个情景使用<code>fakeAsync</code>来测试有点大材小用，仅作示例。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test handle data&#x27;</span>, <span class="title function_">fakeAsync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  service.<span class="title function_">handleData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(data.<span class="property">data</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">flush</span>();</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<p>注意不要忘记<code>flush()</code>操作，否则会产生如下错误：<code>Error: 1 timer(s) still in the queue.</code></p>
<h2 id="待测试函数包含异步操作，但是没有返回Promise。"><a href="#待测试函数包含异步操作，但是没有返回Promise。" class="headerlink" title="待测试函数包含异步操作，但是没有返回Promise。"></a>待测试函数包含异步操作，但是没有返回Promise。</h2><p>以上情况还是有些简单，实际应用中，经常是一个函数中间夹杂着某些异步操作用来获取数据，然后对数据进行处理，最后可能也不返回Promise，对于这种情况，我们应该使用<code>fakeAsync</code>来测试。<br>fakeAsync内部有三个方法可以控制异步操作</p>
<ul>
<li>tick: 让时间快进</li>
<li>flush: 让所有异步操作立即执行</li>
<li>flushMicrotasks: 让所有微任务立即执行</li>
</ul>
<table>
<thead>
<tr>
<th>name</th>
<th>作用</th>
<th>使用场景</th>
</tr>
</thead>
<tbody><tr>
<td>tick</td>
<td>用于控制时间流逝</td>
<td>想要精细控制每个timer的执行时机，tick在执行前会清空micro task队列，如果代码中有promise，tick之后，promise都会执行完毕。</td>
</tr>
<tr>
<td>flush</td>
<td>执行所有异步操作，不论是macro task还是micro task</td>
<td>这个最常用，无脑操作，将所有异步操作执行完，比如setTimeout和promise等，flush之后就可以expect了</td>
</tr>
<tr>
<td>flushMicrotasks</td>
<td>这个只执行micro task，对于前端来说，就是promise了，不会影响timer</td>
<td>如果代码中没有用到timer，可以使用这个。</td>
</tr>
</tbody></table>
<p>下面看几个列子，分别讲解一下如何使用这三个方法来进行测试。</p>
<h3 id="待测试函数只包含Macro-Task"><a href="#待测试函数只包含Macro-Task" class="headerlink" title="待测试函数只包含Macro Task"></a>待测试函数只包含Macro Task</h3><p><strong>待测函数</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">updateValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">10</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">11</span>;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">12</span>;</span><br><span class="line">  &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试代码</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test updateValue&#x27;</span>, <span class="title function_">fakeAsync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  component.<span class="title function_">updateValue</span>();</span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">num</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="title function_">tick</span>(<span class="number">100</span>); <span class="comment">// tick the timer by 100ms</span></span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">num</span>).<span class="title function_">toBe</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="title function_">tick</span>(<span class="number">100</span>); <span class="comment">// tick the timer by 100ms again.</span></span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">num</span>).<span class="title function_">toBe</span>(<span class="number">12</span>);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<p>来分析一下以上测试代码，首先我们调用了<code>updateValue</code>方法，然后期望<code>num</code>的值为10，因为<code>updateValue</code>中有两个timer，所以我们需要调用两次<code>tick</code>，第一次调用<code>tick</code>，让时间快进100ms，这时候第一个timer会执行，<code>num</code>的值变为11，然后再调用一次<code>tick</code>，让时间再快进100ms，这时候第二个timer会执行，<code>num</code>的值变为12。</p>
<p>当然了，如果你不想测试中间过程，而只想测试最终的结果，也可以使用Jest提供的<code>useFakeTimer</code>方法。</p>
<p><strong>测试代码</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test updateValue&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  jest.<span class="title function_">useFakeTimers</span>();</span><br><span class="line">  component.<span class="title function_">updateValue</span>();</span><br><span class="line">  jest.<span class="title function_">runAllTimers</span>();</span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">num</span>).<span class="title function_">toBe</span>(<span class="number">12</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>useFakeTimers</code>会将所有的timer替换成一个fake的timer，然后调用<code>runAllTimers</code>，会让所有的timer立即执行，这样就可以直接测试最终结果了。</p>
<h3 id="待测试函数只包含Micro-Task"><a href="#待测试函数只包含Micro-Task" class="headerlink" title="待测试函数只包含Micro Task"></a>待测试函数只包含Micro Task</h3><p><strong>待测函数</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">updateValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">num</span> = value;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试代码</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test updateValue&#x27;</span>, <span class="title function_">fakeAsync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  component.<span class="title function_">updateValue</span>();</span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">num</span>).<span class="title function_">toBe</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="title function_">flushMicrotasks</span>(); <span class="comment">// 这里用tick()或者flush()也可以。但是flushMicrotasks更加精确。</span></span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">num</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<p>上述代码中，首先调用了<code>updateValue</code>方法，然后期望<code>num</code>的值为0，因为<code>updateValue</code>中有一个promise，所以我们需要调用<code>flushMicrotasks</code>，让所有的micro task立即执行，这时候<code>num</code>的值变为10。</p>
<p>当然上例中的<code>flushMicrotasks</code>也可以替换成<code>flush</code>，因为<code>flush</code>会让所有的异步操作立即执行，包括macro task和micro task。也可以使用tick，因为tick在执行之前也会先把微任务队列清空（把队列中的微任务都执行完）。</p>
<h3 id="待测试函数同时包含Macro-Task和Micro-Task"><a href="#待测试函数同时包含Macro-Task和Micro-Task" class="headerlink" title="待测试函数同时包含Macro Task和Micro Task"></a>待测试函数同时包含Macro Task和Micro Task</h3><p><strong>待测函数</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt;(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">updateValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">num</span> = value;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试代码</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test updateValue&#x27;</span>, <span class="title function_">fakeAsync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  component.<span class="title function_">updateValue</span>();</span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">num</span>).<span class="title function_">toBe</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="title function_">tick</span>(<span class="number">100</span>); <span class="comment">//或者flush()</span></span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">num</span>).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<p>上述代码中，<code>fetchData()</code>中同时包含Macro task和Micro task，所以我们可以使用<code>tick</code>或者<code>flush</code>来测试。但是使用<code>flushMicrotasks</code>就不行了，因为<code>flushMicrotasks</code>只会让micro task立即执行，而<code>setTimeout</code>是macro task，不会被执行。</p>
<blockquote>
<p>Limitation: The <code>fakeAsync()</code> function won’t work if the test body makes an XMLHttpRequest (XHR) call. XHR calls within a test are rare, but if you need to call XHR, see the <a href="https://v17.angular.io/guide/testing-components-scenarios#waitForAsync"><code>waitForAsync()</code></a> section.</p>
</blockquote>
<h2 id="需要更新UI的异步测试"><a href="#需要更新UI的异步测试" class="headerlink" title="需要更新UI的异步测试"></a>需要更新UI的异步测试</h2><p>上面的测试用例都不涉及UI更新，如果需要测试UI更新，那么需要使用<code>fixture.detectChanges()</code>来触发Angular的变更检测。</p>
<h2 id="fixture-WhenStable"><a href="#fixture-WhenStable" class="headerlink" title="fixture.WhenStable()"></a>fixture.WhenStable()</h2><p>这个方法也是用来处理异步任务的，可以稍后总结一下。fixture.WhenStable()通常和<code>waitForAsync</code>一起配合使用。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should show quote after getQuote (waitForAsync)&#x27;</span>, <span class="title function_">waitForAsync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  fixture.<span class="title function_">detectChanges</span>(); <span class="comment">// ngOnInit()</span></span><br><span class="line">  <span class="title function_">expect</span>(quoteEl.<span class="property">textContent</span>).<span class="title function_">withContext</span>(<span class="string">&#x27;should show placeholder&#x27;</span>).<span class="title function_">toBe</span>(<span class="string">&#x27;...&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  fixture.<span class="title function_">whenStable</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// wait for async getQuote</span></span><br><span class="line">    fixture.<span class="title function_">detectChanges</span>(); <span class="comment">// update view with quote</span></span><br><span class="line">    <span class="title function_">expect</span>(quoteEl.<span class="property">textContent</span>).<span class="title function_">toBe</span>(testQuote);</span><br><span class="line">    <span class="title function_">expect</span>(<span class="title function_">errorMessage</span>()).<span class="title function_">withContext</span>(<span class="string">&#x27;should not show error&#x27;</span>).<span class="title function_">toBeNull</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>如果函数返回一个Promise，那么直接使用<code>async/await</code>测试即可。新版的Angular推荐使用<code>waitForAsync</code>来测试。</li>
<li>如果函数中间夹杂着异步操作，但是没有返回Promise，那么分为以下三种情况<ul>
<li>待测试函数只包含微任务 - 使用<code>fakeAsync</code>配合<code>flushMicrotasks</code>来控制异步操作。</li>
<li>待测试函数只包含宏任务 - 使用<code>fakeAsync</code>配合<code>tick</code>或者<code>flush</code>来控制异步操作。</li>
<li>待测试函数同时包含微任务与宏任务 - 使用<code>fakeAsync</code>配合<code>tick</code>或者<code>flush</code>来控制异步操作。</li>
</ul>
</li>
<li>能用<code>async/await</code>或者<code>waitForAsync</code>测试的一定能用<code>fakeAsync</code>测试，反之不成立。</li>
</ul>
<p>最终结论: 在Angular + Jest为基础的项目中，使用<code>fakeAsync</code> + <code>tick</code>&#x2F;<code>flush</code>能搞定所有的异步测试。</p>
]]></content>
      <categories>
        <category>jest</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>jest</tag>
        <tag>async</tag>
        <tag>test</tag>
        <tag>flush</tag>
        <tag>fakeasync</tag>
        <tag>waitforasync</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-troubleshooting-setter-getter</title>
    <url>/2024/07/27/angular-troubleshooting-setter-getter/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The <code>get</code> syntax binds an object property to a function that will be called when that property is looked up. It can also be used in <code>classes</code>.</p>
<p>Here is an example:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h2><p>When you use <code>getter</code>, you would better provide <code>setter</code> for the property too. If you only provide <code>getter</code>, you might got errors, here is a real case.</p>
<p>We have a <code>child</code> component with a <code>name</code> property, and we want to format the <code>name</code> to uppercase in the <code>child</code> component. the <code>name</code> property is passed from the <code>parent</code> component.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// child.component.ts</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-child&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./child.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./child.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> _name = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Input</span>() <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">formatName</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> name.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- child.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Uppercase name: &#123;&#123; formatName(name) &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>And in the <code>parent</code> component’s template, we pass the <code>name</code> property to the <code>child</code> component.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- parent.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-child</span> <span class="attr">name</span>=<span class="string">&quot;Philip&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>When you run the code, you will get the following error:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TypeError: Cannot read properties of undefined (reading &#x27;toUpperCase&#x27;)</span><br></pre></td></tr></table></figure>

<p>The error is caused by the <code>formatName</code> function in the <code>child</code> component, here <code>name</code> is <code>undefined</code>, we can’t call <code>toUpperCase</code> on <code>undefined</code>, but why?</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> name.<span class="title function_">toUpperCase</span>();</span><br></pre></td></tr></table></figure>

<p>When we read name in the <code>formatName</code> function, it will trigger the <code>getter</code> of the <code>name</code> property, but we only provide the <code>setter</code> for the <code>name</code> property, so <code>name</code> is <code>undefined</code>.</p>
<p>To fix this error, we need to provide the <code>getter</code> for the <code>name</code> property.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// child.component.ts</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-child&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./child.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./child.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> _name = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Input</span>() <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">formatName</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> name.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h1><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get">get in object</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>troubleshooting</tag>
        <tag>getter</tag>
        <tag>setter</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-view-provider</title>
    <url>/2024/12/01/angular-view-provider/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>我今天看Angular官方文档才知道，原来Angular里面竟然还有一个<code>viewProvider</code>，这个是什么东东呢？我们一起来看看。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://stackoverflow.com/a/36019609/1487475">https://stackoverflow.com/a/36019609/1487475</a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>inject</tag>
        <tag>viewprovider</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-vs-react</title>
    <url>/2024/11/14/angular-vs-react/</url>
    <content><![CDATA[<h1 id="What’s-the-difference-between-Angular-and-React"><a href="#What’s-the-difference-between-Angular-and-React" class="headerlink" title="What’s the difference between Angular and React?"></a>What’s the difference between Angular and React?</h1><ol>
<li>Angular是一个框架，React是一个UI库<ol>
<li>Angular是一个完整的框架，提供了很多开箱即用的功能，比如路由，表单，HTTP Client等。</li>
<li>React只是一个UI库，只提供了构建用户界面的功能，其他功能需要通过第三方库来实现。React-Router用于路由，Axios用于网络请求，Redux用于状态管理等。</li>
</ol>
</li>
<li>Angular使用html&#x2F;TypeScript&#x2F;css三者分离的方式书写组件，而React使用JSX，将html和js混合在一起。</li>
<li>数据绑定，Angular原生支持双向数据绑定，而React不支持，React支持单向数据流，即数据只能由父组件传递给子组件，子组件不能直接修改父组件的数据（但可以通过回调函数实现）。</li>
<li>变更检测：<ol>
<li>Angular使用<code>zone.js</code>来实现变更检测，它会监控所有的异步操作，当异步操作完成后，会触发变更检测。</li>
<li>Angular的变更检测基于脏检查，会检查所有的绑定，如果有变化，就会更新视图。</li>
<li>Angular也提供ChangeDetectorRef类，手动触发变更检测。</li>
<li>React使用虚拟DOM来实现变更检测，当状态发生变化时，React会重新构建虚拟DOM，然后和上一次的虚拟DOM进行对比，找出差异，然后更新真实DOM。</li>
<li>React中，状态变化通过setState方法来触发，每次调用setState都会触发重新渲染。</li>
</ol>
</li>
<li>使用体验<ol>
<li>Angular入门比较难，因为它有很多概念，比如组件，指令，管道，服务，依赖注入等。但是一旦入门，写起来就比较顺手，因为大家都是在同一个框架下工作，所以代码风格比较统一。水平高的和水平低的写出来的代码gap更小。Angular上手之后，写代码心智成本低。</li>
<li>React则不然，它概念很少，甚至连类似于ngIf这种指令都没有，就是纯纯的写js，这就造成了一个问题，不同水平的人写出的代码差异比较大，而且我觉得用React心智成本更高，经常由于忘了写useEffect中的依赖条件导致页面无法更新，或者忘了写key导致列表无法正常渲染等等。</li>
</ol>
</li>
</ol>
<p>暂时先写这些吧，以后想到了再补充，写得比较泛泛，很多细节还需要填充。</p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-zoneless-change-detection</title>
    <url>/2024/11/27/angular-zoneless-change-detection/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Zoneless change detection是Angular 18引入的一个新特性，该特性能让Angular在不依赖<code>zone.js</code>的情况下进行更新检测。下面我们来看一下如何使用这个新特性。</p>
<h1 id="Why-remove-Zone-js"><a href="#Why-remove-Zone-js" class="headerlink" title="Why remove Zone.js?"></a>Why remove Zone.js?</h1><ol>
<li>Reducing initial bundle size, Zone.js is about 30KB raw and around 10KB gzipped. Remove it can significantly save the initial load time.</li>
<li>Avoid unnecessary change detection cycles: Zone.js notify Angular to run change detection on every async operation, but it doesn’t actually know whether these operations change any data.</li>
<li>Improve debugging experience, Zone.js can make stack traces harder to read.</li>
</ol>
<h1 id="Integration-steps"><a href="#Integration-steps" class="headerlink" title="Integration steps"></a>Integration steps</h1><h2 id="Create-an-Angular-18-project"><a href="#Create-an-Angular-18-project" class="headerlink" title="Create an Angular 18 project"></a>Create an Angular 18 project</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx @angular/cli@18 new my-zoneless-app</span><br></pre></td></tr></table></figure>

<h2 id="Enable-zoneless-change-detection-in-standalone-bootstrap-app"><a href="#Enable-zoneless-change-detection-in-standalone-bootstrap-app" class="headerlink" title="Enable zoneless change detection in standalone bootstrap app."></a>Enable zoneless change detection in standalone bootstrap app.</h2><ol>
<li>Open file <code>app.config.ts</code> under <code>src/app</code> folder.</li>
<li>Remove the following line<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">provideZoneChangeDetection</span>(&#123; <span class="attr">eventCoalescing</span>: <span class="literal">true</span> &#125;),</span><br></pre></td></tr></table></figure></li>
<li>Add the following line<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">provideExperimentalZonelessChangeDetection</span>(),</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Enable-zoneless-change-detection-in-traditional-Module-based-app"><a href="#Enable-zoneless-change-detection-in-traditional-Module-based-app" class="headerlink" title="Enable zoneless change detection in traditional Module based app."></a>Enable zoneless change detection in traditional Module based app.</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NgModule bootstrap</span></span><br><span class="line"><span class="title function_">platformBrowser</span>().<span class="title function_">bootstrapModule</span>(<span class="title class_">AppModule</span>);</span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title function_">provideExperimentalZonelessChangeDetection</span>()]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Remove-zone-js-from-your-project"><a href="#Remove-zone-js-from-your-project" class="headerlink" title="Remove zone.js from your project"></a>Remove zone.js from your project</h2><h3 id="Remove-zone-js-from-file-angular-json-or-project-json-for-Nx-based-project"><a href="#Remove-zone-js-from-file-angular-json-or-project-json-for-Nx-based-project" class="headerlink" title="Remove zone.js from file angular.json or project.json for Nx based project."></a>Remove zone.js from file <code>angular.json</code> or <code>project.json</code> for Nx based project.</h3><ol>
<li>Open file <code>angular.json</code> or <code>project.json</code>.</li>
<li>Remove the following line from <code>architect | build | options</code><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;polyfills&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">   <span class="string">&quot;zone.js&quot;</span></span><br><span class="line"> <span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
<li>Remove the following line from <code>architect | test | options</code><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;polyfills&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">   <span class="string">&quot;zone.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="string">&quot;zone.js/testing&quot;</span></span><br><span class="line"> <span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Old-app-with-polyfills-ts"><a href="#Old-app-with-polyfills-ts" class="headerlink" title="Old app with polyfills.ts"></a>Old app with <code>polyfills.ts</code></h3><p>For old Angular app with an explicit <code>polyfill.ts</code> file, you can remove <code>import &#39;zone.js&#39;</code> and <code>import &#39;zone.js/testing&#39;</code> from <code>polyfills.ts</code>.</p>
<h3 id="Uninstall-zone-js"><a href="#Uninstall-zone-js" class="headerlink" title="Uninstall zone.js"></a>Uninstall <code>zone.js</code></h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall zone.js</span><br></pre></td></tr></table></figure>

<h2 id="Start-your-app"><a href="#Start-your-app" class="headerlink" title="Start your app"></a>Start your app</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng serve <span class="comment"># or npm run start</span></span><br></pre></td></tr></table></figure>

<h2 id="How-to-make-your-app-work-with-zoneless-change-detection"><a href="#How-to-make-your-app-work-with-zoneless-change-detection" class="headerlink" title="How to make your app work with zoneless change detection"></a>How to make your app work with zoneless change detection</h2><p>对于开启了zoneless change detection的应用，Angular需要依赖核心API的通知才能进行更新检测，这些通知包括：</p>
<ul>
<li><code>ChangeDetectorRef.markForCheck</code> (called automatically by <code>AsyncPipe</code>)</li>
<li><code>ComponentRef.setInput</code></li>
<li>Updating a <code>signal</code> that’s read in a template</li>
<li>Bound host or template listeners callbacks</li>
<li>Attaching a view that was marked dirty by one of the above</li>
</ul>
<p>除了以上几种情况，Angular不会自动进行更新检测，比如<code>setTimeout</code>、<code>setInterval</code>、<code>Promise.then</code>、<code>fetch</code>等异步操作，这些操作不会触发更新检测，需要手动调用<code>ChangeDetectorRef.markForCheck</code>来通知Angular进行更新检测。</p>
<h2 id="Use-signal-for-simple-value"><a href="#Use-signal-for-simple-value" class="headerlink" title="Use signal for simple value"></a>Use signal for simple value</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line">name = <span class="title function_">signal</span>(<span class="string">&#x27;zdd&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>.<span class="title function_">set</span>(<span class="string">&#x27;Philip&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Note that, you need to use <code>name()</code> instead of <code>name</code> in your template.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, I&#x27;m &#123;&#123;name()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Use-signal-for-complex-value"><a href="#Use-signal-for-complex-value" class="headerlink" title="Use signal for complex value"></a>Use signal for complex value</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user  = signal&lt;<span class="title class_">User</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">user</span>.<span class="title function_">set</span>(res);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Note again, you need to use <code>user()</code> instead of <code>user</code> in your template.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  user id: &#123;&#123;user()?.id&#125;&#125;</span><br><span class="line">  user name: &#123;&#123;user()?.title&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Manually-call-cdf-markForCheck"><a href="#Manually-call-cdf-markForCheck" class="headerlink" title="Manually call cdf.markForCheck"></a>Manually call <code>cdf.markForCheck</code></h2><p>Note, <code>setTimeout</code> won’t call change detection automatically, you need to call <code>cdf.markForCheck</code> manually.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">cdf</span>: <span class="title class_">ChangeDetectorRef</span></span>) &#123;&#125;</span><br><span class="line">name = <span class="string">&#x27;zdd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Philip&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cdf</span>.<span class="title function_">markForCheck</span>();</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>for <code>fetch</code> api, you need to call <code>cdf.markForCheck</code> manually as well.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">user</span> = res;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cdf</span>.<span class="title function_">markForCheck</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://angular.dev/guide/experimental/zoneless">https://angular.dev/guide/experimental/zoneless</a></li>
<li><a href="https://angular.love/the-latest-in-angular-change-detection-zoneless-signals">https://angular.love/the-latest-in-angular-change-detection-zoneless-signals</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>change detection</tag>
        <tag>zone</tag>
        <tag>zoneless</tag>
      </tags>
  </entry>
  <entry>
    <title>authentication-vs-authorization</title>
    <url>/2024/03/02/authentication-vs-authorization/</url>
    <content><![CDATA[<h1 id="Authentication-vs-Authorization"><a href="#Authentication-vs-Authorization" class="headerlink" title="Authentication vs Authorization"></a>Authentication vs Authorization</h1><p>Authentication and authorization are two closely related concepts, but they are not the same. They are both used to protect resources, but they do so in different ways.</p>
<p>In simple terms, authentication is the process of verifying who a user is, while authorization is the process of verifying what they have access to.</p>
<p>Comparing these processes to a real-world example, when you go through security in an airport, you show your ID to authenticate your identity. Then, when you arrive at the gate, you present your boarding pass to the flight attendant, so they can authorize you to board your flight and allow access to the plane.</p>
<ul>
<li><p>Authentication</p>
<ul>
<li>Authentication is the process of verifying the identity of a user. This is typically done by asking for a username and password, but it can also be done using other methods, such as biometric data or security tokens.</li>
<li>The goal of authentication is to ensure that the person accessing a resource is who they claim to be.</li>
</ul>
</li>
<li><p>Authorization</p>
<ul>
<li>Authorization is the process of verifying what a user has access to. This is typically done by checking the user’s permissions and comparing them to the resource they are trying to access.</li>
</ul>
</li>
</ul>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><ul>
<li>Authentication: 认证</li>
<li>Authorization: 授权</li>
</ul>
<p>以现实中住酒店为例，假设你定好了酒店并来到前台，接待员会要求你出示身份证，以确认你的身份，这就是认证。确认你的身份合法后，他们会给你一张房卡，用这张卡你就可以进入你的房间，这就是授权。</p>
<h2 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h2><p>我已经彻底明白认证和授权的区别了，但是，这两个单词实在是太像了，我怎么区分他们呢？</p>
<ul>
<li>从操作步骤上来说，认证在授权之前。</li>
<li>从单词上来说，如果按照字母顺序排序，authentication 在 authorization 之前。</li>
</ul>
<p>这样就能记住了，你学会了吗？</p>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>english</tag>
        <tag>security</tag>
        <tag>authentication</tag>
        <tag>authorization</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-zone</title>
    <url>/2025/03/17/angular-zone/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><code>Zone</code>是Angular中非常重要的一个概念，简单来说，<code>Zone</code>就是一个execution context(执行上下文)，这个执行上下文可以存在于多个JS虚拟机的执行轮次中。这意味着它可以在异步操作中保持状态，而不受 JavaScript 单线程执行模型的影响。它的作用主要有以下几点：</p>
<ol>
<li>捕获异步操作并添加额外的功能以实现自动变更检测。</li>
<li>应用程序性能分析（profiling）</li>
<li>跟踪跨多个 VM 轮次的长堆栈跟踪（long stack traces），对于调试复杂的异步代码非常有用。</li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>zone</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript-troubleshooting-rootDir</title>
    <url>/2024/09/19/angular-troubleshooting-rootdir/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>今天在做一个 Angular 项目的时候，遇到了一个问题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR <span class="keyword">in</span> src/app/app.module.ts:1:1 - error TS6059: File <span class="string">&#x27;xxx&#x27;</span> is not under <span class="string">&#x27;rootDir&#x27;</span> <span class="string">&#x27;yyy&#x27;</span>. <span class="string">&#x27;rootDir&#x27;</span> is expected to contain all <span class="built_in">source</span> files.</span><br></pre></td></tr></table></figure>

<p>可以看到这个错误是关于<code>rootDir</code>的，那么<a href="https://www.typescriptlang.org/tsconfig/rootDir.html"><code>rootDir</code></a>是什么呢？看一下官网的解释：</p>
<p>Default: The longest common path of all non-declaration input files. If composite is set, the default is instead the directory containing the tsconfig.json file.</p>
<p>When TypeScript compiles files, it keeps the same directory structure in the output directory as exists in the input directory.</p>
<p>For example, let’s say you have some input files:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MyProj</span><br><span class="line">├── tsconfig.json</span><br><span class="line">├── core</span><br><span class="line">│   ├── a.ts</span><br><span class="line">│   ├── b.ts</span><br><span class="line">│   ├── sub</span><br><span class="line">│   │   ├── c.ts</span><br><span class="line">├── types.d.ts</span><br></pre></td></tr></table></figure>

<p>The inferred value for rootDir is the longest common path of all non-declaration input files, which in this case is core&#x2F;.</p>
<p>If your outDir was dist, TypeScript would write this tree:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MyProj</span><br><span class="line">├── dist</span><br><span class="line">│   ├── a.js</span><br><span class="line">│   ├── b.js</span><br><span class="line">│   ├── sub</span><br><span class="line">│   │   ├── c.js</span><br></pre></td></tr></table></figure>

<p>Importantly, <strong><code>rootDir does not affect which files become part of the compilation. It has no interaction with the include, exclude, or files tsconfig.json settings.</code></strong></p>
<p>Note that TypeScript will never write an output file to a directory outside of outDir, and will never skip emitting a file. For this reason, <code>rootDir also enforces that all files which need to be emitted are underneath the rootDir path.</code></p>
<p>重点看这句：<code>rootDir also enforces that all files which need to be emitted are underneath the rootDir path.</code> 也就是说，所有需要被编译的文件都必须在<code>rootDir</code>的路径下，否则就会报错。</p>
<p>For example, let’s say you had this tree: 如果我们在<code>tsconfig.json</code>中指定了<code>rootDir</code>为<code>core</code>，那么<code>helpers.ts</code>就不在<code>rootDir</code>的路径下，所以会报错。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MyProj</span><br><span class="line">├── tsconfig.json</span><br><span class="line">├── core</span><br><span class="line">│   ├── a.ts</span><br><span class="line">│   ├── b.ts</span><br><span class="line">├── helpers.ts</span><br></pre></td></tr></table></figure>

<h2 id="Nx-based-mono-repos"><a href="#Nx-based-mono-repos" class="headerlink" title="Nx based mono-repos."></a>Nx based mono-repos.</h2><p>如果是基于Nx的但一代码仓库，有时候也会出现这个错误，原因是一个Publishable的lib引用了另一个Non-Publishable的lib，这时候就会报错。详情请看<a href="https://stackoverflow.com/a/76500288/1487475">这里</a>, 关于Nx buildable&#x2F;publishable libraries, please see <a href="https://nx.dev/concepts/buildable-and-publishable-libraries">here</a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>troubleshooting</tag>
        <tag>typescript</tag>
        <tag>rootdir</tag>
      </tags>
  </entry>
  <entry>
    <title>angular-view-encapsulation</title>
    <url>/2024/11/30/angular-view-encapsulation/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Angular中有三种样式封装方式，分别是：<code>Emulated</code>, <code>ShadowDom</code>, and <code>None</code>。</p>
<ul>
<li>ViewEncapsulation.Emulated (Default value)</li>
<li>ViewEncapsulation.ShadowDom</li>
<li>ViewEncapsulation.None</li>
</ul>
<p>可以用过Component中的<code>encapsulation</code>属性来指定封装方式，如果不指定的话，默认是<code>Emulated</code>。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-product&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./product.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./product.component.scss&#x27;</span>],</span><br><span class="line">  <span class="attr">encapsulation</span>: <span class="title class_">ViewEncapsulation</span>.<span class="property">ShadowDom</span>, <span class="comment">// &lt;--- here</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductComponent</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面我们分别讲解三种封装方式。</p>
<h2 id="Emulated"><a href="#Emulated" class="headerlink" title="Emulated"></a>Emulated</h2><p>这是默认的封装方式，如果你没有在<code>@Component</code>中显式指定<code>encapsulation</code>的话，那么使用的就是该方式。在该方式下，Angular会生成一个随机字符串做为组件的属性，然后将样式应用到这个属性上。<br>这种封装方式是模拟<code>Shadow DOM</code>的方式，Angular会更改组件的CSS选择器，以便样式只应用于组件的视图。这意味着组件的样式不会影响应用程序的其他部分。</p>
<p>以下面的Product组件为例，<code>product-home.component.scss</code>这个样式文件里面的样式只会影响<code>ProductHomeComponent</code>这个组件对应的视图.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-product-home&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./product-home.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./product-home.component.less&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductHomeComponent</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">readonly</span> name = <span class="string">&#x27;Philip&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行app后，我们可以在浏览器中inspect生成后的页面，可以看到<code>app-product-home</code>元素有一个唯一的属性<code>_nghost-ng-c3352351300</code>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-product-home</span> <span class="attr">_nghost-ng-c3352351300</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-product-home</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>再看一下实际的例子，假如我们有如下html template, ProductHomeComponent中引入了ProductDetailComponent</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- product-home.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>product-home works!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-product-detail</span>&gt;</span><span class="tag">&lt;/<span class="name">app-product-detail</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么生成的HTML如下：<br><img src="/../images/angular-view-encapsulation-emulated.png" alt="emulated"></p>
<p>可以看到，Angular为生成的Dom节点都添加了额外的属性，这些属性大概分为两类：</p>
<ul>
<li><code>_nghost-xxxx</code> - 用来标记组件的host element，比如上图中第一个红框内</li>
<li><code>_ngcontent-xxxx</code> - 用来标记组件的子元素，比如上图中<code>app-product-home</code>内的<code>p</code>元素，它就是一个纯内容，所以标记是<code>_ngcontent-xxxx</code>。</li>
<li>有些元素既是host, 又是content，比如上图的第二个红框。因为<code>ProductDetailComponent</code>既是<code>ProductHomeComponent</code>的子元素，而它本身又是一个组件。所以它同时拥有<code>_nghost-xxxx</code>和<code>_ngcontent-xxxx</code>两个属性。</li>
</ul>
<p>如果我们给上面的<code>p</code>标签添加一个背景色的话，那么观察生成后的css样式，你会发现，样式文件里面也添加了额外的属性，这样就确保了样式的唯一性。</p>
<p>观察下图中左侧<code>p</code>标签的属性，和右侧css文件中<code>product-container</code>的属性，可以看到他们是一一对应的。<br><img src="/../images/angular-view-encapsulation-emulated-css.png" alt="emulated-css"></p>
<p><code>Emulated</code>模式生成的样式最终会插入到html文件的<code>head</code>标签中。（可以运行Angular app，然后鼠标右键-inspect查看对应的html文件代码）</p>
<h2 id="ShadowDom"><a href="#ShadowDom" class="headerlink" title="ShadowDom"></a>ShadowDom</h2><p>这种方式使用浏览器内置的Shadow DOM API来封装组件的样式，该模式下，组件被放到一个ShadowRoot之下，这个Shadow Root相当于组件的host element, 这意味着组件的样式不会影响应用程序的其他部分。</p>
<p>该模式生成的样式会直接放到<code>shadow-root</code>中。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-product-home&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./product-home.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./product-home.component.less&#x27;</span>,</span><br><span class="line">  <span class="attr">encapsulation</span>: <span class="title class_">ViewEncapsulation</span>.<span class="property">ShadowDom</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductHomeComponent</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">readonly</span> name = <span class="string">&#x27;Philip&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意观察生成的html文件，<code>app-product-home</code>元素会有一个<code>shadow-root</code>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-product-home</span>&gt;</span></span><br><span class="line">  #shadow-root (open)</span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-product-home</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="None"><a href="#None" class="headerlink" title="None"></a>None</h2><p>这种模式不进行任何封装，相当于裸奔，其效果等于直接在html中引入样式文件。这种模式谨慎使用，因为会有样式污染。</p>
<p>该模式生成的样式会直接放到html文件的<code>head</code>中。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-product-home&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./product-home.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./product-home.component.less&#x27;</span>,</span><br><span class="line">  <span class="attr">encapsulation</span>: <span class="title class_">ViewEncapsulation</span>.<span class="property">None</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductHomeComponent</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">readonly</span> name = <span class="string">&#x27;Philip&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The generated HTML will not have any unique attributes or shadow root:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-product-home</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-product-home</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：<code>ViewEncapsulation.None</code> <code>ViewEncapsulation.Emulated</code>中的样式同时会插入到<code>ViewEncapsulation.ShadowDom</code>的组件中。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li><a href="https://v17.angular.io/guide/view-encapsulation">https://v17.angular.io/guide/view-encapsulation</a> - 这里面的例子要仔细研究一下，有很多细节。</li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>view</tag>
        <tag>encapsulation</tag>
        <tag>emulated</tag>
        <tag>shadowdom</tag>
        <tag>none</tag>
      </tags>
  </entry>
  <entry>
    <title>browser-console</title>
    <url>/2024/11/19/browser-console/</url>
    <content><![CDATA[<h1 id="Console妙用知多少？"><a href="#Console妙用知多少？" class="headerlink" title="Console妙用知多少？"></a>Console妙用知多少？</h1><p>平时我们使用console的时候，基本都是<code>console.log(xxx)</code>, 其实console的用途不只是打log，今天我们来看看console的其他用法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xxx); <span class="comment">// print log</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">warn</span>(xxx); <span class="comment">// print warning</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(xxx); <span class="comment">// print error</span></span><br></pre></td></tr></table></figure>

<h2 id="1-console-time"><a href="#1-console-time" class="headerlink" title="1. console.time"></a>1. console.time</h2><p><code>console.time</code> 和 <code>console.timeEnd</code> 可以用来计算代码执行时间，用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;my-timer&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;my-timer&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>如果在代码执行中打印阶段性时间，可以使用<code>console.timeLog</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;my-timer&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">100000</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">timeLog</span>(<span class="string">&#x27;my-timer&#x27;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;my-timer&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="2-console-table"><a href="#2-console-table" class="headerlink" title="2. console.table"></a>2. console.table</h2><p><code>console.table</code> 可以将数组或对象以表格形式打印出来，用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Cathy&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">table</span>(data);</span><br></pre></td></tr></table></figure>

<h2 id="3-console-assert"><a href="#3-console-assert" class="headerlink" title="3. console.assert"></a>3. console.assert</h2><p><code>console.assert</code> 可以用来断言某个条件是否为真，如果为假，则输出错误信息，用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">assert</span>(<span class="number">1</span> === <span class="number">2</span>, <span class="string">&#x27;1 is not equal to 2&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<p style="color:black;background-color: #FCEBEB">VM479:1 Assertion failed: 1 is not equal to 2</p>

<h2 id="4-console-count"><a href="#4-console-count" class="headerlink" title="4. console.count"></a>4. console.count</h2><p><code>console.count</code> 可以用来统计某个函数被调用的次数，用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">count</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`hi <span class="subst">$&#123;user&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&quot;bob&quot;</span>);</span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&quot;alice&quot;</span>);</span><br><span class="line"><span class="title function_">greet</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">count</span>();</span><br></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">default: 1</span><br><span class="line">default: 2</span><br><span class="line">default: 3</span><br><span class="line">default: 4</span><br></pre></td></tr></table></figure>

<h2 id="5-console-group"><a href="#5-console-group" class="headerlink" title="5. console.group"></a>5. console.group</h2><p><code>console.group</code> 和 <code>console.groupEnd</code> 可以用来将输出的内容分组，用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">group</span>(<span class="string">&#x27;group1&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;world&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">groupEnd</span>();</span><br></pre></td></tr></table></figure>

<h2 id="6-console-dir"><a href="#6-console-dir" class="headerlink" title="6. console.dir"></a>6. console.dir</h2><p><code>console.dir</code> 可以用来打印对象的属性，用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(obj);</span><br></pre></td></tr></table></figure>

<h2 id="7-console-clear"><a href="#7-console-clear" class="headerlink" title="7. console.clear"></a>7. console.clear</h2><p><code>console.clear</code> 可以用来清空控制台，用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure>

<h2 id="8-console-trace"><a href="#8-console-trace" class="headerlink" title="8. console.trace"></a>8. console.trace</h2><p><code>console.trace</code> 可以用来打印当前调用栈，用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">trace</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>browser</tag>
        <tag>console</tag>
        <tag>time</tag>
      </tags>
  </entry>
  <entry>
    <title>browser-reflow-and-repaint</title>
    <url>/2024/11/09/browser-reflow-and-repaint/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Reflow and repaint are two important concepts in the browser rendering process. Understanding them can help us optimize the performance of our web pages.</p>
<h3 id="Reflow"><a href="#Reflow" class="headerlink" title="Reflow"></a>Reflow</h3><p>Reflow is the process of recalculating the position and size of all elements in the DOM tree. When the layout of the page changes, the browser needs to reflow the page to recalculate the position and size of all elements. The following changes can trigger a reflow:</p>
<ul>
<li>Resizing the window</li>
<li>Changing the width or height of an element</li>
<li>Changing the padding, margin, or border of an element</li>
<li>Changing the font size of an element</li>
<li>Changing the position of an element</li>
</ul>
<h3 id="Repaint"><a href="#Repaint" class="headerlink" title="Repaint"></a>Repaint</h3><p>Repaint is the process of updating the pixels on the screen. When the layout of the page changes, the browser needs to repaint the affected elements to update the pixels on the screen. The following changes can trigger a repaint:</p>
<ul>
<li>Changing the background color of an element</li>
<li>Changing the text color of an element</li>
<li>Changing the visibility of an element</li>
<li>Changing the opacity of an element</li>
<li>Changing the z-index of an element</li>
</ul>
<h2 id="How-Browser-render-pages"><a href="#How-Browser-render-pages" class="headerlink" title="How Browser render pages"></a>How Browser render pages</h2><p>The browser rendering process consists of several steps:</p>
<ol>
<li>Parse HTML: The browser parses the HTML code and creates a DOM tree.</li>
<li>Parse CSS: The browser parses the CSS code and creates a CSSOM tree.</li>
<li>Combine DOM and CSSOM: The browser combines the DOM tree and CSSOM tree to create a render tree.</li>
<li>Layout: The browser calculates the position and size of all elements in the render tree.</li>
<li>Paint: The browser paints the pixels on the screen based on the render tree.</li>
<li>Composite: The browser combines the painted pixels to create the final image on the screen.</li>
<li>In the process of rendering a web page, the browser may need to trigger reflows and repaints to update the layout and appearance of the page.<ol>
<li>Reflow: Recalculating the position and size of all elements in the DOM tree.  </li>
<li>Repaint: Updating the pixels on the screen.</li>
<li>Reflow will trigger repaint, but repaint does not necessarily trigger reflow.</li>
</ol>
</li>
</ol>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://www.explainthis.io/en/swe/repaint-and-reflow">https://www.explainthis.io/en/swe/repaint-and-reflow</a></li>
<li><a href="https://dev.to/gopal1996/understanding-reflow-and-repaint-in-the-browser-1jbg">https://dev.to/gopal1996/understanding-reflow-and-repaint-in-the-browser-1jbg</a></li>
<li><a href="https://medium.com/sessionstack-blog/how-javascript-works-the-rendering-engine-and-tips-to-optimize-its-performance-7b95553baeda">https://medium.com/sessionstack-blog/how-javascript-works-the-rendering-engine-and-tips-to-optimize-its-performance-7b95553baeda</a></li>
</ol>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
        <tag>reflow</tag>
        <tag>repaint</tag>
      </tags>
  </entry>
  <entry>
    <title>Cannot use import statement outside a module</title>
    <url>/2024/02/18/cannot-use-import-statement-outside-a-module/</url>
    <content><![CDATA[<h1 id="Cannot-use-import-statement-outside-a-module"><a href="#Cannot-use-import-statement-outside-a-module" class="headerlink" title="Cannot use import statement outside a module"></a>Cannot use import statement outside a module</h1><p>产生这个错误的原因是因为你使用了<code>import</code>或者<code>export</code>语句，但是没有指定模块类型。在JavaScript中，有两种常用的模块类型：CommonJS和ES6 Modules。CommonJS是Node.js的模块化规范，它使用<code>require</code>来引入模块，使用<code>module.exports</code>来暴露接口。ES6 Modules是ES6的模块化规范，它使用<code>import</code>来引入模块，使用<code>export</code>来暴露接口。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="浏览器端"><a href="#浏览器端" class="headerlink" title="浏览器端"></a>浏览器端</h3><p>如果是浏览器端，需要将<code>&lt;script&gt;</code>标签的<code>type</code>属性设置为<code>module</code>，这样浏览器会将这个脚本当作ES6 Modules来处理。此时无论js文件的扩展名是<code>.js</code>还是<code>.mjs</code>都可以正常工作。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;add&#125; <span class="keyword">from</span> <span class="string">&#x27;./math-utils.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// math-utils.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Node-js端"><a href="#Node-js端" class="headerlink" title="Node.js端"></a>Node.js端</h3><p>方法一： 将文件的后缀名改为<code>.mjs</code>，这样Node.js会将这个文件当作ES6 Modules来处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// math-utils.mjs</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.mjs</span></span><br><span class="line"><span class="keyword">import</span> &#123;add&#125; <span class="keyword">from</span> <span class="string">&#x27;./math-utils.mjs&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>方法二： 在<code>package.json</code>中添加<code>&quot;type&quot;: &quot;module&quot;</code>字段，这样Node.js会将所有的文件当作ES6 Modules来处理。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span> <span class="comment">// 添加这一行，就可以支持ESModule了。</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>js - 常规js文件</li>
<li>mjs - ES6 Modules文件， 使用<code>import</code>和<code>export</code>来引入和暴露接口</li>
<li>cjs - CommonJS文件，使用<code>require</code>和<code>module.exports</code>来引入和暴露接口</li>
</ul>
<p>Node.js环境可以使用任何上述文件格式，浏览器端其实不在意文件的后缀名，只要<code>&lt;script&gt;</code>标签的<code>type</code>属性设置为<code>module</code>，就可以使用ES6 Modules。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>module</tag>
        <tag>modular</tag>
        <tag>import</tag>
        <tag>mjs</tag>
      </tags>
  </entry>
  <entry>
    <title>Communication between components/directives by service</title>
    <url>/2023/07/12/communication-between-components-directives-by-service/</url>
    <content><![CDATA[<p>组件（指令）间通信是Angular中一个非常常见的需求，对于有直接嵌套关系（比如父子组件）的组件，我们可以使用<code>@Input</code>和<code>@Output</code>来实现通信，但是对于没有嵌套关系的组件（亦或者嵌套层级很深的组件），我们就需要使用其他的方法来实现通信了，比如使用服务来实现组件间通信。<br>下面这个例子就是两个没有嵌套关系的指令之间通信的例子，我们将使用服务来实现这个功能。<br>注意：在Angular中，组件和指令是一样的，组件是一种特殊的指令。</p>
<h2 id="Create-a-service"><a href="#Create-a-service" class="headerlink" title="Create a service"></a>Create a service</h2><p>首先我们需要创建一个服务，用于组件间通信。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Subject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CommunicationService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> messageSource = <span class="keyword">new</span> <span class="title class_">Subject</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 此变量的类型是Observable，用来接收消息, message$.subscribe()用来订阅消息。</span></span><br><span class="line">  <span class="keyword">public</span> message$ = <span class="variable language_">this</span>.<span class="property">messageSource</span>.<span class="title function_">asObservable</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 此函数用来发消息</span></span><br><span class="line">  <span class="title function_">sendMessage</span>(<span class="params"><span class="attr">message</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">messageSource</span>.<span class="title function_">next</span>(message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Directive-Send-message"><a href="#Directive-Send-message" class="headerlink" title="Directive(Send message)"></a>Directive(Send message)</h2><p>该指令使用上面定义的service发送消息</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Directive</span>, <span class="title class_">HostListener</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommunicationService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./communication.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[senderDirective]&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SenderDirective</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">communicationService</span>: <span class="title class_">CommunicationService</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">  <span class="title function_">onClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">communicationService</span>.<span class="title function_">sendMessage</span>(<span class="string">&#x27;Hello from sender directive!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Directive-Receive-message"><a href="#Directive-Receive-message" class="headerlink" title="Directive(Receive message)"></a>Directive(Receive message)</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">该指令使用上面定义的service接收消息</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Directive</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommunicationService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./communication.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[receiverDirective]&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ReceiverDirective</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">communicationService</span>: <span class="title class_">CommunicationService</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 接收消息</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">communicationService</span>.<span class="property">message$</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received message:&#x27;</span>, message);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AppModule"><a href="#AppModule" class="headerlink" title="AppModule"></a>AppModule</h2><p>我们需要在appModule中声明这两个指令</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommunicationService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./communication.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SenderDirective</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./sender.directive&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReceiverDirective</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./receiver.directive&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    <span class="title class_">AppComponent</span>,</span><br><span class="line">    <span class="title class_">SenderDirective</span>,</span><br><span class="line">    <span class="title class_">ReceiverDirective</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">CommunicationService</span>],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">senderDirective</span>&gt;</span>Send message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">receiverDirective</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>communication</tag>
        <tag>service</tag>
        <tag>directive</tag>
      </tags>
  </entry>
  <entry>
    <title>cors-import-js-from-html-locally</title>
    <url>/2024/02/10/cors-import-js-from-html-locally/</url>
    <content><![CDATA[<h1 id="跨域问题一则"><a href="#跨域问题一则" class="headerlink" title="跨域问题一则"></a>跨域问题一则</h1><h2 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h2><p>今天在编写一个简单的html时，遇到了如下问题，html中引入了一个js文件，且html和js位于同一个目录下。</p>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">&quot;./index.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>));</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我使用浏览器打开html文件时，Chrome浏览器控制台报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Access to script at <span class="string">&#x27;file:///Users/philip/Projects/test.js&#x27;</span> from origin <span class="string">&#x27;null&#x27;</span> has been blocked by CORS policy: Cross origin requests are only supported <span class="keyword">for</span> protocol schemes: http, data, chrome, chrome-extension, https.</span><br></pre></td></tr></table></figure>

<p>查看network tab，发现如下信息，在status一栏，发现跨域错误：<code>CORS error</code></p>
<p><img src="/../images/cors-shema-not-match.png" alt="Alt text"></p>
<p>首先复习一下什么是同源策略<br>同源策略是浏览器的一个安全功能，它要求一个网页只能与其本身的服务器进行交互，而不能与其他域的服务器进行交互。这样可以防止恶意的网站窃取数据。</p>
<p>从具体的实现来分析，协议，域名，端口号都相同的两个url就是同源的。以<code>https://www.example.com:8080</code>为例，它的组成部分如下：</p>
<ul>
<li>https: - 协议</li>
<li><a href="http://www.example.com/">www.example.com</a> - 域名</li>
<li>8080 - 端口号</li>
</ul>
<p>如果省略端口，那么http默认是80，https默认是443。</p>
<p>那么问题来了，为什么我引入的js文件会报错呢？因为浏览器认为这是一个跨域请求，而不是同源请求。这是因为我们的html文件是通过<code>http://</code>协议打开的（双击html文件时，会使用系统默认的浏览器打开，这时观察浏览器中的地址，可知是http协议。），而html中引用的js文件是通过<code>file://</code>协议引入的，协议不同，所以浏览器认为这是一个跨域请求。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol>
<li>WebStorm - WebStorm打开网页时没有这个问题，因为WebStorm内置了一个服务器，所以它的协议是<code>http://</code>，所以不会报错。</li>
<li>VSCode - 安装插件<a href="https://www.npmjs.com/package/live-server">Live Server</a>，使用<code>Live Server</code>打开网页，也不会报错。<ol>
<li><code>npm install -g live-server</code></li>
<li>Open terminal, cd 到html文件所在目录</li>
<li>run <code>live-server .</code></li>
</ol>
</li>
</ol>
<p>当然也可以使用<a href="https://www.npmjs.com/package/http-server">http-server</a></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>cors</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>browser-what-happened-when-you-input-url-and-press-enter</title>
    <url>/2024/11/14/browser-what-happened-when-you-input-url-and-press-enter/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>There is a very famous question, “What happened when you input a URL and press Enter in the browser?” </p>
<h1 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h1><h2 id="1-URL-parsing"><a href="#1-URL-parsing" class="headerlink" title="1. URL parsing"></a>1. URL parsing</h2><p>When you input a URL in the browser, the browser will parse the URL into several parts:</p>
<ul>
<li>Protocol: <code>http</code> or <code>https</code></li>
<li>Host&#x2F;Domain: <code>www.example.com</code></li>
<li>Port: <code>80</code> or <code>443</code></li>
<li>Path: <code>/page.html</code></li>
<li>Query: <code>?name=Philip</code></li>
<li>Fragment: <code>#section1</code></li>
</ul>
<h2 id="2-DNS-lookup"><a href="#2-DNS-lookup" class="headerlink" title="2. DNS lookup"></a>2. DNS lookup</h2><p>The browser will check the cache to see if the DNS lookup result is cached. If not, it will send a DNS query to the DNS server to get the IP address of the host.</p>
<ol>
<li>Check browser cache.</li>
<li>Check OS cache.</li>
<li>Check router cache.</li>
<li>Check ISP(Internet Service Provider) cache.</li>
<li>Make request to the DNS server.(Only if all cache above failed!)</li>
</ol>
<h2 id="3-TCP-connection"><a href="#3-TCP-connection" class="headerlink" title="3. TCP connection"></a>3. TCP connection</h2><p>The browser will establish a TCP connection with the server using the IP address and port number. This including the TCP handshake process. 关于TCP的连接与关闭，可以看<a href="https://zdd.github.io/2024/02/19/tcp-open-and-close/">这篇</a></p>
<h2 id="4-HTTP-request"><a href="#4-HTTP-request" class="headerlink" title="4. HTTP request"></a>4. HTTP request</h2><p>The browser will send an HTTP request to the server. The request includes the following information:</p>
<ul>
<li>Request method: <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, etc.</li>
<li>Request headers: <code>User-Agent</code>, <code>Accept</code>, <code>Cookie</code>, etc.</li>
<li>Request body: for <code>POST</code> and <code>PUT</code> requests.</li>
<li>URL: <code>http://www.example.com/page.html?name=Philip#section1</code></li>
</ul>
<h2 id="5-Server-processing"><a href="#5-Server-processing" class="headerlink" title="5. Server processing"></a>5. Server processing</h2><p>The server will process the request and generate a response. The response includes the following information:</p>
<ul>
<li>Status code: <code>200</code>, <code>404</code>, <code>500</code>, etc.</li>
<li>Response headers: <code>Content-Type</code>, <code>Content-Length</code>, etc.</li>
<li>Response body: HTML, CSS, JavaScript, etc.</li>
<li>Cookies: <code>Set-Cookie</code> header.</li>
</ul>
<h2 id="6-Browser-rendering"><a href="#6-Browser-rendering" class="headerlink" title="6. Browser rendering"></a>6. Browser rendering</h2><p>The browser will render the response HTML, CSS, and JavaScript to display the web page to the user. When browser parse html page, it may download js file embed in html, this process might block the parsing, see <a href="https://zdd.github.io/2024/01/09/async-vs-defer/">here</a> for details.</p>
<ol>
<li>Parse HTML: The browser will parse the HTML to create the DOM tree.<ol>
<li>The file was transferred from the server to the browser as binary data.</li>
<li>The browser will parse the binary data to the .html file.</li>
<li>The browser constructs the DOM tree based on the parsed HTML.</li>
<li>If the html contains external CSS files, the browser will download the css in parallel, this won’t block the DOM construction.</li>
<li>If the html contains external JavaScript files, the browser will download the js in parallel, this will&#x2F;won’t block the DOM construction. see <a href="https://zdd.github.io/2024/01/09/async-vs-defer/">here</a> for details.</li>
</ol>
</li>
<li>Parse CSS: The browser will parse the CSS to create the CSSOM tree.</li>
<li>Render tree: The browser will combine the DOM tree and CSSOM tree to create the render tree.</li>
<li>Layout: The browser will calculate the position and size of each element in the render tree.</li>
<li>Paint: The browser will paint the pixels on the screen.</li>
<li>Composite: The browser will composite the layers to display the final web page.</li>
<li>JavaScript execution: The browser will execute the JavaScript code to add interactivity to the web page.</li>
<li>Event handling: The browser will handle user events like click, scroll, etc.</li>
</ol>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><ol>
<li>External CSS doesn’t block the DOM construction, but might block the render tree construction since the browser needs to wait for the CSSOM tree to be constructed.</li>
<li>External JavaScript might block the DOM construction if and only if:<ol>
<li>The Scripts is in <code>&lt;head&gt;</code> tag, it will block the DOM construction.</li>
<li>And the script doesn’t set <code>async</code> or <code>defer</code>.</li>
</ol>
</li>
<li>If the script is at the end of the <code>&lt;body&gt;</code> tag, it won’t block the DOM construction even when it doesn’t set <code>async</code> or <code>defer</code>.</li>
</ol>
]]></content>
      <categories>
        <category>interview</category>
      </categories>
      <tags>
        <tag>browser</tag>
        <tag>url</tag>
        <tag>rendering</tag>
      </tags>
  </entry>
  <entry>
    <title>css-basic-box-model</title>
    <url>/2025/03/04/css-basic-box-model/</url>
    <content><![CDATA[<h1 id="什么是盒模型？"><a href="#什么是盒模型？" class="headerlink" title="什么是盒模型？"></a>什么是盒模型？</h1><p>当浏览器对一个页面进行布局的时候，浏览器的渲染引擎会把每个元素看视为一个盒子（box），这个盒子就是盒模型。盒模型是CSS布局的基础，理解盒模型对于理解CSS布局非常重要。</p>
<p><img src="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_model/Introduction_to_the_CSS_box_model/boxmodel.png" alt="box-model"></p>
<h2 id="盒模型的四个组成部分"><a href="#盒模型的四个组成部分" class="headerlink" title="盒模型的四个组成部分"></a>盒模型的四个组成部分</h2><h3 id="内容区域（content）"><a href="#内容区域（content）" class="headerlink" title="内容区域（content）"></a>内容区域（content）</h3><p>以上图为例，中间的黑色矩形就是内容区域，内容区域是盒模型的核心部分，包含了元素的实际内容，比如文本、图片等。</p>
<h3 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h3><p>上图中黑色矩形和蓝色矩形框之间的白色部分就是padding，内边距是内容区域和边框之间的空间。内边距可以用来增加内容区域和边框之间的距离。</p>
<h3 id="边框（border）"><a href="#边框（border）" class="headerlink" title="边框（border）"></a>边框（border）</h3><p>上图中蓝色矩形框就是边框，边框是元素的边界，边框也是有宽度和颜色的。</p>
<h3 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h3><p>上图中蓝色矩形框和最外层的黑色矩形框之间的透明色部分就是外边距，外边距是元素和其他元素之间的空间。外边距可以用来增加元素之间的距离。</p>
<h1 id="box-sizing对于盒模型的影响"><a href="#box-sizing对于盒模型的影响" class="headerlink" title="box-sizing对于盒模型的影响"></a>box-sizing对于盒模型的影响</h1><p>CSS中的<code>box-sizing</code>属性决定了如何计算一个元素的宽度和高度，它有两个取值：<code>content-box</code>和<code>border-box</code>。</p>
<h2 id="content-box"><a href="#content-box" class="headerlink" title="content-box"></a>content-box</h2><p><code>content-box</code>是默认值，表示元素的宽度和高度只包括内容区域，不包括内边距（padding）和边框（border）。也就是说，如果你设置了一个元素的宽度为100px，高度为100px，那么它的实际宽度和高度就是100px，不包括内边距和边框。</p>
<p>计算公式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">元素的实际宽度 = CSS中的width</span><br><span class="line">元素的实际高度 = CSS中的height</span><br></pre></td></tr></table></figure>
<p>看一段CSS代码，因为没有指定<code>box-sizing</code>属性，所以默认是<code>content-box</code>，所以box元素的宽度是100px，高度是100px。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="border-box"><a href="#border-box" class="headerlink" title="border-box"></a>border-box</h2><p><code>border-box</code>表示元素的宽度和高度包括内容区域、内边距和边框。也就是说，如果你设置了一个元素的宽度为100px，高度为100px，那么它的实际宽度和高度就是100px - padding - border。计算公式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">元素的实际宽度 = CSS中的width - padding-left - padding-right - border-left - border-right</span><br><span class="line">元素的实际高度 = CSS中的height - padding-top - padding-bottom - border-top - border-bottom</span><br></pre></td></tr></table></figure>
<p>看一段CSS代码，你知道如何计算元素的实际宽高吗？</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据border-box的计算公式：</p>
<ul>
<li>box元素的实际宽度 &#x3D; 100px - 10px * 2 - 5px * 2 &#x3D; 70px</li>
<li>box元素的实际高度 &#x3D; 100px - 10px * 2 - 5px * 2 &#x3D; 70px</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_model/Introduction_to_the_CSS_box_model">https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_model/Introduction_to_the_CSS_box_model</a></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>box model</tag>
        <tag>padding</tag>
        <tag>margin</tag>
        <tag>border</tag>
        <tag>box-sizing</tag>
      </tags>
  </entry>
  <entry>
    <title>css-block-formatting-context</title>
    <url>/2025/04/06/css-block-formatting-context/</url>
    <content><![CDATA[<h1 id="CSS-Block-Formatting-Context-BFC"><a href="#CSS-Block-Formatting-Context-BFC" class="headerlink" title="CSS Block Formatting Context (BFC)"></a>CSS Block Formatting Context (BFC)</h1><p>CSS中的Block Formatting Context(简称BFC - 块级格式化上下文)是一个非常重要的概念，也是前端面试中常考的题目之一，今天我们来彻底学习一下BFC。</p>
<h1 id="什么是BFC"><a href="#什么是BFC" class="headerlink" title="什么是BFC?"></a>什么是BFC?</h1><p>简单来说BFC是一个独立自治的渲染区域，BFC内的样式和BFC外的样式之间互相不影响。</p>
<h1 id="哪些情况下会生成BFC？"><a href="#哪些情况下会生成BFC？" class="headerlink" title="哪些情况下会生成BFC？"></a>哪些情况下会生成BFC？</h1><p>以下情况下都会产生BFC：</p>
<ol>
<li>文档根元素<code>&lt;html&gt;</code>结点</li>
<li>浮动定位元素 - CSS中指定的<code>float</code>值不是<code>none</code></li>
<li>绝对定位元素 - CSS中指定的<code>position</code>值为<code>absolute</code>或<code>fixed</code></li>
<li>CSS中<code>overflow</code>属性的值不是<code>visible</code>或<code>clip</code>的元素<ol>
<li><code>overflow: hidden</code></li>
<li><code>overflow: auto</code></li>
<li><code>overflow: scroll</code></li>
<li><code>overflow: overlay</code></li>
</ol>
</li>
<li>CSS中<code>contain</code>属性值为如下取值的元素<ol>
<li><code>contain: layout</code></li>
<li><code>contain: strict</code></li>
<li><code>contain: content</code></li>
</ol>
</li>
<li>CSS中<code>display</code>属性值为以下取值的情况：<ol>
<li><code>display: flow-root</code></li>
<li><code>display: table-cell</code></li>
<li><code>display: table-caption</code></li>
<li><code>display: flow-root</code></li>
<li><code>display: flex</code></li>
<li><code>display: inline-flex</code></li>
<li><code>display: grid</code></li>
<li><code>display: inline-grid</code></li>
</ol>
</li>
</ol>
<p>可见这个规则十分的复杂，我们不一定要死记硬背这个规则，只要掌握BFC的特性即可。</p>
<h1 id="BFC元素的特性："><a href="#BFC元素的特性：" class="headerlink" title="BFC元素的特性："></a>BFC元素的特性：</h1><h2 id="独立的渲染区域"><a href="#独立的渲染区域" class="headerlink" title="独立的渲染区域"></a>独立的渲染区域</h2><p>这个很好理解，也是BFC最重要的特点，BFC内的元素样式不会影响BFC外的元素样式，反之亦然。</p>
<h2 id="包含浮动元素"><a href="#包含浮动元素" class="headerlink" title="包含浮动元素"></a>包含浮动元素</h2><p>计算BFC的高度时，浮动元素也参与计算</p>
<h2 id="阻止外边距折叠"><a href="#阻止外边距折叠" class="headerlink" title="阻止外边距折叠"></a>阻止外边距折叠</h2><p>BFC内的元素不会和BFC外的元素发生外边距折叠现象。这个特性其实是特性一的延伸。</p>
<h2 id="阻止元素被浮动元素覆盖"><a href="#阻止元素被浮动元素覆盖" class="headerlink" title="阻止元素被浮动元素覆盖"></a>阻止元素被浮动元素覆盖</h2><p>BFC区域不会与浮动元素重叠。</p>
<h1 id="BFC的应用场景"><a href="#BFC的应用场景" class="headerlink" title="BFC的应用场景"></a>BFC的应用场景</h1><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p>请看以下代码，父元素背景为红色，子元素背景绿色，但是渲染后父元素背景色没有出来，这是为什么呢？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>我是浮动元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这是因为父元素内只有一个子元素，而且这个子元素是浮动的，浮动元素会脱离文档流，导致没有元素来撑起父元素，所以父元素的高度为0，这就是所谓的<code>高度塌陷</code>(CSS中还有<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border-collapse">Border collapse</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_model/Mastering_margin_collapsing">Margin collapse</a>，感兴趣的可以一读)，这是浮动布局中常见的一个问题。解决办法是给父元素添加<code>overflow: hidden</code>，这样父元素就会生成一个BFC，而BFC元素计算高度时是包含内部的浮动元素的，所以父元素的高度就会被撑开。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden; <span class="comment">/* 生成BFC */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有一种办法是使用伪元素，这个是比较传统的解决方式了，用完浮动之后及时清除是一个好习惯。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="阻止外边距折叠-1"><a href="#阻止外边距折叠-1" class="headerlink" title="阻止外边距折叠"></a>阻止外边距折叠</h2><p>请参考<a href="http://localhost:4000/2025/04/04/css-margin-collapse/">CSS外边距折叠</a></p>
<h2 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h2><p>float元素和绝对定位元素都会脱离文档流，那么他们会脱离所在的BFC吗？这个问题是我突然想到的，总结如下：</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>浮动(float)</th>
<th>绝对定位(absolute&#x2F;fixed)</th>
</tr>
</thead>
<tbody><tr>
<td>脱离常规文档流</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>脱离所在BFC</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>影响BFC内部布局</td>
<td>是（文字环绕）</td>
<td>否</td>
</tr>
<tr>
<td>参与BFC高度计算</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>定位参照物</td>
<td>BFC内</td>
<td>最近的定位祖先</td>
</tr>
<tr>
<td>典型用途</td>
<td>文字环绕&#x2F;传统布局</td>
<td>精确控制位置&#x2F;叠加元素</td>
</tr>
</tbody></table>
<p>由这个表格可知，float元素还是受BFC控制的，而绝对定位元素则不受BFC控制，绝对定位元素会脱离所在的BFC，直接定位到最近的定位祖先元素上。绝对定位元素可真是CSS中的异类呀。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>bfc</tag>
      </tags>
  </entry>
  <entry>
    <title>css-checkbox-customize-style</title>
    <url>/2025/04/03/css-checkbox-customize-style/</url>
    <content><![CDATA[<p>如何给 Checkbox 添加自定义样式？</p>
<p>各位老铁大家好，又是一个风和日丽的日子，人生苦短，不能总是留恋美好的风景，亦要时时刻刻学习，所谓活到老学到老。今天我们一起来学习一下如何给 html 中的 ckeckbox 添加自定义样式。</p>
<h1 id="如何在-html-中实现-checkbox？"><a href="#如何在-html-中实现-checkbox？" class="headerlink" title="如何在 html 中实现 checkbox？"></a>如何在 html 中实现 checkbox？</h1><p>其实，html 中根本没有<code>checkbox</code>这种控件，也就是说，你不能这样写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">checkbox</span>&gt;</span>remember me<span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而是要像下面这样通过<code>input</code>来实现<code>checkbox</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;remember-me&quot;</span>&gt;</span>Remember me<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;remember-me&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>与之类似的控件还有<code>radio</code>，也需要用<code>input</code>来实现，如果大家对 input 控件感兴趣，可以看看<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input">这篇</a>，可以这样说，掌握了<code>input</code>，基本上就掌握了 html 中<code>form</code>的半壁江山！</p>
<h1 id="如何给-checkbox-添加样式？"><a href="#如何给-checkbox-添加样式？" class="headerlink" title="如何给 checkbox 添加样式？"></a>如何给 checkbox 添加样式？</h1><p>给定如下 html，如果实现自定义 checkbox 的样式？包括颜色和选择框的形状。为了方便操作，我们在<code>checkbox</code>外层包裹了一层<code>div</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;remember-me&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;remember-me&quot;</span>&gt;</span>Remember me<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>有的同学可能认为，这不是很简单的事吗？想要啥样式，直接写不就行了吗？呵呵，你可以试试，你会发现事情并不像你想象的那么简单，好了，长话短说，checkbox 的自定义样式主要分两个方面。</p>
<h2 id="自定义选择框的颜色"><a href="#自定义选择框的颜色" class="headerlink" title="自定义选择框的颜色"></a>自定义选择框的颜色</h2><p>默认情况下，checkbox 的选择框被选中时，应该显示蓝色背景+白色对勾，如果想更改这个颜色，那么可以直接使用 CSS 中的<code>accent-color</code>，这里<code>accent</code>不是口音的意思，而是强调的意思，<code>accent-color</code>也就是强调色。</p>
<p>假如要使上面的 checkbox 复选框被选中时变为紫色，那么可以按照如下方式书写 CSS。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[id=<span class="string">&quot;remember-me&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">accent-color</span>: purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义选择框的形状"><a href="#自定义选择框的形状" class="headerlink" title="自定义选择框的形状"></a>自定义选择框的形状</h2><p>如果我想把 checkbox 选中时的对勾变成小方块该怎么办呢？改变checkbox外形可比改变它的颜色复杂多了，这时候你会发现无论你怎么写样式，都不生效。这是因为默认的样式是无法覆盖的，所以只能换策略，采用先禁用默认样式，然后添加自定义样式的方法。</p>
<h3 id="禁用默认样式"><a href="#禁用默认样式" class="headerlink" title="禁用默认样式"></a>禁用默认样式</h3><p>禁用默认样式的方式有很多，比如隐藏 input 元素：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[id=<span class="string">&quot;remember-me&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，最推荐的还是下面这种。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[id=<span class="string">&quot;remember-me&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">appearance</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义-checkbox-样式"><a href="#自定义-checkbox-样式" class="headerlink" title="自定义 checkbox 样式"></a>自定义 checkbox 样式</h3><p>总体的思路就是使用<code>before</code>伪元素来绘制 checkbox 选择框，然后添加各种状态下的样式，比如鼠标悬停时、选中时、禁用时的样式等等。</p>
<p>完整代码如下，关键点都写到注释里面了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* Hide default input*/</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">input</span><span class="selector-attr">[id=<span class="string">&quot;remember-me&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">appearance</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* Draw a customer checkbox before label */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">input</span><span class="selector-attr">[id=<span class="string">&quot;remember-me&quot;</span>]</span> + <span class="selector-tag">label</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid purple;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* Center the checkmark */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* Change background color on hover */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">input</span><span class="selector-attr">[id=<span class="string">&quot;remember-me&quot;</span>]</span><span class="selector-pseudo">:hover</span> + <span class="selector-tag">label</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#dd94dd</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* Add check mark when checked */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">input</span><span class="selector-attr">[id=<span class="string">&quot;remember-me&quot;</span>]</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">label</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&quot;\2713&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: purple;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* vertical center checkbox and label */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.checkbox-label</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">user-select</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox-container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;remember-me&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;remember-me&quot;</span>&gt;</span>Remember me<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="伪元素的居中对齐"><a href="#伪元素的居中对齐" class="headerlink" title="伪元素的居中对齐"></a>伪元素的居中对齐</h2><p>可以对伪元素的宿主元素采用 flex 布局，比如上面例子中的<code>label</code>标签，这样伪元素和字符串<code>Remember-me</code>就可以作为 flex 布局中的子元素进行对齐了。</p>
<p>上面的例子采用的是<code>for/id</code>形式的 label，如果是包裹式 label，情况则又不同了。</p>
<h2 id="包裹式-label"><a href="#包裹式-label" class="headerlink" title="包裹式 label"></a>包裹式 label</h2><p>如果采用的是包裹式 label，那么自定义的方式又有所不同，包裹式 label 如下所示，用一个 label 标签包裹住 input 控件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox-container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox-label&quot;</span>&gt;</span></span><br><span class="line">    Remember me</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这种方式下，当隐藏掉 label 包裹的 input 时，label 内部就空了，这导致添加伪元素十分不便，所以我们在 input 后面添加一个 span 元素，这个元素的作用无他，不过是为了方便添加伪元素。另外 label 已经是最外层元素了，所以 label 外层的 div 也就没有存在的必要了，将其删除，修改后的代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox-container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;remember-me&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br><span class="line">  Remember me</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;checkmark&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>样式文件如下，思路都在注释里面了，直接看吧。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.checkbox-container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative; <span class="comment">/*子元素有absolute布局，这里要做relative*/</span></span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">36px</span>; <span class="comment">/* 为label标签和选择框之间留出空间 */</span></span><br><span class="line">    <span class="attribute">cursor</span>: pointer; <span class="comment">/* 鼠标悬停时变成小手 */</span></span><br><span class="line">    <span class="attribute">user-select</span>: none; <span class="comment">/* 防止选择时选中label文本(Remember me) */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 隐藏默认的选择框 */</span></span><br><span class="line">  <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">appearance</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 利用span元素创建一个选择框 */</span></span><br><span class="line">  <span class="selector-class">.checkmark</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 鼠标悬停时改变选择框背景色为深灰色，注意这里的选择器很复杂，为的就是无论悬停在文本上还是选择框上，背景都改变如果只是简单的使用.checkmark，那么鼠标悬停在文本上时，背景色不会改变。*/</span></span><br><span class="line">  <span class="selector-class">.checkbox-container</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">input</span> ~ <span class="selector-class">.checkmark</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 选中时，改变选择框背景色为蓝色 */</span></span><br><span class="line">  <span class="selector-class">.checkbox-container</span> <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.checkmark</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#2196f3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 绘制选择框内的对勾，这里实际上利用border绘制了一个横折，然后旋转45形成对勾 未选中时，默认隐藏对勾*/</span></span><br><span class="line">  <span class="selector-class">.checkmark</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">9px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: solid white;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">3px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*选中时显示对勾 */</span></span><br><span class="line">  <span class="selector-class">.checkbox-container</span> <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.checkmark</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>今天就写到这里啦，大家有什么想法，欢迎留言讨论，我们下期再见。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>customize</tag>
        <tag>css</tag>
        <tag>checkbox</tag>
      </tags>
  </entry>
  <entry>
    <title>css-display-inline-inlineblock-block</title>
    <url>/2025/02/11/css-display-inline-inlineblock-block/</url>
    <content><![CDATA[<ol>
<li><strong>display: inline</strong> 的局限性</li>
</ol>
<ul>
<li>不能设置宽高 ：因为 <code>inline</code> 元素的尺寸完全由内容决定，无法通过 CSS 手动调整。</li>
<li>垂直方向的 <code>margin</code> 和 <code>padding</code> 无效 ：虽然可以设置这些属性，但它们不会影响其他元素的布局。</li>
<li>适合文本内容 ：通常用于 <code>&lt;span&gt;</code>、<code>&lt;a&gt;</code> 等需要与文本混合排版的元素。</li>
</ul>
<ol start="2">
<li><strong>display: inline-block</strong> 的优势,结合了 <code>inline</code> 和 <code>block</code> 的优点 ：</li>
</ol>
<ul>
<li>像 <code>inline</code> 一样可以同行排列。</li>
<li>像 <code>block</code> 一样可以设置宽高和垂直方向的 <code>padding/margin</code>。</li>
<li>适合需要精确控制尺寸的行内元素 ：例如导航栏中的按钮、图片画廊等。</li>
</ul>
<ol start="3">
<li><strong>display: block</strong> 的典型用途</li>
</ol>
<ul>
<li>结构化布局 ：用于页面的主要结构划分，例如标题、段落、表格等。</li>
<li>独占一行 ：确保元素不会与其他元素共享同一行。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table>
<thead>
<tr>
<th>特性</th>
<th>display:block</th>
<th>display:inline-block</th>
<th>display:inline</th>
</tr>
</thead>
<tbody><tr>
<td>是否独占一行</td>
<td>是</td>
<td>否</td>
<td>否</td>
</tr>
<tr>
<td>是否可以设置宽高</td>
<td>可以</td>
<td>可以</td>
<td>不可以</td>
</tr>
<tr>
<td>是否受空白符影响</td>
<td>不受影响</td>
<td>受影响（元素之间可能有间隙）</td>
<td>不受影响</td>
</tr>
<tr>
<td>默认宽度</td>
<td>填满父容器</td>
<td>仅包裹内容</td>
<td>仅包裹内容</td>
</tr>
<tr>
<td>是否可以设置垂直 padding&#x2F;margin</td>
<td>可以</td>
<td>可以</td>
<td>不可以</td>
</tr>
<tr>
<td>适用场景</td>
<td>需要独占一行的布局（如标题、段落）</td>
<td>需要同行排列且能设置宽高的布局（如按钮）</td>
<td>需要同行排列且无需设置宽高的布局（如文本）</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>display</tag>
        <tag>inline</tag>
        <tag>inline-block</tag>
        <tag>block</tag>
      </tags>
  </entry>
  <entry>
    <title>css-horizontal-align-center</title>
    <url>/2025/03/04/css-horizontal-align-center/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>center</tag>
      </tags>
  </entry>
  <entry>
    <title>element.style vs window.getComputedStyle</title>
    <url>/2023/07/22/css-element-style-vs-window-getComputedStyle/</url>
    <content><![CDATA[<h1 id="element-style-vs-window-getComputedStyle"><a href="#element-style-vs-window-getComputedStyle" class="headerlink" title="element.style vs window.getComputedStyle"></a>element.style vs window.getComputedStyle</h1><p>这两种方式都可以获取元素的样式，但是它们之间有什么区别呢？首先让我们看看在前端开发中，有哪几种方式可以设置样式。</p>
<h2 id="inline-style-内联样式"><a href="#inline-style-内联样式" class="headerlink" title="inline style(内联样式)"></a>inline style(内联样式)</h2><p>内联样式是指直接在元素上设置样式，比如下面的代码中，<code>&lt;div&gt;</code>元素上设置了<code>style</code>属性，这就是内联样式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="inner-style-内部样式"><a href="#inner-style-内部样式" class="headerlink" title="inner style(内部样式)"></a>inner style(内部样式)</h2><p>内部样式是指在<code>&lt;head&gt;</code>标签中添加<code>&lt;style&gt;</code>标签，然后在<code>&lt;style&gt;</code>标签中添加样式，比如下面的代码中<code>div &#123;color: red;&#125;</code>就是内部样式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="external-stylesheet-外部样式表"><a href="#external-stylesheet-外部样式表" class="headerlink" title="external stylesheet(外部样式表)"></a>external stylesheet(外部样式表)</h2><p>外部样式表是指将样式单独放在一个文件中，然后在<code>&lt;head&gt;</code>标签中使用<code>&lt;link&gt;</code>标签引入，比如下面的代码中，<code>&lt;link&gt;</code>标签引入了<code>style.css</code>这个文件，这就是外部样式表。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="element-style-和-window-getComputedStyle的区别"><a href="#element-style-和-window-getComputedStyle的区别" class="headerlink" title="element.style 和 window.getComputedStyle的区别"></a>element.style 和 window.getComputedStyle的区别</h2><p>再来看<code>element.style</code>和<code>window.getComputedStyle</code>的区别：</p>
<ol>
<li><code>element.style</code>只能获取内联样式，</li>
<li><code>window.getComputedStyle</code>可以获取内联样式、内部样式和外部样式表。</li>
</ol>
<p>所以大多数情况下，我们都是使用<code>window.getComputedStyle</code>来获取元素的样式。</p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>下面的代码中，<code>style.css</code>文件中设置了外部样式表。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;my-div&quot;</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;my-div&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">style</span>.<span class="property">color</span>); <span class="comment">// &quot;&quot; - empty string. 因为div元素上没有设置内联样式。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(div).<span class="property">color</span>); <span class="comment">// rgb(0, 0, 255)</span></span><br></pre></td></tr></table></figure>
<p>可以看到，<code>element.style</code>只能获取内联样式，而<code>window.getComputedStyle</code>可以获取内联样式、内部样式和外部样式表。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style">MDN - HTMLElement.style</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle">MDN - window.getComputedStyle()</a></li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>style</tag>
        <tag>css</tag>
        <tag>getcomputedstyle</tag>
      </tags>
  </entry>
  <entry>
    <title>css-interview</title>
    <url>/2025/02/22/css-interview/</url>
    <content><![CDATA[<ol>
<li>How to implement responsive layout with CSS?</li>
<li>What’s flex layout in CSS?</li>
<li>简述CSS中盒模型是什么？</li>
<li>grid布局极其优点？</li>
<li>手写一个圣杯布局。</li>
<li>如何实现垂直居中？除了flex布局还有其他方案吗？</li>
<li>float不是完全脱离文档流，这点和position: absolute有区别的。</li>
<li>CSS中有哪些实现透明的方式？</li>
<li>CSS中选择器有哪些？优先级是怎样的？</li>
<li>如何实现一个三角形？</li>
<li>如何实现一个圆形？</li>
<li>如何实现一个梯形？</li>
</ol>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>interview</tag>
        <tag>css</tag>
        <tag>flex</tag>
        <tag>grid</tag>
      </tags>
  </entry>
  <entry>
    <title>css-last-child-vs-last-of-type</title>
    <url>/2024/08/01/css-last-child-vs-last-of-type/</url>
    <content><![CDATA[<h2 id="last-child"><a href="#last-child" class="headerlink" title=":last-child"></a>:last-child</h2><p>The <code>:last-child</code> CSS pseudo-class represents the last element among a group of sibling elements.</p>
<h2 id="last-of-type"><a href="#last-of-type" class="headerlink" title=":last-of-type"></a>:last-of-type</h2><p>The :last-of-type CSS pseudo-class represents the last element of its type among a group of sibling elements.</p>
<p>Given the following types of elements, mark the background color of the last <code>li</code> element as green.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Angular<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>React<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>The following css will not work, because the last element is <code>span</code>, not <code>li</code>.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>But the following css works</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:last-of-type</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>See <a href="https://developer.mozilla.org/en-US/play?id=FF41abhgvLgFICAeu/s1mH1eX4ogSM5sk6lPN8iXs2M4Pu7Zhzv73YLI9mL97NjLKhcuKG01T9TU40kU">here</a> for details.</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>last-child</tag>
        <tag>last-of-type</tag>
      </tags>
  </entry>
  <entry>
    <title>css-replaced-elements</title>
    <url>/2025/03/30/css-replaced-elements/</url>
    <content><![CDATA[<h1 id="CSS-Replaced-Elements"><a href="#CSS-Replaced-Elements" class="headerlink" title="CSS Replaced Elements"></a>CSS Replaced Elements</h1><p>在Web开发中，<code>可替换元素</code>是指如下一类元素：</p>
<ol>
<li>内容来自外部资源。</li>
<li>内容定义在document之外。</li>
</ol>
<p>这么说可能有点抽象，我们举一个例子，下面的html中通过<code>img</code>标签引入了一个图片：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://example.com/image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Example Image&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这个例子中，<code>img</code>元素就是一个可替换元素，因为它的内容（图片）来自于外部资源（<code>src</code>属性指定的URL）。</p>
<p>Html中的可替换元素有如下这些：</p>
<ol>
<li><code>&lt;img&gt;</code>：用于显示图像。</li>
<li><code>&lt;video&gt;</code>：用于显示视频。</li>
<li><code>&lt;iframe&gt;</code>：用于嵌入其他HTML文档。</li>
<li><code>&lt;embed&gt;</code>：用于嵌入外部内容，如PDF文件或Flash动画。</li>
<li><code>&lt;fencedframe&gt;</code>：用于嵌入其他HTML文档。</li>
</ol>
<p>以下这些tag在某些情况下也可能是可替换元素：</p>
<ol>
<li><code>&lt;audio&gt;</code>：用于显示音频。</li>
<li><code>&lt;canvas&gt;</code>：用于绘制图形。</li>
<li><code>&lt;object&gt;</code>：用于嵌入外部内容，如PDF文件或Flash动画。</li>
<li><code>&lt;input&gt;</code>：用于显示表单控件。(<code>image</code> input types only)</li>
</ol>
<h2 id="可替换元素的特点"><a href="#可替换元素的特点" class="headerlink" title="可替换元素的特点"></a>可替换元素的特点</h2><ol>
<li>有自己的固有尺寸和固有纵横比，比如对于一个image来说，这个image本身就有大小和纵横比。当然，多数情况下，我们会用CSS控制它们显示的大小。</li>
<li>不能使用<code>:before</code>和<code>:after</code>伪元素。</li>
</ol>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>replaced elements</tag>
      </tags>
  </entry>
  <entry>
    <title>css-position</title>
    <url>/2025/03/04/css-position/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>position是CSS中非常重要的一个属性，也是面试中常考的考点之一！比如昨天我的面试中面试官就问我，absolute和fixed有什么区别？可惜我没有答上来。</p>
<p>那么这个position到底代表什么呢？顾名思义，就是位置，position决定了浏览器如何确定一个元素的位置。来看一下官方的定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The position CSS property sets how an element is positioned in a document. </span><br><span class="line">The top, right, bottom, and left properties determine the final location of positioned elements.</span><br></pre></td></tr></table></figure>

<p>我们翻译一下这段话：position属性设置了一个元素如何在文档中定位。top, right, bottom, left属性决定了定位元素的最终位置。也就是说：<code>position</code>决定了如何放置一个元素，<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>决定了元素的最终位置。</p>
<p>position的取值有5种，分别是：<code>static</code>、<code>relative</code>、<code>absolute</code>、<code>fixed</code>、<code>sticky</code>。下面我们来详细了解一下这5种取值。</p>
<h2 id="positioned-element"><a href="#positioned-element" class="headerlink" title="positioned element"></a>positioned element</h2><p>A positioned element is an element whose computed position value is either relative, absolute, fixed, or sticky. (In other words, it’s anything except static.)</p>
<p>说白了，只要元素的<code>position</code>属性不是<code>static</code>，那么这个元素就是一个<code>positioned element</code>。</p>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>这个是默认值，可以这么说，平时开发的时候我们基本用不到这个值，因为它什么也不做，元素就是正常按照文档流一个一个排列就完了。而且由于是默认值，如果不设置<code>position</code>属性，那么元素就是<code>static</code>的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div3</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../images/css-position-static.png" alt="static"></p>
<p>注意在<code>position: static</code>模式下，<code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>是不起作用的，因为这些属性只对<code>positioned elements</code>有效。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#child</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>; <span class="comment">/* This doesn&#x27;t work! need nonstatic position */</span></span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h2><p>记得之前有一次面试，面试官突然问我，<code>position: relative</code>你知道吧，我说那必须知道啊！然后他说：那么你说说<code>relative</code>到底相对的是谁？我一下就懵了，之前根本没有思考过这个问题。其实答案很简单，相对的是元素自己本来的位置。也就是说，<code>relative</code>是相对于元素自己本来的位置进行定位的。- 注意不是相对于父元素，这是误解。</p>
<p>下图中绿色方块定位方式设置为relative，相对其原始位置向右偏移100像素，向下偏移20像素，原始位置保留，没有影响红色方块和蓝色方块。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div2</span> &#123;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div3</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../images/css-position-relative.png" alt="relative"></p>
<p>设置为<code>relative</code>的元素不会脱离文档流，最终位置相对于元素自己本来的位置进行偏移。原始的位置会保留，不影响其他元素（子元素除外）布局。</p>
<p>注意：<code>relative</code>会创建一个<code>stack context</code>，详情请看<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_positioned_layout/Understanding_z-index/Stacking_context">这里</a>.</p>
<h2 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h2><p><code>absolute</code>是指绝对定位，它是相对于最近的非static定位的父元素进行定位的。如果没有非static定位的父元素，那么它是相对于<code>&lt;html&gt;</code>元素进行定位的。</p>
<p>标记为<code>position: absolute</code>的元素会脱离文档流，不占据空间，不影响其他元素的布局。下图中绿色方块定位方式设置为absolute，相对于其最近的非static定位的父元素（body）进行定位，向右偏移100像素，向下偏移20像素，原始位置不保留，影响蓝色方块的布局（蓝色方块补充了绿色方块原来的位置）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div2</span> &#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div3</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../images/css-position-absolute.png" alt="absolute"></p>
<h2 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h2><p><code>fixed</code>和<code>absolute</code>非常相似，元素也会脱离文档流，不同的是<code>fixed</code>是相对于<code>viewport</code>进行定位的。也就是说，无论你怎么滚动页面，<code>fixed</code>元素都会固定在浏览器视口的某个位置。（仿佛固定在屏幕上一样）</p>
<p><code>fixed</code>的使用场景有很多，比如常见的页面右下角的返回顶部按钮，基本都是用<code>fixed</code>实现的。比如下面这个例子，注意这种场景不能使用<code>absolute</code>来实现，否则当页面滚动时，元素会跟着滚动。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#child</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">32px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h2><p><code>sticky</code> - 黏性的；黏的，其实从这个名字就可以看出来，这种布局可以实现黏性效果，比如常见的吸顶效果（当页面滚动时，某个元素，比如顶部菜单栏固定不动），下面我们看看如何实现<code>sticky</code>效果。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>This is a sticky bar<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500vh</span>; // <span class="number">500</span>个视口高度，使页面可以垂直滚动</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: sticky; // 设置为sticky</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">16px</span>; // 当滚动至距离父元素顶部<span class="number">16px</span>时，元素固定，也就是变得sticky.</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">64px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ad1414</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>sticky</code>元素不会脱离文档流，它会按正常的文档流进行布局，但是当页面滚动至临界距离时（上面设置的<code>top: 16px</code>）,元素就会固定住，不会继续滚动了，所以sticky也是有参照元素的，它参照的元素是它最近的可滚动的祖先元素。</p>
<p><code>sticky</code>是相对定位和固定定位的结合体。它的行为就像是<code>relative</code>和<code>fixed</code>的合体，当元素在屏幕中可见时，它的行为就像<code>relative</code>，当元素在屏幕外时，它的行为就像<code>fixed</code>。</p>
<h2 id="position属性如何影响top-right-bottom-left的表现？"><a href="#position属性如何影响top-right-bottom-left的表现？" class="headerlink" title="position属性如何影响top, right, bottom, left的表现？"></a>position属性如何影响<code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>的表现？</h2><p>position属性的值会直接影响<code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>的表现，具体如下：</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table>
<thead>
<tr>
<th>值</th>
<th>是否脱离文档流</th>
<th>是否保留原来位置</th>
<th>是否影响 top&#x2F;bottom&#x2F;left&#x2F;right</th>
<th>参照元素</th>
<th>是否创建堆叠上下文</th>
</tr>
</thead>
<tbody><tr>
<td><code>static</code></td>
<td>否</td>
<td>是</td>
<td>否</td>
<td>无（按照正常文档流布局）</td>
<td>否</td>
</tr>
<tr>
<td><code>relative</code></td>
<td>否</td>
<td>是</td>
<td>是</td>
<td>元素自身原本的位置</td>
<td>否（除非设置了 <code>z-index</code> 或其他触发条件）</td>
</tr>
<tr>
<td><code>absolute</code></td>
<td>是</td>
<td>否</td>
<td>是</td>
<td>最近的已定位祖先元素（非 <code>static</code>），否则为 <code>&lt;html&gt;</code></td>
<td>否（除非设置了 <code>z-index</code> 或其他触发条件）</td>
</tr>
<tr>
<td><code>fixed</code></td>
<td>是</td>
<td>否</td>
<td>是</td>
<td>浏览器视口（viewport）</td>
<td>否（除非设置了 <code>z-index</code> 或其他触发条件）</td>
</tr>
<tr>
<td><code>sticky</code></td>
<td>部分（滚动时脱离）</td>
<td>是</td>
<td>是</td>
<td>元素原本的位置与视口之间的相对关系</td>
<td>否（除非设置了 <code>z-index</code> 或其他触发条件）</td>
</tr>
</tbody></table>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position">https://developer.mozilla.org/en-US/docs/Web/CSS/position</a></li>
</ol>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>position</tag>
        <tag>absolute</tag>
        <tag>relative</tag>
        <tag>fixed</tag>
      </tags>
  </entry>
  <entry>
    <title>css-style-types</title>
    <url>/2025/02/11/css-style-types/</url>
    <content><![CDATA[<h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><p>CSS中一共有三种样式，分别是，内联样式，内部样式，外部样式。</p>
<h3 id="内联样式-1"><a href="#内联样式-1" class="headerlink" title="内联样式"></a>内联样式</h3><p>所谓内联样式，是指直接写在html元素上的样式，通过给html指定style属性，比如下面的代码给<code>h1</code>设置文本居中。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span>Inline style<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h3><p>所谓内部样式，是指直接写在<code>&lt;style&gt;</code>块上的样式，<code>&lt;style&gt;</code>块一般位于html中的head区块中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#DDDDDD</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h3><p>所谓外部样式，是指写在独立的css文件中的样式，然后引入到html文件中供使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这三种样式的优先级如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">内联样式 &gt; 内部样式 &gt; 外部样式</span><br></pre></td></tr></table></figure>

<p>看一个列子，下面这个html包含了以上三种样式</p>
<ul>
<li>div元素中的内联样式 - 设置文本为蓝色</li>
<li>head&#x2F;style标签中的内部样式 - 设置文本为绿色</li>
<li>head&#x2F;link标签中的外部样式 - 设置文本为红色</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyles.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#DDDDDD</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: blue&quot;</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span>This is a div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个页面会显示蓝色字符串：<code>This is a div</code>.</p>
<p>用Chrome浏览器打开这个html，按键盘上的F12键进入开发者工具，并点击右侧的 <code>Elements</code>tab，然后点击 <code>Styles</code>tab，可以看到三种样式。</p>
<p><img src="/../images/css-style-types.png" alt="css-style-type"></p>
<p><code>Styles</code>标签下依次列出了四种样式，优先级从高到低</p>
<ul>
<li>element.style - 内联样式，颜色是蓝色，有最高优先级。</li>
<li>.parent - 内部样式，优先级次之</li>
<li>.parent (mystyles.css:1) - 外部样式，优先级再次之</li>
<li>div (user agent stylesheet) - 浏览器默认样式，优先级最低</li>
</ul>
<p>带删除线的样式（内部样式中的color: green, 和外部样式中的color: red）表示这个样式被覆盖了，有更高优先级的样式抢先了。我们可以将高优先级的样式勾掉（单击样式左侧的checkbox），这样浏览器就会自动应用低优先级的样式。 </p>
<p>下图就是把内联样式和内部样式中的color全部勾掉，浏览器就是用了外部样式中的color，文本也就变成了红色。</p>
<p><img src="/../images/css-chrome-tool.png" alt="css-chrome-tool"></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>style</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css-margin-collapse</title>
    <url>/2025/04/04/css-margin-collapse/</url>
    <content><![CDATA[<h1 id="什么是外边距折叠（塌陷）"><a href="#什么是外边距折叠（塌陷）" class="headerlink" title="什么是外边距折叠（塌陷）"></a>什么是外边距折叠（塌陷）</h1><p>CSS Margin Collapse - CSS外边距折叠（也有叫外边距塌陷的），是指在某些情况下，两个相邻(或嵌套)的元素的外边距会合并成一个外边距，这个现象被称为外边距折叠。</p>
<h1 id="外边距折叠的特征："><a href="#外边距折叠的特征：" class="headerlink" title="外边距折叠的特征："></a>外边距折叠的特征：</h1><ol>
<li>外边距折叠只发生在<code>垂直方向</code>上，也就是说只有<code>margin-top</code>或者<code>margin-bottom</code>会折叠，<code>margin-left</code>和<code>margin-right</code>不会折叠。</li>
<li>发生外边距折叠时，会取相邻两个元素的外边距中较大的一个作为折叠后的外边距。</li>
<li>浮动元素和绝对定位元素不会发生外边距折叠。</li>
</ol>
<h2 id="发生外边距折叠需要满足如下条件："><a href="#发生外边距折叠需要满足如下条件：" class="headerlink" title="发生外边距折叠需要满足如下条件："></a>发生外边距折叠需要满足如下条件：</h2><ol>
<li>相邻元素</li>
<li>嵌套元素之间没有分隔</li>
<li>空白元素</li>
</ol>
<h2 id="外边距折叠的例子"><a href="#外边距折叠的例子" class="headerlink" title="外边距折叠的例子"></a>外边距折叠的例子</h2><h3 id="相邻元素的外边距折叠"><a href="#相邻元素的外边距折叠" class="headerlink" title="相邻元素的外边距折叠"></a>相邻元素的外边距折叠</h3><p>以下两个div元素，宽高都是100px；上面的div元素为红色背景，底部外边距是16px；下面的div绿色背景，顶部外边距是16px；由于两个div元素上下相邻，故而发生外边距折叠，所以二者垂直相距16px，而不是32px。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#div1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#div2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>margin-bottom: 16px;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>margin-top: 16px;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/../images/css-margin-collapse-sibling-elements.jpg" alt="相邻元素的外边距折叠"></p>
<h3 id="如何防止相邻元素外边距折叠？"><a href="#如何防止相邻元素外边距折叠？" class="headerlink" title="如何防止相邻元素外边距折叠？"></a>如何防止相邻元素外边距折叠？</h3><p>浏览器之所以有外边距折叠这个操作就是为了减少元素间的空白区域，所以大多数时候外边距折叠都不是问题，但是如果你非要禁止外边距折叠的话，可以参考下面的方法：</p>
<ol>
<li>在相邻元素间添加隔离元素，比如上面的例子中，我们可以在两个div元素之间添加一个空的div元素，并设置其<code>display</code>属性为<code>flow-root</code>，这样就可以防止外边距折叠了。标记为<code>flow-root</code>的元素会自动形成一个BFC（Block Formatting Context），从而防止外边距折叠。- 这种方式入侵性较小，而且不影响原来的布局，缺点是需要引入一个额外的div元素。 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: flow-root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>使用flex布局包裹两个div，flex布局内的元素不会发生外边距折叠。 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: flex; flex-direction: column&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
 这里我们也可以使用flex布局的gap来代替margin，方法是删除两个div中的margin，然后在flex布局中添加gap属性。 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: flex; flex-direction: column; gap: 32px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>使用grid布局包裹两个div，grid布局内的元素不会发生外边距折叠。 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: grid;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>给第一div添加<code>display: inline-block</code>属性，产生一个新的BFC（Block Formatting Context），从而防止外边距折叠。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#div1</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
上面四种方法都是通过产生一个新的BFC（Block Formatting Context）来防止外边距折叠的，BFC是一个独立的渲染区域，里面的元素不会影响到外面的元素，所以在BFC内部的元素之间不会发生外边距折叠。关于BFC更多的信息，请参考<a href="http://localhost:4000/2025/04/06/css-block-formatting-context/">这里</a>。</li>
</ol>
<h3 id="嵌套元素的外边距折叠"><a href="#嵌套元素的外边距折叠" class="headerlink" title="嵌套元素的外边距折叠"></a>嵌套元素的外边距折叠</h3><p>嵌套元素是指有包含关系的元素，这种元素之间的外边距折叠通常发生在父元素与第一个子元素或者父元素与最后一个子元素之间。</p>
<p>下面代码中，父元素是红色背景，宽高都是200px；子元素是绿色背景，宽高都是100px。虽然子元素设置了顶部外边距为16px，但是并未生效。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#parent</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#child</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>渲染结果如下，绿色方块顶部并未出现外边距。<br><img src="/../images/css-margin-collapse-nested-elements.jpg" alt="嵌套元素的外边距折叠"></p>
<h3 id="如何防止嵌套元素外边距折叠？"><a href="#如何防止嵌套元素外边距折叠？" class="headerlink" title="如何防止嵌套元素外边距折叠？"></a>如何防止嵌套元素外边距折叠？</h3><p>处理嵌套元素外边距折叠的方法和相邻元素的处理方法差不多，都是利用生成的BFC来阻止外边距折叠。</p>
<ol>
<li>给父元素添加<code>overflow: hidden</code>属性，产生一个新的BFC（Block Formatting Context），从而防止外边距折叠。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#parent</span> &#123;</span><br><span class="line">   <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>给父元素添加<code>display: flow-root</code>属性，产生一个新的BFC（Block Formatting Context），从而防止外边距折叠。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#parent</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: flow-root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>给父元素添加<code>display: flex</code>属性，产生一个新的BFC（Block Formatting Context），从而防止外边距折叠。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#parent</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>给父元素添加<code>display: grid</code>属性，产生一个新的BFC（Block Formatting Context），从而防止外边距折叠。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#parent</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>给子元素添加<code>display: inline-block</code>属性，产生一个新的BFC（Block Formatting Context），从而防止外边距折叠。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#child</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_model/Mastering_margin_collapsing">https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_model/Mastering_margin_collapsing</a></li>
<li><a href="http://localhost:4000/2025/04/06/css-block-formatting-context/">http://localhost:4000/2025/04/06/css-block-formatting-context/</a></li>
</ol>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>margin</tag>
        <tag>margin collapse</tag>
      </tags>
  </entry>
  <entry>
    <title>css-vertical-align-center</title>
    <url>/2025/02/26/css-vertical-align-center/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>垂直居中是CSS中一个重要的知识点，也是面试中常考的内容，今天咱们来详细讲解一下垂直居中。我们不会简单的罗列css样式，而是按不同分类来处理，这样更有利于理解。</p>
<h2 id="inline或者inline-元素的垂直居中（本质是文本垂直居中）"><a href="#inline或者inline-元素的垂直居中（本质是文本垂直居中）" class="headerlink" title="inline或者inline-*元素的垂直居中（本质是文本垂直居中）"></a>inline或者inline-*元素的垂直居中（本质是文本垂直居中）</h2><h3 id="padding-top-padding-bottom"><a href="#padding-top-padding-bottom" class="headerlink" title="padding-top &#x3D; padding-bottom"></a>padding-top &#x3D; padding-bottom</h3><p>inline元素是指不会独占一行的元素，比如<code>span</code>, <code>a</code>, <code>img</code>等等。inline元素的垂直居中，可以通过设置padding-top和padding-bottom为相同的值来实现垂直居中。考虑如下html代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>This is a span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们先设置个背景色，方便查看<code>span</code>元素的高度，然后设置<code>padding-top</code>和<code>padding-bottom</code>为16px，这样span元素内的文本就垂直居中了。此方案也适用于多行文本。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: green;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">16px</span>;</span><br><span class="line"><span class="attribute">padding-bottom</span>: <span class="number">16px</span>;</span><br></pre></td></tr></table></figure>
<h3 id="line-height-height"><a href="#line-height-height" class="headerlink" title="line-height &#x3D; height"></a>line-height &#x3D; height</h3><p>如果是对block element里面的文本垂直居中（比如<code>div</code>, <code>p</code>等），那么可以尝试设置<code>line-height</code>等于<code>height</code>，这样也可以实现垂直居中。- 此方案不适用于多行文本。（多行文本时，文本会超出容器外，因为line-height本质上设置的时行与行之间的垂直距离）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>This is a div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: green;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br></pre></td></tr></table></figure>
<p>需要注意的是<code>span</code>属于inline元素，<code>height</code>对于inline元素是无效的。inline元素的宽度和高度由内容决定，所以<code>height</code>及<code>width</code>对于inline元素是无效的。但是<code>line-height</code>对于inline元素是有效的。</p>
<h2 id="block-elements的垂直居中"><a href="#block-elements的垂直居中" class="headerlink" title="block elements的垂直居中"></a>block elements的垂直居中</h2><h3 id="知道元素的高度"><a href="#知道元素的高度" class="headerlink" title="知道元素的高度"></a>知道元素的高度</h3><ol>
<li>设置父元素position: relative, 子元素position: absolute</li>
<li>设置子元素height: 100px， 这个是必须的，此条件就是元素高度已知。</li>
<li>设置子元素top: 50%, margin-top: -height&#x2F;2（50px）</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="property">parent</span> &#123;</span><br><span class="line">  <span class="attr">position</span>: relative;</span><br><span class="line">  <span class="attr">height</span>: 400px;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">100</span>%;</span><br><span class="line">  background-<span class="attr">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">child</span> &#123;</span><br><span class="line">  <span class="attr">position</span>: absolute;</span><br><span class="line">  <span class="attr">height</span>: 100px; <span class="comment">/* You know the height of the element */</span></span><br><span class="line">  <span class="attr">top</span>: <span class="number">50</span>%;</span><br><span class="line">  margin-<span class="attr">top</span>: -50px; <span class="comment">/* half of element height */</span></span><br><span class="line">  background-<span class="attr">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###不知道元素高度<br>大多数情况下，元素的高度是未知的，这时候可以使用如下方法，可见我们使用<code>transform: translateY(-50%);</code>代替了<code>margin-top: -50px;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用table-cell"><a href="#使用table-cell" class="headerlink" title="使用table-cell"></a>使用table-cell</h3><p>如果你不在乎子元素会被拉伸并填满父元素的话，可以使用table-cell来实现垂直居中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: table; // 父元素使用<span class="selector-tag">table</span>布局</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell; // 子元素使用<span class="selector-tag">table</span>-cell布局</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle; // 垂直居中</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用flex布局"><a href="#使用flex布局" class="headerlink" title="使用flex布局"></a>使用flex布局</h3><p>这是目前来讲最方便的方式了，使用flex布局可以轻松实现水平和垂直居中。首先将父元素设置为flex布局，然后设置<code>flex-direction: column;</code>将布局方式改为纵向排列（默认是横向排列），然后设置<code>justify-content: center;</code>即可实现垂直居中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://css-tricks.com/centering-css-complete-guide/">https://css-tricks.com/centering-css-complete-guide/</a></li>
</ol>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>center</tag>
        <tag>vertical-align</tag>
      </tags>
  </entry>
  <entry>
    <title>css-troubleshooting</title>
    <url>/2025/04/06/css-troubleshooting/</url>
    <content><![CDATA[<h1 id="body宽度设置为100-，为啥还有横向滚动条？"><a href="#body宽度设置为100-，为啥还有横向滚动条？" class="headerlink" title="body宽度设置为100%，为啥还有横向滚动条？"></a>body宽度设置为100%，为啥还有横向滚动条？</h1><h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象:"></a>问题现象:</h2><p>这是一个非常简单的例子，创建一个html文件，设置body的宽度为100%，然后在浏览器中打开，发现有横向滚动条。为什么呢？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    This is body</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h2><p>这是因为浏览器自动为body元素添加了<code>margin</code>, 默认情况下，横向和纵向的margin都是8px，所以body的实际宽度是：100% + 8px + 8px，这已经超出父元素16px了，所以肯定会出现横向滚动条。</p>
<h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>知道了原因就好解决了，解决的方法就是将margin排除在外：</p>
<h3 id="方法一：删除浏览器默认的margin（推荐）"><a href="#方法一：删除浏览器默认的margin（推荐）" class="headerlink" title="方法一：删除浏览器默认的margin（推荐）"></a>方法一：删除浏览器默认的margin（推荐）</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法二：动态计算body的宽度"><a href="#方法二：动态计算body的宽度" class="headerlink" title="方法二：动态计算body的宽度"></a>方法二：动态计算body的宽度</h3><p>这个方法是在计算body宽度时，减去左右两侧的margin。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">16px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：如果删除掉body里面的内容，则不会出现横向滚动条，这是因为浏览器在处理空元素时，可能会进行某些优化，所以不会出现横向滚动条。</p>
<h1 id="20-80-不等于100-？"><a href="#20-80-不等于100-？" class="headerlink" title="20% + 80%不等于100%？"></a>20% + 80%不等于100%？</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>看下面这个典型的两列布局，左侧菜单栏宽度为20%，右侧内容区宽度为80%，按说它们的总宽度是100%，正好填满一行，但实际情况确产生了换行，这说明总宽度超过了100%，为什么呢？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.aside</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#898c89</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#bf00ff</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span>menu<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>可以看到，这是一个典型的两列布局，用的是float布局，注意：使用float做布局在现代CSS中已经不推荐了，如果要做两列布局，更好的方式是使用flex或grid布局，这里用float仅作实例之用。float在现代CSS中最重要的作用就剩下文字环绕了，除此之外不推荐使用float。</p>
<p>但是坏就坏在第一个div中有一个<code>margin-right: 8px;</code>，这个margin是会被计算在内的，所以实际宽度为20% + 80% + 8px &gt; 100%，所以会出现换行。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="方法一：删除margin"><a href="#方法一：删除margin" class="headerlink" title="方法一：删除margin"></a>方法一：删除margin</h3><p>解决办法很简单，我们可以将8px的margin去掉。下面的CSS代码从右侧内容区域减去8px的margin。这样总宽度还是100%，就不会出现换行了。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">80%</span> - <span class="number">8px</span>); <span class="comment">/* 这里减去8px */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#bf00ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方法二：使用flex布局（推荐）"><a href="#方法二：使用flex布局（推荐）" class="headerlink" title="方法二：使用flex布局（推荐）"></a>方法二：使用flex布局（推荐）</h3><p>上面提到过，float布局已经不推荐了，使用flex布局更好。下面是使用flex布局的代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.aside</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#898c89</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#bf00ff</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span>menu<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>troubleshooting</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>debugging</title>
    <url>/2024/08/24/debugging/</url>
    <content><![CDATA[<p>This article discuss how to debug Angular&#x2F;Node.js application in WebStorm and VSCode.</p>
<h1 id="Debug-Angular-app"><a href="#Debug-Angular-app" class="headerlink" title="Debug Angular app"></a>Debug Angular app</h1><h2 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h2><ol>
<li>Start angular application<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm start // or ng serve</span><br></pre></td></tr></table></figure></li>
<li>Set breakpoints in the source code in WebStorm Editor.</li>
<li>Press <code>Ctrl + Shift</code> + <code>Click</code> on the URL in the terminal to open the browser.<br><img src="/../images/debug-angular-webstorm.png" alt="debug angular WebStorm"></li>
<li>See <a href="https://blog.jetbrains.com/webstorm/2017/01/debugging-angular-apps/">here</a> for more details.</li>
</ol>
<h2 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h2><h3 id="Launch-with-task-file"><a href="#Launch-with-task-file" class="headerlink" title="Launch with task file"></a>Launch with task file</h3><ol>
<li>Create file <code>launch.json</code> under <code>.vscode</code> folder in project root. <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;debug angular app&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chrome&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm: start&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:4200/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>Create file <code>task.json</code> under <code>.vscode</code> folder in project root. <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?LinkId=733558</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;script&quot;</span><span class="punctuation">:</span> <span class="string">&quot;start&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isBackground&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typescript&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$tsc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;activeOnStart&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;beginsPattern&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;regexp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(.*?)&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;endsPattern&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;regexp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bundle generation complete&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>Click <code>Run and Debug</code> in VSCode’s left side menu. &#x2F;&#x2F; number 1 on picture below</li>
<li>Select <code>debug angular app</code> in the dropdown list. &#x2F;&#x2F; number 2 on picture below</li>
<li>Click the Debug icon or Press <code>F5</code> to start debugging. &#x2F;&#x2F; number 3 on picture below<br><img src="/../images/debug-angular-vscode.png" alt="debug angular VSCode"><br>In this way, VSCode will open a new Chrome window and you can debug the Angular app in VSCode.</li>
</ol>
<h3 id="Launch-without-task-file"><a href="#Launch-without-task-file" class="headerlink" title="Launch without task file"></a>Launch without task file</h3><p>If you don’t want to use <code>task.json</code> file, you can remove it and delete <code>preLaunchTask</code> in <code>launch.json</code> file. Then </p>
<ol>
<li>Manually start the Angular app by <code>npm start</code> in terminal.</li>
<li>Click the Debug icon or Press <code>F5</code> to start debugging in VSCode.<br>In this way you need to manually open the browser and navigate to <code>http://localhost:4200/</code> to debug the Angular app.</li>
</ol>
<h2 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h2><p>No matter you use WebStorm or VSCode, you can also debug Angular app in browser.</p>
<ol>
<li>Run your angular app by <code>npm run start</code> or <code>ng serve</code></li>
<li>Open the browser and navigate to <code>http://localhost:4200/</code>.</li>
<li>Press <code>F12</code> to open the developer tools and switch to <code>Source</code> tab.</li>
<li>Set breakpoint in your source code in browser. see <a href="https://zdd.github.io/2024/02/18/javascript-debugging/">here</a> for more details.<ol>
<li>If you use webpack, the source file was in <code>webpack://src</code> folder.</li>
<li>If you use ESBuild + Vite, the source files were in <code>src</code> folder.</li>
</ol>
</li>
<li>Refresh the page to trigger the breakpoints.</li>
</ol>
]]></content>
      <categories>
        <category>debug</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>debug</tag>
        <tag>webstorm</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>daily_national_day</title>
    <url>/2023/10/07/daily-national-day/</url>
    <content><![CDATA[<h1 id="2023年中秋节，国庆节"><a href="#2023年中秋节，国庆节" class="headerlink" title="2023年中秋节，国庆节"></a>2023年中秋节，国庆节</h1><p>短暂的假期结束了，今天是大多数人上班的日子，而我还在休息，因为在外企工作，所以不会串休，我请了十月五号，六号两天的假期，所以一共能休息九天（含两个周末）。</p>
<p>有人在朋友圈戏称，“八天假期很短吧？马上你就知道七天上班有多长了！”</p>
<p>今年的假期安排是回媳妇的老家—山西运城，前三天在家扒苞米，10月四日去了趟壶口瀑布，然后就是一直在家待着看抖音直播，我戏称，这回真是实现了看直播自由。</p>
<p>运城雨水丰沛，十一期间几乎每天下雨，不过都是小雨，不像大连这边的雨，下起来很大，而且一阵就结束了。</p>
<p>扒苞米这活讲真，我真的是十多年没有干了，小时候在家每年都干这活。一家人围在玉米堆旁边，一边扒，一边聊天，其乐融融。</p>
<p>壶口瀑布非常壮观，这是我第一次看见黄河，有趣的是，壶口瀑布位于山西和陕西两省的交界处，为两省共有，我们在河这边看，陕西的游客在河对面看，不过山西这边的视角更好些。（听网友说的）</p>
<p>本来想去李家大院的，无奈去壶口瀑布开车太累了，最后七公里的路程，堵了两个小时，所以就放弃了。</p>
<p>十月五号返回大连，勇男老弟开车来接，又去他家小坐，拿了很多好吃的，回到旅顺已经快十二点了。</p>
]]></content>
      <categories>
        <category>diary</category>
      </categories>
      <tags>
        <tag>daily</tag>
        <tag>national day</tag>
        <tag>mid autumn festival</tag>
      </tags>
  </entry>
  <entry>
    <title>ecma-script-version-history</title>
    <url>/2024/04/14/ecma-script-version-history/</url>
    <content><![CDATA[<h1 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h1><h2 id="strict-mode"><a href="#strict-mode" class="headerlink" title="strict mode"></a>strict mode</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> json = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(json); <span class="comment">// &#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="New-array-methods"><a href="#New-array-methods" class="headerlink" title="New array methods:"></a>New array methods:</h2><ul>
<li>forEach</li>
<li>map</li>
<li>filter</li>
<li>reduce</li>
<li>reduceRight</li>
<li>…</li>
</ul>
<h2 id="Property-getters-and-setters"><a href="#Property-getters-and-setters" class="headerlink" title="Property getters and setters"></a>Property getters and setters</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">a</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_a</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">a</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_a</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h2 id="Function-binding-bind"><a href="#Function-binding-bind" class="headerlink" title="Function binding: bind"></a>Function binding: <code>bind</code></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo.<span class="title function_">bind</span>(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;);</span><br></pre></td></tr></table></figure>

<h1 id="ES6-ECMAScript-2015"><a href="#ES6-ECMAScript-2015" class="headerlink" title="ES6(ECMAScript 2015)"></a>ES6(ECMAScript 2015)</h1><h1 id="ES7-ECMAScript-2016"><a href="#ES7-ECMAScript-2016" class="headerlink" title="ES7(ECMAScript 2016)"></a>ES7(ECMAScript 2016)</h1><h2 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes"></a>Array.prototype.includes</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">includes</span>(<span class="number">2</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="Exponentiation-Operator"><a href="#Exponentiation-Operator" class="headerlink" title="Exponentiation Operator"></a>Exponentiation Operator</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> ** <span class="number">3</span>); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>

<h1 id="ES8-ECMAScript-2017"><a href="#ES8-ECMAScript-2017" class="headerlink" title="ES8(ECMAScript 2017)"></a>ES8(ECMAScript 2017)</h1><h2 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values"></a>Object.values</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(obj)); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries"></a>Object.entries</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(obj)); <span class="comment">// [[&quot;a&quot;, 1], [&quot;b&quot;, 2], [&quot;c&quot;, 3]]</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors"></a>Object.getOwnPropertyDescriptors</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(obj));</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   a: &#123; value: 1, writable: true, enumerable: true, configurable: true &#125;,</span></span><br><span class="line"><span class="comment">//   b: &#123; value: 2, writable: true, enumerable: true, configurable: true &#125;,</span></span><br><span class="line"><span class="comment">//   c: &#123; value: 3, writable: true, enumerable: true, configurable: true &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="String-padding"><a href="#String-padding" class="headerlink" title="String padding"></a>String padding</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>.<span class="title function_">padStart</span>(<span class="number">10</span>, <span class="string">&quot;123&quot;</span>)); <span class="comment">// 12312hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>.<span class="title function_">padEnd</span>(<span class="number">10</span>, <span class="string">&quot;123&quot;</span>)); <span class="comment">// hello12312</span></span><br></pre></td></tr></table></figure>

<h2 id="Trailing-commas-in-function-parameter-lists-and-calls"><a href="#Trailing-commas-in-function-parameter-lists-and-calls" class="headerlink" title="Trailing commas in function parameter lists and calls"></a>Trailing commas in function parameter lists and calls</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a, b, c,</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h1 id="ES9-ECMAScript-2018"><a href="#ES9-ECMAScript-2018" class="headerlink" title="ES9(ECMAScript 2018)"></a>ES9(ECMAScript 2018)</h1><h2 id="Asynchronous-Iteration"><a href="#Asynchronous-Iteration" class="headerlink" title="Asynchronous Iteration"></a>Asynchronous Iteration</h2><h1 id="ES10-ECMAScript-2019"><a href="#ES10-ECMAScript-2019" class="headerlink" title="ES10(ECMAScript 2019)"></a>ES10(ECMAScript 2019)</h1><h2 id="Array-prototype-flat"><a href="#Array-prototype-flat" class="headerlink" title="Array.prototype.flat()"></a>Array.prototype.flat()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>()); <span class="comment">// [1, 2, 3, 4, [5, 6]]</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-prototype-flatMap"><a href="#Array-prototype-flatMap" class="headerlink" title="Array.prototype.flatMap()"></a>Array.prototype.flatMap()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> [x * <span class="number">2</span>])); <span class="comment">// [[2], [4], [6]]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flatMap</span>(<span class="function"><span class="params">x</span> =&gt;</span> [x * <span class="number">2</span>])); <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries()"></a>Object.fromEntries()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(obj)); <span class="comment">// [[&quot;a&quot;, 1], [&quot;b&quot;, 2], [&quot;c&quot;, 3]]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(obj))); <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="String-prototype-trimStart-and-String-prototype-trimEnd"><a href="#String-prototype-trimStart-and-String-prototype-trimEnd" class="headerlink" title="String.prototype.trimStart() and String.prototype.trimEnd()"></a>String.prototype.trimStart() and String.prototype.trimEnd()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;  hello  &quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimStart</span>()); <span class="comment">// &quot;hello  &quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimEnd</span>()); <span class="comment">// &quot;  hello&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Optional-Catch-Binding"><a href="#Optional-Catch-Binding" class="headerlink" title="Optional Catch Binding"></a>Optional Catch Binding</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;caught&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JSON-stringify-replacer-parameter"><a href="#JSON-stringify-replacer-parameter" class="headerlink" title="JSON.stringify() replacer parameter"></a>JSON.stringify() replacer parameter</h2><p>The second arguments [“a”, “b”] is a replacer array, which specifies the properties to include in the JSON string.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj, [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>])); <span class="comment">// &#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="JSON-stringify-space-parameter"><a href="#JSON-stringify-space-parameter" class="headerlink" title="JSON.stringify() space parameter"></a>JSON.stringify() space parameter</h2><p>The third argument 2 is a space parameter, which specifies the number of spaces to use for indentation.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   &quot;a&quot;: 1,</span></span><br><span class="line"><span class="comment">//   &quot;b&quot;: 2,</span></span><br><span class="line"><span class="comment">//   &quot;c&quot;: 3</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<p>The output is <code>&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;</code> without the third argument.</p>
<h1 id="ES11-ECMAScript-2020"><a href="#ES11-ECMAScript-2020" class="headerlink" title="ES11(ECMAScript 2020)"></a>ES11(ECMAScript 2020)</h1><h2 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> max = <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max); <span class="comment">// 9007199254740991</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max + <span class="number">1</span>); <span class="comment">// 9007199254740992</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max + <span class="number">2</span>); <span class="comment">// 9007199254740992</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max + <span class="number">3n</span>); <span class="comment">// 9007199254740994n</span></span><br></pre></td></tr></table></figure>

<h2 id="Dynamic-import"><a href="#Dynamic-import" class="headerlink" title="Dynamic import"></a>Dynamic import</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable language_">module</span> = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;./module.js&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Optional-chaining-operator"><a href="#Optional-chaining-operator" class="headerlink" title="Optional chaining operator (?.)"></a>Optional chaining operator (?.)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">1</span> &#125; &#125; &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>?.<span class="property">b</span>?.<span class="property">c</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h2 id="Nullish-coalescing-operator"><a href="#Nullish-coalescing-operator" class="headerlink" title="Nullish coalescing operator (??)"></a>Nullish coalescing operator (??)</h2><ul>
<li><code>leftExpr ?? rightExpr</code>, this expression will return its right-hand side operand when the left-hand side operand is null or undefined. Otherwise, it will return its left-hand side operand.</li>
<li><code>leftExpr || rightExpr</code>, return true if and only if one of the operands is true. Otherwise return false.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">0</span>, <span class="attr">b</span>: <span class="string">&quot;&quot;</span>, <span class="attr">c</span>: <span class="literal">null</span>, <span class="attr">d</span>: <span class="literal">undefined</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span> || <span class="string">&quot;default&quot;</span>); <span class="comment">// default</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">b</span> || <span class="string">&quot;default&quot;</span>); <span class="comment">// default</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">c</span> || <span class="string">&quot;default&quot;</span>); <span class="comment">// default</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">d</span> || <span class="string">&quot;default&quot;</span>); <span class="comment">// default</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span> ?? <span class="string">&quot;default&quot;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">b</span> ?? <span class="string">&quot;default&quot;</span>); <span class="comment">// &quot;&quot;(empty string)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">c</span> ?? <span class="string">&quot;default&quot;</span>); <span class="comment">// default</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">d</span> ?? <span class="string">&quot;default&quot;</span>); <span class="comment">// default</span></span><br></pre></td></tr></table></figure>

<h2 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled()"></a>Promise.allSettled()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>));</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(reject, <span class="number">1000</span>));</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([promise1, promise2])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(results));</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#123; status: &quot;fulfilled&quot;, value: undefined &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; status: &quot;rejected&quot;, reason: undefined &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure>

<h2 id="globalThis"><a href="#globalThis" class="headerlink" title="globalThis"></a>globalThis</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalThis);</span><br></pre></td></tr></table></figure>

<h2 id="String-prototype-matchAll"><a href="#String-prototype-matchAll" class="headerlink" title="String.prototype.matchAll()"></a>String.prototype.matchAll()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/\w+/g</span>;</span><br><span class="line"><span class="keyword">const</span> matches = str.<span class="title function_">matchAll</span>(regex);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> match <span class="keyword">of</span> matches) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(match);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ES12-ECMAScript-2021"><a href="#ES12-ECMAScript-2021" class="headerlink" title="ES12(ECMAScript 2021)"></a>ES12(ECMAScript 2021)</h1><h2 id="Numeric-separators"><a href="#Numeric-separators" class="headerlink" title="Numeric separators"></a>Numeric separators</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">1_000_000</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 1000000</span></span><br></pre></td></tr></table></figure>

<h2 id="String-prototype-replaceAll"><a href="#String-prototype-replaceAll" class="headerlink" title="String.prototype.replaceAll()"></a>String.prototype.replaceAll()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replaceAll</span>(<span class="string">&quot;o&quot;</span>, <span class="string">&quot;0&quot;</span>)); <span class="comment">// hell0 w0rld</span></span><br></pre></td></tr></table></figure>

<h2 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any()"></a>Promise.any()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(reject, <span class="number">1000</span>));</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>));</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">any</span>([promise1, promise2])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value));</span><br></pre></td></tr></table></figure>

<h2 id="WeakRef"><a href="#WeakRef" class="headerlink" title="WeakRef"></a>WeakRef</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> weakRef = <span class="keyword">new</span> <span class="title class_">WeakRef</span>(obj);</span><br><span class="line">obj = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakRef.<span class="title function_">deref</span>()); <span class="comment">// &#123; name: &quot;John&quot; &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="FinalizationRegistry"><a href="#FinalizationRegistry" class="headerlink" title="FinalizationRegistry"></a>FinalizationRegistry</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> finalizationRegistry = <span class="keyword">new</span> <span class="title class_">FinalizationRegistry</span>(<span class="function"><span class="params">key</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(key));</span><br><span class="line">finalizationRegistry.<span class="title function_">register</span>(obj, <span class="string">&quot;custom key&quot;</span>);</span><br><span class="line">obj = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h1 id="ES13-ECMAScript-2022"><a href="#ES13-ECMAScript-2022" class="headerlink" title="ES13(ECMAScript 2022)"></a>ES13(ECMAScript 2022)</h1><h2 id="Top-level-await"><a href="#Top-level-await" class="headerlink" title="Top-level await"></a>Top-level await</h2><h2 id="Private-instance-fields-methods-and-accessors"><a href="#Private-instance-fields-methods-and-accessors" class="headerlink" title="Private instance fields, methods, and accessors"></a>Private instance fields, methods, and accessors</h2><h2 id="Static-class-fields-and-methods"><a href="#Static-class-fields-and-methods" class="headerlink" title="Static class fields and methods"></a>Static class fields and methods</h2><h2 id="Static-class-initialization-blocks"><a href="#Static-class-initialization-blocks" class="headerlink" title="Static class initialization blocks"></a>Static class initialization blocks</h2><h2 id="Error-cause"><a href="#Error-cause" class="headerlink" title="Error.cause"></a>Error.cause</h2><h2 id="Array-String-and-TypedArray-at-method"><a href="#Array-String-and-TypedArray-at-method" class="headerlink" title="Array, String, and TypedArray .at() method"></a>Array, String, and TypedArray .at() method</h2><h2 id="Object-hasOwn"><a href="#Object-hasOwn" class="headerlink" title="Object.hasOwn()"></a>Object.hasOwn()</h2><p>The Object.hasOwn() static method returns true if the specified object has the indicated property as its <code>own</code> property. If the property is <code>inherited</code>, or does <code>not exist</code>, the method returns false.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(obj, <span class="string">&quot;a&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(obj, <span class="string">&quot;b&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(obj, <span class="string">&quot;toString&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p><code>Object.hasOwn</code> is intended as a replacement of <code>Object.prototype.hasOwnProperty</code>.</p>
<h2 id="RegExp-match-d-flag"><a href="#RegExp-match-d-flag" class="headerlink" title="RegExp match &#x2F;d flag"></a>RegExp match &#x2F;d flag</h2><h1 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h1><ul>
<li><a href="https://gist.github.com/rajaramtt/7df3702a04c644b0b62c9a64f48f3dbf#2-ecmascript-2016---es-7">Github</a></li>
<li><a href="https://en.wikipedia.org/wiki/ECMAScript_version_history">WikiPedia</a></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>ecma script</tag>
      </tags>
  </entry>
  <entry>
    <title>[ERROR] NG8001: &#39;xxx&#39; is not a known element</title>
    <url>/2024/08/22/error-ng8001-xxx-is-not-a-known-element/</url>
    <content><![CDATA[<p>This is a very common error when you are working with Angular, today, I will give a special case of this error.</p>
<p>I have the following code in my app.</p>
<ol>
<li>ProductHomeModule -&gt; ProductHomeComponent</li>
<li>ProductDetailModule -&gt; ProductDetailComponent</li>
<li>App router contains the following routes:<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app-routing.module.ts</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">   &#123; <span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ProductHomeComponent</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
When I build my app, I got the following error:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR <span class="keyword">in</span> src/app/product-home/product-home.component.html:1:1 - error NG8001: <span class="string">&#x27;app-product-detail&#x27;</span> is not a known element:</span><br></pre></td></tr></table></figure>

<p>But If I remove the router for <code>product</code>, the error is gone, why?<br>Because, I use <code>ProductHomeComponent</code> in <code>app-routing.module.ts</code> which in turn was used in file <code>app.module.ts</code>, But, when Angular compile template for <code>ProductHomeComponent</code>, it didn’t know where to find <code>ProductDetailComponent</code>. to solve this, import <code>ProductHomeModule</code> in <code>app.module.ts</code> like this:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">imports</span>: [</span><br><span class="line">   <span class="title class_">ProductHomeModule</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>Then the error is gone. Because, ProductHomeModule has imports <code>ProductDetailModule</code>, so Angular knows where to find <code>ProductDetailComponent</code>.</p>
<p>Conclusion:<br>If you wan to use a component from another module, you need to import the module which contains the component in the module where you use the component. You may use the component by selector in templates or in the router, both need to import the module which contains the component.</p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>error</tag>
        <tag>ng8001</tag>
      </tags>
  </entry>
  <entry>
    <title>event.target-vs-event.currentTarget</title>
    <url>/2023/08/02/event-target-vs-event-currentTarget/</url>
    <content><![CDATA[<h1 id="什么是Event-target和Event-currentTarget"><a href="#什么是Event-target和Event-currentTarget" class="headerlink" title="什么是Event.target和Event.currentTarget"></a>什么是Event.target和Event.currentTarget</h1><p>这个两个target在JavaScript事件处理中十分重要，来看一下他们之间的区别。</p>
<ul>
<li><code>event.target</code>：触发事件的元素</li>
<li><code>event.currentTarget</code>：绑定事件的元素</li>
</ul>
<p>二者之间的区别只有在元素嵌套的时候，才会有所体现。比如下面的代码：<br>外层div1绑定了click事件，内层div2没有绑定任何事件。当我们点击div2的时候，会输出什么呢？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div 1</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">div1.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">currentTarget</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="/../images/target-vs-currentTarget_1.jpg" alt="event-target-vs-event-currentTarget"></p>
<ul>
<li>当我们点击<code>div2</code>的时候，<code>event.target</code>是<code>div2</code>，<code>event.currentTarget</code>是<code>div1</code>。</li>
<li>当我们点击<code>div1</code>的时候，<code>event.target</code>是<code>div1</code>，<code>event.currentTarget</code>也是<code>div1</code>。</li>
</ul>
<p>由此可见，<code>event.target</code>永远是触发事件的元素，而<code>event.currentTarget</code>永远是绑定事件的元素。 </p>
<h1 id="如何禁止子元素触发事件"><a href="#如何禁止子元素触发事件" class="headerlink" title="如何禁止子元素触发事件"></a>如何禁止子元素触发事件</h1><p>那么问题来了，有些时候我们不像让内部元素（子元素）触发事件，而是想让外部元素（父元素）触发事件，这个时候我们应该怎么做呢？考虑如下场景，假设现在我们要实现一个Card，这个Card内部有很多子元素，现在用户有一个需求，让Card实现拖拽功能，那么我们需要监听Card的<code>dragenter</code>事件，但是我们不想让Card内部的子元素触发<code>dragenter</code>事件，这个时候我们应该怎么做呢？我们可以通过判断<code>event.currentTarget</code>来实现这个功能，因为<code>event.currentTarget</code>会指向card本身，而不是其内部的子元素。</p>
<p>其实还有一个更加彻底的办法就是使用CSS的<code>pointer-events</code>属性，这个属性可以控制元素是否可以触发鼠标事件，比如上面的例子，我们可以这样禁止div2触发click事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div 1</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;pointer-events: none;&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这下我们再次点击div2时，输出就变成了下面这样：可见div2没有触发click事件，而是由它的父元素div1触发了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target: div 1</span><br><span class="line">currentTarget: div 1</span><br></pre></td></tr></table></figure>

<p>需要注意：pointer-events属性是CSS3中的属性，IE11及以下版本不支持。并且它具有传递性，比如我们在div2上设置了<code>pointer-events: none;</code>，那么div2及其子元素都不会触发鼠标事件。</p>
<h1 id="Event-relatedTarget"><a href="#Event-relatedTarget" class="headerlink" title="Event.relatedTarget"></a>Event.relatedTarget</h1><p>Event中除了这两个target之外，其实还有一个<code>relatedTarget</code>属性，这个属性在不同的事件中有不同的含义，比如在<code>mouseover</code>事件中，<code>relatedTarget</code>表示鼠标移入的元素，而在<code>mouseout</code>事件中，<code>relatedTarget</code>表示鼠标移出的元素。两外html5中的drag and drop api也会用到这个属性，比如在<code>dragenter</code>事件中，<code>relatedTarget</code>表示被拖拽元素正在进入的元素，而在<code>dragleave</code>事件中，<code>relatedTarget</code>表示被拖拽元素正在离开的元素。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://stackoverflow.com/questions/10086427/what-is-the-exact-difference-between-currenttarget-property-and-target-property">Event.target vs Event.currentTarget</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/target">Event.target</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget">Event.currentTarget</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/relatedTarget">Event.relatedTarget</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events">Pointer Events</a></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>event</tag>
        <tag>target</tag>
        <tag>currenttarget</tag>
      </tags>
  </entry>
  <entry>
    <title>github port 22 not working</title>
    <url>/2024/01/29/github-port-22-not-working/</url>
    <content><![CDATA[<h1 id="github-port-22-not-working"><a href="#github-port-22-not-working" class="headerlink" title="github port 22 not working"></a>github port 22 not working</h1><p>今天在使用github的时候，发现git push的时候报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh: connect to host github.com port 22: Connection timed out</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure>

<p>解决办法，使用443端口，首先测试是否可用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T -p 443 git@ssh.github.com</span><br></pre></td></tr></table></figure>
<p>如果可以正常连接，那么就可以修改~&#x2F;.ssh&#x2F;config文件，添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure>
<p>然后再次测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>输出如下信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hi Philip! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>
<p>接下来就可以愉快的使用git了。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://docs.github.com/en/authentication/troubleshooting-ssh/using-ssh-over-the-https-port">Using SSH over the HTTPS port</a></li>
</ul>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>famous npm packages</title>
    <url>/2024/01/07/famous-npm-packages/</url>
    <content><![CDATA[<h1 id="Famous-NPM-Packages"><a href="#Famous-NPM-Packages" class="headerlink" title="Famous NPM Packages"></a>Famous NPM Packages</h1><h2 id="cross-env"><a href="#cross-env" class="headerlink" title="cross-env"></a>cross-env</h2><p><a href="https://www.npmjs.com/package/cross-env">cross-env</a> is a cross platform solution to setting and using environment variables. It’s available as a command line utility as well as a Node.js module.</p>
<p>cross-env 是一个用于处理跨平台环境变量的 Node.js 包。在 Node.js 应用程序中，设置环境变量通常使用 process.env。然而，不同的操作系统（如 Windows、macOS 和 Linux）有不同的方式来设置和获取环境变量。cross-env 的目标是提供一种简单的方法来在跨平台上设置和获取环境变量。</p>
]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>npm</tag>
        <tag>package</tag>
      </tags>
  </entry>
  <entry>
    <title>great-blogs</title>
    <url>/2024/07/17/great-blogs/</url>
    <content><![CDATA[<ul>
<li><a href="https://thehistoryoftheweb.com/">The history of the web</a></li>
<li><a href="https://web.archive.org/">web archive</a></li>
<li><a href="https://webdevelopmenthistory.com/">Web development history</a></li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>blogs</tag>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>how-jest-works</title>
    <url>/2024/01/07/how-jest-works/</url>
    <content><![CDATA[<h1 id="How-Jest-Works-Jest是如何工作的"><a href="#How-Jest-Works-Jest是如何工作的" class="headerlink" title="How Jest Works(Jest是如何工作的)"></a>How Jest Works(Jest是如何工作的)</h1><h2 id="1-什么是Jest"><a href="#1-什么是Jest" class="headerlink" title="1. 什么是Jest"></a>1. 什么是Jest</h2><p>Jest是由Facebook(Meta)开发的一个Javascript测试框架。支持多种前端框架，比如Babel, TypeScript, Node, React, Angular, Vue等等。它的特点是快速，简单，可扩展。</p>
<h2 id="2-基于Nx框架的Jest配置"><a href="#2-基于Nx框架的Jest配置" class="headerlink" title="2. 基于Nx框架的Jest配置"></a>2. 基于Nx框架的Jest配置</h2><p>我们目前的项目基于Nx框架，其实Nx本身对于Jest已经支持的很好了，几乎不用做太多的配置，但是本文仍以Angular为例，看看如何配置Jest。</p>
<p>当我们使用Nx创建一个Angular项目时，会自动创建一个<code>jest.config.ts</code>文件，内容如下：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">displayName</span>: <span class="string">&#x27;todos&#x27;</span>,</span><br><span class="line">  <span class="attr">preset</span>: <span class="string">&#x27;../../jest.preset.js&#x27;</span>,</span><br><span class="line">  <span class="attr">setupFilesAfterEnv</span>: [<span class="string">&#x27;&lt;rootDir&gt;/src/test-setup.ts&#x27;</span>],</span><br><span class="line">  <span class="attr">globals</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;ts-jest&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">tsconfig</span>: <span class="string">&#x27;&lt;rootDir&gt;/tsconfig.spec.json&#x27;</span>,</span><br><span class="line">      <span class="attr">stringifyContentPathRegex</span>: <span class="string">&#x27;\\.(html|svg)$&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">coverageDirectory</span>: <span class="string">&#x27;../../coverage/apps/todos&#x27;</span>,</span><br><span class="line">  <span class="attr">transform</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;^.+\\.(ts|mjs|js|html)$&#x27;</span>: <span class="string">&#x27;jest-preset-angular&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">transformIgnorePatterns</span>: [<span class="string">&#x27;node_modules/(?!.*\\.mjs$)&#x27;</span>],</span><br><span class="line">  <span class="attr">snapshotSerializers</span>: [</span><br><span class="line">    <span class="string">&#x27;jest-preset-angular/build/serializers/no-ng-attributes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;jest-preset-angular/build/serializers/ng-snapshot&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;jest-preset-angular/build/serializers/html-comment&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在<code>transform</code>一节，我们看到了<code>jest-preset-angular</code>，这个是Angular官方提供的一个Jest预设，它会自动帮我们处理Angular的一些特殊文件，比如<code>.ts</code>, <code>.html</code>, <code>.svg</code>等等。如果我们不使用Angular，而是使用React，那么我们需要使用<code>jest-preset-react</code>，如果是Vue，那么我们需要使用<code>vue-jest</code>。如果我们使用的是Nx，那么我们可以使用<code>@nrwl/jest</code>，它会自动帮我们处理Nx的一些特殊文件，比如<code>.ts</code>, <code>.html</code>, <code>.svg</code>等等。</p>
<p>为什么需要<code>transform</code>呢？因为Jest只能处理JavaScript，对于TypeScript&#x2F;JSX等高级的文件格式，我们不许先将其转换为JavaScript，然后再交给Jest处理。</p>
<p>该<code>transform</code>块的含义是，对于所有以<code>.ts</code>, <code>.mjs</code>, <code>.js</code>, <code>.html</code>结尾的文件，都使用<code>jest-preset-angular</code>来处理。</p>
<p>如果<code>transform</code>配置不正确，就会出现如下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Jest encountered an unexpected token</span><br><span class="line">Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.</span><br><span class="line"></span><br><span class="line">Out of the box Jest supports Babel, <span class="built_in">which</span> will be used to transform your files into valid JS based on your Babel configuration.</span><br><span class="line">By default <span class="string">&quot;node_modules&quot;</span> folder is ignored by transformers.</span><br></pre></td></tr></table></figure>

<h2 id="How-jest-parse-config-and-execute-tests"><a href="#How-jest-parse-config-and-execute-tests" class="headerlink" title="How jest parse config and execute tests?"></a>How jest parse config and execute tests?</h2><p>Jest是如何解析配置文件，并执行测试的呢？我们可以通过<code>--debug</code>参数来查看Jest的执行过程。</p>
<p><strong>To be continue…</strong></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://jestjs.io/">Jest官网</a></li>
<li><a href="https://thymikee.github.io/jest-preset-angular/docs/">jest-preset-angular</a></li>
<li><a href="https://kulshekhar.github.io/ts-jest/docs/processing/">ts-jest</a></li>
</ul>
]]></content>
      <categories>
        <category>jest</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>jest</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>groovy-json</title>
    <url>/2024/01/29/groovy-json/</url>
    <content><![CDATA[<h1 id="Groovy-JSON-operation"><a href="#Groovy-JSON-operation" class="headerlink" title="Groovy JSON operation"></a>Groovy JSON operation</h1><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> groovy.json.JsonOutput</span><br><span class="line"><span class="keyword">import</span> groovy.json.JsonSlurper</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert a groovy map to json object</span></span><br><span class="line">Map user = [<span class="attr">name:</span> <span class="string">&#x27;zdd&#x27;</span>, <span class="attr">age:</span> <span class="number">18</span>, <span class="attr">info:</span> [<span class="attr">address:</span> <span class="string">&#x27;beijing&#x27;</span>, <span class="attr">phone:</span> <span class="string">&#x27;123456789&#x27;</span>]];</span><br><span class="line">println JsonOutput.toJson(user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert a json object to groovy map</span></span><br><span class="line"><span class="keyword">def</span> jsonString = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30, &quot;city&quot;: &quot;New York&quot;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> jsonSlurper = <span class="keyword">new</span> JsonSlurper()</span><br><span class="line"><span class="keyword">def</span> jsonObject = jsonSlurper.parseText(JsonOutput.toJson(user))</span><br><span class="line">println jsonObject</span><br><span class="line"></span><br><span class="line"><span class="comment">// Given a string &quot;feat(configuration): id-xxxx add configuration for user page&quot;, please extract the jira id: id-xxx</span></span><br><span class="line"><span class="comment">// can you do it with regex? the target string start with &quot;: &quot; and end with &quot; &quot;, return null if not found</span></span><br><span class="line"><span class="keyword">def</span> str = <span class="string">&quot;feat(configuration): id-xxxx add configuration for user page&quot;</span></span><br><span class="line"><span class="keyword">def</span> jiraId2 = str =~ <span class="regexp">/: (.*?) /</span></span><br><span class="line">println jiraId2[<span class="number">0</span>][<span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>groovy</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>groovy</tag>
        <tag>jenkins</tag>
        <tag>pipeline</tag>
      </tags>
  </entry>
  <entry>
    <title>how-angular-app-runs-runtimejs</title>
    <url>/2024/12/27/how-angular-app-runs-runtimejs/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Angular app build后会生成如下文件结构，其中main&#x2F;polyfills&#x2F;runtime文件中的xxx是Angular随机生成的hash值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dist/</span><br><span class="line">├─ angular-15/</span><br><span class="line">│  ├─ assets/</span><br><span class="line">│  ├─ 3rdpartylicenses.txt</span><br><span class="line">│  ├─ favicon.ico</span><br><span class="line">│  ├─ index.html</span><br><span class="line">│  ├─ main.xxx.js</span><br><span class="line">│  ├─ polyfills.xxx.js</span><br><span class="line">│  ├─ runtime.xxx.js</span><br><span class="line">│  ├─ styles.xxx.css</span><br></pre></td></tr></table></figure>

<p>今天我们来分析一下<code>runtime.js</code>文件的内容。（注意，由于Angular编译后的代码是压缩过的，所以以下源码是使用ng server命令本地启动app后在浏览器中查看的。）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="string">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> __webpack_modules__ = (&#123;&#125;);</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// The module cache</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// The require function</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">function</span> <span class="title function_">__webpack_require__</span>(<span class="params">moduleId</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// Check if module is in cache</span></span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">return</span> cachedModule.<span class="property">exports</span>;</span><br><span class="line"><span class="comment">/******/</span> 		&#125;</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> <span class="variable language_">module</span> = __webpack_module_cache__[moduleId] = &#123;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="comment">// no module.id needed</span></span><br><span class="line"><span class="comment">/******/</span> 			<span class="comment">// no module.loaded needed</span></span><br><span class="line"><span class="comment">/******/</span> 			<span class="attr">exports</span>: &#123;&#125;</span><br><span class="line"><span class="comment">/******/</span> 		&#125;;</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// Execute the module function</span></span><br><span class="line"><span class="comment">/******/</span> 		__webpack_modules__[moduleId].<span class="title function_">call</span>(<span class="variable language_">module</span>.<span class="property">exports</span>, <span class="variable language_">module</span>, <span class="variable language_">module</span>.<span class="property">exports</span>, __webpack_require__);</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// Return the exports of the module</span></span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line"><span class="comment">/******/</span> 	&#125;</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line"><span class="comment">/******/</span> 	__webpack_require__.<span class="property">m</span> = __webpack_modules__;</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">/* webpack/runtime/chunk loaded */</span></span><br><span class="line"><span class="comment">/******/</span> 	(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> deferred = [];</span><br><span class="line"><span class="comment">/******/</span> 		__webpack_require__.<span class="property">O</span> = <span class="function">(<span class="params">result, chunkIds, fn, priority</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">if</span>(chunkIds) &#123;</span><br><span class="line"><span class="comment">/******/</span> 				priority = priority || <span class="number">0</span>;</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">for</span>(<span class="keyword">var</span> i = deferred.<span class="property">length</span>; i &gt; <span class="number">0</span> &amp;&amp; deferred[i - <span class="number">1</span>][<span class="number">2</span>] &gt; priority; i--) deferred[i] = deferred[i - <span class="number">1</span>];</span><br><span class="line"><span class="comment">/******/</span> 				deferred[i] = [chunkIds, fn, priority];</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">return</span>;</span><br><span class="line"><span class="comment">/******/</span> 			&#125;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">var</span> notFulfilled = <span class="title class_">Infinity</span>;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; deferred.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">var</span> [chunkIds, fn, priority] = deferred[i];</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">var</span> fulfilled = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; chunkIds.<span class="property">length</span>; j++) &#123;</span><br><span class="line"><span class="comment">/******/</span> 					<span class="keyword">if</span> ((priority &amp; <span class="number">1</span> === <span class="number">0</span> || notFulfilled &gt;= priority) &amp;&amp; <span class="title class_">Object</span>.<span class="title function_">keys</span>(__webpack_require__.<span class="property">O</span>).<span class="title function_">every</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> (__webpack_require__.<span class="property">O</span>[key](chunkIds[j])))) &#123;</span><br><span class="line"><span class="comment">/******/</span> 						chunkIds.<span class="title function_">splice</span>(j--, <span class="number">1</span>);</span><br><span class="line"><span class="comment">/******/</span> 					&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 						fulfilled = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">/******/</span> 						<span class="keyword">if</span>(priority &lt; notFulfilled) notFulfilled = priority;</span><br><span class="line"><span class="comment">/******/</span> 					&#125;</span><br><span class="line"><span class="comment">/******/</span> 				&#125;</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">if</span>(fulfilled) &#123;</span><br><span class="line"><span class="comment">/******/</span> 					deferred.<span class="title function_">splice</span>(i--, <span class="number">1</span>)</span><br><span class="line"><span class="comment">/******/</span> 					<span class="keyword">var</span> r = <span class="title function_">fn</span>();</span><br><span class="line"><span class="comment">/******/</span> 					<span class="keyword">if</span> (r !== <span class="literal">undefined</span>) result = r;</span><br><span class="line"><span class="comment">/******/</span> 				&#125;</span><br><span class="line"><span class="comment">/******/</span> 			&#125;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">return</span> result;</span><br><span class="line"><span class="comment">/******/</span> 		&#125;;</span><br><span class="line"><span class="comment">/******/</span> 	&#125;)();</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">/* webpack/runtime/compat get default export */</span></span><br><span class="line"><span class="comment">/******/</span> 	(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// getDefaultExport function for compatibility with non-harmony modules</span></span><br><span class="line"><span class="comment">/******/</span> 		__webpack_require__.<span class="property">n</span> = <span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">var</span> getter = <span class="variable language_">module</span> &amp;&amp; <span class="variable language_">module</span>.<span class="property">__esModule</span> ?</span><br><span class="line"><span class="comment">/******/</span> 				<span class="function">() =&gt;</span> (<span class="variable language_">module</span>[<span class="string">&#x27;default&#x27;</span>]) :</span><br><span class="line"><span class="comment">/******/</span> 				<span class="function">() =&gt;</span> (<span class="variable language_">module</span>);</span><br><span class="line"><span class="comment">/******/</span> 			__webpack_require__.<span class="title function_">d</span>(getter, &#123; <span class="attr">a</span>: getter &#125;);</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">return</span> getter;</span><br><span class="line"><span class="comment">/******/</span> 		&#125;;</span><br><span class="line"><span class="comment">/******/</span> 	&#125;)();</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">/* webpack/runtime/define property getters */</span></span><br><span class="line"><span class="comment">/******/</span> 	(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// define getter functions for harmony exports</span></span><br><span class="line"><span class="comment">/******/</span> 		__webpack_require__.<span class="property">d</span> = <span class="function">(<span class="params"><span class="built_in">exports</span>, definition</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">if</span>(__webpack_require__.<span class="title function_">o</span>(definition, key) &amp;&amp; !__webpack_require__.<span class="title function_">o</span>(<span class="built_in">exports</span>, key)) &#123;</span><br><span class="line"><span class="comment">/******/</span> 					<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, key, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">get</span>: definition[key] &#125;);</span><br><span class="line"><span class="comment">/******/</span> 				&#125;</span><br><span class="line"><span class="comment">/******/</span> 			&#125;</span><br><span class="line"><span class="comment">/******/</span> 		&#125;;</span><br><span class="line"><span class="comment">/******/</span> 	&#125;)();</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">/* webpack/runtime/getFullHash */</span></span><br><span class="line"><span class="comment">/******/</span> 	(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 		__webpack_require__.<span class="property">h</span> = <span class="function">() =&gt;</span> (<span class="string">&quot;14f1d830efa2381d&quot;</span>)</span><br><span class="line"><span class="comment">/******/</span> 	&#125;)();</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">/* webpack/runtime/hasOwnProperty shorthand */</span></span><br><span class="line"><span class="comment">/******/</span> 	(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 		__webpack_require__.<span class="property">o</span> = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(obj, prop))</span><br><span class="line"><span class="comment">/******/</span> 	&#125;)();</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">/* webpack/runtime/make namespace object */</span></span><br><span class="line"><span class="comment">/******/</span> 	(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// define __esModule on exports</span></span><br><span class="line"><span class="comment">/******/</span> 		__webpack_require__.<span class="property">r</span> = <span class="function">(<span class="params"><span class="built_in">exports</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="title class_">Symbol</span>.<span class="property">toStringTag</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span> 				<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="title class_">Symbol</span>.<span class="property">toStringTag</span>, &#123; <span class="attr">value</span>: <span class="string">&#x27;Module&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">/******/</span> 			&#125;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&#x27;__esModule&#x27;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="comment">/******/</span> 		&#125;;</span><br><span class="line"><span class="comment">/******/</span> 	&#125;)();</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">/* webpack/runtime/jsonp chunk loading */</span></span><br><span class="line"><span class="comment">/******/</span> 	(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// no baseURI</span></span><br><span class="line"><span class="comment">/******/</span> 		</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// object to store loaded and loading chunks</span></span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// undefined = chunk not loaded, null = chunk preloaded/prefetched</span></span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded</span></span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> installedChunks = &#123;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="string">&quot;runtime&quot;</span>: <span class="number">0</span></span><br><span class="line"><span class="comment">/******/</span> 		&#125;;</span><br><span class="line"><span class="comment">/******/</span> 		</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// no chunk on demand loading</span></span><br><span class="line"><span class="comment">/******/</span> 		</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// no prefetching</span></span><br><span class="line"><span class="comment">/******/</span> 		</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// no preloaded</span></span><br><span class="line"><span class="comment">/******/</span> 		</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// no HMR</span></span><br><span class="line"><span class="comment">/******/</span> 		</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// no HMR manifest</span></span><br><span class="line"><span class="comment">/******/</span> 		</span><br><span class="line"><span class="comment">/******/</span> 		__webpack_require__.<span class="property">O</span>.<span class="property">j</span> = <span class="function">(<span class="params">chunkId</span>) =&gt;</span> (installedChunks[chunkId] === <span class="number">0</span>);</span><br><span class="line"><span class="comment">/******/</span> 		</span><br><span class="line"><span class="comment">/******/</span> 		<span class="comment">// install a JSONP callback for chunk loading</span></span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> <span class="title function_">webpackJsonpCallback</span> = (<span class="params">parentChunkLoadingFunction, data</span>) =&gt; &#123;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">var</span> [chunkIds, moreModules, runtime] = data;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="comment">// add &quot;moreModules&quot; to the modules object,</span></span><br><span class="line"><span class="comment">/******/</span> 			<span class="comment">// then flag all &quot;chunkIds&quot; as loaded and fire callback</span></span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">var</span> moduleId, chunkId, i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">if</span>(chunkIds.<span class="title function_">some</span>(<span class="function">(<span class="params">id</span>) =&gt;</span> (installedChunks[id] !== <span class="number">0</span>))) &#123;</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">for</span>(moduleId <span class="keyword">in</span> moreModules) &#123;</span><br><span class="line"><span class="comment">/******/</span> 					<span class="keyword">if</span>(__webpack_require__.<span class="title function_">o</span>(moreModules, moduleId)) &#123;</span><br><span class="line"><span class="comment">/******/</span> 						__webpack_require__.<span class="property">m</span>[moduleId] = moreModules[moduleId];</span><br><span class="line"><span class="comment">/******/</span> 					&#125;</span><br><span class="line"><span class="comment">/******/</span> 				&#125;</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">if</span>(runtime) <span class="keyword">var</span> result = <span class="title function_">runtime</span>(__webpack_require__);</span><br><span class="line"><span class="comment">/******/</span> 			&#125;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">if</span>(parentChunkLoadingFunction) <span class="title function_">parentChunkLoadingFunction</span>(data);</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">for</span>(;i &lt; chunkIds.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="comment">/******/</span> 				chunkId = chunkIds[i];</span><br><span class="line"><span class="comment">/******/</span> 				<span class="keyword">if</span>(__webpack_require__.<span class="title function_">o</span>(installedChunks, chunkId) &amp;&amp; installedChunks[chunkId]) &#123;</span><br><span class="line"><span class="comment">/******/</span> 					installedChunks[chunkId][<span class="number">0</span>]();</span><br><span class="line"><span class="comment">/******/</span> 				&#125;</span><br><span class="line"><span class="comment">/******/</span> 				installedChunks[chunkId] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/******/</span> 			&#125;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">return</span> __webpack_require__.<span class="title function_">O</span>(result);</span><br><span class="line"><span class="comment">/******/</span> 		&#125;</span><br><span class="line"><span class="comment">/******/</span> 		</span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> chunkLoadingGlobal = self[<span class="string">&quot;webpackChunkangular_15&quot;</span>] = self[<span class="string">&quot;webpackChunkangular_15&quot;</span>] || [];</span><br><span class="line"><span class="comment">/******/</span> 		chunkLoadingGlobal.<span class="title function_">forEach</span>(webpackJsonpCallback.<span class="title function_">bind</span>(<span class="literal">null</span>, <span class="number">0</span>));</span><br><span class="line"><span class="comment">/******/</span> 		chunkLoadingGlobal.<span class="property">push</span> = webpackJsonpCallback.<span class="title function_">bind</span>(<span class="literal">null</span>, chunkLoadingGlobal.<span class="property">push</span>.<span class="title function_">bind</span>(chunkLoadingGlobal));</span><br><span class="line"><span class="comment">/******/</span> 	&#125;)();</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> &#125;)()</span><br><span class="line">;</span><br><span class="line"><span class="comment">//# sourceMappingURL=runtime.js.map</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>angular</category>
      </categories>
  </entry>
  <entry>
    <title>how-angular-app-runs-mainjs</title>
    <url>/2024/12/27/how-angular-app-runs-mainjs/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Angular app build后会生成如下文件结构，其中main&#x2F;polyfills&#x2F;runtime文件中的xxx是Angular随机生成的hash值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dist/</span><br><span class="line">├─ angular-15/</span><br><span class="line">│  ├─ assets/</span><br><span class="line">│  ├─ 3rdpartylicenses.txt</span><br><span class="line">│  ├─ favicon.ico</span><br><span class="line">│  ├─ index.html</span><br><span class="line">│  ├─ main.xxx.js</span><br><span class="line">│  ├─ polyfills.xxx.js</span><br><span class="line">│  ├─ runtime.xxx.js</span><br><span class="line">│  ├─ styles.xxx.css</span><br></pre></td></tr></table></figure>

<p>今天我们来分析一下<code>main.js</code>文件的内容。（注意，由于Angular编译后的代码是压缩过的，所以以下源码是使用ng server命令本地启动app后在浏览器中查看的。）</p>
<p><code>main.js</code>文件主要定义了app中的各个组件，比如下面代码中的<code>AppComponent</code>、<code>AppModule</code>、<code>HomeComponent</code>、<code>ProductComponent</code>、<code>AboutComponent</code>等。</p>
<p>在这个文件里面用到的许多函数都是在<code>runtime.xxx.js</code>文件中定义的，比如：</p>
<ol>
<li><code>__webpack_require__.r</code>函数</li>
<li><code>__webpack_require__.d</code>函数</li>
</ol>
<p>每个component前面都有一个数字，比如<code>HomeComponent</code>前面的5067，表示该模块的id，这个id是webpack生成的，用来标识模块的唯一性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">(self[<span class="string">&quot;webpackChunkangular_15&quot;</span>] = self[<span class="string">&quot;webpackChunkangular_15&quot;</span>] || []).<span class="title function_">push</span>([[<span class="string">&quot;main&quot;</span>],&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">6698</span>:</span><br><span class="line"><span class="comment">/*!******************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/app/about/about.component.ts ***!</span></span><br><span class="line"><span class="comment">  \******************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;AboutComponent&quot;</span>: <span class="function">() =&gt;</span> (<span class="comment">/* binding */</span> <span class="title class_">AboutComponent</span>)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _angular_core__WEBPACK_IMPORTED_MODULE_0__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! @angular/core */</span> <span class="number">2560</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AboutComponent</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.ɵfac = <span class="keyword">function</span> <span class="title function_">AboutComponent_Factory</span>(<span class="params">t</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">new</span> (t || <span class="title class_">AboutComponent</span>)();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.ɵcmp = <span class="comment">/*@__PURE__*/</span>_angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵdefineComponent&quot;</span>](&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">AboutComponent</span>,</span><br><span class="line">      <span class="attr">selectors</span>: [[<span class="string">&quot;app-about&quot;</span>]],</span><br><span class="line">      <span class="attr">decls</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">vars</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">template</span>: <span class="keyword">function</span> <span class="title function_">AboutComponent_Template</span>(<span class="params">rf, ctx</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rf &amp; <span class="number">1</span>) &#123;</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementStart&quot;</span>](<span class="number">0</span>, <span class="string">&quot;p&quot;</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵtext&quot;</span>](<span class="number">1</span>, <span class="string">&quot;about works!&quot;</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementEnd&quot;</span>]();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">styles</span>: [<span class="string">&quot;\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */&quot;</span>]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">158</span>:</span><br><span class="line"><span class="comment">/*!***************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/app/app-routing.module.ts ***!</span></span><br><span class="line"><span class="comment">  \***************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;AppRoutingModule&quot;</span>: <span class="function">() =&gt;</span> (<span class="comment">/* binding */</span> <span class="title class_">AppRoutingModule</span>)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _angular_router__WEBPACK_IMPORTED_MODULE_4__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! @angular/router */</span> <span class="number">124</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _home_home_component__WEBPACK_IMPORTED_MODULE_0__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./home/home.component */</span> <span class="number">5067</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _product_product_component__WEBPACK_IMPORTED_MODULE_1__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./product/product.component */</span> <span class="number">7695</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _about_about_component__WEBPACK_IMPORTED_MODULE_2__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./about/about.component */</span> <span class="number">6698</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _angular_core__WEBPACK_IMPORTED_MODULE_3__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! @angular/core */</span> <span class="number">2560</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: _home_home_component__WEBPACK_IMPORTED_MODULE_0__.<span class="property">HomeComponent</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: _product_product_component__WEBPACK_IMPORTED_MODULE_1__.<span class="property">ProductComponent</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: _about_about_component__WEBPACK_IMPORTED_MODULE_2__.<span class="property">AboutComponent</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppRoutingModule</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.ɵfac = <span class="keyword">function</span> <span class="title function_">AppRoutingModule_Factory</span>(<span class="params">t</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">new</span> (t || <span class="title class_">AppRoutingModule</span>)();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.ɵmod = <span class="comment">/*@__PURE__*/</span>_angular_core__WEBPACK_IMPORTED_MODULE_3__[<span class="string">&quot;ɵɵdefineNgModule&quot;</span>](&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">AppRoutingModule</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.ɵinj = <span class="comment">/*@__PURE__*/</span>_angular_core__WEBPACK_IMPORTED_MODULE_3__[<span class="string">&quot;ɵɵdefineInjector&quot;</span>](&#123;</span><br><span class="line">      <span class="attr">imports</span>: [_angular_router__WEBPACK_IMPORTED_MODULE_4__.<span class="property">RouterModule</span>.<span class="title function_">forRoot</span>(routes), _angular_router__WEBPACK_IMPORTED_MODULE_4__.<span class="property">RouterModule</span>]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  (<span class="keyword">typeof</span> ngJitMode === <span class="string">&quot;undefined&quot;</span> || ngJitMode) &amp;&amp; _angular_core__WEBPACK_IMPORTED_MODULE_3__[<span class="string">&quot;ɵɵsetNgModuleScope&quot;</span>](<span class="title class_">AppRoutingModule</span>, &#123;</span><br><span class="line">    <span class="attr">imports</span>: [_angular_router__WEBPACK_IMPORTED_MODULE_4__.<span class="property">RouterModule</span>],</span><br><span class="line">    <span class="attr">exports</span>: [_angular_router__WEBPACK_IMPORTED_MODULE_4__.<span class="property">RouterModule</span>]</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">5041</span>:</span><br><span class="line"><span class="comment">/*!**********************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/app/app.component.ts ***!</span></span><br><span class="line"><span class="comment">  \**********************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;AppComponent&quot;</span>: <span class="function">() =&gt;</span> (<span class="comment">/* binding */</span> <span class="title class_">AppComponent</span>)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _angular_core__WEBPACK_IMPORTED_MODULE_0__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! @angular/core */</span> <span class="number">2560</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _angular_router__WEBPACK_IMPORTED_MODULE_1__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! @angular/router */</span> <span class="number">124</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;angular-15&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nums</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.ɵfac = <span class="keyword">function</span> <span class="title function_">AppComponent_Factory</span>(<span class="params">t</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">new</span> (t || <span class="title class_">AppComponent</span>)();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.ɵcmp = <span class="comment">/*@__PURE__*/</span>_angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵdefineComponent&quot;</span>](&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">AppComponent</span>,</span><br><span class="line">      <span class="attr">selectors</span>: [[<span class="string">&quot;app-root&quot;</span>]],</span><br><span class="line">      <span class="attr">decls</span>: <span class="number">14</span>,</span><br><span class="line">      <span class="attr">vars</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">consts</span>: [[<span class="string">&quot;routerLink&quot;</span>, <span class="string">&quot;/home&quot;</span>], [<span class="string">&quot;routerLink&quot;</span>, <span class="string">&quot;/product&quot;</span>], [<span class="string">&quot;routerLink&quot;</span>, <span class="string">&quot;/about&quot;</span>]],</span><br><span class="line">      <span class="attr">template</span>: <span class="keyword">function</span> <span class="title function_">AppComponent_Template</span>(<span class="params">rf, ctx</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rf &amp; <span class="number">1</span>) &#123;</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementStart&quot;</span>](<span class="number">0</span>, <span class="string">&quot;h1&quot;</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵtext&quot;</span>](<span class="number">1</span>, <span class="string">&quot;Angular Router Demo&quot;</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementEnd&quot;</span>]();</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementStart&quot;</span>](<span class="number">2</span>, <span class="string">&quot;nav&quot;</span>)(<span class="number">3</span>, <span class="string">&quot;ul&quot;</span>)(<span class="number">4</span>, <span class="string">&quot;li&quot;</span>)(<span class="number">5</span>, <span class="string">&quot;a&quot;</span>, <span class="number">0</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵtext&quot;</span>](<span class="number">6</span>, <span class="string">&quot;Home&quot;</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementEnd&quot;</span>]()();</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementStart&quot;</span>](<span class="number">7</span>, <span class="string">&quot;li&quot;</span>)(<span class="number">8</span>, <span class="string">&quot;a&quot;</span>, <span class="number">1</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵtext&quot;</span>](<span class="number">9</span>, <span class="string">&quot;Product&quot;</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementEnd&quot;</span>]()();</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementStart&quot;</span>](<span class="number">10</span>, <span class="string">&quot;li&quot;</span>)(<span class="number">11</span>, <span class="string">&quot;a&quot;</span>, <span class="number">2</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵtext&quot;</span>](<span class="number">12</span>, <span class="string">&quot;About&quot;</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementEnd&quot;</span>]()()()();</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelement&quot;</span>](<span class="number">13</span>, <span class="string">&quot;router-outlet&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">dependencies</span>: [_angular_router__WEBPACK_IMPORTED_MODULE_1__.<span class="property">RouterOutlet</span>, _angular_router__WEBPACK_IMPORTED_MODULE_1__.<span class="property">RouterLink</span>],</span><br><span class="line">      <span class="attr">styles</span>: [<span class="string">&quot;ul[_ngcontent-%COMP%]    &gt; li[_ngcontent-%COMP%] &#123;\n  background-color: yellowgreen;\n&#125;\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsNkJBQUE7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbInVsID4gbGkge1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHllbGxvd2dyZWVuO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */&quot;</span>]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">6747</span>:</span><br><span class="line"><span class="comment">/*!*******************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/app/app.module.ts ***!</span></span><br><span class="line"><span class="comment">  \*******************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;AppModule&quot;</span>: <span class="function">() =&gt;</span> (<span class="comment">/* binding */</span> <span class="title class_">AppModule</span>)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! @angular/platform-browser */</span> <span class="number">4497</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _app_component__WEBPACK_IMPORTED_MODULE_0__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./app.component */</span> <span class="number">5041</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _product_product_component__WEBPACK_IMPORTED_MODULE_1__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./product/product.component */</span> <span class="number">7695</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _parent_parent_component__WEBPACK_IMPORTED_MODULE_2__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./parent/parent.component */</span> <span class="number">8569</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _child_child_component__WEBPACK_IMPORTED_MODULE_3__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./child/child.component */</span> <span class="number">2644</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _home_home_component__WEBPACK_IMPORTED_MODULE_4__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./home/home.component */</span> <span class="number">5067</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _about_about_component__WEBPACK_IMPORTED_MODULE_5__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./about/about.component */</span> <span class="number">6698</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _angular_common__WEBPACK_IMPORTED_MODULE_9__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! @angular/common */</span> <span class="number">4666</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _app_routing_module__WEBPACK_IMPORTED_MODULE_6__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./app-routing.module */</span> <span class="number">158</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _angular_core__WEBPACK_IMPORTED_MODULE_7__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! @angular/core */</span> <span class="number">2560</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.ɵfac = <span class="keyword">function</span> <span class="title function_">AppModule_Factory</span>(<span class="params">t</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">new</span> (t || <span class="title class_">AppModule</span>)();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.ɵmod = <span class="comment">/*@__PURE__*/</span>_angular_core__WEBPACK_IMPORTED_MODULE_7__[<span class="string">&quot;ɵɵdefineNgModule&quot;</span>](&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">AppModule</span>,</span><br><span class="line">      <span class="attr">bootstrap</span>: [_app_component__WEBPACK_IMPORTED_MODULE_0__.<span class="property">AppComponent</span>]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.ɵinj = <span class="comment">/*@__PURE__*/</span>_angular_core__WEBPACK_IMPORTED_MODULE_7__[<span class="string">&quot;ɵɵdefineInjector&quot;</span>](&#123;</span><br><span class="line">      <span class="attr">imports</span>: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__.<span class="property">BrowserModule</span>, _angular_common__WEBPACK_IMPORTED_MODULE_9__.<span class="property">CommonModule</span>, _app_routing_module__WEBPACK_IMPORTED_MODULE_6__.<span class="property">AppRoutingModule</span>]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  (<span class="keyword">typeof</span> ngJitMode === <span class="string">&quot;undefined&quot;</span> || ngJitMode) &amp;&amp; _angular_core__WEBPACK_IMPORTED_MODULE_7__[<span class="string">&quot;ɵɵsetNgModuleScope&quot;</span>](<span class="title class_">AppModule</span>, &#123;</span><br><span class="line">    <span class="attr">declarations</span>: [_app_component__WEBPACK_IMPORTED_MODULE_0__.<span class="property">AppComponent</span>, _product_product_component__WEBPACK_IMPORTED_MODULE_1__.<span class="property">ProductComponent</span>, _parent_parent_component__WEBPACK_IMPORTED_MODULE_2__.<span class="property">ParentComponent</span>, _child_child_component__WEBPACK_IMPORTED_MODULE_3__.<span class="property">ChildComponent</span>, _home_home_component__WEBPACK_IMPORTED_MODULE_4__.<span class="property">HomeComponent</span>, _about_about_component__WEBPACK_IMPORTED_MODULE_5__.<span class="property">AboutComponent</span>],</span><br><span class="line">    <span class="attr">imports</span>: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__.<span class="property">BrowserModule</span>, _angular_common__WEBPACK_IMPORTED_MODULE_9__.<span class="property">CommonModule</span>, _app_routing_module__WEBPACK_IMPORTED_MODULE_6__.<span class="property">AppRoutingModule</span>]</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">2644</span>:</span><br><span class="line"><span class="comment">/*!******************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/app/child/child.component.ts ***!</span></span><br><span class="line"><span class="comment">  \******************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;ChildComponent&quot;</span>: <span class="function">() =&gt;</span> (<span class="comment">/* binding */</span> <span class="title class_">ChildComponent</span>)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _angular_core__WEBPACK_IMPORTED_MODULE_0__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! @angular/core */</span> <span class="number">2560</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildComponent</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.ɵfac = <span class="keyword">function</span> <span class="title function_">ChildComponent_Factory</span>(<span class="params">t</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">new</span> (t || <span class="title class_">ChildComponent</span>)();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.ɵcmp = <span class="comment">/*@__PURE__*/</span>_angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵdefineComponent&quot;</span>](&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">ChildComponent</span>,</span><br><span class="line">      <span class="attr">selectors</span>: [[<span class="string">&quot;app-child&quot;</span>]],</span><br><span class="line">      <span class="attr">decls</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">vars</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">template</span>: <span class="keyword">function</span> <span class="title function_">ChildComponent_Template</span>(<span class="params">rf, ctx</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rf &amp; <span class="number">1</span>) &#123;</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementStart&quot;</span>](<span class="number">0</span>, <span class="string">&quot;p&quot;</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵtext&quot;</span>](<span class="number">1</span>, <span class="string">&quot;child works!&quot;</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementEnd&quot;</span>]();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">styles</span>: [<span class="string">&quot;\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */&quot;</span>]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">5067</span>:</span><br><span class="line"><span class="comment">/*!****************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/app/home/home.component.ts ***!</span></span><br><span class="line"><span class="comment">  \****************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;HomeComponent&quot;</span>: <span class="function">() =&gt;</span> (<span class="comment">/* binding */</span> <span class="title class_">HomeComponent</span>)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _angular_core__WEBPACK_IMPORTED_MODULE_0__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! @angular/core */</span> <span class="number">2560</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomeComponent</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.ɵfac = <span class="keyword">function</span> <span class="title function_">HomeComponent_Factory</span>(<span class="params">t</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">new</span> (t || <span class="title class_">HomeComponent</span>)();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.ɵcmp = <span class="comment">/*@__PURE__*/</span>_angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵdefineComponent&quot;</span>](&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">HomeComponent</span>,</span><br><span class="line">      <span class="attr">selectors</span>: [[<span class="string">&quot;app-home&quot;</span>]],</span><br><span class="line">      <span class="attr">decls</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">vars</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">template</span>: <span class="keyword">function</span> <span class="title function_">HomeComponent_Template</span>(<span class="params">rf, ctx</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rf &amp; <span class="number">1</span>) &#123;</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementStart&quot;</span>](<span class="number">0</span>, <span class="string">&quot;p&quot;</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵtext&quot;</span>](<span class="number">1</span>, <span class="string">&quot;home works!&quot;</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementEnd&quot;</span>]();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">styles</span>: [<span class="string">&quot;\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */&quot;</span>]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">8569</span>:</span><br><span class="line"><span class="comment">/*!********************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/app/parent/parent.component.ts ***!</span></span><br><span class="line"><span class="comment">  \********************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;ParentComponent&quot;</span>: <span class="function">() =&gt;</span> (<span class="comment">/* binding */</span> <span class="title class_">ParentComponent</span>)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _angular_core__WEBPACK_IMPORTED_MODULE_0__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! @angular/core */</span> <span class="number">2560</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParentComponent</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.ɵfac = <span class="keyword">function</span> <span class="title function_">ParentComponent_Factory</span>(<span class="params">t</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">new</span> (t || <span class="title class_">ParentComponent</span>)();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.ɵcmp = <span class="comment">/*@__PURE__*/</span>_angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵdefineComponent&quot;</span>](&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">ParentComponent</span>,</span><br><span class="line">      <span class="attr">selectors</span>: [[<span class="string">&quot;app-parent&quot;</span>]],</span><br><span class="line">      <span class="attr">decls</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">vars</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">template</span>: <span class="keyword">function</span> <span class="title function_">ParentComponent_Template</span>(<span class="params">rf, ctx</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rf &amp; <span class="number">1</span>) &#123;</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementStart&quot;</span>](<span class="number">0</span>, <span class="string">&quot;p&quot;</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵtext&quot;</span>](<span class="number">1</span>, <span class="string">&quot;parent works!&quot;</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementEnd&quot;</span>]();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">styles</span>: [<span class="string">&quot;\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */&quot;</span>],</span><br><span class="line">      <span class="attr">encapsulation</span>: <span class="number">3</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">7695</span>:</span><br><span class="line"><span class="comment">/*!**********************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/app/product/product.component.ts ***!</span></span><br><span class="line"><span class="comment">  \**********************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;ProductComponent&quot;</span>: <span class="function">() =&gt;</span> (<span class="comment">/* binding */</span> <span class="title class_">ProductComponent</span>)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _angular_core__WEBPACK_IMPORTED_MODULE_0__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! @angular/core */</span> <span class="number">2560</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">cdf</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cdf</span> = cdf;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cdf</span>.<span class="title function_">markForCheck</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.ɵfac = <span class="keyword">function</span> <span class="title function_">ProductComponent_Factory</span>(<span class="params">t</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">new</span> (t || <span class="title class_">ProductComponent</span>)(_angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵdirectiveInject&quot;</span>](_angular_core__WEBPACK_IMPORTED_MODULE_0__.<span class="property">ChangeDetectorRef</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.ɵcmp = <span class="comment">/*@__PURE__*/</span>_angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵdefineComponent&quot;</span>](&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">ProductComponent</span>,</span><br><span class="line">      <span class="attr">selectors</span>: [[<span class="string">&quot;app-product&quot;</span>]],</span><br><span class="line">      <span class="attr">decls</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">vars</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">template</span>: <span class="keyword">function</span> <span class="title function_">ProductComponent_Template</span>(<span class="params">rf, ctx</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rf &amp; <span class="number">1</span>) &#123;</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementStart&quot;</span>](<span class="number">0</span>, <span class="string">&quot;p&quot;</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵtext&quot;</span>](<span class="number">1</span>, <span class="string">&quot;product works!&quot;</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementEnd&quot;</span>]();</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementStart&quot;</span>](<span class="number">2</span>, <span class="string">&quot;div&quot;</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵtext&quot;</span>](<span class="number">3</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵelementEnd&quot;</span>]();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rf &amp; <span class="number">2</span>) &#123;</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵadvance&quot;</span>](<span class="number">3</span>);</span><br><span class="line">          _angular_core__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;ɵɵtextInterpolate&quot;</span>](ctx.<span class="property">count</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">styles</span>: [<span class="string">&quot;\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */&quot;</span>],</span><br><span class="line">      <span class="attr">changeDetection</span>: <span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">4431</span>:</span><br><span class="line"><span class="comment">/*!*********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/main.ts ***!</span></span><br><span class="line"><span class="comment">  \*********************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! @angular/platform-browser */</span> <span class="number">4497</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _app_app_module__WEBPACK_IMPORTED_MODULE_0__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./app/app.module */</span> <span class="number">6747</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__.<span class="title function_">platformBrowser</span>().<span class="title function_">bootstrapModule</span>(_app_app_module__WEBPACK_IMPORTED_MODULE_0__.<span class="property">AppModule</span>).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/******/</span> <span class="function"><span class="params">__webpack_require__</span> =&gt;</span> &#123; <span class="comment">// webpackRuntimeModules</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> <span class="title function_">__webpack_exec__</span> = (<span class="params">moduleId</span>) =&gt; (<span class="title function_">__webpack_require__</span>(__webpack_require__.<span class="property">s</span> = moduleId))</span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.<span class="title function_">O</span>(<span class="number">0</span>, [<span class="string">&quot;vendor&quot;</span>], <span class="function">() =&gt;</span> (<span class="title function_">__webpack_exec__</span>(<span class="number">1211</span>), <span class="title function_">__webpack_exec__</span>(<span class="number">4431</span>)));</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> __webpack_exports__ = __webpack_require__.<span class="title function_">O</span>();</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line">]);</span><br><span class="line"><span class="comment">//# sourceMappingURL=main.js.map</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>main</tag>
      </tags>
  </entry>
  <entry>
    <title>how-to-run-javascript</title>
    <url>/2024/02/16/how-to-run-javascript/</url>
    <content><![CDATA[<h1 id="如何运行-JavaScript"><a href="#如何运行-JavaScript" class="headerlink" title="如何运行 JavaScript"></a>如何运行 JavaScript</h1><p>运行JavaScript代码有很多方式，以下总结四种方式：</p>
<ul>
<li>使用html运行</li>
<li>使用浏览器控制台运行</li>
<li>使用Node.js REPL(<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">Read-Eval-Print Loop</a>)交互式运行</li>
<li>使用Node.js运行JavaScript文件</li>
<li>使用编辑器运行</li>
</ul>
<h2 id="使用html运行"><a href="#使用html运行" class="headerlink" title="使用html运行"></a>使用html运行</h2><p>在html文件中，使用<code>&lt;script&gt;</code>标签引入JavaScript文件，然后在浏览器中打开html文件即可运行JavaScript代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Run JavaScript<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, world!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用浏览器控制台运行-Chrome"><a href="#使用浏览器控制台运行-Chrome" class="headerlink" title="使用浏览器控制台运行(Chrome)"></a>使用浏览器控制台运行(Chrome)</h2><p>在浏览器中打开网页，然后按<code>F12</code>(Windows)或者<code>Ctrl+Shift+I</code>(Mac)打开控制台，输入JavaScript代码即可运行。</p>
<h2 id="使用Node-js-REPL交互式运行"><a href="#使用Node-js-REPL交互式运行" class="headerlink" title="使用Node.js REPL交互式运行"></a>使用Node.js REPL交互式运行</h2><p>在终端中输入<code>node</code>命令，进入Node.js REPL环境，然后输入JavaScript代码即可运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node</span><br><span class="line">&gt; console.log(<span class="string">&#x27;Hello, world!&#x27;</span>);</span><br><span class="line">Hello, world!</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure>

<h2 id="使用Node-js运行JavaScript文件"><a href="#使用Node-js运行JavaScript文件" class="headerlink" title="使用Node.js运行JavaScript文件"></a>使用Node.js运行JavaScript文件</h2><p>在终端中输入<code>node</code>命令，后面跟上JavaScript文件路径，即可运行JavaScript文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node index.js</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure>

<h2 id="使用编辑器运行"><a href="#使用编辑器运行" class="headerlink" title="使用编辑器运行"></a>使用编辑器运行</h2><ul>
<li>VS Code可以使用<code>Code Runner</code>插件运行JavaScript文件，安装插件后，右键点击文件，选择<code>Run Code</code>即可运行。</li>
<li>WebStorm可以直接右键点击文件，选择<code>Run</code>即可运行。</li>
</ul>
<p>今天有幸了解到了另外一个IED，<a href="https://www.activestate.com/products/komodo-ide/">Komodo</a>，主要是针对Python和Perl的，但是也支持JavaScript，有空下载来试试。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>html-button-default-submit</title>
    <url>/2024/06/11/html-button-default-submit/</url>
    <content><![CDATA[<h2 id="点击清除-Clear-按钮时，表单竟然提交了！"><a href="#点击清除-Clear-按钮时，表单竟然提交了！" class="headerlink" title="点击清除(Clear)按钮时，表单竟然提交了！"></a>点击清除(Clear)按钮时，表单竟然提交了！</h2><p>今天在编写 Angular + Material Design 表单时，遇到一个奇怪的问题：<strong>点击清除按钮时，表单竟然被提交了！</strong></p>
<p>表单结构非常简单：</p>
<ul>
<li>用户名和密码输入框</li>
<li>提交按钮（Submit）</li>
<li>清除按钮（Clear）</li>
</ul>
<p>但点击清除按钮时，触发了意外的表单提交行为。<br><img src="/../images/html-button-default-submit.png" alt="button-default-submit"></p>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">&quot;onSubmit()&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>Password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- submit --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;clear()&quot;</span>&gt;</span>Clear<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- clear input --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">onSubmit</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> username = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> password = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;username:&quot;</span>, username);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;password:&quot;</span>, password);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>).<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>).<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>后来仔细查阅<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#type">MDN</a>文档发现，<code>form</code>表单中<code>button</code>的默认type是<code>submit</code>，而我的代码中没有为清除按钮指定button的type，所以点击清除按钮时，同时触发了清除和提交两个操作。</p>
<h2 id="form中button的三种类型"><a href="#form中button的三种类型" class="headerlink" title="form中button的三种类型"></a>form中button的三种类型</h2><ul>
<li><code>submit</code>：默认值，点击按钮时提交表单。</li>
<li><code>reset</code>：点击按钮时重置表单中的所有字段。</li>
<li><code>button</code>：点击按钮时不执行任何操作，这种类型的button需要用户自己添加事件处理函数。</li>
</ul>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>为清除按钮指定type为<code>button</code>，这样点击清除按钮时就不会触发表单提交了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;clear()&quot;</span>&gt;</span>Clear<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>为清除按钮指定type为<code>reset</code>，这样做的好处是：1. 语义更清晰，2. 不需添加额外的事件处理函数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>Clear<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>关于form中button的更多细节，请参考<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#type">MDN</a></p>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>button</tag>
        <tag>submit</tag>
        <tag>reset</tag>
      </tags>
  </entry>
  <entry>
    <title>how-value-convert-to-string</title>
    <url>/2023/12/15/how-value-convert-to-string/</url>
    <content><![CDATA[<h1 id="How-many-ways-to-convert-a-value-to-string-in-JavaScript"><a href="#How-many-ways-to-convert-a-value-to-string-in-JavaScript" class="headerlink" title="How many ways to convert a value to string in JavaScript"></a>How many ways to convert a value to string in JavaScript</h1><h2 id="1-value-toString"><a href="#1-value-toString" class="headerlink" title="1. value.toString()"></a>1. value.toString()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">const</span> str = num.<span class="title function_">toString</span>();</span><br></pre></td></tr></table></figure>

<h2 id="2-String-value"><a href="#2-String-value" class="headerlink" title="2. String(value)"></a>2. String(value)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="title class_">String</span>(num);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure>

<h2 id="3-value-‘’"><a href="#3-value-‘’" class="headerlink" title="3. value + ‘’"></a>3. value + ‘’</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">const</span> str = num + <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="4-value"><a href="#4-value" class="headerlink" title="4. `${value}`"></a>4. `${value}`</h2><p>const num &#x3D; 123;<br>const str &#x3D; `${num}`;</p>
<h2 id="5-JSON-stringify-value"><a href="#5-JSON-stringify-value" class="headerlink" title="5. JSON.stringify(value)"></a>5. JSON.stringify(value)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(num);</span><br></pre></td></tr></table></figure>

<p>What’s the difference between them?</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>html-select-and-option</title>
    <url>/2024/05/06/html-select-and-option/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><code>&lt;select&gt;</code> is a form control element that allows users to select an option from a list of options. It is used to create a drop-down list. <code>&lt;option&gt;</code> is a child element of <code>&lt;select&gt;</code>, which represents an option in a drop-down list.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;my_select&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Default-value"><a href="#Default-value" class="headerlink" title="Default value"></a>Default value</h2><p>You can set default value to a select by adding <code>selected</code> to the option element.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;my_select&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">selected</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span> <span class="comment">&lt;!-- default value --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Use-ul-li-to-create-a-select-list"><a href="#Use-ul-li-to-create-a-select-list" class="headerlink" title="Use ul&#x2F;li to create a select list"></a>Use ul&#x2F;li to create a select list</h2><p>Its 2024 now, I still can’t set styles to <code>option</code> like <code>padding</code> and <code>margin</code>. The only way to create a custom select list is to use <code>ul</code> and <code>li</code> elements. </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;my_select&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://stackoverflow.com/a/22681234/1487475">https://stackoverflow.com/a/22681234/1487475</a></p>
<p>未完，待续。。。</p>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>select</tag>
        <tag>option</tag>
      </tags>
  </entry>
  <entry>
    <title>html-lazy-load-image</title>
    <url>/2024/11/19/html-lazy-load-image/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>How to implement lazy load images in html page?</p>
<h2 id="Use-loading-lazy-attribute-of-img-tag"><a href="#Use-loading-lazy-attribute-of-img-tag" class="headerlink" title="Use loading=lazy attribute of img tag"></a>Use <code>loading=lazy</code> attribute of <code>img</code> tag</h2><p>With html5, you can use <code>loading=&quot;lazy&quot;</code> attribute to lazy load images. This attribute tells the browser to defer loading of the image until it is needed. The browser will load the image when it is about to come into view.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;image.jpg&quot;</span> loading=<span class="string">&quot;lazy&quot;</span> alt=<span class="string">&quot;描述性文字&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>For old browsers which do not support <code>loading</code> attribute, you can use JavaScript to implement lazy load images.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;lazyload&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;描述性文字&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> lazyImages = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;img.lazyload&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;IntersectionObserver&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> lazyImageObserver = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="keyword">function</span>(<span class="params">entries, observer</span>) &#123;</span><br><span class="line">            entries.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">entry</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">                    <span class="keyword">let</span> lazyImage = entry.<span class="property">target</span>;</span><br><span class="line">                    lazyImage.<span class="property">src</span> = lazyImage.<span class="property">dataset</span>.<span class="property">src</span>;</span><br><span class="line">                    lazyImage.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;lazyload&quot;</span>);</span><br><span class="line">                    lazyImageObserver.<span class="title function_">unobserve</span>(lazyImage);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        lazyImages.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">lazyImage</span>) &#123;</span><br><span class="line">            lazyImageObserver.<span class="title function_">observe</span>(lazyImage);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Fallback for browsers that do not support Intersection Observer</span></span><br><span class="line">        <span class="keyword">let</span> oldLoad = <span class="keyword">function</span>(<span class="params">imgs</span>) &#123;</span><br><span class="line">            imgs.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">img</span>) &#123;</span><br><span class="line">                img.<span class="property">src</span> = img.<span class="property">dataset</span>.<span class="property">src</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="title function_">oldLoad</span>(lazyImages);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>Please note that, <code>window.load</code> event won’t wait for lazy loaded resources.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Lazy_loading#images_and_iframes">https://developer.mozilla.org/en-US/docs/Web/Performance/Lazy_loading#images_and_iframes</a></li>
</ol>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>lazyload</tag>
        <tag>image</tag>
      </tags>
  </entry>
  <entry>
    <title>how-angular-app-runs-polyfillsjs</title>
    <url>/2024/12/27/how-angular-app-runs-polyfillsjs/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Angular app build后会生成如下文件结构，其中main&#x2F;polyfills&#x2F;runtime文件中的xxx是Angular随机生成的hash值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dist/</span><br><span class="line">├─ angular-15/</span><br><span class="line">│  ├─ assets/</span><br><span class="line">│  ├─ 3rdpartylicenses.txt</span><br><span class="line">│  ├─ favicon.ico</span><br><span class="line">│  ├─ index.html</span><br><span class="line">│  ├─ main.xxx.js</span><br><span class="line">│  ├─ polyfills.xxx.js</span><br><span class="line">│  ├─ runtime.xxx.js</span><br><span class="line">│  ├─ styles.xxx.css</span><br></pre></td></tr></table></figure>

<p>polyfills.js文件主要是加载一些polyfills，用来兼容一些老的浏览器，当然也做一些额外的操作，比如zone.js的monkey patch。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(self[<span class="string">&quot;webpackChunkangular_15&quot;</span>] = self[<span class="string">&quot;webpackChunkangular_15&quot;</span>] || []).<span class="title function_">push</span>([[<span class="string">&quot;polyfills&quot;</span>],&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">7716</span>:</span><br><span class="line"><span class="comment">/*!***************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/ansi-html-community/index.js ***!</span></span><br><span class="line"><span class="comment">  \***************************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = ansiHTML;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reference to https://github.com/sindresorhus/ansi-regex</span></span><br><span class="line"><span class="keyword">var</span> _regANSI = <span class="regexp">/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]&#123;1,3&#125;)?(?:(?:;[0-9]&#123;0,3&#125;)*)?[A-M|f-m])|\u001b[A-M]/</span>;</span><br><span class="line"><span class="keyword">var</span> _defColors = &#123;</span><br><span class="line">  <span class="attr">reset</span>: [<span class="string">&#x27;fff&#x27;</span>, <span class="string">&#x27;000&#x27;</span>],</span><br><span class="line">  <span class="comment">// [FOREGROUD_COLOR, BACKGROUND_COLOR]</span></span><br><span class="line">  <span class="attr">black</span>: <span class="string">&#x27;000&#x27;</span>,</span><br><span class="line">  <span class="attr">red</span>: <span class="string">&#x27;ff0000&#x27;</span>,</span><br><span class="line">  <span class="attr">green</span>: <span class="string">&#x27;209805&#x27;</span>,</span><br><span class="line">  <span class="attr">yellow</span>: <span class="string">&#x27;e8bf03&#x27;</span>,</span><br><span class="line">  <span class="attr">blue</span>: <span class="string">&#x27;0000ff&#x27;</span>,</span><br><span class="line">  <span class="attr">magenta</span>: <span class="string">&#x27;ff00ff&#x27;</span>,</span><br><span class="line">  <span class="attr">cyan</span>: <span class="string">&#x27;00ffee&#x27;</span>,</span><br><span class="line">  <span class="attr">lightgrey</span>: <span class="string">&#x27;f0f0f0&#x27;</span>,</span><br><span class="line">  <span class="attr">darkgrey</span>: <span class="string">&#x27;888&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> _styles = &#123;</span><br><span class="line">  <span class="number">30</span>: <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">  <span class="number">31</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">  <span class="number">32</span>: <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">  <span class="number">33</span>: <span class="string">&#x27;yellow&#x27;</span>,</span><br><span class="line">  <span class="number">34</span>: <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">  <span class="number">35</span>: <span class="string">&#x27;magenta&#x27;</span>,</span><br><span class="line">  <span class="number">36</span>: <span class="string">&#x27;cyan&#x27;</span>,</span><br><span class="line">  <span class="number">37</span>: <span class="string">&#x27;lightgrey&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> _openTags = &#123;</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;font-weight:bold&#x27;</span>,</span><br><span class="line">  <span class="comment">// bold</span></span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;opacity:0.5&#x27;</span>,</span><br><span class="line">  <span class="comment">// dim</span></span><br><span class="line">  <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;&lt;i&gt;&#x27;</span>,</span><br><span class="line">  <span class="comment">// italic</span></span><br><span class="line">  <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;&lt;u&gt;&#x27;</span>,</span><br><span class="line">  <span class="comment">// underscore</span></span><br><span class="line">  <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;display:none&#x27;</span>,</span><br><span class="line">  <span class="comment">// hidden</span></span><br><span class="line">  <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;&lt;del&gt;&#x27;</span> <span class="comment">// delete</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _closeTags = &#123;</span><br><span class="line">  <span class="string">&#x27;23&#x27;</span>: <span class="string">&#x27;&lt;/i&gt;&#x27;</span>,</span><br><span class="line">  <span class="comment">// reset italic</span></span><br><span class="line">  <span class="string">&#x27;24&#x27;</span>: <span class="string">&#x27;&lt;/u&gt;&#x27;</span>,</span><br><span class="line">  <span class="comment">// reset underscore</span></span><br><span class="line">  <span class="string">&#x27;29&#x27;</span>: <span class="string">&#x27;&lt;/del&gt;&#x27;</span> <span class="comment">// reset delete</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">39</span>, <span class="number">49</span>].<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">  _closeTags[n] = <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Converts text with ANSI color codes to HTML markup.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">text</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ansiHTML</span>(<span class="params">text</span>) &#123;</span><br><span class="line">  <span class="comment">// Returns the text if the string has no ANSI escape code.</span></span><br><span class="line">  <span class="keyword">if</span> (!_regANSI.<span class="title function_">test</span>(text)) &#123;</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Cache opened sequence.</span></span><br><span class="line">  <span class="keyword">var</span> ansiCodes = [];</span><br><span class="line">  <span class="comment">// Replace with markup.</span></span><br><span class="line">  <span class="keyword">var</span> ret = text.<span class="title function_">replace</span>(<span class="regexp">/\033\[(\d+)m/g</span>, <span class="keyword">function</span> (<span class="params">match, seq</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ot = _openTags[seq];</span><br><span class="line">    <span class="keyword">if</span> (ot) &#123;</span><br><span class="line">      <span class="comment">// If current sequence has been opened, close it.</span></span><br><span class="line">      <span class="keyword">if</span> (!!~ansiCodes.<span class="title function_">indexOf</span>(seq)) &#123;</span><br><span class="line">        <span class="comment">// eslint-disable-line no-extra-boolean-cast</span></span><br><span class="line">        ansiCodes.<span class="title function_">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Open tag.</span></span><br><span class="line">      ansiCodes.<span class="title function_">push</span>(seq);</span><br><span class="line">      <span class="keyword">return</span> ot[<span class="number">0</span>] === <span class="string">&#x27;&lt;&#x27;</span> ? ot : <span class="string">&#x27;&lt;span style=&quot;&#x27;</span> + ot + <span class="string">&#x27;;&quot;&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> ct = _closeTags[seq];</span><br><span class="line">    <span class="keyword">if</span> (ct) &#123;</span><br><span class="line">      <span class="comment">// Pop sequence</span></span><br><span class="line">      ansiCodes.<span class="title function_">pop</span>();</span><br><span class="line">      <span class="keyword">return</span> ct;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Make sure tags are closed.</span></span><br><span class="line">  <span class="keyword">var</span> l = ansiCodes.<span class="property">length</span>;</span><br><span class="line">  l &gt; <span class="number">0</span> &amp;&amp; (ret += <span class="title class_">Array</span>(l + <span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&#x27;&lt;/span&gt;&#x27;</span>));</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Customize colors.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; colors reference to _defColors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ansiHTML.<span class="property">setColors</span> = <span class="keyword">function</span> (<span class="params">colors</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> colors !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;`colors` parameter must be an Object.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> _finalColors = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> _defColors) &#123;</span><br><span class="line">    <span class="keyword">var</span> hex = colors.<span class="title function_">hasOwnProperty</span>(key) ? colors[key] : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!hex) &#123;</span><br><span class="line">      _finalColors[key] = _defColors[key];</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;reset&#x27;</span> === key) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> hex === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        hex = [hex];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(hex) || hex.<span class="property">length</span> === <span class="number">0</span> || hex.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">h</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> h !== <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">      &#125;)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;The value of `&#x27;</span> + key + <span class="string">&#x27;` property must be an Array and each item could only be a hex string, e.g.: FF0000&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> defHexColor = _defColors[key];</span><br><span class="line">      <span class="keyword">if</span> (!hex[<span class="number">0</span>]) &#123;</span><br><span class="line">        hex[<span class="number">0</span>] = defHexColor[<span class="number">0</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (hex.<span class="property">length</span> === <span class="number">1</span> || !hex[<span class="number">1</span>]) &#123;</span><br><span class="line">        hex = [hex[<span class="number">0</span>]];</span><br><span class="line">        hex.<span class="title function_">push</span>(defHexColor[<span class="number">1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      hex = hex.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> hex !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;The value of `&#x27;</span> + key + <span class="string">&#x27;` property must be a hex string, e.g.: FF0000&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    _finalColors[key] = hex;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">_setTags</span>(_finalColors);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reset colors.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ansiHTML.<span class="property">reset</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">_setTags</span>(_defColors);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Expose tags, including open and close.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type</span> &#123;<span class="type">Object</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ansiHTML.<span class="property">tags</span> = &#123;&#125;;</span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property">defineProperty</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(ansiHTML.<span class="property">tags</span>, <span class="string">&#x27;open&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> _openTags;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(ansiHTML.<span class="property">tags</span>, <span class="string">&#x27;close&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> _closeTags;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  ansiHTML.<span class="property">tags</span>.<span class="property">open</span> = _openTags;</span><br><span class="line">  ansiHTML.<span class="property">tags</span>.<span class="property">close</span> = _closeTags;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_setTags</span>(<span class="params">colors</span>) &#123;</span><br><span class="line">  <span class="comment">// reset all</span></span><br><span class="line">  _openTags[<span class="string">&#x27;0&#x27;</span>] = <span class="string">&#x27;font-weight:normal;opacity:1;color:#&#x27;</span> + colors.<span class="property">reset</span>[<span class="number">0</span>] + <span class="string">&#x27;;background:#&#x27;</span> + colors.<span class="property">reset</span>[<span class="number">1</span>];</span><br><span class="line">  <span class="comment">// inverse</span></span><br><span class="line">  _openTags[<span class="string">&#x27;7&#x27;</span>] = <span class="string">&#x27;color:#&#x27;</span> + colors.<span class="property">reset</span>[<span class="number">1</span>] + <span class="string">&#x27;;background:#&#x27;</span> + colors.<span class="property">reset</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// dark grey</span></span><br><span class="line">  _openTags[<span class="string">&#x27;90&#x27;</span>] = <span class="string">&#x27;color:#&#x27;</span> + colors.<span class="property">darkgrey</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> code <span class="keyword">in</span> _styles) &#123;</span><br><span class="line">    <span class="keyword">var</span> color = _styles[code];</span><br><span class="line">    <span class="keyword">var</span> oriColor = colors[color] || <span class="string">&#x27;000&#x27;</span>;</span><br><span class="line">    _openTags[code] = <span class="string">&#x27;color:#&#x27;</span> + oriColor;</span><br><span class="line">    code = <span class="built_in">parseInt</span>(code);</span><br><span class="line">    _openTags[(code + <span class="number">10</span>).<span class="title function_">toString</span>()] = <span class="string">&#x27;background:#&#x27;</span> + oriColor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ansiHTML.<span class="title function_">reset</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">3358</span>:</span><br><span class="line"><span class="comment">/*!***************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/events/events.js ***!</span></span><br><span class="line"><span class="comment">  \***************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="comment">// Copyright Joyent, Inc. and other Node contributors.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Permission is hereby granted, free of charge, to any person obtaining a</span></span><br><span class="line"><span class="comment">// copy of this software and associated documentation files (the</span></span><br><span class="line"><span class="comment">// &quot;Software&quot;), to deal in the Software without restriction, including</span></span><br><span class="line"><span class="comment">// without limitation the rights to use, copy, modify, merge, publish,</span></span><br><span class="line"><span class="comment">// distribute, sublicense, and/or sell copies of the Software, and to permit</span></span><br><span class="line"><span class="comment">// persons to whom the Software is furnished to do so, subject to the</span></span><br><span class="line"><span class="comment">// following conditions:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The above copyright notice and this permission notice shall be included</span></span><br><span class="line"><span class="comment">// in all copies or substantial portions of the Software.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS</span></span><br><span class="line"><span class="comment">// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span></span><br><span class="line"><span class="comment">// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN</span></span><br><span class="line"><span class="comment">// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,</span></span><br><span class="line"><span class="comment">// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR</span></span><br><span class="line"><span class="comment">// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE</span></span><br><span class="line"><span class="comment">// USE OR OTHER DEALINGS IN THE SOFTWARE.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> R = <span class="keyword">typeof</span> <span class="title class_">Reflect</span> === <span class="string">&#x27;object&#x27;</span> ? <span class="title class_">Reflect</span> : <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ReflectApply</span> = R &amp;&amp; <span class="keyword">typeof</span> R.<span class="property">apply</span> === <span class="string">&#x27;function&#x27;</span> ? R.<span class="property">apply</span> : <span class="keyword">function</span> <span class="title function_">ReflectApply</span>(<span class="params">target, receiver, args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">apply</span>.<span class="title function_">call</span>(target, receiver, args);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ReflectOwnKeys</span>;</span><br><span class="line"><span class="keyword">if</span> (R &amp;&amp; <span class="keyword">typeof</span> R.<span class="property">ownKeys</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">  <span class="title class_">ReflectOwnKeys</span> = R.<span class="property">ownKeys</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property">getOwnPropertySymbols</span>) &#123;</span><br><span class="line">  <span class="title class_">ReflectOwnKeys</span> = <span class="keyword">function</span> <span class="title function_">ReflectOwnKeys</span>(<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(target).<span class="title function_">concat</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(target));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title class_">ReflectOwnKeys</span> = <span class="keyword">function</span> <span class="title function_">ReflectOwnKeys</span>(<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(target);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ProcessEmitWarning</span>(<span class="params">warning</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">console</span> &amp;&amp; <span class="variable language_">console</span>.<span class="property">warn</span>) <span class="variable language_">console</span>.<span class="title function_">warn</span>(warning);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">NumberIsNaN</span> = <span class="title class_">Number</span>.<span class="property">isNaN</span> || <span class="keyword">function</span> <span class="title function_">NumberIsNaN</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value !== value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">EventEmitter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">EventEmitter</span>.<span class="property">init</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">EventEmitter</span>;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">once</span> = once;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Backwards-compat with node 0.10.x</span></span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property">EventEmitter</span> = <span class="title class_">EventEmitter</span>;</span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_events</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_eventsCount</span> = <span class="number">0</span>;</span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_maxListeners</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// By default EventEmitters will print a warning if more than 10 listeners are</span></span><br><span class="line"><span class="comment">// added to it. This is a useful default which helps finding memory leaks.</span></span><br><span class="line"><span class="keyword">var</span> defaultMaxListeners = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkListener</span>(<span class="params">listener</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> listener !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;The &quot;listener&quot; argument must be of type Function. Received type &#x27;</span> + <span class="keyword">typeof</span> listener);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">EventEmitter</span>, <span class="string">&#x27;defaultMaxListeners&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> defaultMaxListeners;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">arg</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arg !== <span class="string">&#x27;number&#x27;</span> || arg &lt; <span class="number">0</span> || <span class="title class_">NumberIsNaN</span>(arg)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(<span class="string">&#x27;The value of &quot;defaultMaxListeners&quot; is out of range. It must be a non-negative number. Received &#x27;</span> + arg + <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    defaultMaxListeners = arg;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property">init</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_events</span> === <span class="literal">undefined</span> || <span class="variable language_">this</span>.<span class="property">_events</span> === <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="variable language_">this</span>).<span class="property">_events</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_events</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_eventsCount</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_maxListeners</span> = <span class="variable language_">this</span>.<span class="property">_maxListeners</span> || <span class="literal">undefined</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Obviously not all Emitters should be limited to 10. This function allows</span></span><br><span class="line"><span class="comment">// that to be increased. Set to zero for unlimited.</span></span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setMaxListeners</span> = <span class="keyword">function</span> <span class="title function_">setMaxListeners</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> n !== <span class="string">&#x27;number&#x27;</span> || n &lt; <span class="number">0</span> || <span class="title class_">NumberIsNaN</span>(n)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(<span class="string">&#x27;The value of &quot;n&quot; is out of range. It must be a non-negative number. Received &#x27;</span> + n + <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_maxListeners</span> = n;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_getMaxListeners</span>(<span class="params">that</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (that.<span class="property">_maxListeners</span> === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="title class_">EventEmitter</span>.<span class="property">defaultMaxListeners</span>;</span><br><span class="line">  <span class="keyword">return</span> that.<span class="property">_maxListeners</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getMaxListeners</span> = <span class="keyword">function</span> <span class="title function_">getMaxListeners</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_getMaxListeners</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">emit</span> = <span class="keyword">function</span> <span class="title function_">emit</span>(<span class="params">type</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> args = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) args.<span class="title function_">push</span>(<span class="variable language_">arguments</span>[i]);</span><br><span class="line">  <span class="keyword">var</span> doError = type === <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> events = <span class="variable language_">this</span>.<span class="property">_events</span>;</span><br><span class="line">  <span class="keyword">if</span> (events !== <span class="literal">undefined</span>) doError = doError &amp;&amp; events.<span class="property">error</span> === <span class="literal">undefined</span>;<span class="keyword">else</span> <span class="keyword">if</span> (!doError) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If there is no &#x27;error&#x27; event listener then throw.</span></span><br><span class="line">  <span class="keyword">if</span> (doError) &#123;</span><br><span class="line">    <span class="keyword">var</span> er;</span><br><span class="line">    <span class="keyword">if</span> (args.<span class="property">length</span> &gt; <span class="number">0</span>) er = args[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (er <span class="keyword">instanceof</span> <span class="title class_">Error</span>) &#123;</span><br><span class="line">      <span class="comment">// Note: The comments on the `throw` lines are intentional, they show</span></span><br><span class="line">      <span class="comment">// up in Node&#x27;s output if this results in an unhandled exception.</span></span><br><span class="line">      <span class="keyword">throw</span> er; <span class="comment">// Unhandled &#x27;error&#x27; event</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// At least give some kind of context to the user</span></span><br><span class="line">    <span class="keyword">var</span> err = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Unhandled error.&#x27;</span> + (er ? <span class="string">&#x27; (&#x27;</span> + er.<span class="property">message</span> + <span class="string">&#x27;)&#x27;</span> : <span class="string">&#x27;&#x27;</span>));</span><br><span class="line">    err.<span class="property">context</span> = er;</span><br><span class="line">    <span class="keyword">throw</span> err; <span class="comment">// Unhandled &#x27;error&#x27; event</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> handler = events[type];</span><br><span class="line">  <span class="keyword">if</span> (handler === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> handler === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="title class_">ReflectApply</span>(handler, <span class="variable language_">this</span>, args);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> len = handler.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">var</span> listeners = <span class="title function_">arrayClone</span>(handler, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; ++i) <span class="title class_">ReflectApply</span>(listeners[i], <span class="variable language_">this</span>, args);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_addListener</span>(<span class="params">target, type, listener, prepend</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> m;</span><br><span class="line">  <span class="keyword">var</span> events;</span><br><span class="line">  <span class="keyword">var</span> existing;</span><br><span class="line">  <span class="title function_">checkListener</span>(listener);</span><br><span class="line">  events = target.<span class="property">_events</span>;</span><br><span class="line">  <span class="keyword">if</span> (events === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    events = target.<span class="property">_events</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">    target.<span class="property">_eventsCount</span> = <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// To avoid recursion in the case that type === &quot;newListener&quot;! Before</span></span><br><span class="line">    <span class="comment">// adding it to the listeners, first emit &quot;newListener&quot;.</span></span><br><span class="line">    <span class="keyword">if</span> (events.<span class="property">newListener</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      target.<span class="title function_">emit</span>(<span class="string">&#x27;newListener&#x27;</span>, type, listener.<span class="property">listener</span> ? listener.<span class="property">listener</span> : listener);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Re-assign `events` because a newListener handler could have caused the</span></span><br><span class="line">      <span class="comment">// this._events to be assigned to a new object</span></span><br><span class="line">      events = target.<span class="property">_events</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    existing = events[type];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (existing === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// Optimize the case of one listener. Don&#x27;t need the extra array object.</span></span><br><span class="line">    existing = events[type] = listener;</span><br><span class="line">    ++target.<span class="property">_eventsCount</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> existing === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// Adding the second element, need to change to array.</span></span><br><span class="line">      existing = events[type] = prepend ? [listener, existing] : [existing, listener];</span><br><span class="line">      <span class="comment">// If we&#x27;ve already got an array, just append.</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prepend) &#123;</span><br><span class="line">      existing.<span class="title function_">unshift</span>(listener);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      existing.<span class="title function_">push</span>(listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check for listener leak</span></span><br><span class="line">    m = <span class="title function_">_getMaxListeners</span>(target);</span><br><span class="line">    <span class="keyword">if</span> (m &gt; <span class="number">0</span> &amp;&amp; existing.<span class="property">length</span> &gt; m &amp;&amp; !existing.<span class="property">warned</span>) &#123;</span><br><span class="line">      existing.<span class="property">warned</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// No error code for this since it is a Warning</span></span><br><span class="line">      <span class="comment">// eslint-disable-next-line no-restricted-syntax</span></span><br><span class="line">      <span class="keyword">var</span> w = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Possible EventEmitter memory leak detected. &#x27;</span> + existing.<span class="property">length</span> + <span class="string">&#x27; &#x27;</span> + <span class="title class_">String</span>(type) + <span class="string">&#x27; listeners &#x27;</span> + <span class="string">&#x27;added. Use emitter.setMaxListeners() to &#x27;</span> + <span class="string">&#x27;increase limit&#x27;</span>);</span><br><span class="line">      w.<span class="property">name</span> = <span class="string">&#x27;MaxListenersExceededWarning&#x27;</span>;</span><br><span class="line">      w.<span class="property">emitter</span> = target;</span><br><span class="line">      w.<span class="property">type</span> = type;</span><br><span class="line">      w.<span class="property">count</span> = existing.<span class="property">length</span>;</span><br><span class="line">      <span class="title class_">ProcessEmitWarning</span>(w);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addListener</span> = <span class="keyword">function</span> <span class="title function_">addListener</span>(<span class="params">type, listener</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_addListener</span>(<span class="variable language_">this</span>, type, listener, <span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">on</span> = <span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addListener</span>;</span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">prependListener</span> = <span class="keyword">function</span> <span class="title function_">prependListener</span>(<span class="params">type, listener</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_addListener</span>(<span class="variable language_">this</span>, type, listener, <span class="literal">true</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onceWrapper</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">fired</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">target</span>.<span class="title function_">removeListener</span>(<span class="variable language_">this</span>.<span class="property">type</span>, <span class="variable language_">this</span>.<span class="property">wrapFn</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fired</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">listener</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">target</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">listener</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>.<span class="property">target</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_onceWrap</span>(<span class="params">target, type, listener</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> state = &#123;</span><br><span class="line">    <span class="attr">fired</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">wrapFn</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">target</span>: target,</span><br><span class="line">    <span class="attr">type</span>: type,</span><br><span class="line">    <span class="attr">listener</span>: listener</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> wrapped = onceWrapper.<span class="title function_">bind</span>(state);</span><br><span class="line">  wrapped.<span class="property">listener</span> = listener;</span><br><span class="line">  state.<span class="property">wrapFn</span> = wrapped;</span><br><span class="line">  <span class="keyword">return</span> wrapped;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">once</span> = <span class="keyword">function</span> <span class="title function_">once</span>(<span class="params">type, listener</span>) &#123;</span><br><span class="line">  <span class="title function_">checkListener</span>(listener);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">on</span>(type, <span class="title function_">_onceWrap</span>(<span class="variable language_">this</span>, type, listener));</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">prependOnceListener</span> = <span class="keyword">function</span> <span class="title function_">prependOnceListener</span>(<span class="params">type, listener</span>) &#123;</span><br><span class="line">  <span class="title function_">checkListener</span>(listener);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">prependListener</span>(type, <span class="title function_">_onceWrap</span>(<span class="variable language_">this</span>, type, listener));</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Emits a &#x27;removeListener&#x27; event if and only if the listener was removed.</span></span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">removeListener</span> = <span class="keyword">function</span> <span class="title function_">removeListener</span>(<span class="params">type, listener</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> list, events, position, i, originalListener;</span><br><span class="line">  <span class="title function_">checkListener</span>(listener);</span><br><span class="line">  events = <span class="variable language_">this</span>.<span class="property">_events</span>;</span><br><span class="line">  <span class="keyword">if</span> (events === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  list = events[type];</span><br><span class="line">  <span class="keyword">if</span> (list === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">if</span> (list === listener || list.<span class="property">listener</span> === listener) &#123;</span><br><span class="line">    <span class="keyword">if</span> (--<span class="variable language_">this</span>.<span class="property">_eventsCount</span> === <span class="number">0</span>) <span class="variable language_">this</span>.<span class="property">_events</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">delete</span> events[type];</span><br><span class="line">      <span class="keyword">if</span> (events.<span class="property">removeListener</span>) <span class="variable language_">this</span>.<span class="title function_">emit</span>(<span class="string">&#x27;removeListener&#x27;</span>, type, list.<span class="property">listener</span> || listener);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> list !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    position = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = list.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (list[i] === listener || list[i].<span class="property">listener</span> === listener) &#123;</span><br><span class="line">        originalListener = list[i].<span class="property">listener</span>;</span><br><span class="line">        position = i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) list.<span class="title function_">shift</span>();<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">spliceOne</span>(list, position);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (list.<span class="property">length</span> === <span class="number">1</span>) events[type] = list[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (events.<span class="property">removeListener</span> !== <span class="literal">undefined</span>) <span class="variable language_">this</span>.<span class="title function_">emit</span>(<span class="string">&#x27;removeListener&#x27;</span>, type, originalListener || listener);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">off</span> = <span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">removeListener</span>;</span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">removeAllListeners</span> = <span class="keyword">function</span> <span class="title function_">removeAllListeners</span>(<span class="params">type</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> listeners, events, i;</span><br><span class="line">  events = <span class="variable language_">this</span>.<span class="property">_events</span>;</span><br><span class="line">  <span class="keyword">if</span> (events === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// not listening for removeListener, no need to emit</span></span><br><span class="line">  <span class="keyword">if</span> (events.<span class="property">removeListener</span> === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_events</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_eventsCount</span> = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (events[type] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (--<span class="variable language_">this</span>.<span class="property">_eventsCount</span> === <span class="number">0</span>) <span class="variable language_">this</span>.<span class="property">_events</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);<span class="keyword">else</span> <span class="keyword">delete</span> events[type];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// emit removeListener for all listeners on all events</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(events);</span><br><span class="line">    <span class="keyword">var</span> key;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">      key = keys[i];</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;removeListener&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">removeAllListeners</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">removeAllListeners</span>(<span class="string">&#x27;removeListener&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_events</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_eventsCount</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  listeners = events[type];</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> listeners === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">removeListener</span>(type, listeners);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (listeners !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// LIFO order</span></span><br><span class="line">    <span class="keyword">for</span> (i = listeners.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">removeListener</span>(type, listeners[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_listeners</span>(<span class="params">target, type, unwrap</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> events = target.<span class="property">_events</span>;</span><br><span class="line">  <span class="keyword">if</span> (events === <span class="literal">undefined</span>) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">var</span> evlistener = events[type];</span><br><span class="line">  <span class="keyword">if</span> (evlistener === <span class="literal">undefined</span>) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> evlistener === <span class="string">&#x27;function&#x27;</span>) <span class="keyword">return</span> unwrap ? [evlistener.<span class="property">listener</span> || evlistener] : [evlistener];</span><br><span class="line">  <span class="keyword">return</span> unwrap ? <span class="title function_">unwrapListeners</span>(evlistener) : <span class="title function_">arrayClone</span>(evlistener, evlistener.<span class="property">length</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">listeners</span> = <span class="keyword">function</span> <span class="title function_">listeners</span>(<span class="params">type</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_listeners</span>(<span class="variable language_">this</span>, type, <span class="literal">true</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">rawListeners</span> = <span class="keyword">function</span> <span class="title function_">rawListeners</span>(<span class="params">type</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_listeners</span>(<span class="variable language_">this</span>, type, <span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property">listenerCount</span> = <span class="keyword">function</span> (<span class="params">emitter, type</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> emitter.<span class="property">listenerCount</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> emitter.<span class="title function_">listenerCount</span>(type);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> listenerCount.<span class="title function_">call</span>(emitter, type);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">listenerCount</span> = listenerCount;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">listenerCount</span>(<span class="params">type</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> events = <span class="variable language_">this</span>.<span class="property">_events</span>;</span><br><span class="line">  <span class="keyword">if</span> (events !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> evlistener = events[type];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> evlistener === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (evlistener !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> evlistener.<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eventNames</span> = <span class="keyword">function</span> <span class="title function_">eventNames</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_eventsCount</span> &gt; <span class="number">0</span> ? <span class="title class_">ReflectOwnKeys</span>(<span class="variable language_">this</span>.<span class="property">_events</span>) : [];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arrayClone</span>(<span class="params">arr, n</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> copy = <span class="keyword">new</span> <span class="title class_">Array</span>(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; ++i) copy[i] = arr[i];</span><br><span class="line">  <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">spliceOne</span>(<span class="params">list, index</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (; index + <span class="number">1</span> &lt; list.<span class="property">length</span>; index++) list[index] = list[index + <span class="number">1</span>];</span><br><span class="line">  list.<span class="title function_">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unwrapListeners</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> ret = <span class="keyword">new</span> <span class="title class_">Array</span>(arr.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ret.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">    ret[i] = arr[i].<span class="property">listener</span> || arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">once</span>(<span class="params">emitter, name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">errorListener</span>(<span class="params">err</span>) &#123;</span><br><span class="line">      emitter.<span class="title function_">removeListener</span>(name, resolver);</span><br><span class="line">      <span class="title function_">reject</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolver</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> emitter.<span class="property">removeListener</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        emitter.<span class="title function_">removeListener</span>(<span class="string">&#x27;error&#x27;</span>, errorListener);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">resolve</span>([].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    ;</span><br><span class="line">    <span class="title function_">eventTargetAgnosticAddListener</span>(emitter, name, resolver, &#123;</span><br><span class="line">      <span class="attr">once</span>: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (name !== <span class="string">&#x27;error&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">addErrorHandlerIfEventEmitter</span>(emitter, errorListener, &#123;</span><br><span class="line">        <span class="attr">once</span>: <span class="literal">true</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addErrorHandlerIfEventEmitter</span>(<span class="params">emitter, handler, flags</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> emitter.<span class="property">on</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">eventTargetAgnosticAddListener</span>(emitter, <span class="string">&#x27;error&#x27;</span>, handler, flags);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">eventTargetAgnosticAddListener</span>(<span class="params">emitter, name, listener, flags</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> emitter.<span class="property">on</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (flags.<span class="property">once</span>) &#123;</span><br><span class="line">      emitter.<span class="title function_">once</span>(name, listener);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      emitter.<span class="title function_">on</span>(name, listener);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> emitter.<span class="property">addEventListener</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// EventTarget does not have `error` event semantics like Node</span></span><br><span class="line">    <span class="comment">// EventEmitters, we do not listen for `error` events here.</span></span><br><span class="line">    emitter.<span class="title function_">addEventListener</span>(name, <span class="keyword">function</span> <span class="title function_">wrapListener</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">      <span class="comment">// IE does not have builtin `&#123; once: true &#125;` support so we</span></span><br><span class="line">      <span class="comment">// have to do it manually.</span></span><br><span class="line">      <span class="keyword">if</span> (flags.<span class="property">once</span>) &#123;</span><br><span class="line">        emitter.<span class="title function_">removeEventListener</span>(name, wrapListener);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">listener</span>(arg);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;The &quot;emitter&quot; argument must be of type EventEmitter. Received type &#x27;</span> + <span class="keyword">typeof</span> emitter);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">4948</span>:</span><br><span class="line"><span class="comment">/*!*************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/html-entities/lib/index.js ***!</span></span><br><span class="line"><span class="comment">  \*************************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="keyword">function</span>(<span class="params">__unused_webpack_module, <span class="built_in">exports</span>, __webpack_require__</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> __assign = <span class="variable language_">this</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">__assign</span> || <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  __assign = <span class="title class_">Object</span>.<span class="property">assign</span> || <span class="keyword">function</span> (<span class="params">t</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> s, i = <span class="number">1</span>, n = <span class="variable language_">arguments</span>.<span class="property">length</span>; i &lt; n; i++) &#123;</span><br><span class="line">      s = <span class="variable language_">arguments</span>[i];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> s) <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(s, p)) t[p] = s[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> __assign.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, (&#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="keyword">var</span> named_references_1 = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./named-references */</span> <span class="number">1873</span>);</span><br><span class="line"><span class="keyword">var</span> numeric_unicode_map_1 = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./numeric-unicode-map */</span> <span class="number">9613</span>);</span><br><span class="line"><span class="keyword">var</span> surrogate_pairs_1 = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./surrogate-pairs */</span> <span class="number">8305</span>);</span><br><span class="line"><span class="keyword">var</span> allNamedReferences = <span class="title function_">__assign</span>(<span class="title function_">__assign</span>(&#123;&#125;, named_references_1.<span class="property">namedReferences</span>), &#123;</span><br><span class="line">  <span class="attr">all</span>: named_references_1.<span class="property">namedReferences</span>.<span class="property">html5</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">replaceUsingRegExp</span>(<span class="params">macroText, macroRegExp, macroReplacer</span>) &#123;</span><br><span class="line">  macroRegExp.<span class="property">lastIndex</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> replaceMatch = macroRegExp.<span class="title function_">exec</span>(macroText);</span><br><span class="line">  <span class="keyword">var</span> replaceResult;</span><br><span class="line">  <span class="keyword">if</span> (replaceMatch) &#123;</span><br><span class="line">    replaceResult = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> replaceLastIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (replaceLastIndex !== replaceMatch.<span class="property">index</span>) &#123;</span><br><span class="line">        replaceResult += macroText.<span class="title function_">substring</span>(replaceLastIndex, replaceMatch.<span class="property">index</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> replaceInput = replaceMatch[<span class="number">0</span>];</span><br><span class="line">      replaceResult += <span class="title function_">macroReplacer</span>(replaceInput);</span><br><span class="line">      replaceLastIndex = replaceMatch.<span class="property">index</span> + replaceInput.<span class="property">length</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (replaceMatch = macroRegExp.<span class="title function_">exec</span>(macroText));</span><br><span class="line">    <span class="keyword">if</span> (replaceLastIndex !== macroText.<span class="property">length</span>) &#123;</span><br><span class="line">      replaceResult += macroText.<span class="title function_">substring</span>(replaceLastIndex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    replaceResult = macroText;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> replaceResult;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> encodeRegExps = &#123;</span><br><span class="line">  <span class="attr">specialChars</span>: <span class="regexp">/[&lt;&gt;&#x27;&quot;&amp;]/g</span>,</span><br><span class="line">  <span class="attr">nonAscii</span>: <span class="regexp">/[&lt;&gt;&#x27;&quot;&amp;\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g</span>,</span><br><span class="line">  <span class="attr">nonAsciiPrintable</span>: <span class="regexp">/[&lt;&gt;&#x27;&quot;&amp;\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g</span>,</span><br><span class="line">  <span class="attr">nonAsciiPrintableOnly</span>: <span class="regexp">/[\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g</span>,</span><br><span class="line">  <span class="attr">extensive</span>: <span class="regexp">/[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> defaultEncodeOptions = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;specialChars&quot;</span>,</span><br><span class="line">  <span class="attr">level</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">  <span class="attr">numeric</span>: <span class="string">&quot;decimal&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encode</span>(<span class="params">text, _a</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _b = _a === <span class="keyword">void</span> <span class="number">0</span> ? defaultEncodeOptions : _a,</span><br><span class="line">    _c = _b.<span class="property">mode</span>,</span><br><span class="line">    mode = _c === <span class="keyword">void</span> <span class="number">0</span> ? <span class="string">&quot;specialChars&quot;</span> : _c,</span><br><span class="line">    _d = _b.<span class="property">numeric</span>,</span><br><span class="line">    numeric = _d === <span class="keyword">void</span> <span class="number">0</span> ? <span class="string">&quot;decimal&quot;</span> : _d,</span><br><span class="line">    _e = _b.<span class="property">level</span>,</span><br><span class="line">    level = _e === <span class="keyword">void</span> <span class="number">0</span> ? <span class="string">&quot;all&quot;</span> : _e;</span><br><span class="line">  <span class="keyword">if</span> (!text) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> encodeRegExp = encodeRegExps[mode];</span><br><span class="line">  <span class="keyword">var</span> references = allNamedReferences[level].<span class="property">characters</span>;</span><br><span class="line">  <span class="keyword">var</span> isHex = numeric === <span class="string">&quot;hexadecimal&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">replaceUsingRegExp</span>(text, encodeRegExp, <span class="keyword">function</span> (<span class="params">input</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = references[input];</span><br><span class="line">    <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">      <span class="keyword">var</span> code = input.<span class="property">length</span> &gt; <span class="number">1</span> ? surrogate_pairs_1.<span class="title function_">getCodePoint</span>(input, <span class="number">0</span>) : input.<span class="title function_">charCodeAt</span>(<span class="number">0</span>);</span><br><span class="line">      result = (isHex ? <span class="string">&quot;&amp;#x&quot;</span> + code.<span class="title function_">toString</span>(<span class="number">16</span>) : <span class="string">&quot;&amp;#&quot;</span> + code) + <span class="string">&quot;;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">encode</span> = encode;</span><br><span class="line"><span class="keyword">var</span> defaultDecodeOptions = &#123;</span><br><span class="line">  <span class="attr">scope</span>: <span class="string">&quot;body&quot;</span>,</span><br><span class="line">  <span class="attr">level</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> strict = <span class="regexp">/&amp;(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g</span>;</span><br><span class="line"><span class="keyword">var</span> attribute = <span class="regexp">/&amp;(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g</span>;</span><br><span class="line"><span class="keyword">var</span> baseDecodeRegExps = &#123;</span><br><span class="line">  <span class="attr">xml</span>: &#123;</span><br><span class="line">    <span class="attr">strict</span>: strict,</span><br><span class="line">    <span class="attr">attribute</span>: attribute,</span><br><span class="line">    <span class="attr">body</span>: named_references_1.<span class="property">bodyRegExps</span>.<span class="property">xml</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">html4</span>: &#123;</span><br><span class="line">    <span class="attr">strict</span>: strict,</span><br><span class="line">    <span class="attr">attribute</span>: attribute,</span><br><span class="line">    <span class="attr">body</span>: named_references_1.<span class="property">bodyRegExps</span>.<span class="property">html4</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">html5</span>: &#123;</span><br><span class="line">    <span class="attr">strict</span>: strict,</span><br><span class="line">    <span class="attr">attribute</span>: attribute,</span><br><span class="line">    <span class="attr">body</span>: named_references_1.<span class="property">bodyRegExps</span>.<span class="property">html5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> decodeRegExps = <span class="title function_">__assign</span>(<span class="title function_">__assign</span>(&#123;&#125;, baseDecodeRegExps), &#123;</span><br><span class="line">  <span class="attr">all</span>: baseDecodeRegExps.<span class="property">html5</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> fromCharCode = <span class="title class_">String</span>.<span class="property">fromCharCode</span>;</span><br><span class="line"><span class="keyword">var</span> outOfBoundsChar = <span class="title function_">fromCharCode</span>(<span class="number">65533</span>);</span><br><span class="line"><span class="keyword">var</span> defaultDecodeEntityOptions = &#123;</span><br><span class="line">  <span class="attr">level</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDecodedEntity</span>(<span class="params">entity, references, isAttribute, isStrict</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> decodeResult = entity;</span><br><span class="line">  <span class="keyword">var</span> decodeEntityLastChar = entity[entity.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> (isAttribute &amp;&amp; decodeEntityLastChar === <span class="string">&quot;=&quot;</span>) &#123;</span><br><span class="line">    decodeResult = entity;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isStrict &amp;&amp; decodeEntityLastChar !== <span class="string">&quot;;&quot;</span>) &#123;</span><br><span class="line">    decodeResult = entity;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> decodeResultByReference = references[entity];</span><br><span class="line">    <span class="keyword">if</span> (decodeResultByReference) &#123;</span><br><span class="line">      decodeResult = decodeResultByReference;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (entity[<span class="number">0</span>] === <span class="string">&quot;&amp;&quot;</span> &amp;&amp; entity[<span class="number">1</span>] === <span class="string">&quot;#&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> decodeSecondChar = entity[<span class="number">2</span>];</span><br><span class="line">      <span class="keyword">var</span> decodeCode = decodeSecondChar == <span class="string">&quot;x&quot;</span> || decodeSecondChar == <span class="string">&quot;X&quot;</span> ? <span class="built_in">parseInt</span>(entity.<span class="title function_">substr</span>(<span class="number">3</span>), <span class="number">16</span>) : <span class="built_in">parseInt</span>(entity.<span class="title function_">substr</span>(<span class="number">2</span>));</span><br><span class="line">      decodeResult = decodeCode &gt;= <span class="number">1114111</span> ? outOfBoundsChar : decodeCode &gt; <span class="number">65535</span> ? surrogate_pairs_1.<span class="title function_">fromCodePoint</span>(decodeCode) : <span class="title function_">fromCharCode</span>(numeric_unicode_map_1.<span class="property">numericUnicodeMap</span>[decodeCode] || decodeCode);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> decodeResult;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">decodeEntity</span>(<span class="params">entity, _a</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _b = (_a === <span class="keyword">void</span> <span class="number">0</span> ? defaultDecodeEntityOptions : _a).<span class="property">level</span>,</span><br><span class="line">    level = _b === <span class="keyword">void</span> <span class="number">0</span> ? <span class="string">&quot;all&quot;</span> : _b;</span><br><span class="line">  <span class="keyword">if</span> (!entity) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getDecodedEntity</span>(entity, allNamedReferences[level].<span class="property">entities</span>, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">decodeEntity</span> = decodeEntity;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">decode</span>(<span class="params">text, _a</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _b = _a === <span class="keyword">void</span> <span class="number">0</span> ? defaultDecodeOptions : _a,</span><br><span class="line">    _c = _b.<span class="property">level</span>,</span><br><span class="line">    level = _c === <span class="keyword">void</span> <span class="number">0</span> ? <span class="string">&quot;all&quot;</span> : _c,</span><br><span class="line">    _d = _b.<span class="property">scope</span>,</span><br><span class="line">    scope = _d === <span class="keyword">void</span> <span class="number">0</span> ? level === <span class="string">&quot;xml&quot;</span> ? <span class="string">&quot;strict&quot;</span> : <span class="string">&quot;body&quot;</span> : _d;</span><br><span class="line">  <span class="keyword">if</span> (!text) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> decodeRegExp = decodeRegExps[level][scope];</span><br><span class="line">  <span class="keyword">var</span> references = allNamedReferences[level].<span class="property">entities</span>;</span><br><span class="line">  <span class="keyword">var</span> isAttribute = scope === <span class="string">&quot;attribute&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> isStrict = scope === <span class="string">&quot;strict&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">replaceUsingRegExp</span>(text, decodeRegExp, <span class="keyword">function</span> (<span class="params">entity</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getDecodedEntity</span>(entity, references, isAttribute, isStrict);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">decode</span> = decode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">1873</span>:</span><br><span class="line"><span class="comment">/*!************************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/html-entities/lib/named-references.js ***!</span></span><br><span class="line"><span class="comment">  \************************************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, <span class="built_in">exports</span></span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, (&#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">bodyRegExps</span> = &#123;</span><br><span class="line">  <span class="attr">xml</span>: <span class="regexp">/&amp;(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g</span>,</span><br><span class="line">  <span class="attr">html4</span>: <span class="regexp">/&amp;notin;|&amp;(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g</span>,</span><br><span class="line">  <span class="attr">html5</span>: <span class="regexp">/&amp;centerdot;|&amp;copysr;|&amp;divideontimes;|&amp;gtcc;|&amp;gtcir;|&amp;gtdot;|&amp;gtlPar;|&amp;gtquest;|&amp;gtrapprox;|&amp;gtrarr;|&amp;gtrdot;|&amp;gtreqless;|&amp;gtreqqless;|&amp;gtrless;|&amp;gtrsim;|&amp;ltcc;|&amp;ltcir;|&amp;ltdot;|&amp;lthree;|&amp;ltimes;|&amp;ltlarr;|&amp;ltquest;|&amp;ltrPar;|&amp;ltri;|&amp;ltrie;|&amp;ltrif;|&amp;notin;|&amp;notinE;|&amp;notindot;|&amp;notinva;|&amp;notinvb;|&amp;notinvc;|&amp;notni;|&amp;notniva;|&amp;notnivb;|&amp;notnivc;|&amp;parallel;|&amp;timesb;|&amp;timesbar;|&amp;timesd;|&amp;(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">namedReferences</span> = &#123;</span><br><span class="line">  <span class="attr">xml</span>: &#123;</span><br><span class="line">    <span class="attr">entities</span>: &#123;</span><br><span class="line">      <span class="string">&quot;&amp;lt;&quot;</span>: <span class="string">&quot;&lt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gt;&quot;</span>: <span class="string">&quot;&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;quot;&quot;</span>: <span class="string">&#x27;&quot;&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;apos;&quot;</span>: <span class="string">&quot;&#x27;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;amp;&quot;</span>: <span class="string">&quot;&amp;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">characters</span>: &#123;</span><br><span class="line">      <span class="string">&quot;&lt;&quot;</span>: <span class="string">&quot;&amp;lt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&gt;&quot;</span>: <span class="string">&quot;&amp;gt;&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;&quot;&#x27;</span>: <span class="string">&quot;&amp;quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&#x27;&quot;</span>: <span class="string">&quot;&amp;apos;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;&quot;</span>: <span class="string">&quot;&amp;amp;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">html4</span>: &#123;</span><br><span class="line">    <span class="attr">entities</span>: &#123;</span><br><span class="line">      <span class="string">&quot;&amp;apos;&quot;</span>: <span class="string">&quot;&#x27;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nbsp&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nbsp;&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iexcl&quot;</span>: <span class="string">&quot;¡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iexcl;&quot;</span>: <span class="string">&quot;¡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cent&quot;</span>: <span class="string">&quot;¢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cent;&quot;</span>: <span class="string">&quot;¢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;pound&quot;</span>: <span class="string">&quot;£&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;pound;&quot;</span>: <span class="string">&quot;£&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;curren&quot;</span>: <span class="string">&quot;¤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;curren;&quot;</span>: <span class="string">&quot;¤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;yen&quot;</span>: <span class="string">&quot;¥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;yen;&quot;</span>: <span class="string">&quot;¥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;brvbar&quot;</span>: <span class="string">&quot;¦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;brvbar;&quot;</span>: <span class="string">&quot;¦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sect&quot;</span>: <span class="string">&quot;§&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sect;&quot;</span>: <span class="string">&quot;§&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uml&quot;</span>: <span class="string">&quot;¨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uml;&quot;</span>: <span class="string">&quot;¨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;copy&quot;</span>: <span class="string">&quot;©&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;copy;&quot;</span>: <span class="string">&quot;©&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ordf&quot;</span>: <span class="string">&quot;ª&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ordf;&quot;</span>: <span class="string">&quot;ª&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;laquo&quot;</span>: <span class="string">&quot;«&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;laquo;&quot;</span>: <span class="string">&quot;«&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;not&quot;</span>: <span class="string">&quot;¬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;not;&quot;</span>: <span class="string">&quot;¬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;shy&quot;</span>: <span class="string">&quot;­&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;shy;&quot;</span>: <span class="string">&quot;­&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;reg&quot;</span>: <span class="string">&quot;®&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;reg;&quot;</span>: <span class="string">&quot;®&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;macr&quot;</span>: <span class="string">&quot;¯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;macr;&quot;</span>: <span class="string">&quot;¯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;deg&quot;</span>: <span class="string">&quot;°&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;deg;&quot;</span>: <span class="string">&quot;°&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;plusmn&quot;</span>: <span class="string">&quot;±&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;plusmn;&quot;</span>: <span class="string">&quot;±&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sup2&quot;</span>: <span class="string">&quot;²&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sup2;&quot;</span>: <span class="string">&quot;²&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sup3&quot;</span>: <span class="string">&quot;³&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sup3;&quot;</span>: <span class="string">&quot;³&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;acute&quot;</span>: <span class="string">&quot;´&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;acute;&quot;</span>: <span class="string">&quot;´&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;micro&quot;</span>: <span class="string">&quot;µ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;micro;&quot;</span>: <span class="string">&quot;µ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;para&quot;</span>: <span class="string">&quot;¶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;para;&quot;</span>: <span class="string">&quot;¶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;middot&quot;</span>: <span class="string">&quot;·&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;middot;&quot;</span>: <span class="string">&quot;·&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cedil&quot;</span>: <span class="string">&quot;¸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cedil;&quot;</span>: <span class="string">&quot;¸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sup1&quot;</span>: <span class="string">&quot;¹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sup1;&quot;</span>: <span class="string">&quot;¹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ordm&quot;</span>: <span class="string">&quot;º&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ordm;&quot;</span>: <span class="string">&quot;º&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;raquo&quot;</span>: <span class="string">&quot;»&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;raquo;&quot;</span>: <span class="string">&quot;»&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac14&quot;</span>: <span class="string">&quot;¼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac14;&quot;</span>: <span class="string">&quot;¼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac12&quot;</span>: <span class="string">&quot;½&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac12;&quot;</span>: <span class="string">&quot;½&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac34&quot;</span>: <span class="string">&quot;¾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac34;&quot;</span>: <span class="string">&quot;¾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iquest&quot;</span>: <span class="string">&quot;¿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iquest;&quot;</span>: <span class="string">&quot;¿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Agrave&quot;</span>: <span class="string">&quot;À&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Agrave;&quot;</span>: <span class="string">&quot;À&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Aacute&quot;</span>: <span class="string">&quot;Á&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Aacute;&quot;</span>: <span class="string">&quot;Á&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Acirc&quot;</span>: <span class="string">&quot;Â&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Acirc;&quot;</span>: <span class="string">&quot;Â&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Atilde&quot;</span>: <span class="string">&quot;Ã&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Atilde;&quot;</span>: <span class="string">&quot;Ã&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Auml&quot;</span>: <span class="string">&quot;Ä&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Auml;&quot;</span>: <span class="string">&quot;Ä&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Aring&quot;</span>: <span class="string">&quot;Å&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Aring;&quot;</span>: <span class="string">&quot;Å&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;AElig&quot;</span>: <span class="string">&quot;Æ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;AElig;&quot;</span>: <span class="string">&quot;Æ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ccedil&quot;</span>: <span class="string">&quot;Ç&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ccedil;&quot;</span>: <span class="string">&quot;Ç&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Egrave&quot;</span>: <span class="string">&quot;È&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Egrave;&quot;</span>: <span class="string">&quot;È&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Eacute&quot;</span>: <span class="string">&quot;É&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Eacute;&quot;</span>: <span class="string">&quot;É&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ecirc&quot;</span>: <span class="string">&quot;Ê&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ecirc;&quot;</span>: <span class="string">&quot;Ê&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Euml&quot;</span>: <span class="string">&quot;Ë&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Euml;&quot;</span>: <span class="string">&quot;Ë&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Igrave&quot;</span>: <span class="string">&quot;Ì&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Igrave;&quot;</span>: <span class="string">&quot;Ì&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Iacute&quot;</span>: <span class="string">&quot;Í&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Iacute;&quot;</span>: <span class="string">&quot;Í&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Icirc&quot;</span>: <span class="string">&quot;Î&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Icirc;&quot;</span>: <span class="string">&quot;Î&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Iuml&quot;</span>: <span class="string">&quot;Ï&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Iuml;&quot;</span>: <span class="string">&quot;Ï&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ETH&quot;</span>: <span class="string">&quot;Ð&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ETH;&quot;</span>: <span class="string">&quot;Ð&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ntilde&quot;</span>: <span class="string">&quot;Ñ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ntilde;&quot;</span>: <span class="string">&quot;Ñ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ograve&quot;</span>: <span class="string">&quot;Ò&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ograve;&quot;</span>: <span class="string">&quot;Ò&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Oacute&quot;</span>: <span class="string">&quot;Ó&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Oacute;&quot;</span>: <span class="string">&quot;Ó&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ocirc&quot;</span>: <span class="string">&quot;Ô&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ocirc;&quot;</span>: <span class="string">&quot;Ô&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Otilde&quot;</span>: <span class="string">&quot;Õ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Otilde;&quot;</span>: <span class="string">&quot;Õ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ouml&quot;</span>: <span class="string">&quot;Ö&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ouml;&quot;</span>: <span class="string">&quot;Ö&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;times&quot;</span>: <span class="string">&quot;×&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;times;&quot;</span>: <span class="string">&quot;×&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Oslash&quot;</span>: <span class="string">&quot;Ø&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Oslash;&quot;</span>: <span class="string">&quot;Ø&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ugrave&quot;</span>: <span class="string">&quot;Ù&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ugrave;&quot;</span>: <span class="string">&quot;Ù&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Uacute&quot;</span>: <span class="string">&quot;Ú&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Uacute;&quot;</span>: <span class="string">&quot;Ú&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ucirc&quot;</span>: <span class="string">&quot;Û&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ucirc;&quot;</span>: <span class="string">&quot;Û&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Uuml&quot;</span>: <span class="string">&quot;Ü&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Uuml;&quot;</span>: <span class="string">&quot;Ü&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Yacute&quot;</span>: <span class="string">&quot;Ý&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Yacute;&quot;</span>: <span class="string">&quot;Ý&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;THORN&quot;</span>: <span class="string">&quot;Þ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;THORN;&quot;</span>: <span class="string">&quot;Þ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;szlig&quot;</span>: <span class="string">&quot;ß&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;szlig;&quot;</span>: <span class="string">&quot;ß&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;agrave&quot;</span>: <span class="string">&quot;à&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;agrave;&quot;</span>: <span class="string">&quot;à&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;aacute&quot;</span>: <span class="string">&quot;á&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;aacute;&quot;</span>: <span class="string">&quot;á&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;acirc&quot;</span>: <span class="string">&quot;â&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;acirc;&quot;</span>: <span class="string">&quot;â&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;atilde&quot;</span>: <span class="string">&quot;ã&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;atilde;&quot;</span>: <span class="string">&quot;ã&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;auml&quot;</span>: <span class="string">&quot;ä&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;auml;&quot;</span>: <span class="string">&quot;ä&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;aring&quot;</span>: <span class="string">&quot;å&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;aring;&quot;</span>: <span class="string">&quot;å&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;aelig&quot;</span>: <span class="string">&quot;æ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;aelig;&quot;</span>: <span class="string">&quot;æ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ccedil&quot;</span>: <span class="string">&quot;ç&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ccedil;&quot;</span>: <span class="string">&quot;ç&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;egrave&quot;</span>: <span class="string">&quot;è&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;egrave;&quot;</span>: <span class="string">&quot;è&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eacute&quot;</span>: <span class="string">&quot;é&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eacute;&quot;</span>: <span class="string">&quot;é&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ecirc&quot;</span>: <span class="string">&quot;ê&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ecirc;&quot;</span>: <span class="string">&quot;ê&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;euml&quot;</span>: <span class="string">&quot;ë&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;euml;&quot;</span>: <span class="string">&quot;ë&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;igrave&quot;</span>: <span class="string">&quot;ì&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;igrave;&quot;</span>: <span class="string">&quot;ì&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iacute&quot;</span>: <span class="string">&quot;í&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iacute;&quot;</span>: <span class="string">&quot;í&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;icirc&quot;</span>: <span class="string">&quot;î&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;icirc;&quot;</span>: <span class="string">&quot;î&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iuml&quot;</span>: <span class="string">&quot;ï&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iuml;&quot;</span>: <span class="string">&quot;ï&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eth&quot;</span>: <span class="string">&quot;ð&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eth;&quot;</span>: <span class="string">&quot;ð&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ntilde&quot;</span>: <span class="string">&quot;ñ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ntilde;&quot;</span>: <span class="string">&quot;ñ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ograve&quot;</span>: <span class="string">&quot;ò&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ograve;&quot;</span>: <span class="string">&quot;ò&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oacute&quot;</span>: <span class="string">&quot;ó&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oacute;&quot;</span>: <span class="string">&quot;ó&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ocirc&quot;</span>: <span class="string">&quot;ô&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ocirc;&quot;</span>: <span class="string">&quot;ô&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;otilde&quot;</span>: <span class="string">&quot;õ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;otilde;&quot;</span>: <span class="string">&quot;õ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ouml&quot;</span>: <span class="string">&quot;ö&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ouml;&quot;</span>: <span class="string">&quot;ö&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;divide&quot;</span>: <span class="string">&quot;÷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;divide;&quot;</span>: <span class="string">&quot;÷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oslash&quot;</span>: <span class="string">&quot;ø&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oslash;&quot;</span>: <span class="string">&quot;ø&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ugrave&quot;</span>: <span class="string">&quot;ù&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ugrave;&quot;</span>: <span class="string">&quot;ù&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uacute&quot;</span>: <span class="string">&quot;ú&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uacute;&quot;</span>: <span class="string">&quot;ú&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ucirc&quot;</span>: <span class="string">&quot;û&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ucirc;&quot;</span>: <span class="string">&quot;û&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uuml&quot;</span>: <span class="string">&quot;ü&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uuml;&quot;</span>: <span class="string">&quot;ü&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;yacute&quot;</span>: <span class="string">&quot;ý&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;yacute;&quot;</span>: <span class="string">&quot;ý&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;thorn&quot;</span>: <span class="string">&quot;þ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;thorn;&quot;</span>: <span class="string">&quot;þ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;yuml&quot;</span>: <span class="string">&quot;ÿ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;yuml;&quot;</span>: <span class="string">&quot;ÿ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;quot&quot;</span>: <span class="string">&#x27;&quot;&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;quot;&quot;</span>: <span class="string">&#x27;&quot;&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;amp&quot;</span>: <span class="string">&quot;&amp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;amp;&quot;</span>: <span class="string">&quot;&amp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lt&quot;</span>: <span class="string">&quot;&lt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lt;&quot;</span>: <span class="string">&quot;&lt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gt&quot;</span>: <span class="string">&quot;&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gt;&quot;</span>: <span class="string">&quot;&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;OElig;&quot;</span>: <span class="string">&quot;Œ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oelig;&quot;</span>: <span class="string">&quot;œ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Scaron;&quot;</span>: <span class="string">&quot;Š&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;scaron;&quot;</span>: <span class="string">&quot;š&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Yuml;&quot;</span>: <span class="string">&quot;Ÿ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;circ;&quot;</span>: <span class="string">&quot;ˆ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;tilde;&quot;</span>: <span class="string">&quot;˜&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ensp;&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;emsp;&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;thinsp;&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;zwnj;&quot;</span>: <span class="string">&quot;‌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;zwj;&quot;</span>: <span class="string">&quot;‍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lrm;&quot;</span>: <span class="string">&quot;‎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rlm;&quot;</span>: <span class="string">&quot;‏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ndash;&quot;</span>: <span class="string">&quot;–&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mdash;&quot;</span>: <span class="string">&quot;—&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lsquo;&quot;</span>: <span class="string">&quot;‘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rsquo;&quot;</span>: <span class="string">&quot;’&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sbquo;&quot;</span>: <span class="string">&quot;‚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ldquo;&quot;</span>: <span class="string">&quot;“&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rdquo;&quot;</span>: <span class="string">&quot;”&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bdquo;&quot;</span>: <span class="string">&quot;„&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dagger;&quot;</span>: <span class="string">&quot;†&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Dagger;&quot;</span>: <span class="string">&quot;‡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;permil;&quot;</span>: <span class="string">&quot;‰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lsaquo;&quot;</span>: <span class="string">&quot;‹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rsaquo;&quot;</span>: <span class="string">&quot;›&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;euro;&quot;</span>: <span class="string">&quot;€&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;fnof;&quot;</span>: <span class="string">&quot;ƒ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Alpha;&quot;</span>: <span class="string">&quot;Α&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Beta;&quot;</span>: <span class="string">&quot;Β&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Gamma;&quot;</span>: <span class="string">&quot;Γ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Delta;&quot;</span>: <span class="string">&quot;Δ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Epsilon;&quot;</span>: <span class="string">&quot;Ε&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Zeta;&quot;</span>: <span class="string">&quot;Ζ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Eta;&quot;</span>: <span class="string">&quot;Η&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Theta;&quot;</span>: <span class="string">&quot;Θ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Iota;&quot;</span>: <span class="string">&quot;Ι&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Kappa;&quot;</span>: <span class="string">&quot;Κ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Lambda;&quot;</span>: <span class="string">&quot;Λ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Mu;&quot;</span>: <span class="string">&quot;Μ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Nu;&quot;</span>: <span class="string">&quot;Ν&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Xi;&quot;</span>: <span class="string">&quot;Ξ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Omicron;&quot;</span>: <span class="string">&quot;Ο&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Pi;&quot;</span>: <span class="string">&quot;Π&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Rho;&quot;</span>: <span class="string">&quot;Ρ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Sigma;&quot;</span>: <span class="string">&quot;Σ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Tau;&quot;</span>: <span class="string">&quot;Τ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Upsilon;&quot;</span>: <span class="string">&quot;Υ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Phi;&quot;</span>: <span class="string">&quot;Φ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Chi;&quot;</span>: <span class="string">&quot;Χ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Psi;&quot;</span>: <span class="string">&quot;Ψ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Omega;&quot;</span>: <span class="string">&quot;Ω&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;alpha;&quot;</span>: <span class="string">&quot;α&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;beta;&quot;</span>: <span class="string">&quot;β&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gamma;&quot;</span>: <span class="string">&quot;γ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;delta;&quot;</span>: <span class="string">&quot;δ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;epsilon;&quot;</span>: <span class="string">&quot;ε&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;zeta;&quot;</span>: <span class="string">&quot;ζ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eta;&quot;</span>: <span class="string">&quot;η&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;theta;&quot;</span>: <span class="string">&quot;θ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iota;&quot;</span>: <span class="string">&quot;ι&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;kappa;&quot;</span>: <span class="string">&quot;κ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lambda;&quot;</span>: <span class="string">&quot;λ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mu;&quot;</span>: <span class="string">&quot;μ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nu;&quot;</span>: <span class="string">&quot;ν&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xi;&quot;</span>: <span class="string">&quot;ξ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;omicron;&quot;</span>: <span class="string">&quot;ο&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;pi;&quot;</span>: <span class="string">&quot;π&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rho;&quot;</span>: <span class="string">&quot;ρ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sigmaf;&quot;</span>: <span class="string">&quot;ς&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sigma;&quot;</span>: <span class="string">&quot;σ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;tau;&quot;</span>: <span class="string">&quot;τ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;upsilon;&quot;</span>: <span class="string">&quot;υ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;phi;&quot;</span>: <span class="string">&quot;φ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;chi;&quot;</span>: <span class="string">&quot;χ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;psi;&quot;</span>: <span class="string">&quot;ψ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;omega;&quot;</span>: <span class="string">&quot;ω&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;thetasym;&quot;</span>: <span class="string">&quot;ϑ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;upsih;&quot;</span>: <span class="string">&quot;ϒ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;piv;&quot;</span>: <span class="string">&quot;ϖ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bull;&quot;</span>: <span class="string">&quot;•&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hellip;&quot;</span>: <span class="string">&quot;…&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;prime;&quot;</span>: <span class="string">&quot;′&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Prime;&quot;</span>: <span class="string">&quot;″&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oline;&quot;</span>: <span class="string">&quot;‾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frasl;&quot;</span>: <span class="string">&quot;⁄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;weierp;&quot;</span>: <span class="string">&quot;℘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;image;&quot;</span>: <span class="string">&quot;ℑ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;real;&quot;</span>: <span class="string">&quot;ℜ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;trade;&quot;</span>: <span class="string">&quot;™&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;alefsym;&quot;</span>: <span class="string">&quot;ℵ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;larr;&quot;</span>: <span class="string">&quot;←&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uarr;&quot;</span>: <span class="string">&quot;↑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rarr;&quot;</span>: <span class="string">&quot;→&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;darr;&quot;</span>: <span class="string">&quot;↓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;harr;&quot;</span>: <span class="string">&quot;↔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;crarr;&quot;</span>: <span class="string">&quot;↵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lArr;&quot;</span>: <span class="string">&quot;⇐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uArr;&quot;</span>: <span class="string">&quot;⇑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rArr;&quot;</span>: <span class="string">&quot;⇒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dArr;&quot;</span>: <span class="string">&quot;⇓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hArr;&quot;</span>: <span class="string">&quot;⇔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;forall;&quot;</span>: <span class="string">&quot;∀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;part;&quot;</span>: <span class="string">&quot;∂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;exist;&quot;</span>: <span class="string">&quot;∃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;empty;&quot;</span>: <span class="string">&quot;∅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nabla;&quot;</span>: <span class="string">&quot;∇&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;isin;&quot;</span>: <span class="string">&quot;∈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;notin;&quot;</span>: <span class="string">&quot;∉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ni;&quot;</span>: <span class="string">&quot;∋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;prod;&quot;</span>: <span class="string">&quot;∏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sum;&quot;</span>: <span class="string">&quot;∑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;minus;&quot;</span>: <span class="string">&quot;−&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lowast;&quot;</span>: <span class="string">&quot;∗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;radic;&quot;</span>: <span class="string">&quot;√&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;prop;&quot;</span>: <span class="string">&quot;∝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;infin;&quot;</span>: <span class="string">&quot;∞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ang;&quot;</span>: <span class="string">&quot;∠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;and;&quot;</span>: <span class="string">&quot;∧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;or;&quot;</span>: <span class="string">&quot;∨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cap;&quot;</span>: <span class="string">&quot;∩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cup;&quot;</span>: <span class="string">&quot;∪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;int;&quot;</span>: <span class="string">&quot;∫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;there4;&quot;</span>: <span class="string">&quot;∴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sim;&quot;</span>: <span class="string">&quot;∼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cong;&quot;</span>: <span class="string">&quot;≅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;asymp;&quot;</span>: <span class="string">&quot;≈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ne;&quot;</span>: <span class="string">&quot;≠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;equiv;&quot;</span>: <span class="string">&quot;≡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;le;&quot;</span>: <span class="string">&quot;≤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ge;&quot;</span>: <span class="string">&quot;≥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sub;&quot;</span>: <span class="string">&quot;⊂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sup;&quot;</span>: <span class="string">&quot;⊃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsub;&quot;</span>: <span class="string">&quot;⊄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sube;&quot;</span>: <span class="string">&quot;⊆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;supe;&quot;</span>: <span class="string">&quot;⊇&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oplus;&quot;</span>: <span class="string">&quot;⊕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;otimes;&quot;</span>: <span class="string">&quot;⊗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;perp;&quot;</span>: <span class="string">&quot;⊥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sdot;&quot;</span>: <span class="string">&quot;⋅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lceil;&quot;</span>: <span class="string">&quot;⌈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rceil;&quot;</span>: <span class="string">&quot;⌉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lfloor;&quot;</span>: <span class="string">&quot;⌊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rfloor;&quot;</span>: <span class="string">&quot;⌋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lang;&quot;</span>: <span class="string">&quot;〈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rang;&quot;</span>: <span class="string">&quot;〉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;loz;&quot;</span>: <span class="string">&quot;◊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;spades;&quot;</span>: <span class="string">&quot;♠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;clubs;&quot;</span>: <span class="string">&quot;♣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hearts;&quot;</span>: <span class="string">&quot;♥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;diams;&quot;</span>: <span class="string">&quot;♦&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">characters</span>: &#123;</span><br><span class="line">      <span class="string">&quot;&#x27;&quot;</span>: <span class="string">&quot;&amp;apos;&quot;</span>,</span><br><span class="line">      <span class="string">&quot; &quot;</span>: <span class="string">&quot;&amp;nbsp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¡&quot;</span>: <span class="string">&quot;&amp;iexcl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¢&quot;</span>: <span class="string">&quot;&amp;cent;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;£&quot;</span>: <span class="string">&quot;&amp;pound;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¤&quot;</span>: <span class="string">&quot;&amp;curren;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¥&quot;</span>: <span class="string">&quot;&amp;yen;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¦&quot;</span>: <span class="string">&quot;&amp;brvbar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;§&quot;</span>: <span class="string">&quot;&amp;sect;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¨&quot;</span>: <span class="string">&quot;&amp;uml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;©&quot;</span>: <span class="string">&quot;&amp;copy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ª&quot;</span>: <span class="string">&quot;&amp;ordf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;«&quot;</span>: <span class="string">&quot;&amp;laquo;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¬&quot;</span>: <span class="string">&quot;&amp;not;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;­&quot;</span>: <span class="string">&quot;&amp;shy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;®&quot;</span>: <span class="string">&quot;&amp;reg;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¯&quot;</span>: <span class="string">&quot;&amp;macr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;°&quot;</span>: <span class="string">&quot;&amp;deg;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;±&quot;</span>: <span class="string">&quot;&amp;plusmn;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;²&quot;</span>: <span class="string">&quot;&amp;sup2;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;³&quot;</span>: <span class="string">&quot;&amp;sup3;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;´&quot;</span>: <span class="string">&quot;&amp;acute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;µ&quot;</span>: <span class="string">&quot;&amp;micro;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¶&quot;</span>: <span class="string">&quot;&amp;para;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;·&quot;</span>: <span class="string">&quot;&amp;middot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¸&quot;</span>: <span class="string">&quot;&amp;cedil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¹&quot;</span>: <span class="string">&quot;&amp;sup1;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;º&quot;</span>: <span class="string">&quot;&amp;ordm;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;»&quot;</span>: <span class="string">&quot;&amp;raquo;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¼&quot;</span>: <span class="string">&quot;&amp;frac14;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;½&quot;</span>: <span class="string">&quot;&amp;frac12;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¾&quot;</span>: <span class="string">&quot;&amp;frac34;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¿&quot;</span>: <span class="string">&quot;&amp;iquest;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;À&quot;</span>: <span class="string">&quot;&amp;Agrave;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Á&quot;</span>: <span class="string">&quot;&amp;Aacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Â&quot;</span>: <span class="string">&quot;&amp;Acirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ã&quot;</span>: <span class="string">&quot;&amp;Atilde;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ä&quot;</span>: <span class="string">&quot;&amp;Auml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Å&quot;</span>: <span class="string">&quot;&amp;Aring;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Æ&quot;</span>: <span class="string">&quot;&amp;AElig;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ç&quot;</span>: <span class="string">&quot;&amp;Ccedil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;È&quot;</span>: <span class="string">&quot;&amp;Egrave;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;É&quot;</span>: <span class="string">&quot;&amp;Eacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ê&quot;</span>: <span class="string">&quot;&amp;Ecirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ë&quot;</span>: <span class="string">&quot;&amp;Euml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ì&quot;</span>: <span class="string">&quot;&amp;Igrave;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Í&quot;</span>: <span class="string">&quot;&amp;Iacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Î&quot;</span>: <span class="string">&quot;&amp;Icirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ï&quot;</span>: <span class="string">&quot;&amp;Iuml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ð&quot;</span>: <span class="string">&quot;&amp;ETH;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ñ&quot;</span>: <span class="string">&quot;&amp;Ntilde;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ò&quot;</span>: <span class="string">&quot;&amp;Ograve;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ó&quot;</span>: <span class="string">&quot;&amp;Oacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ô&quot;</span>: <span class="string">&quot;&amp;Ocirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Õ&quot;</span>: <span class="string">&quot;&amp;Otilde;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ö&quot;</span>: <span class="string">&quot;&amp;Ouml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;×&quot;</span>: <span class="string">&quot;&amp;times;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ø&quot;</span>: <span class="string">&quot;&amp;Oslash;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ù&quot;</span>: <span class="string">&quot;&amp;Ugrave;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ú&quot;</span>: <span class="string">&quot;&amp;Uacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Û&quot;</span>: <span class="string">&quot;&amp;Ucirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ü&quot;</span>: <span class="string">&quot;&amp;Uuml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ý&quot;</span>: <span class="string">&quot;&amp;Yacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Þ&quot;</span>: <span class="string">&quot;&amp;THORN;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ß&quot;</span>: <span class="string">&quot;&amp;szlig;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;à&quot;</span>: <span class="string">&quot;&amp;agrave;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;á&quot;</span>: <span class="string">&quot;&amp;aacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;â&quot;</span>: <span class="string">&quot;&amp;acirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ã&quot;</span>: <span class="string">&quot;&amp;atilde;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ä&quot;</span>: <span class="string">&quot;&amp;auml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;å&quot;</span>: <span class="string">&quot;&amp;aring;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;æ&quot;</span>: <span class="string">&quot;&amp;aelig;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ç&quot;</span>: <span class="string">&quot;&amp;ccedil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;è&quot;</span>: <span class="string">&quot;&amp;egrave;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;é&quot;</span>: <span class="string">&quot;&amp;eacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ê&quot;</span>: <span class="string">&quot;&amp;ecirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ë&quot;</span>: <span class="string">&quot;&amp;euml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ì&quot;</span>: <span class="string">&quot;&amp;igrave;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;í&quot;</span>: <span class="string">&quot;&amp;iacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;î&quot;</span>: <span class="string">&quot;&amp;icirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ï&quot;</span>: <span class="string">&quot;&amp;iuml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ð&quot;</span>: <span class="string">&quot;&amp;eth;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ñ&quot;</span>: <span class="string">&quot;&amp;ntilde;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ò&quot;</span>: <span class="string">&quot;&amp;ograve;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ó&quot;</span>: <span class="string">&quot;&amp;oacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ô&quot;</span>: <span class="string">&quot;&amp;ocirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;õ&quot;</span>: <span class="string">&quot;&amp;otilde;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ö&quot;</span>: <span class="string">&quot;&amp;ouml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;÷&quot;</span>: <span class="string">&quot;&amp;divide;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ø&quot;</span>: <span class="string">&quot;&amp;oslash;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ù&quot;</span>: <span class="string">&quot;&amp;ugrave;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ú&quot;</span>: <span class="string">&quot;&amp;uacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;û&quot;</span>: <span class="string">&quot;&amp;ucirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ü&quot;</span>: <span class="string">&quot;&amp;uuml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ý&quot;</span>: <span class="string">&quot;&amp;yacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;þ&quot;</span>: <span class="string">&quot;&amp;thorn;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ÿ&quot;</span>: <span class="string">&quot;&amp;yuml;&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;&quot;&#x27;</span>: <span class="string">&quot;&amp;quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;&quot;</span>: <span class="string">&quot;&amp;amp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;&quot;</span>: <span class="string">&quot;&amp;lt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&gt;&quot;</span>: <span class="string">&quot;&amp;gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Œ&quot;</span>: <span class="string">&quot;&amp;OElig;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;œ&quot;</span>: <span class="string">&quot;&amp;oelig;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Š&quot;</span>: <span class="string">&quot;&amp;Scaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;š&quot;</span>: <span class="string">&quot;&amp;scaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ÿ&quot;</span>: <span class="string">&quot;&amp;Yuml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ˆ&quot;</span>: <span class="string">&quot;&amp;circ;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;˜&quot;</span>: <span class="string">&quot;&amp;tilde;&quot;</span>,</span><br><span class="line">      <span class="string">&quot; &quot;</span>: <span class="string">&quot;&amp;ensp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot; &quot;</span>: <span class="string">&quot;&amp;emsp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot; &quot;</span>: <span class="string">&quot;&amp;thinsp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‌&quot;</span>: <span class="string">&quot;&amp;zwnj;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‍&quot;</span>: <span class="string">&quot;&amp;zwj;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‎&quot;</span>: <span class="string">&quot;&amp;lrm;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‏&quot;</span>: <span class="string">&quot;&amp;rlm;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;–&quot;</span>: <span class="string">&quot;&amp;ndash;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;—&quot;</span>: <span class="string">&quot;&amp;mdash;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‘&quot;</span>: <span class="string">&quot;&amp;lsquo;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;’&quot;</span>: <span class="string">&quot;&amp;rsquo;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‚&quot;</span>: <span class="string">&quot;&amp;sbquo;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;“&quot;</span>: <span class="string">&quot;&amp;ldquo;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;”&quot;</span>: <span class="string">&quot;&amp;rdquo;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;„&quot;</span>: <span class="string">&quot;&amp;bdquo;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;†&quot;</span>: <span class="string">&quot;&amp;dagger;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‡&quot;</span>: <span class="string">&quot;&amp;Dagger;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‰&quot;</span>: <span class="string">&quot;&amp;permil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‹&quot;</span>: <span class="string">&quot;&amp;lsaquo;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;›&quot;</span>: <span class="string">&quot;&amp;rsaquo;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;€&quot;</span>: <span class="string">&quot;&amp;euro;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ƒ&quot;</span>: <span class="string">&quot;&amp;fnof;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Α&quot;</span>: <span class="string">&quot;&amp;Alpha;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Β&quot;</span>: <span class="string">&quot;&amp;Beta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Γ&quot;</span>: <span class="string">&quot;&amp;Gamma;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Δ&quot;</span>: <span class="string">&quot;&amp;Delta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ε&quot;</span>: <span class="string">&quot;&amp;Epsilon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ζ&quot;</span>: <span class="string">&quot;&amp;Zeta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Η&quot;</span>: <span class="string">&quot;&amp;Eta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Θ&quot;</span>: <span class="string">&quot;&amp;Theta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ι&quot;</span>: <span class="string">&quot;&amp;Iota;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Κ&quot;</span>: <span class="string">&quot;&amp;Kappa;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Λ&quot;</span>: <span class="string">&quot;&amp;Lambda;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Μ&quot;</span>: <span class="string">&quot;&amp;Mu;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ν&quot;</span>: <span class="string">&quot;&amp;Nu;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ξ&quot;</span>: <span class="string">&quot;&amp;Xi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ο&quot;</span>: <span class="string">&quot;&amp;Omicron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Π&quot;</span>: <span class="string">&quot;&amp;Pi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ρ&quot;</span>: <span class="string">&quot;&amp;Rho;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Σ&quot;</span>: <span class="string">&quot;&amp;Sigma;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Τ&quot;</span>: <span class="string">&quot;&amp;Tau;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Υ&quot;</span>: <span class="string">&quot;&amp;Upsilon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Φ&quot;</span>: <span class="string">&quot;&amp;Phi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Χ&quot;</span>: <span class="string">&quot;&amp;Chi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ψ&quot;</span>: <span class="string">&quot;&amp;Psi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ω&quot;</span>: <span class="string">&quot;&amp;Omega;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;α&quot;</span>: <span class="string">&quot;&amp;alpha;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;β&quot;</span>: <span class="string">&quot;&amp;beta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;γ&quot;</span>: <span class="string">&quot;&amp;gamma;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;δ&quot;</span>: <span class="string">&quot;&amp;delta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ε&quot;</span>: <span class="string">&quot;&amp;epsilon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ζ&quot;</span>: <span class="string">&quot;&amp;zeta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;η&quot;</span>: <span class="string">&quot;&amp;eta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;θ&quot;</span>: <span class="string">&quot;&amp;theta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ι&quot;</span>: <span class="string">&quot;&amp;iota;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;κ&quot;</span>: <span class="string">&quot;&amp;kappa;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;λ&quot;</span>: <span class="string">&quot;&amp;lambda;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;μ&quot;</span>: <span class="string">&quot;&amp;mu;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ν&quot;</span>: <span class="string">&quot;&amp;nu;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ξ&quot;</span>: <span class="string">&quot;&amp;xi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ο&quot;</span>: <span class="string">&quot;&amp;omicron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;π&quot;</span>: <span class="string">&quot;&amp;pi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ρ&quot;</span>: <span class="string">&quot;&amp;rho;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ς&quot;</span>: <span class="string">&quot;&amp;sigmaf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;σ&quot;</span>: <span class="string">&quot;&amp;sigma;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;τ&quot;</span>: <span class="string">&quot;&amp;tau;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;υ&quot;</span>: <span class="string">&quot;&amp;upsilon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;φ&quot;</span>: <span class="string">&quot;&amp;phi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;χ&quot;</span>: <span class="string">&quot;&amp;chi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ψ&quot;</span>: <span class="string">&quot;&amp;psi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ω&quot;</span>: <span class="string">&quot;&amp;omega;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ϑ&quot;</span>: <span class="string">&quot;&amp;thetasym;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ϒ&quot;</span>: <span class="string">&quot;&amp;upsih;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ϖ&quot;</span>: <span class="string">&quot;&amp;piv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;•&quot;</span>: <span class="string">&quot;&amp;bull;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;…&quot;</span>: <span class="string">&quot;&amp;hellip;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;′&quot;</span>: <span class="string">&quot;&amp;prime;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;″&quot;</span>: <span class="string">&quot;&amp;Prime;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‾&quot;</span>: <span class="string">&quot;&amp;oline;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⁄&quot;</span>: <span class="string">&quot;&amp;frasl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;℘&quot;</span>: <span class="string">&quot;&amp;weierp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℑ&quot;</span>: <span class="string">&quot;&amp;image;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℜ&quot;</span>: <span class="string">&quot;&amp;real;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;™&quot;</span>: <span class="string">&quot;&amp;trade;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℵ&quot;</span>: <span class="string">&quot;&amp;alefsym;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;←&quot;</span>: <span class="string">&quot;&amp;larr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↑&quot;</span>: <span class="string">&quot;&amp;uarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;→&quot;</span>: <span class="string">&quot;&amp;rarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↓&quot;</span>: <span class="string">&quot;&amp;darr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↔&quot;</span>: <span class="string">&quot;&amp;harr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↵&quot;</span>: <span class="string">&quot;&amp;crarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇐&quot;</span>: <span class="string">&quot;&amp;lArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇑&quot;</span>: <span class="string">&quot;&amp;uArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇒&quot;</span>: <span class="string">&quot;&amp;rArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇓&quot;</span>: <span class="string">&quot;&amp;dArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇔&quot;</span>: <span class="string">&quot;&amp;hArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∀&quot;</span>: <span class="string">&quot;&amp;forall;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∂&quot;</span>: <span class="string">&quot;&amp;part;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∃&quot;</span>: <span class="string">&quot;&amp;exist;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∅&quot;</span>: <span class="string">&quot;&amp;empty;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∇&quot;</span>: <span class="string">&quot;&amp;nabla;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∈&quot;</span>: <span class="string">&quot;&amp;isin;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∉&quot;</span>: <span class="string">&quot;&amp;notin;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∋&quot;</span>: <span class="string">&quot;&amp;ni;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∏&quot;</span>: <span class="string">&quot;&amp;prod;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∑&quot;</span>: <span class="string">&quot;&amp;sum;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;−&quot;</span>: <span class="string">&quot;&amp;minus;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∗&quot;</span>: <span class="string">&quot;&amp;lowast;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;√&quot;</span>: <span class="string">&quot;&amp;radic;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∝&quot;</span>: <span class="string">&quot;&amp;prop;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∞&quot;</span>: <span class="string">&quot;&amp;infin;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∠&quot;</span>: <span class="string">&quot;&amp;ang;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∧&quot;</span>: <span class="string">&quot;&amp;and;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∨&quot;</span>: <span class="string">&quot;&amp;or;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∩&quot;</span>: <span class="string">&quot;&amp;cap;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∪&quot;</span>: <span class="string">&quot;&amp;cup;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∫&quot;</span>: <span class="string">&quot;&amp;int;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∴&quot;</span>: <span class="string">&quot;&amp;there4;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∼&quot;</span>: <span class="string">&quot;&amp;sim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≅&quot;</span>: <span class="string">&quot;&amp;cong;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≈&quot;</span>: <span class="string">&quot;&amp;asymp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≠&quot;</span>: <span class="string">&quot;&amp;ne;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≡&quot;</span>: <span class="string">&quot;&amp;equiv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≤&quot;</span>: <span class="string">&quot;&amp;le;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≥&quot;</span>: <span class="string">&quot;&amp;ge;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊂&quot;</span>: <span class="string">&quot;&amp;sub;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊃&quot;</span>: <span class="string">&quot;&amp;sup;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊄&quot;</span>: <span class="string">&quot;&amp;nsub;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊆&quot;</span>: <span class="string">&quot;&amp;sube;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊇&quot;</span>: <span class="string">&quot;&amp;supe;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊕&quot;</span>: <span class="string">&quot;&amp;oplus;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊗&quot;</span>: <span class="string">&quot;&amp;otimes;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊥&quot;</span>: <span class="string">&quot;&amp;perp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋅&quot;</span>: <span class="string">&quot;&amp;sdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌈&quot;</span>: <span class="string">&quot;&amp;lceil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌉&quot;</span>: <span class="string">&quot;&amp;rceil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌊&quot;</span>: <span class="string">&quot;&amp;lfloor;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌋&quot;</span>: <span class="string">&quot;&amp;rfloor;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;〈&quot;</span>: <span class="string">&quot;&amp;lang;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;〉&quot;</span>: <span class="string">&quot;&amp;rang;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;◊&quot;</span>: <span class="string">&quot;&amp;loz;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;♠&quot;</span>: <span class="string">&quot;&amp;spades;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;♣&quot;</span>: <span class="string">&quot;&amp;clubs;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;♥&quot;</span>: <span class="string">&quot;&amp;hearts;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;♦&quot;</span>: <span class="string">&quot;&amp;diams;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">html5</span>: &#123;</span><br><span class="line">    <span class="attr">entities</span>: &#123;</span><br><span class="line">      <span class="string">&quot;&amp;AElig&quot;</span>: <span class="string">&quot;Æ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;AElig;&quot;</span>: <span class="string">&quot;Æ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;AMP&quot;</span>: <span class="string">&quot;&amp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;AMP;&quot;</span>: <span class="string">&quot;&amp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Aacute&quot;</span>: <span class="string">&quot;Á&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Aacute;&quot;</span>: <span class="string">&quot;Á&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Abreve;&quot;</span>: <span class="string">&quot;Ă&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Acirc&quot;</span>: <span class="string">&quot;Â&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Acirc;&quot;</span>: <span class="string">&quot;Â&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Acy;&quot;</span>: <span class="string">&quot;А&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Afr;&quot;</span>: <span class="string">&quot;𝔄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Agrave&quot;</span>: <span class="string">&quot;À&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Agrave;&quot;</span>: <span class="string">&quot;À&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Alpha;&quot;</span>: <span class="string">&quot;Α&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Amacr;&quot;</span>: <span class="string">&quot;Ā&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;And;&quot;</span>: <span class="string">&quot;⩓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Aogon;&quot;</span>: <span class="string">&quot;Ą&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Aopf;&quot;</span>: <span class="string">&quot;𝔸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ApplyFunction;&quot;</span>: <span class="string">&quot;⁡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Aring&quot;</span>: <span class="string">&quot;Å&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Aring;&quot;</span>: <span class="string">&quot;Å&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ascr;&quot;</span>: <span class="string">&quot;𝒜&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Assign;&quot;</span>: <span class="string">&quot;≔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Atilde&quot;</span>: <span class="string">&quot;Ã&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Atilde;&quot;</span>: <span class="string">&quot;Ã&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Auml&quot;</span>: <span class="string">&quot;Ä&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Auml;&quot;</span>: <span class="string">&quot;Ä&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Backslash;&quot;</span>: <span class="string">&quot;∖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Barv;&quot;</span>: <span class="string">&quot;⫧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Barwed;&quot;</span>: <span class="string">&quot;⌆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Bcy;&quot;</span>: <span class="string">&quot;Б&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Because;&quot;</span>: <span class="string">&quot;∵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Bernoullis;&quot;</span>: <span class="string">&quot;ℬ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Beta;&quot;</span>: <span class="string">&quot;Β&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Bfr;&quot;</span>: <span class="string">&quot;𝔅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Bopf;&quot;</span>: <span class="string">&quot;𝔹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Breve;&quot;</span>: <span class="string">&quot;˘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Bscr;&quot;</span>: <span class="string">&quot;ℬ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Bumpeq;&quot;</span>: <span class="string">&quot;≎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;CHcy;&quot;</span>: <span class="string">&quot;Ч&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;COPY&quot;</span>: <span class="string">&quot;©&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;COPY;&quot;</span>: <span class="string">&quot;©&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Cacute;&quot;</span>: <span class="string">&quot;Ć&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Cap;&quot;</span>: <span class="string">&quot;⋒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;CapitalDifferentialD;&quot;</span>: <span class="string">&quot;ⅅ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Cayleys;&quot;</span>: <span class="string">&quot;ℭ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ccaron;&quot;</span>: <span class="string">&quot;Č&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ccedil&quot;</span>: <span class="string">&quot;Ç&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ccedil;&quot;</span>: <span class="string">&quot;Ç&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ccirc;&quot;</span>: <span class="string">&quot;Ĉ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Cconint;&quot;</span>: <span class="string">&quot;∰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Cdot;&quot;</span>: <span class="string">&quot;Ċ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Cedilla;&quot;</span>: <span class="string">&quot;¸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;CenterDot;&quot;</span>: <span class="string">&quot;·&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Cfr;&quot;</span>: <span class="string">&quot;ℭ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Chi;&quot;</span>: <span class="string">&quot;Χ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;CircleDot;&quot;</span>: <span class="string">&quot;⊙&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;CircleMinus;&quot;</span>: <span class="string">&quot;⊖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;CirclePlus;&quot;</span>: <span class="string">&quot;⊕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;CircleTimes;&quot;</span>: <span class="string">&quot;⊗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ClockwiseContourIntegral;&quot;</span>: <span class="string">&quot;∲&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;CloseCurlyDoubleQuote;&quot;</span>: <span class="string">&quot;”&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;CloseCurlyQuote;&quot;</span>: <span class="string">&quot;’&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Colon;&quot;</span>: <span class="string">&quot;∷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Colone;&quot;</span>: <span class="string">&quot;⩴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Congruent;&quot;</span>: <span class="string">&quot;≡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Conint;&quot;</span>: <span class="string">&quot;∯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ContourIntegral;&quot;</span>: <span class="string">&quot;∮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Copf;&quot;</span>: <span class="string">&quot;ℂ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Coproduct;&quot;</span>: <span class="string">&quot;∐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;CounterClockwiseContourIntegral;&quot;</span>: <span class="string">&quot;∳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Cross;&quot;</span>: <span class="string">&quot;⨯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Cscr;&quot;</span>: <span class="string">&quot;𝒞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Cup;&quot;</span>: <span class="string">&quot;⋓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;CupCap;&quot;</span>: <span class="string">&quot;≍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DD;&quot;</span>: <span class="string">&quot;ⅅ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DDotrahd;&quot;</span>: <span class="string">&quot;⤑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DJcy;&quot;</span>: <span class="string">&quot;Ђ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DScy;&quot;</span>: <span class="string">&quot;Ѕ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DZcy;&quot;</span>: <span class="string">&quot;Џ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Dagger;&quot;</span>: <span class="string">&quot;‡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Darr;&quot;</span>: <span class="string">&quot;↡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Dashv;&quot;</span>: <span class="string">&quot;⫤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Dcaron;&quot;</span>: <span class="string">&quot;Ď&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Dcy;&quot;</span>: <span class="string">&quot;Д&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Del;&quot;</span>: <span class="string">&quot;∇&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Delta;&quot;</span>: <span class="string">&quot;Δ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Dfr;&quot;</span>: <span class="string">&quot;𝔇&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DiacriticalAcute;&quot;</span>: <span class="string">&quot;´&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DiacriticalDot;&quot;</span>: <span class="string">&quot;˙&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DiacriticalDoubleAcute;&quot;</span>: <span class="string">&quot;˝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DiacriticalGrave;&quot;</span>: <span class="string">&quot;`&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DiacriticalTilde;&quot;</span>: <span class="string">&quot;˜&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Diamond;&quot;</span>: <span class="string">&quot;⋄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DifferentialD;&quot;</span>: <span class="string">&quot;ⅆ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Dopf;&quot;</span>: <span class="string">&quot;𝔻&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Dot;&quot;</span>: <span class="string">&quot;¨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DotDot;&quot;</span>: <span class="string">&quot;⃜&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DotEqual;&quot;</span>: <span class="string">&quot;≐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DoubleContourIntegral;&quot;</span>: <span class="string">&quot;∯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DoubleDot;&quot;</span>: <span class="string">&quot;¨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DoubleDownArrow;&quot;</span>: <span class="string">&quot;⇓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DoubleLeftArrow;&quot;</span>: <span class="string">&quot;⇐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DoubleLeftRightArrow;&quot;</span>: <span class="string">&quot;⇔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DoubleLeftTee;&quot;</span>: <span class="string">&quot;⫤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DoubleLongLeftArrow;&quot;</span>: <span class="string">&quot;⟸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DoubleLongLeftRightArrow;&quot;</span>: <span class="string">&quot;⟺&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DoubleLongRightArrow;&quot;</span>: <span class="string">&quot;⟹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DoubleRightArrow;&quot;</span>: <span class="string">&quot;⇒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DoubleRightTee;&quot;</span>: <span class="string">&quot;⊨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DoubleUpArrow;&quot;</span>: <span class="string">&quot;⇑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DoubleUpDownArrow;&quot;</span>: <span class="string">&quot;⇕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DoubleVerticalBar;&quot;</span>: <span class="string">&quot;∥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DownArrow;&quot;</span>: <span class="string">&quot;↓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DownArrowBar;&quot;</span>: <span class="string">&quot;⤓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DownArrowUpArrow;&quot;</span>: <span class="string">&quot;⇵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DownBreve;&quot;</span>: <span class="string">&quot;̑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DownLeftRightVector;&quot;</span>: <span class="string">&quot;⥐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DownLeftTeeVector;&quot;</span>: <span class="string">&quot;⥞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DownLeftVector;&quot;</span>: <span class="string">&quot;↽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DownLeftVectorBar;&quot;</span>: <span class="string">&quot;⥖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DownRightTeeVector;&quot;</span>: <span class="string">&quot;⥟&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DownRightVector;&quot;</span>: <span class="string">&quot;⇁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DownRightVectorBar;&quot;</span>: <span class="string">&quot;⥗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DownTee;&quot;</span>: <span class="string">&quot;⊤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;DownTeeArrow;&quot;</span>: <span class="string">&quot;↧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Downarrow;&quot;</span>: <span class="string">&quot;⇓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Dscr;&quot;</span>: <span class="string">&quot;𝒟&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Dstrok;&quot;</span>: <span class="string">&quot;Đ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ENG;&quot;</span>: <span class="string">&quot;Ŋ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ETH&quot;</span>: <span class="string">&quot;Ð&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ETH;&quot;</span>: <span class="string">&quot;Ð&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Eacute&quot;</span>: <span class="string">&quot;É&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Eacute;&quot;</span>: <span class="string">&quot;É&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ecaron;&quot;</span>: <span class="string">&quot;Ě&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ecirc&quot;</span>: <span class="string">&quot;Ê&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ecirc;&quot;</span>: <span class="string">&quot;Ê&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ecy;&quot;</span>: <span class="string">&quot;Э&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Edot;&quot;</span>: <span class="string">&quot;Ė&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Efr;&quot;</span>: <span class="string">&quot;𝔈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Egrave&quot;</span>: <span class="string">&quot;È&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Egrave;&quot;</span>: <span class="string">&quot;È&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Element;&quot;</span>: <span class="string">&quot;∈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Emacr;&quot;</span>: <span class="string">&quot;Ē&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;EmptySmallSquare;&quot;</span>: <span class="string">&quot;◻&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;EmptyVerySmallSquare;&quot;</span>: <span class="string">&quot;▫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Eogon;&quot;</span>: <span class="string">&quot;Ę&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Eopf;&quot;</span>: <span class="string">&quot;𝔼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Epsilon;&quot;</span>: <span class="string">&quot;Ε&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Equal;&quot;</span>: <span class="string">&quot;⩵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;EqualTilde;&quot;</span>: <span class="string">&quot;≂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Equilibrium;&quot;</span>: <span class="string">&quot;⇌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Escr;&quot;</span>: <span class="string">&quot;ℰ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Esim;&quot;</span>: <span class="string">&quot;⩳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Eta;&quot;</span>: <span class="string">&quot;Η&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Euml&quot;</span>: <span class="string">&quot;Ë&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Euml;&quot;</span>: <span class="string">&quot;Ë&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Exists;&quot;</span>: <span class="string">&quot;∃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ExponentialE;&quot;</span>: <span class="string">&quot;ⅇ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Fcy;&quot;</span>: <span class="string">&quot;Ф&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ffr;&quot;</span>: <span class="string">&quot;𝔉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;FilledSmallSquare;&quot;</span>: <span class="string">&quot;◼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;FilledVerySmallSquare;&quot;</span>: <span class="string">&quot;▪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Fopf;&quot;</span>: <span class="string">&quot;𝔽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ForAll;&quot;</span>: <span class="string">&quot;∀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Fouriertrf;&quot;</span>: <span class="string">&quot;ℱ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Fscr;&quot;</span>: <span class="string">&quot;ℱ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;GJcy;&quot;</span>: <span class="string">&quot;Ѓ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;GT&quot;</span>: <span class="string">&quot;&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;GT;&quot;</span>: <span class="string">&quot;&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Gamma;&quot;</span>: <span class="string">&quot;Γ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Gammad;&quot;</span>: <span class="string">&quot;Ϝ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Gbreve;&quot;</span>: <span class="string">&quot;Ğ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Gcedil;&quot;</span>: <span class="string">&quot;Ģ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Gcirc;&quot;</span>: <span class="string">&quot;Ĝ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Gcy;&quot;</span>: <span class="string">&quot;Г&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Gdot;&quot;</span>: <span class="string">&quot;Ġ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Gfr;&quot;</span>: <span class="string">&quot;𝔊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Gg;&quot;</span>: <span class="string">&quot;⋙&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Gopf;&quot;</span>: <span class="string">&quot;𝔾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;GreaterEqual;&quot;</span>: <span class="string">&quot;≥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;GreaterEqualLess;&quot;</span>: <span class="string">&quot;⋛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;GreaterFullEqual;&quot;</span>: <span class="string">&quot;≧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;GreaterGreater;&quot;</span>: <span class="string">&quot;⪢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;GreaterLess;&quot;</span>: <span class="string">&quot;≷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;GreaterSlantEqual;&quot;</span>: <span class="string">&quot;⩾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;GreaterTilde;&quot;</span>: <span class="string">&quot;≳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Gscr;&quot;</span>: <span class="string">&quot;𝒢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Gt;&quot;</span>: <span class="string">&quot;≫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;HARDcy;&quot;</span>: <span class="string">&quot;Ъ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Hacek;&quot;</span>: <span class="string">&quot;ˇ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Hat;&quot;</span>: <span class="string">&quot;^&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Hcirc;&quot;</span>: <span class="string">&quot;Ĥ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Hfr;&quot;</span>: <span class="string">&quot;ℌ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;HilbertSpace;&quot;</span>: <span class="string">&quot;ℋ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Hopf;&quot;</span>: <span class="string">&quot;ℍ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;HorizontalLine;&quot;</span>: <span class="string">&quot;─&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Hscr;&quot;</span>: <span class="string">&quot;ℋ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Hstrok;&quot;</span>: <span class="string">&quot;Ħ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;HumpDownHump;&quot;</span>: <span class="string">&quot;≎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;HumpEqual;&quot;</span>: <span class="string">&quot;≏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;IEcy;&quot;</span>: <span class="string">&quot;Е&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;IJlig;&quot;</span>: <span class="string">&quot;Ĳ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;IOcy;&quot;</span>: <span class="string">&quot;Ё&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Iacute&quot;</span>: <span class="string">&quot;Í&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Iacute;&quot;</span>: <span class="string">&quot;Í&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Icirc&quot;</span>: <span class="string">&quot;Î&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Icirc;&quot;</span>: <span class="string">&quot;Î&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Icy;&quot;</span>: <span class="string">&quot;И&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Idot;&quot;</span>: <span class="string">&quot;İ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ifr;&quot;</span>: <span class="string">&quot;ℑ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Igrave&quot;</span>: <span class="string">&quot;Ì&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Igrave;&quot;</span>: <span class="string">&quot;Ì&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Im;&quot;</span>: <span class="string">&quot;ℑ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Imacr;&quot;</span>: <span class="string">&quot;Ī&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ImaginaryI;&quot;</span>: <span class="string">&quot;ⅈ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Implies;&quot;</span>: <span class="string">&quot;⇒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Int;&quot;</span>: <span class="string">&quot;∬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Integral;&quot;</span>: <span class="string">&quot;∫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Intersection;&quot;</span>: <span class="string">&quot;⋂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;InvisibleComma;&quot;</span>: <span class="string">&quot;⁣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;InvisibleTimes;&quot;</span>: <span class="string">&quot;⁢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Iogon;&quot;</span>: <span class="string">&quot;Į&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Iopf;&quot;</span>: <span class="string">&quot;𝕀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Iota;&quot;</span>: <span class="string">&quot;Ι&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Iscr;&quot;</span>: <span class="string">&quot;ℐ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Itilde;&quot;</span>: <span class="string">&quot;Ĩ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Iukcy;&quot;</span>: <span class="string">&quot;І&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Iuml&quot;</span>: <span class="string">&quot;Ï&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Iuml;&quot;</span>: <span class="string">&quot;Ï&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Jcirc;&quot;</span>: <span class="string">&quot;Ĵ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Jcy;&quot;</span>: <span class="string">&quot;Й&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Jfr;&quot;</span>: <span class="string">&quot;𝔍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Jopf;&quot;</span>: <span class="string">&quot;𝕁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Jscr;&quot;</span>: <span class="string">&quot;𝒥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Jsercy;&quot;</span>: <span class="string">&quot;Ј&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Jukcy;&quot;</span>: <span class="string">&quot;Є&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;KHcy;&quot;</span>: <span class="string">&quot;Х&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;KJcy;&quot;</span>: <span class="string">&quot;Ќ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Kappa;&quot;</span>: <span class="string">&quot;Κ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Kcedil;&quot;</span>: <span class="string">&quot;Ķ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Kcy;&quot;</span>: <span class="string">&quot;К&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Kfr;&quot;</span>: <span class="string">&quot;𝔎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Kopf;&quot;</span>: <span class="string">&quot;𝕂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Kscr;&quot;</span>: <span class="string">&quot;𝒦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LJcy;&quot;</span>: <span class="string">&quot;Љ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LT&quot;</span>: <span class="string">&quot;&lt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LT;&quot;</span>: <span class="string">&quot;&lt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Lacute;&quot;</span>: <span class="string">&quot;Ĺ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Lambda;&quot;</span>: <span class="string">&quot;Λ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Lang;&quot;</span>: <span class="string">&quot;⟪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Laplacetrf;&quot;</span>: <span class="string">&quot;ℒ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Larr;&quot;</span>: <span class="string">&quot;↞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Lcaron;&quot;</span>: <span class="string">&quot;Ľ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Lcedil;&quot;</span>: <span class="string">&quot;Ļ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Lcy;&quot;</span>: <span class="string">&quot;Л&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftAngleBracket;&quot;</span>: <span class="string">&quot;⟨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftArrow;&quot;</span>: <span class="string">&quot;←&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftArrowBar;&quot;</span>: <span class="string">&quot;⇤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftArrowRightArrow;&quot;</span>: <span class="string">&quot;⇆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftCeiling;&quot;</span>: <span class="string">&quot;⌈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftDoubleBracket;&quot;</span>: <span class="string">&quot;⟦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftDownTeeVector;&quot;</span>: <span class="string">&quot;⥡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftDownVector;&quot;</span>: <span class="string">&quot;⇃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftDownVectorBar;&quot;</span>: <span class="string">&quot;⥙&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftFloor;&quot;</span>: <span class="string">&quot;⌊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftRightArrow;&quot;</span>: <span class="string">&quot;↔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftRightVector;&quot;</span>: <span class="string">&quot;⥎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftTee;&quot;</span>: <span class="string">&quot;⊣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftTeeArrow;&quot;</span>: <span class="string">&quot;↤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftTeeVector;&quot;</span>: <span class="string">&quot;⥚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftTriangle;&quot;</span>: <span class="string">&quot;⊲&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftTriangleBar;&quot;</span>: <span class="string">&quot;⧏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftTriangleEqual;&quot;</span>: <span class="string">&quot;⊴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftUpDownVector;&quot;</span>: <span class="string">&quot;⥑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftUpTeeVector;&quot;</span>: <span class="string">&quot;⥠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftUpVector;&quot;</span>: <span class="string">&quot;↿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftUpVectorBar;&quot;</span>: <span class="string">&quot;⥘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftVector;&quot;</span>: <span class="string">&quot;↼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LeftVectorBar;&quot;</span>: <span class="string">&quot;⥒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Leftarrow;&quot;</span>: <span class="string">&quot;⇐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Leftrightarrow;&quot;</span>: <span class="string">&quot;⇔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LessEqualGreater;&quot;</span>: <span class="string">&quot;⋚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LessFullEqual;&quot;</span>: <span class="string">&quot;≦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LessGreater;&quot;</span>: <span class="string">&quot;≶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LessLess;&quot;</span>: <span class="string">&quot;⪡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LessSlantEqual;&quot;</span>: <span class="string">&quot;⩽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LessTilde;&quot;</span>: <span class="string">&quot;≲&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Lfr;&quot;</span>: <span class="string">&quot;𝔏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ll;&quot;</span>: <span class="string">&quot;⋘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Lleftarrow;&quot;</span>: <span class="string">&quot;⇚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Lmidot;&quot;</span>: <span class="string">&quot;Ŀ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LongLeftArrow;&quot;</span>: <span class="string">&quot;⟵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LongLeftRightArrow;&quot;</span>: <span class="string">&quot;⟷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LongRightArrow;&quot;</span>: <span class="string">&quot;⟶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Longleftarrow;&quot;</span>: <span class="string">&quot;⟸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Longleftrightarrow;&quot;</span>: <span class="string">&quot;⟺&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Longrightarrow;&quot;</span>: <span class="string">&quot;⟹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Lopf;&quot;</span>: <span class="string">&quot;𝕃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LowerLeftArrow;&quot;</span>: <span class="string">&quot;↙&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;LowerRightArrow;&quot;</span>: <span class="string">&quot;↘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Lscr;&quot;</span>: <span class="string">&quot;ℒ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Lsh;&quot;</span>: <span class="string">&quot;↰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Lstrok;&quot;</span>: <span class="string">&quot;Ł&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Lt;&quot;</span>: <span class="string">&quot;≪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Map;&quot;</span>: <span class="string">&quot;⤅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Mcy;&quot;</span>: <span class="string">&quot;М&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;MediumSpace;&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Mellintrf;&quot;</span>: <span class="string">&quot;ℳ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Mfr;&quot;</span>: <span class="string">&quot;𝔐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;MinusPlus;&quot;</span>: <span class="string">&quot;∓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Mopf;&quot;</span>: <span class="string">&quot;𝕄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Mscr;&quot;</span>: <span class="string">&quot;ℳ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Mu;&quot;</span>: <span class="string">&quot;Μ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NJcy;&quot;</span>: <span class="string">&quot;Њ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Nacute;&quot;</span>: <span class="string">&quot;Ń&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ncaron;&quot;</span>: <span class="string">&quot;Ň&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ncedil;&quot;</span>: <span class="string">&quot;Ņ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ncy;&quot;</span>: <span class="string">&quot;Н&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NegativeMediumSpace;&quot;</span>: <span class="string">&quot;​&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NegativeThickSpace;&quot;</span>: <span class="string">&quot;​&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NegativeThinSpace;&quot;</span>: <span class="string">&quot;​&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NegativeVeryThinSpace;&quot;</span>: <span class="string">&quot;​&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NestedGreaterGreater;&quot;</span>: <span class="string">&quot;≫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NestedLessLess;&quot;</span>: <span class="string">&quot;≪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NewLine;&quot;</span>: <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Nfr;&quot;</span>: <span class="string">&quot;𝔑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NoBreak;&quot;</span>: <span class="string">&quot;⁠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NonBreakingSpace;&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Nopf;&quot;</span>: <span class="string">&quot;ℕ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Not;&quot;</span>: <span class="string">&quot;⫬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotCongruent;&quot;</span>: <span class="string">&quot;≢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotCupCap;&quot;</span>: <span class="string">&quot;≭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotDoubleVerticalBar;&quot;</span>: <span class="string">&quot;∦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotElement;&quot;</span>: <span class="string">&quot;∉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotEqual;&quot;</span>: <span class="string">&quot;≠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotEqualTilde;&quot;</span>: <span class="string">&quot;≂̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotExists;&quot;</span>: <span class="string">&quot;∄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotGreater;&quot;</span>: <span class="string">&quot;≯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotGreaterEqual;&quot;</span>: <span class="string">&quot;≱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotGreaterFullEqual;&quot;</span>: <span class="string">&quot;≧̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotGreaterGreater;&quot;</span>: <span class="string">&quot;≫̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotGreaterLess;&quot;</span>: <span class="string">&quot;≹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotGreaterSlantEqual;&quot;</span>: <span class="string">&quot;⩾̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotGreaterTilde;&quot;</span>: <span class="string">&quot;≵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotHumpDownHump;&quot;</span>: <span class="string">&quot;≎̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotHumpEqual;&quot;</span>: <span class="string">&quot;≏̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotLeftTriangle;&quot;</span>: <span class="string">&quot;⋪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotLeftTriangleBar;&quot;</span>: <span class="string">&quot;⧏̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotLeftTriangleEqual;&quot;</span>: <span class="string">&quot;⋬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotLess;&quot;</span>: <span class="string">&quot;≮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotLessEqual;&quot;</span>: <span class="string">&quot;≰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotLessGreater;&quot;</span>: <span class="string">&quot;≸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotLessLess;&quot;</span>: <span class="string">&quot;≪̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotLessSlantEqual;&quot;</span>: <span class="string">&quot;⩽̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotLessTilde;&quot;</span>: <span class="string">&quot;≴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotNestedGreaterGreater;&quot;</span>: <span class="string">&quot;⪢̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotNestedLessLess;&quot;</span>: <span class="string">&quot;⪡̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotPrecedes;&quot;</span>: <span class="string">&quot;⊀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotPrecedesEqual;&quot;</span>: <span class="string">&quot;⪯̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotPrecedesSlantEqual;&quot;</span>: <span class="string">&quot;⋠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotReverseElement;&quot;</span>: <span class="string">&quot;∌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotRightTriangle;&quot;</span>: <span class="string">&quot;⋫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotRightTriangleBar;&quot;</span>: <span class="string">&quot;⧐̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotRightTriangleEqual;&quot;</span>: <span class="string">&quot;⋭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotSquareSubset;&quot;</span>: <span class="string">&quot;⊏̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotSquareSubsetEqual;&quot;</span>: <span class="string">&quot;⋢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotSquareSuperset;&quot;</span>: <span class="string">&quot;⊐̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotSquareSupersetEqual;&quot;</span>: <span class="string">&quot;⋣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotSubset;&quot;</span>: <span class="string">&quot;⊂⃒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotSubsetEqual;&quot;</span>: <span class="string">&quot;⊈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotSucceeds;&quot;</span>: <span class="string">&quot;⊁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotSucceedsEqual;&quot;</span>: <span class="string">&quot;⪰̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotSucceedsSlantEqual;&quot;</span>: <span class="string">&quot;⋡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotSucceedsTilde;&quot;</span>: <span class="string">&quot;≿̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotSuperset;&quot;</span>: <span class="string">&quot;⊃⃒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotSupersetEqual;&quot;</span>: <span class="string">&quot;⊉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotTilde;&quot;</span>: <span class="string">&quot;≁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotTildeEqual;&quot;</span>: <span class="string">&quot;≄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotTildeFullEqual;&quot;</span>: <span class="string">&quot;≇&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotTildeTilde;&quot;</span>: <span class="string">&quot;≉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;NotVerticalBar;&quot;</span>: <span class="string">&quot;∤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Nscr;&quot;</span>: <span class="string">&quot;𝒩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ntilde&quot;</span>: <span class="string">&quot;Ñ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ntilde;&quot;</span>: <span class="string">&quot;Ñ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Nu;&quot;</span>: <span class="string">&quot;Ν&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;OElig;&quot;</span>: <span class="string">&quot;Œ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Oacute&quot;</span>: <span class="string">&quot;Ó&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Oacute;&quot;</span>: <span class="string">&quot;Ó&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ocirc&quot;</span>: <span class="string">&quot;Ô&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ocirc;&quot;</span>: <span class="string">&quot;Ô&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ocy;&quot;</span>: <span class="string">&quot;О&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Odblac;&quot;</span>: <span class="string">&quot;Ő&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ofr;&quot;</span>: <span class="string">&quot;𝔒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ograve&quot;</span>: <span class="string">&quot;Ò&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ograve;&quot;</span>: <span class="string">&quot;Ò&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Omacr;&quot;</span>: <span class="string">&quot;Ō&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Omega;&quot;</span>: <span class="string">&quot;Ω&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Omicron;&quot;</span>: <span class="string">&quot;Ο&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Oopf;&quot;</span>: <span class="string">&quot;𝕆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;OpenCurlyDoubleQuote;&quot;</span>: <span class="string">&quot;“&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;OpenCurlyQuote;&quot;</span>: <span class="string">&quot;‘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Or;&quot;</span>: <span class="string">&quot;⩔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Oscr;&quot;</span>: <span class="string">&quot;𝒪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Oslash&quot;</span>: <span class="string">&quot;Ø&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Oslash;&quot;</span>: <span class="string">&quot;Ø&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Otilde&quot;</span>: <span class="string">&quot;Õ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Otilde;&quot;</span>: <span class="string">&quot;Õ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Otimes;&quot;</span>: <span class="string">&quot;⨷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ouml&quot;</span>: <span class="string">&quot;Ö&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ouml;&quot;</span>: <span class="string">&quot;Ö&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;OverBar;&quot;</span>: <span class="string">&quot;‾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;OverBrace;&quot;</span>: <span class="string">&quot;⏞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;OverBracket;&quot;</span>: <span class="string">&quot;⎴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;OverParenthesis;&quot;</span>: <span class="string">&quot;⏜&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;PartialD;&quot;</span>: <span class="string">&quot;∂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Pcy;&quot;</span>: <span class="string">&quot;П&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Pfr;&quot;</span>: <span class="string">&quot;𝔓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Phi;&quot;</span>: <span class="string">&quot;Φ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Pi;&quot;</span>: <span class="string">&quot;Π&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;PlusMinus;&quot;</span>: <span class="string">&quot;±&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Poincareplane;&quot;</span>: <span class="string">&quot;ℌ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Popf;&quot;</span>: <span class="string">&quot;ℙ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Pr;&quot;</span>: <span class="string">&quot;⪻&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Precedes;&quot;</span>: <span class="string">&quot;≺&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;PrecedesEqual;&quot;</span>: <span class="string">&quot;⪯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;PrecedesSlantEqual;&quot;</span>: <span class="string">&quot;≼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;PrecedesTilde;&quot;</span>: <span class="string">&quot;≾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Prime;&quot;</span>: <span class="string">&quot;″&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Product;&quot;</span>: <span class="string">&quot;∏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Proportion;&quot;</span>: <span class="string">&quot;∷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Proportional;&quot;</span>: <span class="string">&quot;∝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Pscr;&quot;</span>: <span class="string">&quot;𝒫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Psi;&quot;</span>: <span class="string">&quot;Ψ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;QUOT&quot;</span>: <span class="string">&#x27;&quot;&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;QUOT;&quot;</span>: <span class="string">&#x27;&quot;&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Qfr;&quot;</span>: <span class="string">&quot;𝔔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Qopf;&quot;</span>: <span class="string">&quot;ℚ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Qscr;&quot;</span>: <span class="string">&quot;𝒬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RBarr;&quot;</span>: <span class="string">&quot;⤐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;REG&quot;</span>: <span class="string">&quot;®&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;REG;&quot;</span>: <span class="string">&quot;®&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Racute;&quot;</span>: <span class="string">&quot;Ŕ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Rang;&quot;</span>: <span class="string">&quot;⟫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Rarr;&quot;</span>: <span class="string">&quot;↠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Rarrtl;&quot;</span>: <span class="string">&quot;⤖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Rcaron;&quot;</span>: <span class="string">&quot;Ř&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Rcedil;&quot;</span>: <span class="string">&quot;Ŗ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Rcy;&quot;</span>: <span class="string">&quot;Р&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Re;&quot;</span>: <span class="string">&quot;ℜ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ReverseElement;&quot;</span>: <span class="string">&quot;∋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ReverseEquilibrium;&quot;</span>: <span class="string">&quot;⇋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ReverseUpEquilibrium;&quot;</span>: <span class="string">&quot;⥯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Rfr;&quot;</span>: <span class="string">&quot;ℜ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Rho;&quot;</span>: <span class="string">&quot;Ρ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightAngleBracket;&quot;</span>: <span class="string">&quot;⟩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightArrow;&quot;</span>: <span class="string">&quot;→&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightArrowBar;&quot;</span>: <span class="string">&quot;⇥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightArrowLeftArrow;&quot;</span>: <span class="string">&quot;⇄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightCeiling;&quot;</span>: <span class="string">&quot;⌉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightDoubleBracket;&quot;</span>: <span class="string">&quot;⟧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightDownTeeVector;&quot;</span>: <span class="string">&quot;⥝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightDownVector;&quot;</span>: <span class="string">&quot;⇂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightDownVectorBar;&quot;</span>: <span class="string">&quot;⥕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightFloor;&quot;</span>: <span class="string">&quot;⌋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightTee;&quot;</span>: <span class="string">&quot;⊢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightTeeArrow;&quot;</span>: <span class="string">&quot;↦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightTeeVector;&quot;</span>: <span class="string">&quot;⥛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightTriangle;&quot;</span>: <span class="string">&quot;⊳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightTriangleBar;&quot;</span>: <span class="string">&quot;⧐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightTriangleEqual;&quot;</span>: <span class="string">&quot;⊵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightUpDownVector;&quot;</span>: <span class="string">&quot;⥏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightUpTeeVector;&quot;</span>: <span class="string">&quot;⥜&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightUpVector;&quot;</span>: <span class="string">&quot;↾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightUpVectorBar;&quot;</span>: <span class="string">&quot;⥔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightVector;&quot;</span>: <span class="string">&quot;⇀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RightVectorBar;&quot;</span>: <span class="string">&quot;⥓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Rightarrow;&quot;</span>: <span class="string">&quot;⇒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ropf;&quot;</span>: <span class="string">&quot;ℝ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RoundImplies;&quot;</span>: <span class="string">&quot;⥰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Rrightarrow;&quot;</span>: <span class="string">&quot;⇛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Rscr;&quot;</span>: <span class="string">&quot;ℛ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Rsh;&quot;</span>: <span class="string">&quot;↱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;RuleDelayed;&quot;</span>: <span class="string">&quot;⧴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;SHCHcy;&quot;</span>: <span class="string">&quot;Щ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;SHcy;&quot;</span>: <span class="string">&quot;Ш&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;SOFTcy;&quot;</span>: <span class="string">&quot;Ь&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Sacute;&quot;</span>: <span class="string">&quot;Ś&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Sc;&quot;</span>: <span class="string">&quot;⪼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Scaron;&quot;</span>: <span class="string">&quot;Š&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Scedil;&quot;</span>: <span class="string">&quot;Ş&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Scirc;&quot;</span>: <span class="string">&quot;Ŝ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Scy;&quot;</span>: <span class="string">&quot;С&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Sfr;&quot;</span>: <span class="string">&quot;𝔖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ShortDownArrow;&quot;</span>: <span class="string">&quot;↓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ShortLeftArrow;&quot;</span>: <span class="string">&quot;←&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ShortRightArrow;&quot;</span>: <span class="string">&quot;→&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ShortUpArrow;&quot;</span>: <span class="string">&quot;↑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Sigma;&quot;</span>: <span class="string">&quot;Σ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;SmallCircle;&quot;</span>: <span class="string">&quot;∘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Sopf;&quot;</span>: <span class="string">&quot;𝕊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Sqrt;&quot;</span>: <span class="string">&quot;√&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Square;&quot;</span>: <span class="string">&quot;□&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;SquareIntersection;&quot;</span>: <span class="string">&quot;⊓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;SquareSubset;&quot;</span>: <span class="string">&quot;⊏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;SquareSubsetEqual;&quot;</span>: <span class="string">&quot;⊑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;SquareSuperset;&quot;</span>: <span class="string">&quot;⊐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;SquareSupersetEqual;&quot;</span>: <span class="string">&quot;⊒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;SquareUnion;&quot;</span>: <span class="string">&quot;⊔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Sscr;&quot;</span>: <span class="string">&quot;𝒮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Star;&quot;</span>: <span class="string">&quot;⋆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Sub;&quot;</span>: <span class="string">&quot;⋐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Subset;&quot;</span>: <span class="string">&quot;⋐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;SubsetEqual;&quot;</span>: <span class="string">&quot;⊆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Succeeds;&quot;</span>: <span class="string">&quot;≻&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;SucceedsEqual;&quot;</span>: <span class="string">&quot;⪰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;SucceedsSlantEqual;&quot;</span>: <span class="string">&quot;≽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;SucceedsTilde;&quot;</span>: <span class="string">&quot;≿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;SuchThat;&quot;</span>: <span class="string">&quot;∋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Sum;&quot;</span>: <span class="string">&quot;∑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Sup;&quot;</span>: <span class="string">&quot;⋑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Superset;&quot;</span>: <span class="string">&quot;⊃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;SupersetEqual;&quot;</span>: <span class="string">&quot;⊇&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Supset;&quot;</span>: <span class="string">&quot;⋑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;THORN&quot;</span>: <span class="string">&quot;Þ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;THORN;&quot;</span>: <span class="string">&quot;Þ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;TRADE;&quot;</span>: <span class="string">&quot;™&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;TSHcy;&quot;</span>: <span class="string">&quot;Ћ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;TScy;&quot;</span>: <span class="string">&quot;Ц&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Tab;&quot;</span>: <span class="string">&quot;\t&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Tau;&quot;</span>: <span class="string">&quot;Τ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Tcaron;&quot;</span>: <span class="string">&quot;Ť&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Tcedil;&quot;</span>: <span class="string">&quot;Ţ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Tcy;&quot;</span>: <span class="string">&quot;Т&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Tfr;&quot;</span>: <span class="string">&quot;𝔗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Therefore;&quot;</span>: <span class="string">&quot;∴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Theta;&quot;</span>: <span class="string">&quot;Θ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ThickSpace;&quot;</span>: <span class="string">&quot;  &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ThinSpace;&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Tilde;&quot;</span>: <span class="string">&quot;∼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;TildeEqual;&quot;</span>: <span class="string">&quot;≃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;TildeFullEqual;&quot;</span>: <span class="string">&quot;≅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;TildeTilde;&quot;</span>: <span class="string">&quot;≈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Topf;&quot;</span>: <span class="string">&quot;𝕋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;TripleDot;&quot;</span>: <span class="string">&quot;⃛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Tscr;&quot;</span>: <span class="string">&quot;𝒯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Tstrok;&quot;</span>: <span class="string">&quot;Ŧ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Uacute&quot;</span>: <span class="string">&quot;Ú&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Uacute;&quot;</span>: <span class="string">&quot;Ú&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Uarr;&quot;</span>: <span class="string">&quot;↟&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Uarrocir;&quot;</span>: <span class="string">&quot;⥉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ubrcy;&quot;</span>: <span class="string">&quot;Ў&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ubreve;&quot;</span>: <span class="string">&quot;Ŭ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ucirc&quot;</span>: <span class="string">&quot;Û&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ucirc;&quot;</span>: <span class="string">&quot;Û&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ucy;&quot;</span>: <span class="string">&quot;У&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Udblac;&quot;</span>: <span class="string">&quot;Ű&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ufr;&quot;</span>: <span class="string">&quot;𝔘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ugrave&quot;</span>: <span class="string">&quot;Ù&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ugrave;&quot;</span>: <span class="string">&quot;Ù&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Umacr;&quot;</span>: <span class="string">&quot;Ū&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;UnderBar;&quot;</span>: <span class="string">&quot;_&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;UnderBrace;&quot;</span>: <span class="string">&quot;⏟&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;UnderBracket;&quot;</span>: <span class="string">&quot;⎵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;UnderParenthesis;&quot;</span>: <span class="string">&quot;⏝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Union;&quot;</span>: <span class="string">&quot;⋃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;UnionPlus;&quot;</span>: <span class="string">&quot;⊎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Uogon;&quot;</span>: <span class="string">&quot;Ų&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Uopf;&quot;</span>: <span class="string">&quot;𝕌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;UpArrow;&quot;</span>: <span class="string">&quot;↑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;UpArrowBar;&quot;</span>: <span class="string">&quot;⤒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;UpArrowDownArrow;&quot;</span>: <span class="string">&quot;⇅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;UpDownArrow;&quot;</span>: <span class="string">&quot;↕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;UpEquilibrium;&quot;</span>: <span class="string">&quot;⥮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;UpTee;&quot;</span>: <span class="string">&quot;⊥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;UpTeeArrow;&quot;</span>: <span class="string">&quot;↥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Uparrow;&quot;</span>: <span class="string">&quot;⇑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Updownarrow;&quot;</span>: <span class="string">&quot;⇕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;UpperLeftArrow;&quot;</span>: <span class="string">&quot;↖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;UpperRightArrow;&quot;</span>: <span class="string">&quot;↗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Upsi;&quot;</span>: <span class="string">&quot;ϒ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Upsilon;&quot;</span>: <span class="string">&quot;Υ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Uring;&quot;</span>: <span class="string">&quot;Ů&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Uscr;&quot;</span>: <span class="string">&quot;𝒰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Utilde;&quot;</span>: <span class="string">&quot;Ũ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Uuml&quot;</span>: <span class="string">&quot;Ü&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Uuml;&quot;</span>: <span class="string">&quot;Ü&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;VDash;&quot;</span>: <span class="string">&quot;⊫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Vbar;&quot;</span>: <span class="string">&quot;⫫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Vcy;&quot;</span>: <span class="string">&quot;В&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Vdash;&quot;</span>: <span class="string">&quot;⊩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Vdashl;&quot;</span>: <span class="string">&quot;⫦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Vee;&quot;</span>: <span class="string">&quot;⋁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Verbar;&quot;</span>: <span class="string">&quot;‖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Vert;&quot;</span>: <span class="string">&quot;‖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;VerticalBar;&quot;</span>: <span class="string">&quot;∣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;VerticalLine;&quot;</span>: <span class="string">&quot;|&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;VerticalSeparator;&quot;</span>: <span class="string">&quot;❘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;VerticalTilde;&quot;</span>: <span class="string">&quot;≀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;VeryThinSpace;&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Vfr;&quot;</span>: <span class="string">&quot;𝔙&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Vopf;&quot;</span>: <span class="string">&quot;𝕍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Vscr;&quot;</span>: <span class="string">&quot;𝒱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Vvdash;&quot;</span>: <span class="string">&quot;⊪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Wcirc;&quot;</span>: <span class="string">&quot;Ŵ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Wedge;&quot;</span>: <span class="string">&quot;⋀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Wfr;&quot;</span>: <span class="string">&quot;𝔚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Wopf;&quot;</span>: <span class="string">&quot;𝕎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Wscr;&quot;</span>: <span class="string">&quot;𝒲&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Xfr;&quot;</span>: <span class="string">&quot;𝔛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Xi;&quot;</span>: <span class="string">&quot;Ξ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Xopf;&quot;</span>: <span class="string">&quot;𝕏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Xscr;&quot;</span>: <span class="string">&quot;𝒳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;YAcy;&quot;</span>: <span class="string">&quot;Я&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;YIcy;&quot;</span>: <span class="string">&quot;Ї&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;YUcy;&quot;</span>: <span class="string">&quot;Ю&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Yacute&quot;</span>: <span class="string">&quot;Ý&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Yacute;&quot;</span>: <span class="string">&quot;Ý&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ycirc;&quot;</span>: <span class="string">&quot;Ŷ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Ycy;&quot;</span>: <span class="string">&quot;Ы&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Yfr;&quot;</span>: <span class="string">&quot;𝔜&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Yopf;&quot;</span>: <span class="string">&quot;𝕐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Yscr;&quot;</span>: <span class="string">&quot;𝒴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Yuml;&quot;</span>: <span class="string">&quot;Ÿ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ZHcy;&quot;</span>: <span class="string">&quot;Ж&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Zacute;&quot;</span>: <span class="string">&quot;Ź&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Zcaron;&quot;</span>: <span class="string">&quot;Ž&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Zcy;&quot;</span>: <span class="string">&quot;З&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Zdot;&quot;</span>: <span class="string">&quot;Ż&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ZeroWidthSpace;&quot;</span>: <span class="string">&quot;​&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Zeta;&quot;</span>: <span class="string">&quot;Ζ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Zfr;&quot;</span>: <span class="string">&quot;ℨ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Zopf;&quot;</span>: <span class="string">&quot;ℤ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;Zscr;&quot;</span>: <span class="string">&quot;𝒵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;aacute&quot;</span>: <span class="string">&quot;á&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;aacute;&quot;</span>: <span class="string">&quot;á&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;abreve;&quot;</span>: <span class="string">&quot;ă&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ac;&quot;</span>: <span class="string">&quot;∾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;acE;&quot;</span>: <span class="string">&quot;∾̳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;acd;&quot;</span>: <span class="string">&quot;∿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;acirc&quot;</span>: <span class="string">&quot;â&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;acirc;&quot;</span>: <span class="string">&quot;â&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;acute&quot;</span>: <span class="string">&quot;´&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;acute;&quot;</span>: <span class="string">&quot;´&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;acy;&quot;</span>: <span class="string">&quot;а&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;aelig&quot;</span>: <span class="string">&quot;æ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;aelig;&quot;</span>: <span class="string">&quot;æ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;af;&quot;</span>: <span class="string">&quot;⁡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;afr;&quot;</span>: <span class="string">&quot;𝔞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;agrave&quot;</span>: <span class="string">&quot;à&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;agrave;&quot;</span>: <span class="string">&quot;à&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;alefsym;&quot;</span>: <span class="string">&quot;ℵ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;aleph;&quot;</span>: <span class="string">&quot;ℵ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;alpha;&quot;</span>: <span class="string">&quot;α&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;amacr;&quot;</span>: <span class="string">&quot;ā&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;amalg;&quot;</span>: <span class="string">&quot;⨿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;amp&quot;</span>: <span class="string">&quot;&amp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;amp;&quot;</span>: <span class="string">&quot;&amp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;and;&quot;</span>: <span class="string">&quot;∧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;andand;&quot;</span>: <span class="string">&quot;⩕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;andd;&quot;</span>: <span class="string">&quot;⩜&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;andslope;&quot;</span>: <span class="string">&quot;⩘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;andv;&quot;</span>: <span class="string">&quot;⩚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ang;&quot;</span>: <span class="string">&quot;∠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ange;&quot;</span>: <span class="string">&quot;⦤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;angle;&quot;</span>: <span class="string">&quot;∠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;angmsd;&quot;</span>: <span class="string">&quot;∡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;angmsdaa;&quot;</span>: <span class="string">&quot;⦨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;angmsdab;&quot;</span>: <span class="string">&quot;⦩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;angmsdac;&quot;</span>: <span class="string">&quot;⦪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;angmsdad;&quot;</span>: <span class="string">&quot;⦫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;angmsdae;&quot;</span>: <span class="string">&quot;⦬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;angmsdaf;&quot;</span>: <span class="string">&quot;⦭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;angmsdag;&quot;</span>: <span class="string">&quot;⦮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;angmsdah;&quot;</span>: <span class="string">&quot;⦯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;angrt;&quot;</span>: <span class="string">&quot;∟&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;angrtvb;&quot;</span>: <span class="string">&quot;⊾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;angrtvbd;&quot;</span>: <span class="string">&quot;⦝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;angsph;&quot;</span>: <span class="string">&quot;∢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;angst;&quot;</span>: <span class="string">&quot;Å&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;angzarr;&quot;</span>: <span class="string">&quot;⍼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;aogon;&quot;</span>: <span class="string">&quot;ą&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;aopf;&quot;</span>: <span class="string">&quot;𝕒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ap;&quot;</span>: <span class="string">&quot;≈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;apE;&quot;</span>: <span class="string">&quot;⩰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;apacir;&quot;</span>: <span class="string">&quot;⩯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ape;&quot;</span>: <span class="string">&quot;≊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;apid;&quot;</span>: <span class="string">&quot;≋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;apos;&quot;</span>: <span class="string">&quot;&#x27;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;approx;&quot;</span>: <span class="string">&quot;≈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;approxeq;&quot;</span>: <span class="string">&quot;≊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;aring&quot;</span>: <span class="string">&quot;å&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;aring;&quot;</span>: <span class="string">&quot;å&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ascr;&quot;</span>: <span class="string">&quot;𝒶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ast;&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;asymp;&quot;</span>: <span class="string">&quot;≈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;asympeq;&quot;</span>: <span class="string">&quot;≍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;atilde&quot;</span>: <span class="string">&quot;ã&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;atilde;&quot;</span>: <span class="string">&quot;ã&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;auml&quot;</span>: <span class="string">&quot;ä&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;auml;&quot;</span>: <span class="string">&quot;ä&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;awconint;&quot;</span>: <span class="string">&quot;∳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;awint;&quot;</span>: <span class="string">&quot;⨑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bNot;&quot;</span>: <span class="string">&quot;⫭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;backcong;&quot;</span>: <span class="string">&quot;≌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;backepsilon;&quot;</span>: <span class="string">&quot;϶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;backprime;&quot;</span>: <span class="string">&quot;‵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;backsim;&quot;</span>: <span class="string">&quot;∽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;backsimeq;&quot;</span>: <span class="string">&quot;⋍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;barvee;&quot;</span>: <span class="string">&quot;⊽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;barwed;&quot;</span>: <span class="string">&quot;⌅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;barwedge;&quot;</span>: <span class="string">&quot;⌅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bbrk;&quot;</span>: <span class="string">&quot;⎵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bbrktbrk;&quot;</span>: <span class="string">&quot;⎶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bcong;&quot;</span>: <span class="string">&quot;≌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bcy;&quot;</span>: <span class="string">&quot;б&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bdquo;&quot;</span>: <span class="string">&quot;„&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;becaus;&quot;</span>: <span class="string">&quot;∵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;because;&quot;</span>: <span class="string">&quot;∵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bemptyv;&quot;</span>: <span class="string">&quot;⦰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bepsi;&quot;</span>: <span class="string">&quot;϶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bernou;&quot;</span>: <span class="string">&quot;ℬ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;beta;&quot;</span>: <span class="string">&quot;β&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;beth;&quot;</span>: <span class="string">&quot;ℶ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;between;&quot;</span>: <span class="string">&quot;≬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bfr;&quot;</span>: <span class="string">&quot;𝔟&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bigcap;&quot;</span>: <span class="string">&quot;⋂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bigcirc;&quot;</span>: <span class="string">&quot;◯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bigcup;&quot;</span>: <span class="string">&quot;⋃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bigodot;&quot;</span>: <span class="string">&quot;⨀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bigoplus;&quot;</span>: <span class="string">&quot;⨁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bigotimes;&quot;</span>: <span class="string">&quot;⨂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bigsqcup;&quot;</span>: <span class="string">&quot;⨆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bigstar;&quot;</span>: <span class="string">&quot;★&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bigtriangledown;&quot;</span>: <span class="string">&quot;▽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bigtriangleup;&quot;</span>: <span class="string">&quot;△&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;biguplus;&quot;</span>: <span class="string">&quot;⨄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bigvee;&quot;</span>: <span class="string">&quot;⋁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bigwedge;&quot;</span>: <span class="string">&quot;⋀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bkarow;&quot;</span>: <span class="string">&quot;⤍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;blacklozenge;&quot;</span>: <span class="string">&quot;⧫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;blacksquare;&quot;</span>: <span class="string">&quot;▪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;blacktriangle;&quot;</span>: <span class="string">&quot;▴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;blacktriangledown;&quot;</span>: <span class="string">&quot;▾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;blacktriangleleft;&quot;</span>: <span class="string">&quot;◂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;blacktriangleright;&quot;</span>: <span class="string">&quot;▸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;blank;&quot;</span>: <span class="string">&quot;␣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;blk12;&quot;</span>: <span class="string">&quot;▒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;blk14;&quot;</span>: <span class="string">&quot;░&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;blk34;&quot;</span>: <span class="string">&quot;▓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;block;&quot;</span>: <span class="string">&quot;█&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bne;&quot;</span>: <span class="string">&quot;=⃥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bnequiv;&quot;</span>: <span class="string">&quot;≡⃥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bnot;&quot;</span>: <span class="string">&quot;⌐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bopf;&quot;</span>: <span class="string">&quot;𝕓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bot;&quot;</span>: <span class="string">&quot;⊥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bottom;&quot;</span>: <span class="string">&quot;⊥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bowtie;&quot;</span>: <span class="string">&quot;⋈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxDL;&quot;</span>: <span class="string">&quot;╗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxDR;&quot;</span>: <span class="string">&quot;╔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxDl;&quot;</span>: <span class="string">&quot;╖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxDr;&quot;</span>: <span class="string">&quot;╓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxH;&quot;</span>: <span class="string">&quot;═&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxHD;&quot;</span>: <span class="string">&quot;╦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxHU;&quot;</span>: <span class="string">&quot;╩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxHd;&quot;</span>: <span class="string">&quot;╤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxHu;&quot;</span>: <span class="string">&quot;╧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxUL;&quot;</span>: <span class="string">&quot;╝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxUR;&quot;</span>: <span class="string">&quot;╚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxUl;&quot;</span>: <span class="string">&quot;╜&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxUr;&quot;</span>: <span class="string">&quot;╙&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxV;&quot;</span>: <span class="string">&quot;║&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxVH;&quot;</span>: <span class="string">&quot;╬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxVL;&quot;</span>: <span class="string">&quot;╣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxVR;&quot;</span>: <span class="string">&quot;╠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxVh;&quot;</span>: <span class="string">&quot;╫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxVl;&quot;</span>: <span class="string">&quot;╢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxVr;&quot;</span>: <span class="string">&quot;╟&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxbox;&quot;</span>: <span class="string">&quot;⧉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxdL;&quot;</span>: <span class="string">&quot;╕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxdR;&quot;</span>: <span class="string">&quot;╒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxdl;&quot;</span>: <span class="string">&quot;┐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxdr;&quot;</span>: <span class="string">&quot;┌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxh;&quot;</span>: <span class="string">&quot;─&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxhD;&quot;</span>: <span class="string">&quot;╥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxhU;&quot;</span>: <span class="string">&quot;╨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxhd;&quot;</span>: <span class="string">&quot;┬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxhu;&quot;</span>: <span class="string">&quot;┴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxminus;&quot;</span>: <span class="string">&quot;⊟&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxplus;&quot;</span>: <span class="string">&quot;⊞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxtimes;&quot;</span>: <span class="string">&quot;⊠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxuL;&quot;</span>: <span class="string">&quot;╛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxuR;&quot;</span>: <span class="string">&quot;╘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxul;&quot;</span>: <span class="string">&quot;┘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxur;&quot;</span>: <span class="string">&quot;└&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxv;&quot;</span>: <span class="string">&quot;│&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxvH;&quot;</span>: <span class="string">&quot;╪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxvL;&quot;</span>: <span class="string">&quot;╡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxvR;&quot;</span>: <span class="string">&quot;╞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxvh;&quot;</span>: <span class="string">&quot;┼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxvl;&quot;</span>: <span class="string">&quot;┤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;boxvr;&quot;</span>: <span class="string">&quot;├&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bprime;&quot;</span>: <span class="string">&quot;‵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;breve;&quot;</span>: <span class="string">&quot;˘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;brvbar&quot;</span>: <span class="string">&quot;¦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;brvbar;&quot;</span>: <span class="string">&quot;¦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bscr;&quot;</span>: <span class="string">&quot;𝒷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bsemi;&quot;</span>: <span class="string">&quot;⁏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bsim;&quot;</span>: <span class="string">&quot;∽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bsime;&quot;</span>: <span class="string">&quot;⋍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bsol;&quot;</span>: <span class="string">&quot;\\&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bsolb;&quot;</span>: <span class="string">&quot;⧅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bsolhsub;&quot;</span>: <span class="string">&quot;⟈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bull;&quot;</span>: <span class="string">&quot;•&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bullet;&quot;</span>: <span class="string">&quot;•&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bump;&quot;</span>: <span class="string">&quot;≎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bumpE;&quot;</span>: <span class="string">&quot;⪮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bumpe;&quot;</span>: <span class="string">&quot;≏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;bumpeq;&quot;</span>: <span class="string">&quot;≏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cacute;&quot;</span>: <span class="string">&quot;ć&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cap;&quot;</span>: <span class="string">&quot;∩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;capand;&quot;</span>: <span class="string">&quot;⩄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;capbrcup;&quot;</span>: <span class="string">&quot;⩉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;capcap;&quot;</span>: <span class="string">&quot;⩋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;capcup;&quot;</span>: <span class="string">&quot;⩇&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;capdot;&quot;</span>: <span class="string">&quot;⩀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;caps;&quot;</span>: <span class="string">&quot;∩︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;caret;&quot;</span>: <span class="string">&quot;⁁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;caron;&quot;</span>: <span class="string">&quot;ˇ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ccaps;&quot;</span>: <span class="string">&quot;⩍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ccaron;&quot;</span>: <span class="string">&quot;č&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ccedil&quot;</span>: <span class="string">&quot;ç&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ccedil;&quot;</span>: <span class="string">&quot;ç&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ccirc;&quot;</span>: <span class="string">&quot;ĉ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ccups;&quot;</span>: <span class="string">&quot;⩌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ccupssm;&quot;</span>: <span class="string">&quot;⩐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cdot;&quot;</span>: <span class="string">&quot;ċ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cedil&quot;</span>: <span class="string">&quot;¸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cedil;&quot;</span>: <span class="string">&quot;¸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cemptyv;&quot;</span>: <span class="string">&quot;⦲&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cent&quot;</span>: <span class="string">&quot;¢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cent;&quot;</span>: <span class="string">&quot;¢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;centerdot;&quot;</span>: <span class="string">&quot;·&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cfr;&quot;</span>: <span class="string">&quot;𝔠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;chcy;&quot;</span>: <span class="string">&quot;ч&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;check;&quot;</span>: <span class="string">&quot;✓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;checkmark;&quot;</span>: <span class="string">&quot;✓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;chi;&quot;</span>: <span class="string">&quot;χ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cir;&quot;</span>: <span class="string">&quot;○&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cirE;&quot;</span>: <span class="string">&quot;⧃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;circ;&quot;</span>: <span class="string">&quot;ˆ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;circeq;&quot;</span>: <span class="string">&quot;≗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;circlearrowleft;&quot;</span>: <span class="string">&quot;↺&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;circlearrowright;&quot;</span>: <span class="string">&quot;↻&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;circledR;&quot;</span>: <span class="string">&quot;®&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;circledS;&quot;</span>: <span class="string">&quot;Ⓢ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;circledast;&quot;</span>: <span class="string">&quot;⊛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;circledcirc;&quot;</span>: <span class="string">&quot;⊚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;circleddash;&quot;</span>: <span class="string">&quot;⊝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cire;&quot;</span>: <span class="string">&quot;≗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cirfnint;&quot;</span>: <span class="string">&quot;⨐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cirmid;&quot;</span>: <span class="string">&quot;⫯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cirscir;&quot;</span>: <span class="string">&quot;⧂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;clubs;&quot;</span>: <span class="string">&quot;♣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;clubsuit;&quot;</span>: <span class="string">&quot;♣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;colon;&quot;</span>: <span class="string">&quot;:&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;colone;&quot;</span>: <span class="string">&quot;≔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;coloneq;&quot;</span>: <span class="string">&quot;≔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;comma;&quot;</span>: <span class="string">&quot;,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;commat;&quot;</span>: <span class="string">&quot;@&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;comp;&quot;</span>: <span class="string">&quot;∁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;compfn;&quot;</span>: <span class="string">&quot;∘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;complement;&quot;</span>: <span class="string">&quot;∁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;complexes;&quot;</span>: <span class="string">&quot;ℂ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cong;&quot;</span>: <span class="string">&quot;≅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;congdot;&quot;</span>: <span class="string">&quot;⩭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;conint;&quot;</span>: <span class="string">&quot;∮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;copf;&quot;</span>: <span class="string">&quot;𝕔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;coprod;&quot;</span>: <span class="string">&quot;∐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;copy&quot;</span>: <span class="string">&quot;©&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;copy;&quot;</span>: <span class="string">&quot;©&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;copysr;&quot;</span>: <span class="string">&quot;℗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;crarr;&quot;</span>: <span class="string">&quot;↵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cross;&quot;</span>: <span class="string">&quot;✗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cscr;&quot;</span>: <span class="string">&quot;𝒸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;csub;&quot;</span>: <span class="string">&quot;⫏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;csube;&quot;</span>: <span class="string">&quot;⫑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;csup;&quot;</span>: <span class="string">&quot;⫐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;csupe;&quot;</span>: <span class="string">&quot;⫒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ctdot;&quot;</span>: <span class="string">&quot;⋯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cudarrl;&quot;</span>: <span class="string">&quot;⤸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cudarrr;&quot;</span>: <span class="string">&quot;⤵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cuepr;&quot;</span>: <span class="string">&quot;⋞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cuesc;&quot;</span>: <span class="string">&quot;⋟&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cularr;&quot;</span>: <span class="string">&quot;↶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cularrp;&quot;</span>: <span class="string">&quot;⤽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cup;&quot;</span>: <span class="string">&quot;∪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cupbrcap;&quot;</span>: <span class="string">&quot;⩈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cupcap;&quot;</span>: <span class="string">&quot;⩆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cupcup;&quot;</span>: <span class="string">&quot;⩊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cupdot;&quot;</span>: <span class="string">&quot;⊍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cupor;&quot;</span>: <span class="string">&quot;⩅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cups;&quot;</span>: <span class="string">&quot;∪︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;curarr;&quot;</span>: <span class="string">&quot;↷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;curarrm;&quot;</span>: <span class="string">&quot;⤼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;curlyeqprec;&quot;</span>: <span class="string">&quot;⋞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;curlyeqsucc;&quot;</span>: <span class="string">&quot;⋟&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;curlyvee;&quot;</span>: <span class="string">&quot;⋎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;curlywedge;&quot;</span>: <span class="string">&quot;⋏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;curren&quot;</span>: <span class="string">&quot;¤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;curren;&quot;</span>: <span class="string">&quot;¤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;curvearrowleft;&quot;</span>: <span class="string">&quot;↶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;curvearrowright;&quot;</span>: <span class="string">&quot;↷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cuvee;&quot;</span>: <span class="string">&quot;⋎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cuwed;&quot;</span>: <span class="string">&quot;⋏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cwconint;&quot;</span>: <span class="string">&quot;∲&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cwint;&quot;</span>: <span class="string">&quot;∱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;cylcty;&quot;</span>: <span class="string">&quot;⌭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dArr;&quot;</span>: <span class="string">&quot;⇓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dHar;&quot;</span>: <span class="string">&quot;⥥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dagger;&quot;</span>: <span class="string">&quot;†&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;daleth;&quot;</span>: <span class="string">&quot;ℸ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;darr;&quot;</span>: <span class="string">&quot;↓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dash;&quot;</span>: <span class="string">&quot;‐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dashv;&quot;</span>: <span class="string">&quot;⊣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dbkarow;&quot;</span>: <span class="string">&quot;⤏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dblac;&quot;</span>: <span class="string">&quot;˝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dcaron;&quot;</span>: <span class="string">&quot;ď&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dcy;&quot;</span>: <span class="string">&quot;д&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dd;&quot;</span>: <span class="string">&quot;ⅆ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ddagger;&quot;</span>: <span class="string">&quot;‡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ddarr;&quot;</span>: <span class="string">&quot;⇊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ddotseq;&quot;</span>: <span class="string">&quot;⩷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;deg&quot;</span>: <span class="string">&quot;°&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;deg;&quot;</span>: <span class="string">&quot;°&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;delta;&quot;</span>: <span class="string">&quot;δ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;demptyv;&quot;</span>: <span class="string">&quot;⦱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dfisht;&quot;</span>: <span class="string">&quot;⥿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dfr;&quot;</span>: <span class="string">&quot;𝔡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dharl;&quot;</span>: <span class="string">&quot;⇃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dharr;&quot;</span>: <span class="string">&quot;⇂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;diam;&quot;</span>: <span class="string">&quot;⋄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;diamond;&quot;</span>: <span class="string">&quot;⋄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;diamondsuit;&quot;</span>: <span class="string">&quot;♦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;diams;&quot;</span>: <span class="string">&quot;♦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;die;&quot;</span>: <span class="string">&quot;¨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;digamma;&quot;</span>: <span class="string">&quot;ϝ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;disin;&quot;</span>: <span class="string">&quot;⋲&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;div;&quot;</span>: <span class="string">&quot;÷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;divide&quot;</span>: <span class="string">&quot;÷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;divide;&quot;</span>: <span class="string">&quot;÷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;divideontimes;&quot;</span>: <span class="string">&quot;⋇&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;divonx;&quot;</span>: <span class="string">&quot;⋇&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;djcy;&quot;</span>: <span class="string">&quot;ђ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dlcorn;&quot;</span>: <span class="string">&quot;⌞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dlcrop;&quot;</span>: <span class="string">&quot;⌍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dollar;&quot;</span>: <span class="string">&quot;$&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dopf;&quot;</span>: <span class="string">&quot;𝕕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dot;&quot;</span>: <span class="string">&quot;˙&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;doteq;&quot;</span>: <span class="string">&quot;≐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;doteqdot;&quot;</span>: <span class="string">&quot;≑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dotminus;&quot;</span>: <span class="string">&quot;∸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dotplus;&quot;</span>: <span class="string">&quot;∔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dotsquare;&quot;</span>: <span class="string">&quot;⊡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;doublebarwedge;&quot;</span>: <span class="string">&quot;⌆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;downarrow;&quot;</span>: <span class="string">&quot;↓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;downdownarrows;&quot;</span>: <span class="string">&quot;⇊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;downharpoonleft;&quot;</span>: <span class="string">&quot;⇃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;downharpoonright;&quot;</span>: <span class="string">&quot;⇂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;drbkarow;&quot;</span>: <span class="string">&quot;⤐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;drcorn;&quot;</span>: <span class="string">&quot;⌟&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;drcrop;&quot;</span>: <span class="string">&quot;⌌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dscr;&quot;</span>: <span class="string">&quot;𝒹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dscy;&quot;</span>: <span class="string">&quot;ѕ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dsol;&quot;</span>: <span class="string">&quot;⧶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dstrok;&quot;</span>: <span class="string">&quot;đ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dtdot;&quot;</span>: <span class="string">&quot;⋱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dtri;&quot;</span>: <span class="string">&quot;▿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dtrif;&quot;</span>: <span class="string">&quot;▾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;duarr;&quot;</span>: <span class="string">&quot;⇵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;duhar;&quot;</span>: <span class="string">&quot;⥯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dwangle;&quot;</span>: <span class="string">&quot;⦦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dzcy;&quot;</span>: <span class="string">&quot;џ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;dzigrarr;&quot;</span>: <span class="string">&quot;⟿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eDDot;&quot;</span>: <span class="string">&quot;⩷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eDot;&quot;</span>: <span class="string">&quot;≑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eacute&quot;</span>: <span class="string">&quot;é&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eacute;&quot;</span>: <span class="string">&quot;é&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;easter;&quot;</span>: <span class="string">&quot;⩮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ecaron;&quot;</span>: <span class="string">&quot;ě&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ecir;&quot;</span>: <span class="string">&quot;≖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ecirc&quot;</span>: <span class="string">&quot;ê&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ecirc;&quot;</span>: <span class="string">&quot;ê&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ecolon;&quot;</span>: <span class="string">&quot;≕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ecy;&quot;</span>: <span class="string">&quot;э&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;edot;&quot;</span>: <span class="string">&quot;ė&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ee;&quot;</span>: <span class="string">&quot;ⅇ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;efDot;&quot;</span>: <span class="string">&quot;≒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;efr;&quot;</span>: <span class="string">&quot;𝔢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eg;&quot;</span>: <span class="string">&quot;⪚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;egrave&quot;</span>: <span class="string">&quot;è&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;egrave;&quot;</span>: <span class="string">&quot;è&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;egs;&quot;</span>: <span class="string">&quot;⪖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;egsdot;&quot;</span>: <span class="string">&quot;⪘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;el;&quot;</span>: <span class="string">&quot;⪙&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;elinters;&quot;</span>: <span class="string">&quot;⏧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ell;&quot;</span>: <span class="string">&quot;ℓ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;els;&quot;</span>: <span class="string">&quot;⪕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;elsdot;&quot;</span>: <span class="string">&quot;⪗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;emacr;&quot;</span>: <span class="string">&quot;ē&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;empty;&quot;</span>: <span class="string">&quot;∅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;emptyset;&quot;</span>: <span class="string">&quot;∅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;emptyv;&quot;</span>: <span class="string">&quot;∅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;emsp13;&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;emsp14;&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;emsp;&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eng;&quot;</span>: <span class="string">&quot;ŋ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ensp;&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eogon;&quot;</span>: <span class="string">&quot;ę&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eopf;&quot;</span>: <span class="string">&quot;𝕖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;epar;&quot;</span>: <span class="string">&quot;⋕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eparsl;&quot;</span>: <span class="string">&quot;⧣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eplus;&quot;</span>: <span class="string">&quot;⩱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;epsi;&quot;</span>: <span class="string">&quot;ε&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;epsilon;&quot;</span>: <span class="string">&quot;ε&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;epsiv;&quot;</span>: <span class="string">&quot;ϵ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eqcirc;&quot;</span>: <span class="string">&quot;≖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eqcolon;&quot;</span>: <span class="string">&quot;≕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eqsim;&quot;</span>: <span class="string">&quot;≂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eqslantgtr;&quot;</span>: <span class="string">&quot;⪖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eqslantless;&quot;</span>: <span class="string">&quot;⪕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;equals;&quot;</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;equest;&quot;</span>: <span class="string">&quot;≟&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;equiv;&quot;</span>: <span class="string">&quot;≡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;equivDD;&quot;</span>: <span class="string">&quot;⩸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eqvparsl;&quot;</span>: <span class="string">&quot;⧥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;erDot;&quot;</span>: <span class="string">&quot;≓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;erarr;&quot;</span>: <span class="string">&quot;⥱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;escr;&quot;</span>: <span class="string">&quot;ℯ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;esdot;&quot;</span>: <span class="string">&quot;≐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;esim;&quot;</span>: <span class="string">&quot;≂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eta;&quot;</span>: <span class="string">&quot;η&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eth&quot;</span>: <span class="string">&quot;ð&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;eth;&quot;</span>: <span class="string">&quot;ð&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;euml&quot;</span>: <span class="string">&quot;ë&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;euml;&quot;</span>: <span class="string">&quot;ë&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;euro;&quot;</span>: <span class="string">&quot;€&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;excl;&quot;</span>: <span class="string">&quot;!&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;exist;&quot;</span>: <span class="string">&quot;∃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;expectation;&quot;</span>: <span class="string">&quot;ℰ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;exponentiale;&quot;</span>: <span class="string">&quot;ⅇ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;fallingdotseq;&quot;</span>: <span class="string">&quot;≒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;fcy;&quot;</span>: <span class="string">&quot;ф&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;female;&quot;</span>: <span class="string">&quot;♀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ffilig;&quot;</span>: <span class="string">&quot;ﬃ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;fflig;&quot;</span>: <span class="string">&quot;ﬀ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ffllig;&quot;</span>: <span class="string">&quot;ﬄ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ffr;&quot;</span>: <span class="string">&quot;𝔣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;filig;&quot;</span>: <span class="string">&quot;ﬁ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;fjlig;&quot;</span>: <span class="string">&quot;fj&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;flat;&quot;</span>: <span class="string">&quot;♭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;fllig;&quot;</span>: <span class="string">&quot;ﬂ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;fltns;&quot;</span>: <span class="string">&quot;▱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;fnof;&quot;</span>: <span class="string">&quot;ƒ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;fopf;&quot;</span>: <span class="string">&quot;𝕗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;forall;&quot;</span>: <span class="string">&quot;∀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;fork;&quot;</span>: <span class="string">&quot;⋔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;forkv;&quot;</span>: <span class="string">&quot;⫙&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;fpartint;&quot;</span>: <span class="string">&quot;⨍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac12&quot;</span>: <span class="string">&quot;½&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac12;&quot;</span>: <span class="string">&quot;½&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac13;&quot;</span>: <span class="string">&quot;⅓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac14&quot;</span>: <span class="string">&quot;¼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac14;&quot;</span>: <span class="string">&quot;¼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac15;&quot;</span>: <span class="string">&quot;⅕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac16;&quot;</span>: <span class="string">&quot;⅙&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac18;&quot;</span>: <span class="string">&quot;⅛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac23;&quot;</span>: <span class="string">&quot;⅔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac25;&quot;</span>: <span class="string">&quot;⅖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac34&quot;</span>: <span class="string">&quot;¾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac34;&quot;</span>: <span class="string">&quot;¾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac35;&quot;</span>: <span class="string">&quot;⅗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac38;&quot;</span>: <span class="string">&quot;⅜&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac45;&quot;</span>: <span class="string">&quot;⅘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac56;&quot;</span>: <span class="string">&quot;⅚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac58;&quot;</span>: <span class="string">&quot;⅝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frac78;&quot;</span>: <span class="string">&quot;⅞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frasl;&quot;</span>: <span class="string">&quot;⁄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;frown;&quot;</span>: <span class="string">&quot;⌢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;fscr;&quot;</span>: <span class="string">&quot;𝒻&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gE;&quot;</span>: <span class="string">&quot;≧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gEl;&quot;</span>: <span class="string">&quot;⪌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gacute;&quot;</span>: <span class="string">&quot;ǵ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gamma;&quot;</span>: <span class="string">&quot;γ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gammad;&quot;</span>: <span class="string">&quot;ϝ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gap;&quot;</span>: <span class="string">&quot;⪆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gbreve;&quot;</span>: <span class="string">&quot;ğ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gcirc;&quot;</span>: <span class="string">&quot;ĝ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gcy;&quot;</span>: <span class="string">&quot;г&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gdot;&quot;</span>: <span class="string">&quot;ġ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ge;&quot;</span>: <span class="string">&quot;≥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gel;&quot;</span>: <span class="string">&quot;⋛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;geq;&quot;</span>: <span class="string">&quot;≥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;geqq;&quot;</span>: <span class="string">&quot;≧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;geqslant;&quot;</span>: <span class="string">&quot;⩾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ges;&quot;</span>: <span class="string">&quot;⩾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gescc;&quot;</span>: <span class="string">&quot;⪩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gesdot;&quot;</span>: <span class="string">&quot;⪀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gesdoto;&quot;</span>: <span class="string">&quot;⪂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gesdotol;&quot;</span>: <span class="string">&quot;⪄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gesl;&quot;</span>: <span class="string">&quot;⋛︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gesles;&quot;</span>: <span class="string">&quot;⪔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gfr;&quot;</span>: <span class="string">&quot;𝔤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gg;&quot;</span>: <span class="string">&quot;≫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ggg;&quot;</span>: <span class="string">&quot;⋙&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gimel;&quot;</span>: <span class="string">&quot;ℷ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gjcy;&quot;</span>: <span class="string">&quot;ѓ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gl;&quot;</span>: <span class="string">&quot;≷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;glE;&quot;</span>: <span class="string">&quot;⪒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gla;&quot;</span>: <span class="string">&quot;⪥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;glj;&quot;</span>: <span class="string">&quot;⪤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gnE;&quot;</span>: <span class="string">&quot;≩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gnap;&quot;</span>: <span class="string">&quot;⪊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gnapprox;&quot;</span>: <span class="string">&quot;⪊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gne;&quot;</span>: <span class="string">&quot;⪈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gneq;&quot;</span>: <span class="string">&quot;⪈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gneqq;&quot;</span>: <span class="string">&quot;≩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gnsim;&quot;</span>: <span class="string">&quot;⋧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gopf;&quot;</span>: <span class="string">&quot;𝕘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;grave;&quot;</span>: <span class="string">&quot;`&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gscr;&quot;</span>: <span class="string">&quot;ℊ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gsim;&quot;</span>: <span class="string">&quot;≳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gsime;&quot;</span>: <span class="string">&quot;⪎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gsiml;&quot;</span>: <span class="string">&quot;⪐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gt&quot;</span>: <span class="string">&quot;&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gt;&quot;</span>: <span class="string">&quot;&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gtcc;&quot;</span>: <span class="string">&quot;⪧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gtcir;&quot;</span>: <span class="string">&quot;⩺&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gtdot;&quot;</span>: <span class="string">&quot;⋗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gtlPar;&quot;</span>: <span class="string">&quot;⦕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gtquest;&quot;</span>: <span class="string">&quot;⩼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gtrapprox;&quot;</span>: <span class="string">&quot;⪆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gtrarr;&quot;</span>: <span class="string">&quot;⥸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gtrdot;&quot;</span>: <span class="string">&quot;⋗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gtreqless;&quot;</span>: <span class="string">&quot;⋛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gtreqqless;&quot;</span>: <span class="string">&quot;⪌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gtrless;&quot;</span>: <span class="string">&quot;≷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gtrsim;&quot;</span>: <span class="string">&quot;≳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gvertneqq;&quot;</span>: <span class="string">&quot;≩︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;gvnE;&quot;</span>: <span class="string">&quot;≩︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hArr;&quot;</span>: <span class="string">&quot;⇔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hairsp;&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;half;&quot;</span>: <span class="string">&quot;½&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hamilt;&quot;</span>: <span class="string">&quot;ℋ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hardcy;&quot;</span>: <span class="string">&quot;ъ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;harr;&quot;</span>: <span class="string">&quot;↔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;harrcir;&quot;</span>: <span class="string">&quot;⥈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;harrw;&quot;</span>: <span class="string">&quot;↭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hbar;&quot;</span>: <span class="string">&quot;ℏ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hcirc;&quot;</span>: <span class="string">&quot;ĥ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hearts;&quot;</span>: <span class="string">&quot;♥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;heartsuit;&quot;</span>: <span class="string">&quot;♥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hellip;&quot;</span>: <span class="string">&quot;…&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hercon;&quot;</span>: <span class="string">&quot;⊹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hfr;&quot;</span>: <span class="string">&quot;𝔥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hksearow;&quot;</span>: <span class="string">&quot;⤥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hkswarow;&quot;</span>: <span class="string">&quot;⤦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hoarr;&quot;</span>: <span class="string">&quot;⇿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;homtht;&quot;</span>: <span class="string">&quot;∻&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hookleftarrow;&quot;</span>: <span class="string">&quot;↩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hookrightarrow;&quot;</span>: <span class="string">&quot;↪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hopf;&quot;</span>: <span class="string">&quot;𝕙&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;horbar;&quot;</span>: <span class="string">&quot;―&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hscr;&quot;</span>: <span class="string">&quot;𝒽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hslash;&quot;</span>: <span class="string">&quot;ℏ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hstrok;&quot;</span>: <span class="string">&quot;ħ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hybull;&quot;</span>: <span class="string">&quot;⁃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;hyphen;&quot;</span>: <span class="string">&quot;‐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iacute&quot;</span>: <span class="string">&quot;í&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iacute;&quot;</span>: <span class="string">&quot;í&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ic;&quot;</span>: <span class="string">&quot;⁣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;icirc&quot;</span>: <span class="string">&quot;î&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;icirc;&quot;</span>: <span class="string">&quot;î&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;icy;&quot;</span>: <span class="string">&quot;и&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iecy;&quot;</span>: <span class="string">&quot;е&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iexcl&quot;</span>: <span class="string">&quot;¡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iexcl;&quot;</span>: <span class="string">&quot;¡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iff;&quot;</span>: <span class="string">&quot;⇔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ifr;&quot;</span>: <span class="string">&quot;𝔦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;igrave&quot;</span>: <span class="string">&quot;ì&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;igrave;&quot;</span>: <span class="string">&quot;ì&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ii;&quot;</span>: <span class="string">&quot;ⅈ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iiiint;&quot;</span>: <span class="string">&quot;⨌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iiint;&quot;</span>: <span class="string">&quot;∭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iinfin;&quot;</span>: <span class="string">&quot;⧜&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iiota;&quot;</span>: <span class="string">&quot;℩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ijlig;&quot;</span>: <span class="string">&quot;ĳ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;imacr;&quot;</span>: <span class="string">&quot;ī&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;image;&quot;</span>: <span class="string">&quot;ℑ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;imagline;&quot;</span>: <span class="string">&quot;ℐ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;imagpart;&quot;</span>: <span class="string">&quot;ℑ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;imath;&quot;</span>: <span class="string">&quot;ı&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;imof;&quot;</span>: <span class="string">&quot;⊷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;imped;&quot;</span>: <span class="string">&quot;Ƶ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;in;&quot;</span>: <span class="string">&quot;∈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;incare;&quot;</span>: <span class="string">&quot;℅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;infin;&quot;</span>: <span class="string">&quot;∞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;infintie;&quot;</span>: <span class="string">&quot;⧝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;inodot;&quot;</span>: <span class="string">&quot;ı&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;int;&quot;</span>: <span class="string">&quot;∫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;intcal;&quot;</span>: <span class="string">&quot;⊺&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;integers;&quot;</span>: <span class="string">&quot;ℤ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;intercal;&quot;</span>: <span class="string">&quot;⊺&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;intlarhk;&quot;</span>: <span class="string">&quot;⨗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;intprod;&quot;</span>: <span class="string">&quot;⨼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iocy;&quot;</span>: <span class="string">&quot;ё&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iogon;&quot;</span>: <span class="string">&quot;į&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iopf;&quot;</span>: <span class="string">&quot;𝕚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iota;&quot;</span>: <span class="string">&quot;ι&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iprod;&quot;</span>: <span class="string">&quot;⨼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iquest&quot;</span>: <span class="string">&quot;¿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iquest;&quot;</span>: <span class="string">&quot;¿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iscr;&quot;</span>: <span class="string">&quot;𝒾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;isin;&quot;</span>: <span class="string">&quot;∈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;isinE;&quot;</span>: <span class="string">&quot;⋹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;isindot;&quot;</span>: <span class="string">&quot;⋵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;isins;&quot;</span>: <span class="string">&quot;⋴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;isinsv;&quot;</span>: <span class="string">&quot;⋳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;isinv;&quot;</span>: <span class="string">&quot;∈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;it;&quot;</span>: <span class="string">&quot;⁢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;itilde;&quot;</span>: <span class="string">&quot;ĩ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iukcy;&quot;</span>: <span class="string">&quot;і&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iuml&quot;</span>: <span class="string">&quot;ï&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;iuml;&quot;</span>: <span class="string">&quot;ï&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;jcirc;&quot;</span>: <span class="string">&quot;ĵ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;jcy;&quot;</span>: <span class="string">&quot;й&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;jfr;&quot;</span>: <span class="string">&quot;𝔧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;jmath;&quot;</span>: <span class="string">&quot;ȷ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;jopf;&quot;</span>: <span class="string">&quot;𝕛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;jscr;&quot;</span>: <span class="string">&quot;𝒿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;jsercy;&quot;</span>: <span class="string">&quot;ј&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;jukcy;&quot;</span>: <span class="string">&quot;є&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;kappa;&quot;</span>: <span class="string">&quot;κ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;kappav;&quot;</span>: <span class="string">&quot;ϰ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;kcedil;&quot;</span>: <span class="string">&quot;ķ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;kcy;&quot;</span>: <span class="string">&quot;к&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;kfr;&quot;</span>: <span class="string">&quot;𝔨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;kgreen;&quot;</span>: <span class="string">&quot;ĸ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;khcy;&quot;</span>: <span class="string">&quot;х&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;kjcy;&quot;</span>: <span class="string">&quot;ќ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;kopf;&quot;</span>: <span class="string">&quot;𝕜&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;kscr;&quot;</span>: <span class="string">&quot;𝓀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lAarr;&quot;</span>: <span class="string">&quot;⇚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lArr;&quot;</span>: <span class="string">&quot;⇐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lAtail;&quot;</span>: <span class="string">&quot;⤛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lBarr;&quot;</span>: <span class="string">&quot;⤎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lE;&quot;</span>: <span class="string">&quot;≦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lEg;&quot;</span>: <span class="string">&quot;⪋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lHar;&quot;</span>: <span class="string">&quot;⥢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lacute;&quot;</span>: <span class="string">&quot;ĺ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;laemptyv;&quot;</span>: <span class="string">&quot;⦴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lagran;&quot;</span>: <span class="string">&quot;ℒ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lambda;&quot;</span>: <span class="string">&quot;λ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lang;&quot;</span>: <span class="string">&quot;⟨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;langd;&quot;</span>: <span class="string">&quot;⦑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;langle;&quot;</span>: <span class="string">&quot;⟨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lap;&quot;</span>: <span class="string">&quot;⪅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;laquo&quot;</span>: <span class="string">&quot;«&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;laquo;&quot;</span>: <span class="string">&quot;«&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;larr;&quot;</span>: <span class="string">&quot;←&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;larrb;&quot;</span>: <span class="string">&quot;⇤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;larrbfs;&quot;</span>: <span class="string">&quot;⤟&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;larrfs;&quot;</span>: <span class="string">&quot;⤝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;larrhk;&quot;</span>: <span class="string">&quot;↩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;larrlp;&quot;</span>: <span class="string">&quot;↫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;larrpl;&quot;</span>: <span class="string">&quot;⤹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;larrsim;&quot;</span>: <span class="string">&quot;⥳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;larrtl;&quot;</span>: <span class="string">&quot;↢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lat;&quot;</span>: <span class="string">&quot;⪫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;latail;&quot;</span>: <span class="string">&quot;⤙&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;late;&quot;</span>: <span class="string">&quot;⪭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lates;&quot;</span>: <span class="string">&quot;⪭︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lbarr;&quot;</span>: <span class="string">&quot;⤌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lbbrk;&quot;</span>: <span class="string">&quot;❲&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lbrace;&quot;</span>: <span class="string">&quot;&#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lbrack;&quot;</span>: <span class="string">&quot;[&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lbrke;&quot;</span>: <span class="string">&quot;⦋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lbrksld;&quot;</span>: <span class="string">&quot;⦏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lbrkslu;&quot;</span>: <span class="string">&quot;⦍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lcaron;&quot;</span>: <span class="string">&quot;ľ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lcedil;&quot;</span>: <span class="string">&quot;ļ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lceil;&quot;</span>: <span class="string">&quot;⌈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lcub;&quot;</span>: <span class="string">&quot;&#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lcy;&quot;</span>: <span class="string">&quot;л&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ldca;&quot;</span>: <span class="string">&quot;⤶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ldquo;&quot;</span>: <span class="string">&quot;“&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ldquor;&quot;</span>: <span class="string">&quot;„&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ldrdhar;&quot;</span>: <span class="string">&quot;⥧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ldrushar;&quot;</span>: <span class="string">&quot;⥋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ldsh;&quot;</span>: <span class="string">&quot;↲&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;le;&quot;</span>: <span class="string">&quot;≤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;leftarrow;&quot;</span>: <span class="string">&quot;←&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;leftarrowtail;&quot;</span>: <span class="string">&quot;↢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;leftharpoondown;&quot;</span>: <span class="string">&quot;↽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;leftharpoonup;&quot;</span>: <span class="string">&quot;↼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;leftleftarrows;&quot;</span>: <span class="string">&quot;⇇&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;leftrightarrow;&quot;</span>: <span class="string">&quot;↔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;leftrightarrows;&quot;</span>: <span class="string">&quot;⇆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;leftrightharpoons;&quot;</span>: <span class="string">&quot;⇋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;leftrightsquigarrow;&quot;</span>: <span class="string">&quot;↭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;leftthreetimes;&quot;</span>: <span class="string">&quot;⋋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;leg;&quot;</span>: <span class="string">&quot;⋚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;leq;&quot;</span>: <span class="string">&quot;≤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;leqq;&quot;</span>: <span class="string">&quot;≦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;leqslant;&quot;</span>: <span class="string">&quot;⩽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;les;&quot;</span>: <span class="string">&quot;⩽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lescc;&quot;</span>: <span class="string">&quot;⪨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lesdot;&quot;</span>: <span class="string">&quot;⩿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lesdoto;&quot;</span>: <span class="string">&quot;⪁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lesdotor;&quot;</span>: <span class="string">&quot;⪃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lesg;&quot;</span>: <span class="string">&quot;⋚︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lesges;&quot;</span>: <span class="string">&quot;⪓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lessapprox;&quot;</span>: <span class="string">&quot;⪅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lessdot;&quot;</span>: <span class="string">&quot;⋖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lesseqgtr;&quot;</span>: <span class="string">&quot;⋚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lesseqqgtr;&quot;</span>: <span class="string">&quot;⪋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lessgtr;&quot;</span>: <span class="string">&quot;≶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lesssim;&quot;</span>: <span class="string">&quot;≲&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lfisht;&quot;</span>: <span class="string">&quot;⥼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lfloor;&quot;</span>: <span class="string">&quot;⌊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lfr;&quot;</span>: <span class="string">&quot;𝔩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lg;&quot;</span>: <span class="string">&quot;≶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lgE;&quot;</span>: <span class="string">&quot;⪑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lhard;&quot;</span>: <span class="string">&quot;↽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lharu;&quot;</span>: <span class="string">&quot;↼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lharul;&quot;</span>: <span class="string">&quot;⥪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lhblk;&quot;</span>: <span class="string">&quot;▄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ljcy;&quot;</span>: <span class="string">&quot;љ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ll;&quot;</span>: <span class="string">&quot;≪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;llarr;&quot;</span>: <span class="string">&quot;⇇&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;llcorner;&quot;</span>: <span class="string">&quot;⌞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;llhard;&quot;</span>: <span class="string">&quot;⥫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lltri;&quot;</span>: <span class="string">&quot;◺&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lmidot;&quot;</span>: <span class="string">&quot;ŀ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lmoust;&quot;</span>: <span class="string">&quot;⎰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lmoustache;&quot;</span>: <span class="string">&quot;⎰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lnE;&quot;</span>: <span class="string">&quot;≨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lnap;&quot;</span>: <span class="string">&quot;⪉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lnapprox;&quot;</span>: <span class="string">&quot;⪉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lne;&quot;</span>: <span class="string">&quot;⪇&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lneq;&quot;</span>: <span class="string">&quot;⪇&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lneqq;&quot;</span>: <span class="string">&quot;≨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lnsim;&quot;</span>: <span class="string">&quot;⋦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;loang;&quot;</span>: <span class="string">&quot;⟬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;loarr;&quot;</span>: <span class="string">&quot;⇽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lobrk;&quot;</span>: <span class="string">&quot;⟦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;longleftarrow;&quot;</span>: <span class="string">&quot;⟵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;longleftrightarrow;&quot;</span>: <span class="string">&quot;⟷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;longmapsto;&quot;</span>: <span class="string">&quot;⟼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;longrightarrow;&quot;</span>: <span class="string">&quot;⟶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;looparrowleft;&quot;</span>: <span class="string">&quot;↫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;looparrowright;&quot;</span>: <span class="string">&quot;↬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lopar;&quot;</span>: <span class="string">&quot;⦅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lopf;&quot;</span>: <span class="string">&quot;𝕝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;loplus;&quot;</span>: <span class="string">&quot;⨭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lotimes;&quot;</span>: <span class="string">&quot;⨴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lowast;&quot;</span>: <span class="string">&quot;∗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lowbar;&quot;</span>: <span class="string">&quot;_&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;loz;&quot;</span>: <span class="string">&quot;◊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lozenge;&quot;</span>: <span class="string">&quot;◊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lozf;&quot;</span>: <span class="string">&quot;⧫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lpar;&quot;</span>: <span class="string">&quot;(&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lparlt;&quot;</span>: <span class="string">&quot;⦓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lrarr;&quot;</span>: <span class="string">&quot;⇆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lrcorner;&quot;</span>: <span class="string">&quot;⌟&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lrhar;&quot;</span>: <span class="string">&quot;⇋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lrhard;&quot;</span>: <span class="string">&quot;⥭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lrm;&quot;</span>: <span class="string">&quot;‎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lrtri;&quot;</span>: <span class="string">&quot;⊿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lsaquo;&quot;</span>: <span class="string">&quot;‹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lscr;&quot;</span>: <span class="string">&quot;𝓁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lsh;&quot;</span>: <span class="string">&quot;↰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lsim;&quot;</span>: <span class="string">&quot;≲&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lsime;&quot;</span>: <span class="string">&quot;⪍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lsimg;&quot;</span>: <span class="string">&quot;⪏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lsqb;&quot;</span>: <span class="string">&quot;[&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lsquo;&quot;</span>: <span class="string">&quot;‘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lsquor;&quot;</span>: <span class="string">&quot;‚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lstrok;&quot;</span>: <span class="string">&quot;ł&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lt&quot;</span>: <span class="string">&quot;&lt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lt;&quot;</span>: <span class="string">&quot;&lt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ltcc;&quot;</span>: <span class="string">&quot;⪦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ltcir;&quot;</span>: <span class="string">&quot;⩹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ltdot;&quot;</span>: <span class="string">&quot;⋖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lthree;&quot;</span>: <span class="string">&quot;⋋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ltimes;&quot;</span>: <span class="string">&quot;⋉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ltlarr;&quot;</span>: <span class="string">&quot;⥶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ltquest;&quot;</span>: <span class="string">&quot;⩻&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ltrPar;&quot;</span>: <span class="string">&quot;⦖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ltri;&quot;</span>: <span class="string">&quot;◃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ltrie;&quot;</span>: <span class="string">&quot;⊴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ltrif;&quot;</span>: <span class="string">&quot;◂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lurdshar;&quot;</span>: <span class="string">&quot;⥊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;luruhar;&quot;</span>: <span class="string">&quot;⥦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lvertneqq;&quot;</span>: <span class="string">&quot;≨︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;lvnE;&quot;</span>: <span class="string">&quot;≨︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mDDot;&quot;</span>: <span class="string">&quot;∺&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;macr&quot;</span>: <span class="string">&quot;¯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;macr;&quot;</span>: <span class="string">&quot;¯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;male;&quot;</span>: <span class="string">&quot;♂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;malt;&quot;</span>: <span class="string">&quot;✠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;maltese;&quot;</span>: <span class="string">&quot;✠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;map;&quot;</span>: <span class="string">&quot;↦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mapsto;&quot;</span>: <span class="string">&quot;↦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mapstodown;&quot;</span>: <span class="string">&quot;↧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mapstoleft;&quot;</span>: <span class="string">&quot;↤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mapstoup;&quot;</span>: <span class="string">&quot;↥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;marker;&quot;</span>: <span class="string">&quot;▮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mcomma;&quot;</span>: <span class="string">&quot;⨩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mcy;&quot;</span>: <span class="string">&quot;м&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mdash;&quot;</span>: <span class="string">&quot;—&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;measuredangle;&quot;</span>: <span class="string">&quot;∡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mfr;&quot;</span>: <span class="string">&quot;𝔪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mho;&quot;</span>: <span class="string">&quot;℧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;micro&quot;</span>: <span class="string">&quot;µ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;micro;&quot;</span>: <span class="string">&quot;µ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mid;&quot;</span>: <span class="string">&quot;∣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;midast;&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;midcir;&quot;</span>: <span class="string">&quot;⫰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;middot&quot;</span>: <span class="string">&quot;·&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;middot;&quot;</span>: <span class="string">&quot;·&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;minus;&quot;</span>: <span class="string">&quot;−&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;minusb;&quot;</span>: <span class="string">&quot;⊟&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;minusd;&quot;</span>: <span class="string">&quot;∸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;minusdu;&quot;</span>: <span class="string">&quot;⨪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mlcp;&quot;</span>: <span class="string">&quot;⫛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mldr;&quot;</span>: <span class="string">&quot;…&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mnplus;&quot;</span>: <span class="string">&quot;∓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;models;&quot;</span>: <span class="string">&quot;⊧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mopf;&quot;</span>: <span class="string">&quot;𝕞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mp;&quot;</span>: <span class="string">&quot;∓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mscr;&quot;</span>: <span class="string">&quot;𝓂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mstpos;&quot;</span>: <span class="string">&quot;∾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mu;&quot;</span>: <span class="string">&quot;μ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;multimap;&quot;</span>: <span class="string">&quot;⊸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;mumap;&quot;</span>: <span class="string">&quot;⊸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nGg;&quot;</span>: <span class="string">&quot;⋙̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nGt;&quot;</span>: <span class="string">&quot;≫⃒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nGtv;&quot;</span>: <span class="string">&quot;≫̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nLeftarrow;&quot;</span>: <span class="string">&quot;⇍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nLeftrightarrow;&quot;</span>: <span class="string">&quot;⇎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nLl;&quot;</span>: <span class="string">&quot;⋘̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nLt;&quot;</span>: <span class="string">&quot;≪⃒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nLtv;&quot;</span>: <span class="string">&quot;≪̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nRightarrow;&quot;</span>: <span class="string">&quot;⇏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nVDash;&quot;</span>: <span class="string">&quot;⊯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nVdash;&quot;</span>: <span class="string">&quot;⊮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nabla;&quot;</span>: <span class="string">&quot;∇&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nacute;&quot;</span>: <span class="string">&quot;ń&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nang;&quot;</span>: <span class="string">&quot;∠⃒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nap;&quot;</span>: <span class="string">&quot;≉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;napE;&quot;</span>: <span class="string">&quot;⩰̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;napid;&quot;</span>: <span class="string">&quot;≋̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;napos;&quot;</span>: <span class="string">&quot;ŉ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;napprox;&quot;</span>: <span class="string">&quot;≉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;natur;&quot;</span>: <span class="string">&quot;♮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;natural;&quot;</span>: <span class="string">&quot;♮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;naturals;&quot;</span>: <span class="string">&quot;ℕ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nbsp&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nbsp;&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nbump;&quot;</span>: <span class="string">&quot;≎̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nbumpe;&quot;</span>: <span class="string">&quot;≏̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ncap;&quot;</span>: <span class="string">&quot;⩃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ncaron;&quot;</span>: <span class="string">&quot;ň&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ncedil;&quot;</span>: <span class="string">&quot;ņ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ncong;&quot;</span>: <span class="string">&quot;≇&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ncongdot;&quot;</span>: <span class="string">&quot;⩭̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ncup;&quot;</span>: <span class="string">&quot;⩂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ncy;&quot;</span>: <span class="string">&quot;н&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ndash;&quot;</span>: <span class="string">&quot;–&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ne;&quot;</span>: <span class="string">&quot;≠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;neArr;&quot;</span>: <span class="string">&quot;⇗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nearhk;&quot;</span>: <span class="string">&quot;⤤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nearr;&quot;</span>: <span class="string">&quot;↗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nearrow;&quot;</span>: <span class="string">&quot;↗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nedot;&quot;</span>: <span class="string">&quot;≐̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nequiv;&quot;</span>: <span class="string">&quot;≢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nesear;&quot;</span>: <span class="string">&quot;⤨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nesim;&quot;</span>: <span class="string">&quot;≂̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nexist;&quot;</span>: <span class="string">&quot;∄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nexists;&quot;</span>: <span class="string">&quot;∄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nfr;&quot;</span>: <span class="string">&quot;𝔫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ngE;&quot;</span>: <span class="string">&quot;≧̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nge;&quot;</span>: <span class="string">&quot;≱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ngeq;&quot;</span>: <span class="string">&quot;≱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ngeqq;&quot;</span>: <span class="string">&quot;≧̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ngeqslant;&quot;</span>: <span class="string">&quot;⩾̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nges;&quot;</span>: <span class="string">&quot;⩾̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ngsim;&quot;</span>: <span class="string">&quot;≵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ngt;&quot;</span>: <span class="string">&quot;≯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ngtr;&quot;</span>: <span class="string">&quot;≯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nhArr;&quot;</span>: <span class="string">&quot;⇎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nharr;&quot;</span>: <span class="string">&quot;↮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nhpar;&quot;</span>: <span class="string">&quot;⫲&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ni;&quot;</span>: <span class="string">&quot;∋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nis;&quot;</span>: <span class="string">&quot;⋼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nisd;&quot;</span>: <span class="string">&quot;⋺&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;niv;&quot;</span>: <span class="string">&quot;∋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;njcy;&quot;</span>: <span class="string">&quot;њ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nlArr;&quot;</span>: <span class="string">&quot;⇍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nlE;&quot;</span>: <span class="string">&quot;≦̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nlarr;&quot;</span>: <span class="string">&quot;↚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nldr;&quot;</span>: <span class="string">&quot;‥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nle;&quot;</span>: <span class="string">&quot;≰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nleftarrow;&quot;</span>: <span class="string">&quot;↚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nleftrightarrow;&quot;</span>: <span class="string">&quot;↮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nleq;&quot;</span>: <span class="string">&quot;≰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nleqq;&quot;</span>: <span class="string">&quot;≦̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nleqslant;&quot;</span>: <span class="string">&quot;⩽̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nles;&quot;</span>: <span class="string">&quot;⩽̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nless;&quot;</span>: <span class="string">&quot;≮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nlsim;&quot;</span>: <span class="string">&quot;≴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nlt;&quot;</span>: <span class="string">&quot;≮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nltri;&quot;</span>: <span class="string">&quot;⋪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nltrie;&quot;</span>: <span class="string">&quot;⋬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nmid;&quot;</span>: <span class="string">&quot;∤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nopf;&quot;</span>: <span class="string">&quot;𝕟&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;not&quot;</span>: <span class="string">&quot;¬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;not;&quot;</span>: <span class="string">&quot;¬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;notin;&quot;</span>: <span class="string">&quot;∉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;notinE;&quot;</span>: <span class="string">&quot;⋹̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;notindot;&quot;</span>: <span class="string">&quot;⋵̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;notinva;&quot;</span>: <span class="string">&quot;∉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;notinvb;&quot;</span>: <span class="string">&quot;⋷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;notinvc;&quot;</span>: <span class="string">&quot;⋶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;notni;&quot;</span>: <span class="string">&quot;∌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;notniva;&quot;</span>: <span class="string">&quot;∌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;notnivb;&quot;</span>: <span class="string">&quot;⋾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;notnivc;&quot;</span>: <span class="string">&quot;⋽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;npar;&quot;</span>: <span class="string">&quot;∦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nparallel;&quot;</span>: <span class="string">&quot;∦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nparsl;&quot;</span>: <span class="string">&quot;⫽⃥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;npart;&quot;</span>: <span class="string">&quot;∂̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;npolint;&quot;</span>: <span class="string">&quot;⨔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;npr;&quot;</span>: <span class="string">&quot;⊀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nprcue;&quot;</span>: <span class="string">&quot;⋠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;npre;&quot;</span>: <span class="string">&quot;⪯̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nprec;&quot;</span>: <span class="string">&quot;⊀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;npreceq;&quot;</span>: <span class="string">&quot;⪯̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nrArr;&quot;</span>: <span class="string">&quot;⇏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nrarr;&quot;</span>: <span class="string">&quot;↛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nrarrc;&quot;</span>: <span class="string">&quot;⤳̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nrarrw;&quot;</span>: <span class="string">&quot;↝̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nrightarrow;&quot;</span>: <span class="string">&quot;↛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nrtri;&quot;</span>: <span class="string">&quot;⋫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nrtrie;&quot;</span>: <span class="string">&quot;⋭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsc;&quot;</span>: <span class="string">&quot;⊁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsccue;&quot;</span>: <span class="string">&quot;⋡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsce;&quot;</span>: <span class="string">&quot;⪰̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nscr;&quot;</span>: <span class="string">&quot;𝓃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nshortmid;&quot;</span>: <span class="string">&quot;∤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nshortparallel;&quot;</span>: <span class="string">&quot;∦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsim;&quot;</span>: <span class="string">&quot;≁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsime;&quot;</span>: <span class="string">&quot;≄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsimeq;&quot;</span>: <span class="string">&quot;≄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsmid;&quot;</span>: <span class="string">&quot;∤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nspar;&quot;</span>: <span class="string">&quot;∦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsqsube;&quot;</span>: <span class="string">&quot;⋢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsqsupe;&quot;</span>: <span class="string">&quot;⋣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsub;&quot;</span>: <span class="string">&quot;⊄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsubE;&quot;</span>: <span class="string">&quot;⫅̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsube;&quot;</span>: <span class="string">&quot;⊈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsubset;&quot;</span>: <span class="string">&quot;⊂⃒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsubseteq;&quot;</span>: <span class="string">&quot;⊈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsubseteqq;&quot;</span>: <span class="string">&quot;⫅̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsucc;&quot;</span>: <span class="string">&quot;⊁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsucceq;&quot;</span>: <span class="string">&quot;⪰̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsup;&quot;</span>: <span class="string">&quot;⊅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsupE;&quot;</span>: <span class="string">&quot;⫆̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsupe;&quot;</span>: <span class="string">&quot;⊉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsupset;&quot;</span>: <span class="string">&quot;⊃⃒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsupseteq;&quot;</span>: <span class="string">&quot;⊉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nsupseteqq;&quot;</span>: <span class="string">&quot;⫆̸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ntgl;&quot;</span>: <span class="string">&quot;≹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ntilde&quot;</span>: <span class="string">&quot;ñ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ntilde;&quot;</span>: <span class="string">&quot;ñ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ntlg;&quot;</span>: <span class="string">&quot;≸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ntriangleleft;&quot;</span>: <span class="string">&quot;⋪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ntrianglelefteq;&quot;</span>: <span class="string">&quot;⋬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ntriangleright;&quot;</span>: <span class="string">&quot;⋫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ntrianglerighteq;&quot;</span>: <span class="string">&quot;⋭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nu;&quot;</span>: <span class="string">&quot;ν&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;num;&quot;</span>: <span class="string">&quot;#&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;numero;&quot;</span>: <span class="string">&quot;№&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;numsp;&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nvDash;&quot;</span>: <span class="string">&quot;⊭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nvHarr;&quot;</span>: <span class="string">&quot;⤄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nvap;&quot;</span>: <span class="string">&quot;≍⃒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nvdash;&quot;</span>: <span class="string">&quot;⊬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nvge;&quot;</span>: <span class="string">&quot;≥⃒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nvgt;&quot;</span>: <span class="string">&quot;&gt;⃒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nvinfin;&quot;</span>: <span class="string">&quot;⧞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nvlArr;&quot;</span>: <span class="string">&quot;⤂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nvle;&quot;</span>: <span class="string">&quot;≤⃒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nvlt;&quot;</span>: <span class="string">&quot;&lt;⃒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nvltrie;&quot;</span>: <span class="string">&quot;⊴⃒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nvrArr;&quot;</span>: <span class="string">&quot;⤃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nvrtrie;&quot;</span>: <span class="string">&quot;⊵⃒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nvsim;&quot;</span>: <span class="string">&quot;∼⃒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nwArr;&quot;</span>: <span class="string">&quot;⇖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nwarhk;&quot;</span>: <span class="string">&quot;⤣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nwarr;&quot;</span>: <span class="string">&quot;↖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nwarrow;&quot;</span>: <span class="string">&quot;↖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;nwnear;&quot;</span>: <span class="string">&quot;⤧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oS;&quot;</span>: <span class="string">&quot;Ⓢ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oacute&quot;</span>: <span class="string">&quot;ó&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oacute;&quot;</span>: <span class="string">&quot;ó&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oast;&quot;</span>: <span class="string">&quot;⊛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ocir;&quot;</span>: <span class="string">&quot;⊚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ocirc&quot;</span>: <span class="string">&quot;ô&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ocirc;&quot;</span>: <span class="string">&quot;ô&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ocy;&quot;</span>: <span class="string">&quot;о&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;odash;&quot;</span>: <span class="string">&quot;⊝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;odblac;&quot;</span>: <span class="string">&quot;ő&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;odiv;&quot;</span>: <span class="string">&quot;⨸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;odot;&quot;</span>: <span class="string">&quot;⊙&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;odsold;&quot;</span>: <span class="string">&quot;⦼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oelig;&quot;</span>: <span class="string">&quot;œ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ofcir;&quot;</span>: <span class="string">&quot;⦿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ofr;&quot;</span>: <span class="string">&quot;𝔬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ogon;&quot;</span>: <span class="string">&quot;˛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ograve&quot;</span>: <span class="string">&quot;ò&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ograve;&quot;</span>: <span class="string">&quot;ò&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ogt;&quot;</span>: <span class="string">&quot;⧁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ohbar;&quot;</span>: <span class="string">&quot;⦵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ohm;&quot;</span>: <span class="string">&quot;Ω&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oint;&quot;</span>: <span class="string">&quot;∮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;olarr;&quot;</span>: <span class="string">&quot;↺&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;olcir;&quot;</span>: <span class="string">&quot;⦾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;olcross;&quot;</span>: <span class="string">&quot;⦻&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oline;&quot;</span>: <span class="string">&quot;‾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;olt;&quot;</span>: <span class="string">&quot;⧀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;omacr;&quot;</span>: <span class="string">&quot;ō&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;omega;&quot;</span>: <span class="string">&quot;ω&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;omicron;&quot;</span>: <span class="string">&quot;ο&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;omid;&quot;</span>: <span class="string">&quot;⦶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ominus;&quot;</span>: <span class="string">&quot;⊖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oopf;&quot;</span>: <span class="string">&quot;𝕠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;opar;&quot;</span>: <span class="string">&quot;⦷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;operp;&quot;</span>: <span class="string">&quot;⦹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oplus;&quot;</span>: <span class="string">&quot;⊕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;or;&quot;</span>: <span class="string">&quot;∨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;orarr;&quot;</span>: <span class="string">&quot;↻&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ord;&quot;</span>: <span class="string">&quot;⩝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;order;&quot;</span>: <span class="string">&quot;ℴ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;orderof;&quot;</span>: <span class="string">&quot;ℴ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ordf&quot;</span>: <span class="string">&quot;ª&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ordf;&quot;</span>: <span class="string">&quot;ª&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ordm&quot;</span>: <span class="string">&quot;º&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ordm;&quot;</span>: <span class="string">&quot;º&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;origof;&quot;</span>: <span class="string">&quot;⊶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oror;&quot;</span>: <span class="string">&quot;⩖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;orslope;&quot;</span>: <span class="string">&quot;⩗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;orv;&quot;</span>: <span class="string">&quot;⩛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oscr;&quot;</span>: <span class="string">&quot;ℴ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oslash&quot;</span>: <span class="string">&quot;ø&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;oslash;&quot;</span>: <span class="string">&quot;ø&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;osol;&quot;</span>: <span class="string">&quot;⊘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;otilde&quot;</span>: <span class="string">&quot;õ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;otilde;&quot;</span>: <span class="string">&quot;õ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;otimes;&quot;</span>: <span class="string">&quot;⊗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;otimesas;&quot;</span>: <span class="string">&quot;⨶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ouml&quot;</span>: <span class="string">&quot;ö&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ouml;&quot;</span>: <span class="string">&quot;ö&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ovbar;&quot;</span>: <span class="string">&quot;⌽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;par;&quot;</span>: <span class="string">&quot;∥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;para&quot;</span>: <span class="string">&quot;¶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;para;&quot;</span>: <span class="string">&quot;¶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;parallel;&quot;</span>: <span class="string">&quot;∥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;parsim;&quot;</span>: <span class="string">&quot;⫳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;parsl;&quot;</span>: <span class="string">&quot;⫽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;part;&quot;</span>: <span class="string">&quot;∂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;pcy;&quot;</span>: <span class="string">&quot;п&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;percnt;&quot;</span>: <span class="string">&quot;%&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;period;&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;permil;&quot;</span>: <span class="string">&quot;‰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;perp;&quot;</span>: <span class="string">&quot;⊥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;pertenk;&quot;</span>: <span class="string">&quot;‱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;pfr;&quot;</span>: <span class="string">&quot;𝔭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;phi;&quot;</span>: <span class="string">&quot;φ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;phiv;&quot;</span>: <span class="string">&quot;ϕ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;phmmat;&quot;</span>: <span class="string">&quot;ℳ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;phone;&quot;</span>: <span class="string">&quot;☎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;pi;&quot;</span>: <span class="string">&quot;π&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;pitchfork;&quot;</span>: <span class="string">&quot;⋔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;piv;&quot;</span>: <span class="string">&quot;ϖ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;planck;&quot;</span>: <span class="string">&quot;ℏ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;planckh;&quot;</span>: <span class="string">&quot;ℎ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;plankv;&quot;</span>: <span class="string">&quot;ℏ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;plus;&quot;</span>: <span class="string">&quot;+&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;plusacir;&quot;</span>: <span class="string">&quot;⨣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;plusb;&quot;</span>: <span class="string">&quot;⊞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;pluscir;&quot;</span>: <span class="string">&quot;⨢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;plusdo;&quot;</span>: <span class="string">&quot;∔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;plusdu;&quot;</span>: <span class="string">&quot;⨥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;pluse;&quot;</span>: <span class="string">&quot;⩲&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;plusmn&quot;</span>: <span class="string">&quot;±&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;plusmn;&quot;</span>: <span class="string">&quot;±&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;plussim;&quot;</span>: <span class="string">&quot;⨦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;plustwo;&quot;</span>: <span class="string">&quot;⨧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;pm;&quot;</span>: <span class="string">&quot;±&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;pointint;&quot;</span>: <span class="string">&quot;⨕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;popf;&quot;</span>: <span class="string">&quot;𝕡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;pound&quot;</span>: <span class="string">&quot;£&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;pound;&quot;</span>: <span class="string">&quot;£&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;pr;&quot;</span>: <span class="string">&quot;≺&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;prE;&quot;</span>: <span class="string">&quot;⪳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;prap;&quot;</span>: <span class="string">&quot;⪷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;prcue;&quot;</span>: <span class="string">&quot;≼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;pre;&quot;</span>: <span class="string">&quot;⪯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;prec;&quot;</span>: <span class="string">&quot;≺&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;precapprox;&quot;</span>: <span class="string">&quot;⪷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;preccurlyeq;&quot;</span>: <span class="string">&quot;≼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;preceq;&quot;</span>: <span class="string">&quot;⪯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;precnapprox;&quot;</span>: <span class="string">&quot;⪹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;precneqq;&quot;</span>: <span class="string">&quot;⪵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;precnsim;&quot;</span>: <span class="string">&quot;⋨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;precsim;&quot;</span>: <span class="string">&quot;≾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;prime;&quot;</span>: <span class="string">&quot;′&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;primes;&quot;</span>: <span class="string">&quot;ℙ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;prnE;&quot;</span>: <span class="string">&quot;⪵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;prnap;&quot;</span>: <span class="string">&quot;⪹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;prnsim;&quot;</span>: <span class="string">&quot;⋨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;prod;&quot;</span>: <span class="string">&quot;∏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;profalar;&quot;</span>: <span class="string">&quot;⌮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;profline;&quot;</span>: <span class="string">&quot;⌒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;profsurf;&quot;</span>: <span class="string">&quot;⌓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;prop;&quot;</span>: <span class="string">&quot;∝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;propto;&quot;</span>: <span class="string">&quot;∝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;prsim;&quot;</span>: <span class="string">&quot;≾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;prurel;&quot;</span>: <span class="string">&quot;⊰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;pscr;&quot;</span>: <span class="string">&quot;𝓅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;psi;&quot;</span>: <span class="string">&quot;ψ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;puncsp;&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;qfr;&quot;</span>: <span class="string">&quot;𝔮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;qint;&quot;</span>: <span class="string">&quot;⨌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;qopf;&quot;</span>: <span class="string">&quot;𝕢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;qprime;&quot;</span>: <span class="string">&quot;⁗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;qscr;&quot;</span>: <span class="string">&quot;𝓆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;quaternions;&quot;</span>: <span class="string">&quot;ℍ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;quatint;&quot;</span>: <span class="string">&quot;⨖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;quest;&quot;</span>: <span class="string">&quot;?&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;questeq;&quot;</span>: <span class="string">&quot;≟&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;quot&quot;</span>: <span class="string">&#x27;&quot;&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;quot;&quot;</span>: <span class="string">&#x27;&quot;&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rAarr;&quot;</span>: <span class="string">&quot;⇛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rArr;&quot;</span>: <span class="string">&quot;⇒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rAtail;&quot;</span>: <span class="string">&quot;⤜&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rBarr;&quot;</span>: <span class="string">&quot;⤏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rHar;&quot;</span>: <span class="string">&quot;⥤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;race;&quot;</span>: <span class="string">&quot;∽̱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;racute;&quot;</span>: <span class="string">&quot;ŕ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;radic;&quot;</span>: <span class="string">&quot;√&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;raemptyv;&quot;</span>: <span class="string">&quot;⦳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rang;&quot;</span>: <span class="string">&quot;⟩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rangd;&quot;</span>: <span class="string">&quot;⦒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;range;&quot;</span>: <span class="string">&quot;⦥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rangle;&quot;</span>: <span class="string">&quot;⟩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;raquo&quot;</span>: <span class="string">&quot;»&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;raquo;&quot;</span>: <span class="string">&quot;»&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rarr;&quot;</span>: <span class="string">&quot;→&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rarrap;&quot;</span>: <span class="string">&quot;⥵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rarrb;&quot;</span>: <span class="string">&quot;⇥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rarrbfs;&quot;</span>: <span class="string">&quot;⤠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rarrc;&quot;</span>: <span class="string">&quot;⤳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rarrfs;&quot;</span>: <span class="string">&quot;⤞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rarrhk;&quot;</span>: <span class="string">&quot;↪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rarrlp;&quot;</span>: <span class="string">&quot;↬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rarrpl;&quot;</span>: <span class="string">&quot;⥅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rarrsim;&quot;</span>: <span class="string">&quot;⥴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rarrtl;&quot;</span>: <span class="string">&quot;↣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rarrw;&quot;</span>: <span class="string">&quot;↝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ratail;&quot;</span>: <span class="string">&quot;⤚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ratio;&quot;</span>: <span class="string">&quot;∶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rationals;&quot;</span>: <span class="string">&quot;ℚ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rbarr;&quot;</span>: <span class="string">&quot;⤍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rbbrk;&quot;</span>: <span class="string">&quot;❳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rbrace;&quot;</span>: <span class="string">&quot;&#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rbrack;&quot;</span>: <span class="string">&quot;]&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rbrke;&quot;</span>: <span class="string">&quot;⦌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rbrksld;&quot;</span>: <span class="string">&quot;⦎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rbrkslu;&quot;</span>: <span class="string">&quot;⦐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rcaron;&quot;</span>: <span class="string">&quot;ř&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rcedil;&quot;</span>: <span class="string">&quot;ŗ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rceil;&quot;</span>: <span class="string">&quot;⌉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rcub;&quot;</span>: <span class="string">&quot;&#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rcy;&quot;</span>: <span class="string">&quot;р&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rdca;&quot;</span>: <span class="string">&quot;⤷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rdldhar;&quot;</span>: <span class="string">&quot;⥩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rdquo;&quot;</span>: <span class="string">&quot;”&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rdquor;&quot;</span>: <span class="string">&quot;”&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rdsh;&quot;</span>: <span class="string">&quot;↳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;real;&quot;</span>: <span class="string">&quot;ℜ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;realine;&quot;</span>: <span class="string">&quot;ℛ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;realpart;&quot;</span>: <span class="string">&quot;ℜ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;reals;&quot;</span>: <span class="string">&quot;ℝ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rect;&quot;</span>: <span class="string">&quot;▭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;reg&quot;</span>: <span class="string">&quot;®&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;reg;&quot;</span>: <span class="string">&quot;®&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rfisht;&quot;</span>: <span class="string">&quot;⥽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rfloor;&quot;</span>: <span class="string">&quot;⌋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rfr;&quot;</span>: <span class="string">&quot;𝔯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rhard;&quot;</span>: <span class="string">&quot;⇁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rharu;&quot;</span>: <span class="string">&quot;⇀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rharul;&quot;</span>: <span class="string">&quot;⥬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rho;&quot;</span>: <span class="string">&quot;ρ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rhov;&quot;</span>: <span class="string">&quot;ϱ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rightarrow;&quot;</span>: <span class="string">&quot;→&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rightarrowtail;&quot;</span>: <span class="string">&quot;↣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rightharpoondown;&quot;</span>: <span class="string">&quot;⇁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rightharpoonup;&quot;</span>: <span class="string">&quot;⇀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rightleftarrows;&quot;</span>: <span class="string">&quot;⇄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rightleftharpoons;&quot;</span>: <span class="string">&quot;⇌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rightrightarrows;&quot;</span>: <span class="string">&quot;⇉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rightsquigarrow;&quot;</span>: <span class="string">&quot;↝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rightthreetimes;&quot;</span>: <span class="string">&quot;⋌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ring;&quot;</span>: <span class="string">&quot;˚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;risingdotseq;&quot;</span>: <span class="string">&quot;≓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rlarr;&quot;</span>: <span class="string">&quot;⇄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rlhar;&quot;</span>: <span class="string">&quot;⇌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rlm;&quot;</span>: <span class="string">&quot;‏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rmoust;&quot;</span>: <span class="string">&quot;⎱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rmoustache;&quot;</span>: <span class="string">&quot;⎱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rnmid;&quot;</span>: <span class="string">&quot;⫮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;roang;&quot;</span>: <span class="string">&quot;⟭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;roarr;&quot;</span>: <span class="string">&quot;⇾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;robrk;&quot;</span>: <span class="string">&quot;⟧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ropar;&quot;</span>: <span class="string">&quot;⦆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ropf;&quot;</span>: <span class="string">&quot;𝕣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;roplus;&quot;</span>: <span class="string">&quot;⨮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rotimes;&quot;</span>: <span class="string">&quot;⨵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rpar;&quot;</span>: <span class="string">&quot;)&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rpargt;&quot;</span>: <span class="string">&quot;⦔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rppolint;&quot;</span>: <span class="string">&quot;⨒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rrarr;&quot;</span>: <span class="string">&quot;⇉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rsaquo;&quot;</span>: <span class="string">&quot;›&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rscr;&quot;</span>: <span class="string">&quot;𝓇&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rsh;&quot;</span>: <span class="string">&quot;↱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rsqb;&quot;</span>: <span class="string">&quot;]&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rsquo;&quot;</span>: <span class="string">&quot;’&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rsquor;&quot;</span>: <span class="string">&quot;’&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rthree;&quot;</span>: <span class="string">&quot;⋌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rtimes;&quot;</span>: <span class="string">&quot;⋊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rtri;&quot;</span>: <span class="string">&quot;▹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rtrie;&quot;</span>: <span class="string">&quot;⊵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rtrif;&quot;</span>: <span class="string">&quot;▸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rtriltri;&quot;</span>: <span class="string">&quot;⧎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ruluhar;&quot;</span>: <span class="string">&quot;⥨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;rx;&quot;</span>: <span class="string">&quot;℞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sacute;&quot;</span>: <span class="string">&quot;ś&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sbquo;&quot;</span>: <span class="string">&quot;‚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sc;&quot;</span>: <span class="string">&quot;≻&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;scE;&quot;</span>: <span class="string">&quot;⪴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;scap;&quot;</span>: <span class="string">&quot;⪸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;scaron;&quot;</span>: <span class="string">&quot;š&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sccue;&quot;</span>: <span class="string">&quot;≽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sce;&quot;</span>: <span class="string">&quot;⪰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;scedil;&quot;</span>: <span class="string">&quot;ş&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;scirc;&quot;</span>: <span class="string">&quot;ŝ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;scnE;&quot;</span>: <span class="string">&quot;⪶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;scnap;&quot;</span>: <span class="string">&quot;⪺&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;scnsim;&quot;</span>: <span class="string">&quot;⋩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;scpolint;&quot;</span>: <span class="string">&quot;⨓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;scsim;&quot;</span>: <span class="string">&quot;≿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;scy;&quot;</span>: <span class="string">&quot;с&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sdot;&quot;</span>: <span class="string">&quot;⋅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sdotb;&quot;</span>: <span class="string">&quot;⊡&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sdote;&quot;</span>: <span class="string">&quot;⩦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;seArr;&quot;</span>: <span class="string">&quot;⇘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;searhk;&quot;</span>: <span class="string">&quot;⤥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;searr;&quot;</span>: <span class="string">&quot;↘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;searrow;&quot;</span>: <span class="string">&quot;↘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sect&quot;</span>: <span class="string">&quot;§&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sect;&quot;</span>: <span class="string">&quot;§&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;semi;&quot;</span>: <span class="string">&quot;;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;seswar;&quot;</span>: <span class="string">&quot;⤩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;setminus;&quot;</span>: <span class="string">&quot;∖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;setmn;&quot;</span>: <span class="string">&quot;∖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sext;&quot;</span>: <span class="string">&quot;✶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sfr;&quot;</span>: <span class="string">&quot;𝔰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sfrown;&quot;</span>: <span class="string">&quot;⌢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sharp;&quot;</span>: <span class="string">&quot;♯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;shchcy;&quot;</span>: <span class="string">&quot;щ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;shcy;&quot;</span>: <span class="string">&quot;ш&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;shortmid;&quot;</span>: <span class="string">&quot;∣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;shortparallel;&quot;</span>: <span class="string">&quot;∥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;shy&quot;</span>: <span class="string">&quot;­&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;shy;&quot;</span>: <span class="string">&quot;­&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sigma;&quot;</span>: <span class="string">&quot;σ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sigmaf;&quot;</span>: <span class="string">&quot;ς&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sigmav;&quot;</span>: <span class="string">&quot;ς&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sim;&quot;</span>: <span class="string">&quot;∼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;simdot;&quot;</span>: <span class="string">&quot;⩪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sime;&quot;</span>: <span class="string">&quot;≃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;simeq;&quot;</span>: <span class="string">&quot;≃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;simg;&quot;</span>: <span class="string">&quot;⪞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;simgE;&quot;</span>: <span class="string">&quot;⪠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;siml;&quot;</span>: <span class="string">&quot;⪝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;simlE;&quot;</span>: <span class="string">&quot;⪟&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;simne;&quot;</span>: <span class="string">&quot;≆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;simplus;&quot;</span>: <span class="string">&quot;⨤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;simrarr;&quot;</span>: <span class="string">&quot;⥲&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;slarr;&quot;</span>: <span class="string">&quot;←&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;smallsetminus;&quot;</span>: <span class="string">&quot;∖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;smashp;&quot;</span>: <span class="string">&quot;⨳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;smeparsl;&quot;</span>: <span class="string">&quot;⧤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;smid;&quot;</span>: <span class="string">&quot;∣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;smile;&quot;</span>: <span class="string">&quot;⌣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;smt;&quot;</span>: <span class="string">&quot;⪪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;smte;&quot;</span>: <span class="string">&quot;⪬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;smtes;&quot;</span>: <span class="string">&quot;⪬︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;softcy;&quot;</span>: <span class="string">&quot;ь&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sol;&quot;</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;solb;&quot;</span>: <span class="string">&quot;⧄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;solbar;&quot;</span>: <span class="string">&quot;⌿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sopf;&quot;</span>: <span class="string">&quot;𝕤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;spades;&quot;</span>: <span class="string">&quot;♠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;spadesuit;&quot;</span>: <span class="string">&quot;♠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;spar;&quot;</span>: <span class="string">&quot;∥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sqcap;&quot;</span>: <span class="string">&quot;⊓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sqcaps;&quot;</span>: <span class="string">&quot;⊓︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sqcup;&quot;</span>: <span class="string">&quot;⊔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sqcups;&quot;</span>: <span class="string">&quot;⊔︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sqsub;&quot;</span>: <span class="string">&quot;⊏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sqsube;&quot;</span>: <span class="string">&quot;⊑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sqsubset;&quot;</span>: <span class="string">&quot;⊏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sqsubseteq;&quot;</span>: <span class="string">&quot;⊑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sqsup;&quot;</span>: <span class="string">&quot;⊐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sqsupe;&quot;</span>: <span class="string">&quot;⊒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sqsupset;&quot;</span>: <span class="string">&quot;⊐&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sqsupseteq;&quot;</span>: <span class="string">&quot;⊒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;squ;&quot;</span>: <span class="string">&quot;□&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;square;&quot;</span>: <span class="string">&quot;□&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;squarf;&quot;</span>: <span class="string">&quot;▪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;squf;&quot;</span>: <span class="string">&quot;▪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;srarr;&quot;</span>: <span class="string">&quot;→&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sscr;&quot;</span>: <span class="string">&quot;𝓈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ssetmn;&quot;</span>: <span class="string">&quot;∖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ssmile;&quot;</span>: <span class="string">&quot;⌣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sstarf;&quot;</span>: <span class="string">&quot;⋆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;star;&quot;</span>: <span class="string">&quot;☆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;starf;&quot;</span>: <span class="string">&quot;★&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;straightepsilon;&quot;</span>: <span class="string">&quot;ϵ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;straightphi;&quot;</span>: <span class="string">&quot;ϕ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;strns;&quot;</span>: <span class="string">&quot;¯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sub;&quot;</span>: <span class="string">&quot;⊂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;subE;&quot;</span>: <span class="string">&quot;⫅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;subdot;&quot;</span>: <span class="string">&quot;⪽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sube;&quot;</span>: <span class="string">&quot;⊆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;subedot;&quot;</span>: <span class="string">&quot;⫃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;submult;&quot;</span>: <span class="string">&quot;⫁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;subnE;&quot;</span>: <span class="string">&quot;⫋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;subne;&quot;</span>: <span class="string">&quot;⊊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;subplus;&quot;</span>: <span class="string">&quot;⪿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;subrarr;&quot;</span>: <span class="string">&quot;⥹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;subset;&quot;</span>: <span class="string">&quot;⊂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;subseteq;&quot;</span>: <span class="string">&quot;⊆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;subseteqq;&quot;</span>: <span class="string">&quot;⫅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;subsetneq;&quot;</span>: <span class="string">&quot;⊊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;subsetneqq;&quot;</span>: <span class="string">&quot;⫋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;subsim;&quot;</span>: <span class="string">&quot;⫇&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;subsub;&quot;</span>: <span class="string">&quot;⫕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;subsup;&quot;</span>: <span class="string">&quot;⫓&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;succ;&quot;</span>: <span class="string">&quot;≻&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;succapprox;&quot;</span>: <span class="string">&quot;⪸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;succcurlyeq;&quot;</span>: <span class="string">&quot;≽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;succeq;&quot;</span>: <span class="string">&quot;⪰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;succnapprox;&quot;</span>: <span class="string">&quot;⪺&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;succneqq;&quot;</span>: <span class="string">&quot;⪶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;succnsim;&quot;</span>: <span class="string">&quot;⋩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;succsim;&quot;</span>: <span class="string">&quot;≿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sum;&quot;</span>: <span class="string">&quot;∑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sung;&quot;</span>: <span class="string">&quot;♪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sup1&quot;</span>: <span class="string">&quot;¹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sup1;&quot;</span>: <span class="string">&quot;¹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sup2&quot;</span>: <span class="string">&quot;²&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sup2;&quot;</span>: <span class="string">&quot;²&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sup3&quot;</span>: <span class="string">&quot;³&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sup3;&quot;</span>: <span class="string">&quot;³&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;sup;&quot;</span>: <span class="string">&quot;⊃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;supE;&quot;</span>: <span class="string">&quot;⫆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;supdot;&quot;</span>: <span class="string">&quot;⪾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;supdsub;&quot;</span>: <span class="string">&quot;⫘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;supe;&quot;</span>: <span class="string">&quot;⊇&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;supedot;&quot;</span>: <span class="string">&quot;⫄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;suphsol;&quot;</span>: <span class="string">&quot;⟉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;suphsub;&quot;</span>: <span class="string">&quot;⫗&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;suplarr;&quot;</span>: <span class="string">&quot;⥻&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;supmult;&quot;</span>: <span class="string">&quot;⫂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;supnE;&quot;</span>: <span class="string">&quot;⫌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;supne;&quot;</span>: <span class="string">&quot;⊋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;supplus;&quot;</span>: <span class="string">&quot;⫀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;supset;&quot;</span>: <span class="string">&quot;⊃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;supseteq;&quot;</span>: <span class="string">&quot;⊇&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;supseteqq;&quot;</span>: <span class="string">&quot;⫆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;supsetneq;&quot;</span>: <span class="string">&quot;⊋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;supsetneqq;&quot;</span>: <span class="string">&quot;⫌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;supsim;&quot;</span>: <span class="string">&quot;⫈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;supsub;&quot;</span>: <span class="string">&quot;⫔&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;supsup;&quot;</span>: <span class="string">&quot;⫖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;swArr;&quot;</span>: <span class="string">&quot;⇙&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;swarhk;&quot;</span>: <span class="string">&quot;⤦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;swarr;&quot;</span>: <span class="string">&quot;↙&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;swarrow;&quot;</span>: <span class="string">&quot;↙&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;swnwar;&quot;</span>: <span class="string">&quot;⤪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;szlig&quot;</span>: <span class="string">&quot;ß&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;szlig;&quot;</span>: <span class="string">&quot;ß&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;target;&quot;</span>: <span class="string">&quot;⌖&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;tau;&quot;</span>: <span class="string">&quot;τ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;tbrk;&quot;</span>: <span class="string">&quot;⎴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;tcaron;&quot;</span>: <span class="string">&quot;ť&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;tcedil;&quot;</span>: <span class="string">&quot;ţ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;tcy;&quot;</span>: <span class="string">&quot;т&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;tdot;&quot;</span>: <span class="string">&quot;⃛&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;telrec;&quot;</span>: <span class="string">&quot;⌕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;tfr;&quot;</span>: <span class="string">&quot;𝔱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;there4;&quot;</span>: <span class="string">&quot;∴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;therefore;&quot;</span>: <span class="string">&quot;∴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;theta;&quot;</span>: <span class="string">&quot;θ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;thetasym;&quot;</span>: <span class="string">&quot;ϑ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;thetav;&quot;</span>: <span class="string">&quot;ϑ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;thickapprox;&quot;</span>: <span class="string">&quot;≈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;thicksim;&quot;</span>: <span class="string">&quot;∼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;thinsp;&quot;</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;thkap;&quot;</span>: <span class="string">&quot;≈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;thksim;&quot;</span>: <span class="string">&quot;∼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;thorn&quot;</span>: <span class="string">&quot;þ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;thorn;&quot;</span>: <span class="string">&quot;þ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;tilde;&quot;</span>: <span class="string">&quot;˜&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;times&quot;</span>: <span class="string">&quot;×&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;times;&quot;</span>: <span class="string">&quot;×&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;timesb;&quot;</span>: <span class="string">&quot;⊠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;timesbar;&quot;</span>: <span class="string">&quot;⨱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;timesd;&quot;</span>: <span class="string">&quot;⨰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;tint;&quot;</span>: <span class="string">&quot;∭&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;toea;&quot;</span>: <span class="string">&quot;⤨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;top;&quot;</span>: <span class="string">&quot;⊤&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;topbot;&quot;</span>: <span class="string">&quot;⌶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;topcir;&quot;</span>: <span class="string">&quot;⫱&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;topf;&quot;</span>: <span class="string">&quot;𝕥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;topfork;&quot;</span>: <span class="string">&quot;⫚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;tosa;&quot;</span>: <span class="string">&quot;⤩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;tprime;&quot;</span>: <span class="string">&quot;‴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;trade;&quot;</span>: <span class="string">&quot;™&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;triangle;&quot;</span>: <span class="string">&quot;▵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;triangledown;&quot;</span>: <span class="string">&quot;▿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;triangleleft;&quot;</span>: <span class="string">&quot;◃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;trianglelefteq;&quot;</span>: <span class="string">&quot;⊴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;triangleq;&quot;</span>: <span class="string">&quot;≜&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;triangleright;&quot;</span>: <span class="string">&quot;▹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;trianglerighteq;&quot;</span>: <span class="string">&quot;⊵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;tridot;&quot;</span>: <span class="string">&quot;◬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;trie;&quot;</span>: <span class="string">&quot;≜&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;triminus;&quot;</span>: <span class="string">&quot;⨺&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;triplus;&quot;</span>: <span class="string">&quot;⨹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;trisb;&quot;</span>: <span class="string">&quot;⧍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;tritime;&quot;</span>: <span class="string">&quot;⨻&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;trpezium;&quot;</span>: <span class="string">&quot;⏢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;tscr;&quot;</span>: <span class="string">&quot;𝓉&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;tscy;&quot;</span>: <span class="string">&quot;ц&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;tshcy;&quot;</span>: <span class="string">&quot;ћ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;tstrok;&quot;</span>: <span class="string">&quot;ŧ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;twixt;&quot;</span>: <span class="string">&quot;≬&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;twoheadleftarrow;&quot;</span>: <span class="string">&quot;↞&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;twoheadrightarrow;&quot;</span>: <span class="string">&quot;↠&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uArr;&quot;</span>: <span class="string">&quot;⇑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uHar;&quot;</span>: <span class="string">&quot;⥣&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uacute&quot;</span>: <span class="string">&quot;ú&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uacute;&quot;</span>: <span class="string">&quot;ú&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uarr;&quot;</span>: <span class="string">&quot;↑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ubrcy;&quot;</span>: <span class="string">&quot;ў&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ubreve;&quot;</span>: <span class="string">&quot;ŭ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ucirc&quot;</span>: <span class="string">&quot;û&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ucirc;&quot;</span>: <span class="string">&quot;û&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ucy;&quot;</span>: <span class="string">&quot;у&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;udarr;&quot;</span>: <span class="string">&quot;⇅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;udblac;&quot;</span>: <span class="string">&quot;ű&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;udhar;&quot;</span>: <span class="string">&quot;⥮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ufisht;&quot;</span>: <span class="string">&quot;⥾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ufr;&quot;</span>: <span class="string">&quot;𝔲&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ugrave&quot;</span>: <span class="string">&quot;ù&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ugrave;&quot;</span>: <span class="string">&quot;ù&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uharl;&quot;</span>: <span class="string">&quot;↿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uharr;&quot;</span>: <span class="string">&quot;↾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uhblk;&quot;</span>: <span class="string">&quot;▀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ulcorn;&quot;</span>: <span class="string">&quot;⌜&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ulcorner;&quot;</span>: <span class="string">&quot;⌜&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ulcrop;&quot;</span>: <span class="string">&quot;⌏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ultri;&quot;</span>: <span class="string">&quot;◸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;umacr;&quot;</span>: <span class="string">&quot;ū&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uml&quot;</span>: <span class="string">&quot;¨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uml;&quot;</span>: <span class="string">&quot;¨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uogon;&quot;</span>: <span class="string">&quot;ų&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uopf;&quot;</span>: <span class="string">&quot;𝕦&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uparrow;&quot;</span>: <span class="string">&quot;↑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;updownarrow;&quot;</span>: <span class="string">&quot;↕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;upharpoonleft;&quot;</span>: <span class="string">&quot;↿&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;upharpoonright;&quot;</span>: <span class="string">&quot;↾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uplus;&quot;</span>: <span class="string">&quot;⊎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;upsi;&quot;</span>: <span class="string">&quot;υ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;upsih;&quot;</span>: <span class="string">&quot;ϒ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;upsilon;&quot;</span>: <span class="string">&quot;υ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;upuparrows;&quot;</span>: <span class="string">&quot;⇈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;urcorn;&quot;</span>: <span class="string">&quot;⌝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;urcorner;&quot;</span>: <span class="string">&quot;⌝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;urcrop;&quot;</span>: <span class="string">&quot;⌎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uring;&quot;</span>: <span class="string">&quot;ů&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;urtri;&quot;</span>: <span class="string">&quot;◹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uscr;&quot;</span>: <span class="string">&quot;𝓊&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;utdot;&quot;</span>: <span class="string">&quot;⋰&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;utilde;&quot;</span>: <span class="string">&quot;ũ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;utri;&quot;</span>: <span class="string">&quot;▵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;utrif;&quot;</span>: <span class="string">&quot;▴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uuarr;&quot;</span>: <span class="string">&quot;⇈&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uuml&quot;</span>: <span class="string">&quot;ü&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uuml;&quot;</span>: <span class="string">&quot;ü&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;uwangle;&quot;</span>: <span class="string">&quot;⦧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vArr;&quot;</span>: <span class="string">&quot;⇕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vBar;&quot;</span>: <span class="string">&quot;⫨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vBarv;&quot;</span>: <span class="string">&quot;⫩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vDash;&quot;</span>: <span class="string">&quot;⊨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vangrt;&quot;</span>: <span class="string">&quot;⦜&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;varepsilon;&quot;</span>: <span class="string">&quot;ϵ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;varkappa;&quot;</span>: <span class="string">&quot;ϰ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;varnothing;&quot;</span>: <span class="string">&quot;∅&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;varphi;&quot;</span>: <span class="string">&quot;ϕ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;varpi;&quot;</span>: <span class="string">&quot;ϖ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;varpropto;&quot;</span>: <span class="string">&quot;∝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;varr;&quot;</span>: <span class="string">&quot;↕&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;varrho;&quot;</span>: <span class="string">&quot;ϱ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;varsigma;&quot;</span>: <span class="string">&quot;ς&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;varsubsetneq;&quot;</span>: <span class="string">&quot;⊊︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;varsubsetneqq;&quot;</span>: <span class="string">&quot;⫋︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;varsupsetneq;&quot;</span>: <span class="string">&quot;⊋︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;varsupsetneqq;&quot;</span>: <span class="string">&quot;⫌︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vartheta;&quot;</span>: <span class="string">&quot;ϑ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vartriangleleft;&quot;</span>: <span class="string">&quot;⊲&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vartriangleright;&quot;</span>: <span class="string">&quot;⊳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vcy;&quot;</span>: <span class="string">&quot;в&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vdash;&quot;</span>: <span class="string">&quot;⊢&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vee;&quot;</span>: <span class="string">&quot;∨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;veebar;&quot;</span>: <span class="string">&quot;⊻&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;veeeq;&quot;</span>: <span class="string">&quot;≚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vellip;&quot;</span>: <span class="string">&quot;⋮&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;verbar;&quot;</span>: <span class="string">&quot;|&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vert;&quot;</span>: <span class="string">&quot;|&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vfr;&quot;</span>: <span class="string">&quot;𝔳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vltri;&quot;</span>: <span class="string">&quot;⊲&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vnsub;&quot;</span>: <span class="string">&quot;⊂⃒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vnsup;&quot;</span>: <span class="string">&quot;⊃⃒&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vopf;&quot;</span>: <span class="string">&quot;𝕧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vprop;&quot;</span>: <span class="string">&quot;∝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vrtri;&quot;</span>: <span class="string">&quot;⊳&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vscr;&quot;</span>: <span class="string">&quot;𝓋&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vsubnE;&quot;</span>: <span class="string">&quot;⫋︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vsubne;&quot;</span>: <span class="string">&quot;⊊︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vsupnE;&quot;</span>: <span class="string">&quot;⫌︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vsupne;&quot;</span>: <span class="string">&quot;⊋︀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;vzigzag;&quot;</span>: <span class="string">&quot;⦚&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;wcirc;&quot;</span>: <span class="string">&quot;ŵ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;wedbar;&quot;</span>: <span class="string">&quot;⩟&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;wedge;&quot;</span>: <span class="string">&quot;∧&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;wedgeq;&quot;</span>: <span class="string">&quot;≙&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;weierp;&quot;</span>: <span class="string">&quot;℘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;wfr;&quot;</span>: <span class="string">&quot;𝔴&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;wopf;&quot;</span>: <span class="string">&quot;𝕨&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;wp;&quot;</span>: <span class="string">&quot;℘&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;wr;&quot;</span>: <span class="string">&quot;≀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;wreath;&quot;</span>: <span class="string">&quot;≀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;wscr;&quot;</span>: <span class="string">&quot;𝓌&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xcap;&quot;</span>: <span class="string">&quot;⋂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xcirc;&quot;</span>: <span class="string">&quot;◯&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xcup;&quot;</span>: <span class="string">&quot;⋃&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xdtri;&quot;</span>: <span class="string">&quot;▽&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xfr;&quot;</span>: <span class="string">&quot;𝔵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xhArr;&quot;</span>: <span class="string">&quot;⟺&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xharr;&quot;</span>: <span class="string">&quot;⟷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xi;&quot;</span>: <span class="string">&quot;ξ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xlArr;&quot;</span>: <span class="string">&quot;⟸&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xlarr;&quot;</span>: <span class="string">&quot;⟵&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xmap;&quot;</span>: <span class="string">&quot;⟼&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xnis;&quot;</span>: <span class="string">&quot;⋻&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xodot;&quot;</span>: <span class="string">&quot;⨀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xopf;&quot;</span>: <span class="string">&quot;𝕩&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xoplus;&quot;</span>: <span class="string">&quot;⨁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xotime;&quot;</span>: <span class="string">&quot;⨂&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xrArr;&quot;</span>: <span class="string">&quot;⟹&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xrarr;&quot;</span>: <span class="string">&quot;⟶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xscr;&quot;</span>: <span class="string">&quot;𝓍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xsqcup;&quot;</span>: <span class="string">&quot;⨆&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xuplus;&quot;</span>: <span class="string">&quot;⨄&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xutri;&quot;</span>: <span class="string">&quot;△&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xvee;&quot;</span>: <span class="string">&quot;⋁&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;xwedge;&quot;</span>: <span class="string">&quot;⋀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;yacute&quot;</span>: <span class="string">&quot;ý&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;yacute;&quot;</span>: <span class="string">&quot;ý&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;yacy;&quot;</span>: <span class="string">&quot;я&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ycirc;&quot;</span>: <span class="string">&quot;ŷ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;ycy;&quot;</span>: <span class="string">&quot;ы&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;yen&quot;</span>: <span class="string">&quot;¥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;yen;&quot;</span>: <span class="string">&quot;¥&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;yfr;&quot;</span>: <span class="string">&quot;𝔶&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;yicy;&quot;</span>: <span class="string">&quot;ї&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;yopf;&quot;</span>: <span class="string">&quot;𝕪&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;yscr;&quot;</span>: <span class="string">&quot;𝓎&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;yucy;&quot;</span>: <span class="string">&quot;ю&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;yuml&quot;</span>: <span class="string">&quot;ÿ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;yuml;&quot;</span>: <span class="string">&quot;ÿ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;zacute;&quot;</span>: <span class="string">&quot;ź&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;zcaron;&quot;</span>: <span class="string">&quot;ž&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;zcy;&quot;</span>: <span class="string">&quot;з&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;zdot;&quot;</span>: <span class="string">&quot;ż&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;zeetrf;&quot;</span>: <span class="string">&quot;ℨ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;zeta;&quot;</span>: <span class="string">&quot;ζ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;zfr;&quot;</span>: <span class="string">&quot;𝔷&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;zhcy;&quot;</span>: <span class="string">&quot;ж&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;zigrarr;&quot;</span>: <span class="string">&quot;⇝&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;zopf;&quot;</span>: <span class="string">&quot;𝕫&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;zscr;&quot;</span>: <span class="string">&quot;𝓏&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;zwj;&quot;</span>: <span class="string">&quot;‍&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;zwnj;&quot;</span>: <span class="string">&quot;‌&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">characters</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Æ&quot;</span>: <span class="string">&quot;&amp;AElig;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&amp;&quot;</span>: <span class="string">&quot;&amp;amp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Á&quot;</span>: <span class="string">&quot;&amp;Aacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ă&quot;</span>: <span class="string">&quot;&amp;Abreve;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Â&quot;</span>: <span class="string">&quot;&amp;Acirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;А&quot;</span>: <span class="string">&quot;&amp;Acy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔄&quot;</span>: <span class="string">&quot;&amp;Afr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;À&quot;</span>: <span class="string">&quot;&amp;Agrave;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Α&quot;</span>: <span class="string">&quot;&amp;Alpha;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ā&quot;</span>: <span class="string">&quot;&amp;Amacr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩓&quot;</span>: <span class="string">&quot;&amp;And;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ą&quot;</span>: <span class="string">&quot;&amp;Aogon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔸&quot;</span>: <span class="string">&quot;&amp;Aopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⁡&quot;</span>: <span class="string">&quot;&amp;af;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Å&quot;</span>: <span class="string">&quot;&amp;angst;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒜&quot;</span>: <span class="string">&quot;&amp;Ascr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≔&quot;</span>: <span class="string">&quot;&amp;coloneq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ã&quot;</span>: <span class="string">&quot;&amp;Atilde;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ä&quot;</span>: <span class="string">&quot;&amp;Auml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∖&quot;</span>: <span class="string">&quot;&amp;ssetmn;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫧&quot;</span>: <span class="string">&quot;&amp;Barv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌆&quot;</span>: <span class="string">&quot;&amp;doublebarwedge;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Б&quot;</span>: <span class="string">&quot;&amp;Bcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∵&quot;</span>: <span class="string">&quot;&amp;because;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℬ&quot;</span>: <span class="string">&quot;&amp;bernou;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Β&quot;</span>: <span class="string">&quot;&amp;Beta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔅&quot;</span>: <span class="string">&quot;&amp;Bfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔹&quot;</span>: <span class="string">&quot;&amp;Bopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;˘&quot;</span>: <span class="string">&quot;&amp;breve;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≎&quot;</span>: <span class="string">&quot;&amp;bump;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ч&quot;</span>: <span class="string">&quot;&amp;CHcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;©&quot;</span>: <span class="string">&quot;&amp;copy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ć&quot;</span>: <span class="string">&quot;&amp;Cacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋒&quot;</span>: <span class="string">&quot;&amp;Cap;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ⅅ&quot;</span>: <span class="string">&quot;&amp;DD;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℭ&quot;</span>: <span class="string">&quot;&amp;Cfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Č&quot;</span>: <span class="string">&quot;&amp;Ccaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ç&quot;</span>: <span class="string">&quot;&amp;Ccedil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ĉ&quot;</span>: <span class="string">&quot;&amp;Ccirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∰&quot;</span>: <span class="string">&quot;&amp;Cconint;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ċ&quot;</span>: <span class="string">&quot;&amp;Cdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¸&quot;</span>: <span class="string">&quot;&amp;cedil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;·&quot;</span>: <span class="string">&quot;&amp;middot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Χ&quot;</span>: <span class="string">&quot;&amp;Chi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊙&quot;</span>: <span class="string">&quot;&amp;odot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊖&quot;</span>: <span class="string">&quot;&amp;ominus;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊕&quot;</span>: <span class="string">&quot;&amp;oplus;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊗&quot;</span>: <span class="string">&quot;&amp;otimes;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∲&quot;</span>: <span class="string">&quot;&amp;cwconint;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;”&quot;</span>: <span class="string">&quot;&amp;rdquor;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;’&quot;</span>: <span class="string">&quot;&amp;rsquor;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∷&quot;</span>: <span class="string">&quot;&amp;Proportion;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩴&quot;</span>: <span class="string">&quot;&amp;Colone;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≡&quot;</span>: <span class="string">&quot;&amp;equiv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∯&quot;</span>: <span class="string">&quot;&amp;DoubleContourIntegral;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∮&quot;</span>: <span class="string">&quot;&amp;oint;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℂ&quot;</span>: <span class="string">&quot;&amp;complexes;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∐&quot;</span>: <span class="string">&quot;&amp;coprod;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∳&quot;</span>: <span class="string">&quot;&amp;awconint;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨯&quot;</span>: <span class="string">&quot;&amp;Cross;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒞&quot;</span>: <span class="string">&quot;&amp;Cscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋓&quot;</span>: <span class="string">&quot;&amp;Cup;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≍&quot;</span>: <span class="string">&quot;&amp;asympeq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤑&quot;</span>: <span class="string">&quot;&amp;DDotrahd;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ђ&quot;</span>: <span class="string">&quot;&amp;DJcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ѕ&quot;</span>: <span class="string">&quot;&amp;DScy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Џ&quot;</span>: <span class="string">&quot;&amp;DZcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‡&quot;</span>: <span class="string">&quot;&amp;ddagger;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↡&quot;</span>: <span class="string">&quot;&amp;Darr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫤&quot;</span>: <span class="string">&quot;&amp;DoubleLeftTee;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ď&quot;</span>: <span class="string">&quot;&amp;Dcaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Д&quot;</span>: <span class="string">&quot;&amp;Dcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∇&quot;</span>: <span class="string">&quot;&amp;nabla;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Δ&quot;</span>: <span class="string">&quot;&amp;Delta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔇&quot;</span>: <span class="string">&quot;&amp;Dfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;´&quot;</span>: <span class="string">&quot;&amp;acute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;˙&quot;</span>: <span class="string">&quot;&amp;dot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;˝&quot;</span>: <span class="string">&quot;&amp;dblac;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;`&quot;</span>: <span class="string">&quot;&amp;grave;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;˜&quot;</span>: <span class="string">&quot;&amp;tilde;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋄&quot;</span>: <span class="string">&quot;&amp;diamond;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ⅆ&quot;</span>: <span class="string">&quot;&amp;dd;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔻&quot;</span>: <span class="string">&quot;&amp;Dopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¨&quot;</span>: <span class="string">&quot;&amp;uml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⃜&quot;</span>: <span class="string">&quot;&amp;DotDot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≐&quot;</span>: <span class="string">&quot;&amp;esdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇓&quot;</span>: <span class="string">&quot;&amp;dArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇐&quot;</span>: <span class="string">&quot;&amp;lArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇔&quot;</span>: <span class="string">&quot;&amp;iff;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⟸&quot;</span>: <span class="string">&quot;&amp;xlArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⟺&quot;</span>: <span class="string">&quot;&amp;xhArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⟹&quot;</span>: <span class="string">&quot;&amp;xrArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇒&quot;</span>: <span class="string">&quot;&amp;rArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊨&quot;</span>: <span class="string">&quot;&amp;vDash;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇑&quot;</span>: <span class="string">&quot;&amp;uArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇕&quot;</span>: <span class="string">&quot;&amp;vArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∥&quot;</span>: <span class="string">&quot;&amp;spar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↓&quot;</span>: <span class="string">&quot;&amp;downarrow;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤓&quot;</span>: <span class="string">&quot;&amp;DownArrowBar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇵&quot;</span>: <span class="string">&quot;&amp;duarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;̑&quot;</span>: <span class="string">&quot;&amp;DownBreve;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥐&quot;</span>: <span class="string">&quot;&amp;DownLeftRightVector;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥞&quot;</span>: <span class="string">&quot;&amp;DownLeftTeeVector;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↽&quot;</span>: <span class="string">&quot;&amp;lhard;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥖&quot;</span>: <span class="string">&quot;&amp;DownLeftVectorBar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥟&quot;</span>: <span class="string">&quot;&amp;DownRightTeeVector;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇁&quot;</span>: <span class="string">&quot;&amp;rightharpoondown;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥗&quot;</span>: <span class="string">&quot;&amp;DownRightVectorBar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊤&quot;</span>: <span class="string">&quot;&amp;top;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↧&quot;</span>: <span class="string">&quot;&amp;mapstodown;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒟&quot;</span>: <span class="string">&quot;&amp;Dscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Đ&quot;</span>: <span class="string">&quot;&amp;Dstrok;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ŋ&quot;</span>: <span class="string">&quot;&amp;ENG;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ð&quot;</span>: <span class="string">&quot;&amp;ETH;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;É&quot;</span>: <span class="string">&quot;&amp;Eacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ě&quot;</span>: <span class="string">&quot;&amp;Ecaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ê&quot;</span>: <span class="string">&quot;&amp;Ecirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Э&quot;</span>: <span class="string">&quot;&amp;Ecy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ė&quot;</span>: <span class="string">&quot;&amp;Edot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔈&quot;</span>: <span class="string">&quot;&amp;Efr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;È&quot;</span>: <span class="string">&quot;&amp;Egrave;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∈&quot;</span>: <span class="string">&quot;&amp;isinv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ē&quot;</span>: <span class="string">&quot;&amp;Emacr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;◻&quot;</span>: <span class="string">&quot;&amp;EmptySmallSquare;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;▫&quot;</span>: <span class="string">&quot;&amp;EmptyVerySmallSquare;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ę&quot;</span>: <span class="string">&quot;&amp;Eogon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔼&quot;</span>: <span class="string">&quot;&amp;Eopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ε&quot;</span>: <span class="string">&quot;&amp;Epsilon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩵&quot;</span>: <span class="string">&quot;&amp;Equal;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≂&quot;</span>: <span class="string">&quot;&amp;esim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇌&quot;</span>: <span class="string">&quot;&amp;rlhar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℰ&quot;</span>: <span class="string">&quot;&amp;expectation;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩳&quot;</span>: <span class="string">&quot;&amp;Esim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Η&quot;</span>: <span class="string">&quot;&amp;Eta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ë&quot;</span>: <span class="string">&quot;&amp;Euml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∃&quot;</span>: <span class="string">&quot;&amp;exist;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ⅇ&quot;</span>: <span class="string">&quot;&amp;exponentiale;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ф&quot;</span>: <span class="string">&quot;&amp;Fcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔉&quot;</span>: <span class="string">&quot;&amp;Ffr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;◼&quot;</span>: <span class="string">&quot;&amp;FilledSmallSquare;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;▪&quot;</span>: <span class="string">&quot;&amp;squf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔽&quot;</span>: <span class="string">&quot;&amp;Fopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∀&quot;</span>: <span class="string">&quot;&amp;forall;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℱ&quot;</span>: <span class="string">&quot;&amp;Fscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ѓ&quot;</span>: <span class="string">&quot;&amp;GJcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&gt;&quot;</span>: <span class="string">&quot;&amp;gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Γ&quot;</span>: <span class="string">&quot;&amp;Gamma;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ϝ&quot;</span>: <span class="string">&quot;&amp;Gammad;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ğ&quot;</span>: <span class="string">&quot;&amp;Gbreve;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ģ&quot;</span>: <span class="string">&quot;&amp;Gcedil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ĝ&quot;</span>: <span class="string">&quot;&amp;Gcirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Г&quot;</span>: <span class="string">&quot;&amp;Gcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ġ&quot;</span>: <span class="string">&quot;&amp;Gdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔊&quot;</span>: <span class="string">&quot;&amp;Gfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋙&quot;</span>: <span class="string">&quot;&amp;ggg;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔾&quot;</span>: <span class="string">&quot;&amp;Gopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≥&quot;</span>: <span class="string">&quot;&amp;geq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋛&quot;</span>: <span class="string">&quot;&amp;gtreqless;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≧&quot;</span>: <span class="string">&quot;&amp;geqq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪢&quot;</span>: <span class="string">&quot;&amp;GreaterGreater;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≷&quot;</span>: <span class="string">&quot;&amp;gtrless;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩾&quot;</span>: <span class="string">&quot;&amp;ges;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≳&quot;</span>: <span class="string">&quot;&amp;gtrsim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒢&quot;</span>: <span class="string">&quot;&amp;Gscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≫&quot;</span>: <span class="string">&quot;&amp;gg;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ъ&quot;</span>: <span class="string">&quot;&amp;HARDcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ˇ&quot;</span>: <span class="string">&quot;&amp;caron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;^&quot;</span>: <span class="string">&quot;&amp;Hat;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ĥ&quot;</span>: <span class="string">&quot;&amp;Hcirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℌ&quot;</span>: <span class="string">&quot;&amp;Poincareplane;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℋ&quot;</span>: <span class="string">&quot;&amp;hamilt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℍ&quot;</span>: <span class="string">&quot;&amp;quaternions;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;─&quot;</span>: <span class="string">&quot;&amp;boxh;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ħ&quot;</span>: <span class="string">&quot;&amp;Hstrok;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≏&quot;</span>: <span class="string">&quot;&amp;bumpeq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Е&quot;</span>: <span class="string">&quot;&amp;IEcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ĳ&quot;</span>: <span class="string">&quot;&amp;IJlig;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ё&quot;</span>: <span class="string">&quot;&amp;IOcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Í&quot;</span>: <span class="string">&quot;&amp;Iacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Î&quot;</span>: <span class="string">&quot;&amp;Icirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;И&quot;</span>: <span class="string">&quot;&amp;Icy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;İ&quot;</span>: <span class="string">&quot;&amp;Idot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℑ&quot;</span>: <span class="string">&quot;&amp;imagpart;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ì&quot;</span>: <span class="string">&quot;&amp;Igrave;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ī&quot;</span>: <span class="string">&quot;&amp;Imacr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ⅈ&quot;</span>: <span class="string">&quot;&amp;ii;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∬&quot;</span>: <span class="string">&quot;&amp;Int;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∫&quot;</span>: <span class="string">&quot;&amp;int;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋂&quot;</span>: <span class="string">&quot;&amp;xcap;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⁣&quot;</span>: <span class="string">&quot;&amp;ic;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⁢&quot;</span>: <span class="string">&quot;&amp;it;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Į&quot;</span>: <span class="string">&quot;&amp;Iogon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕀&quot;</span>: <span class="string">&quot;&amp;Iopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ι&quot;</span>: <span class="string">&quot;&amp;Iota;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℐ&quot;</span>: <span class="string">&quot;&amp;imagline;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ĩ&quot;</span>: <span class="string">&quot;&amp;Itilde;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;І&quot;</span>: <span class="string">&quot;&amp;Iukcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ï&quot;</span>: <span class="string">&quot;&amp;Iuml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ĵ&quot;</span>: <span class="string">&quot;&amp;Jcirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Й&quot;</span>: <span class="string">&quot;&amp;Jcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔍&quot;</span>: <span class="string">&quot;&amp;Jfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕁&quot;</span>: <span class="string">&quot;&amp;Jopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒥&quot;</span>: <span class="string">&quot;&amp;Jscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ј&quot;</span>: <span class="string">&quot;&amp;Jsercy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Є&quot;</span>: <span class="string">&quot;&amp;Jukcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Х&quot;</span>: <span class="string">&quot;&amp;KHcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ќ&quot;</span>: <span class="string">&quot;&amp;KJcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Κ&quot;</span>: <span class="string">&quot;&amp;Kappa;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ķ&quot;</span>: <span class="string">&quot;&amp;Kcedil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;К&quot;</span>: <span class="string">&quot;&amp;Kcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔎&quot;</span>: <span class="string">&quot;&amp;Kfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕂&quot;</span>: <span class="string">&quot;&amp;Kopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒦&quot;</span>: <span class="string">&quot;&amp;Kscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Љ&quot;</span>: <span class="string">&quot;&amp;LJcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;&quot;</span>: <span class="string">&quot;&amp;lt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ĺ&quot;</span>: <span class="string">&quot;&amp;Lacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Λ&quot;</span>: <span class="string">&quot;&amp;Lambda;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⟪&quot;</span>: <span class="string">&quot;&amp;Lang;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℒ&quot;</span>: <span class="string">&quot;&amp;lagran;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↞&quot;</span>: <span class="string">&quot;&amp;twoheadleftarrow;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ľ&quot;</span>: <span class="string">&quot;&amp;Lcaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ļ&quot;</span>: <span class="string">&quot;&amp;Lcedil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Л&quot;</span>: <span class="string">&quot;&amp;Lcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⟨&quot;</span>: <span class="string">&quot;&amp;langle;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;←&quot;</span>: <span class="string">&quot;&amp;slarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇤&quot;</span>: <span class="string">&quot;&amp;larrb;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇆&quot;</span>: <span class="string">&quot;&amp;lrarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌈&quot;</span>: <span class="string">&quot;&amp;lceil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⟦&quot;</span>: <span class="string">&quot;&amp;lobrk;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥡&quot;</span>: <span class="string">&quot;&amp;LeftDownTeeVector;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇃&quot;</span>: <span class="string">&quot;&amp;downharpoonleft;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥙&quot;</span>: <span class="string">&quot;&amp;LeftDownVectorBar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌊&quot;</span>: <span class="string">&quot;&amp;lfloor;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↔&quot;</span>: <span class="string">&quot;&amp;leftrightarrow;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥎&quot;</span>: <span class="string">&quot;&amp;LeftRightVector;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊣&quot;</span>: <span class="string">&quot;&amp;dashv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↤&quot;</span>: <span class="string">&quot;&amp;mapstoleft;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥚&quot;</span>: <span class="string">&quot;&amp;LeftTeeVector;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊲&quot;</span>: <span class="string">&quot;&amp;vltri;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧏&quot;</span>: <span class="string">&quot;&amp;LeftTriangleBar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊴&quot;</span>: <span class="string">&quot;&amp;trianglelefteq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥑&quot;</span>: <span class="string">&quot;&amp;LeftUpDownVector;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥠&quot;</span>: <span class="string">&quot;&amp;LeftUpTeeVector;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↿&quot;</span>: <span class="string">&quot;&amp;upharpoonleft;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥘&quot;</span>: <span class="string">&quot;&amp;LeftUpVectorBar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↼&quot;</span>: <span class="string">&quot;&amp;lharu;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥒&quot;</span>: <span class="string">&quot;&amp;LeftVectorBar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋚&quot;</span>: <span class="string">&quot;&amp;lesseqgtr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≦&quot;</span>: <span class="string">&quot;&amp;leqq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≶&quot;</span>: <span class="string">&quot;&amp;lg;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪡&quot;</span>: <span class="string">&quot;&amp;LessLess;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩽&quot;</span>: <span class="string">&quot;&amp;les;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≲&quot;</span>: <span class="string">&quot;&amp;lsim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔏&quot;</span>: <span class="string">&quot;&amp;Lfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋘&quot;</span>: <span class="string">&quot;&amp;Ll;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇚&quot;</span>: <span class="string">&quot;&amp;lAarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ŀ&quot;</span>: <span class="string">&quot;&amp;Lmidot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⟵&quot;</span>: <span class="string">&quot;&amp;xlarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⟷&quot;</span>: <span class="string">&quot;&amp;xharr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⟶&quot;</span>: <span class="string">&quot;&amp;xrarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕃&quot;</span>: <span class="string">&quot;&amp;Lopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↙&quot;</span>: <span class="string">&quot;&amp;swarrow;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↘&quot;</span>: <span class="string">&quot;&amp;searrow;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↰&quot;</span>: <span class="string">&quot;&amp;lsh;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ł&quot;</span>: <span class="string">&quot;&amp;Lstrok;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≪&quot;</span>: <span class="string">&quot;&amp;ll;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤅&quot;</span>: <span class="string">&quot;&amp;Map;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;М&quot;</span>: <span class="string">&quot;&amp;Mcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot; &quot;</span>: <span class="string">&quot;&amp;MediumSpace;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℳ&quot;</span>: <span class="string">&quot;&amp;phmmat;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔐&quot;</span>: <span class="string">&quot;&amp;Mfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∓&quot;</span>: <span class="string">&quot;&amp;mp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕄&quot;</span>: <span class="string">&quot;&amp;Mopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Μ&quot;</span>: <span class="string">&quot;&amp;Mu;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Њ&quot;</span>: <span class="string">&quot;&amp;NJcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ń&quot;</span>: <span class="string">&quot;&amp;Nacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ň&quot;</span>: <span class="string">&quot;&amp;Ncaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ņ&quot;</span>: <span class="string">&quot;&amp;Ncedil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Н&quot;</span>: <span class="string">&quot;&amp;Ncy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;​&quot;</span>: <span class="string">&quot;&amp;ZeroWidthSpace;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;\n&quot;</span>: <span class="string">&quot;&amp;NewLine;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔑&quot;</span>: <span class="string">&quot;&amp;Nfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⁠&quot;</span>: <span class="string">&quot;&amp;NoBreak;&quot;</span>,</span><br><span class="line">      <span class="string">&quot; &quot;</span>: <span class="string">&quot;&amp;nbsp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℕ&quot;</span>: <span class="string">&quot;&amp;naturals;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫬&quot;</span>: <span class="string">&quot;&amp;Not;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≢&quot;</span>: <span class="string">&quot;&amp;nequiv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≭&quot;</span>: <span class="string">&quot;&amp;NotCupCap;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∦&quot;</span>: <span class="string">&quot;&amp;nspar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∉&quot;</span>: <span class="string">&quot;&amp;notinva;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≠&quot;</span>: <span class="string">&quot;&amp;ne;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≂̸&quot;</span>: <span class="string">&quot;&amp;nesim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∄&quot;</span>: <span class="string">&quot;&amp;nexists;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≯&quot;</span>: <span class="string">&quot;&amp;ngtr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≱&quot;</span>: <span class="string">&quot;&amp;ngeq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≧̸&quot;</span>: <span class="string">&quot;&amp;ngeqq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≫̸&quot;</span>: <span class="string">&quot;&amp;nGtv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≹&quot;</span>: <span class="string">&quot;&amp;ntgl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩾̸&quot;</span>: <span class="string">&quot;&amp;nges;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≵&quot;</span>: <span class="string">&quot;&amp;ngsim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≎̸&quot;</span>: <span class="string">&quot;&amp;nbump;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≏̸&quot;</span>: <span class="string">&quot;&amp;nbumpe;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋪&quot;</span>: <span class="string">&quot;&amp;ntriangleleft;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧏̸&quot;</span>: <span class="string">&quot;&amp;NotLeftTriangleBar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋬&quot;</span>: <span class="string">&quot;&amp;ntrianglelefteq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≮&quot;</span>: <span class="string">&quot;&amp;nlt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≰&quot;</span>: <span class="string">&quot;&amp;nleq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≸&quot;</span>: <span class="string">&quot;&amp;ntlg;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≪̸&quot;</span>: <span class="string">&quot;&amp;nLtv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩽̸&quot;</span>: <span class="string">&quot;&amp;nles;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≴&quot;</span>: <span class="string">&quot;&amp;nlsim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪢̸&quot;</span>: <span class="string">&quot;&amp;NotNestedGreaterGreater;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪡̸&quot;</span>: <span class="string">&quot;&amp;NotNestedLessLess;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊀&quot;</span>: <span class="string">&quot;&amp;nprec;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪯̸&quot;</span>: <span class="string">&quot;&amp;npreceq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋠&quot;</span>: <span class="string">&quot;&amp;nprcue;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∌&quot;</span>: <span class="string">&quot;&amp;notniva;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋫&quot;</span>: <span class="string">&quot;&amp;ntriangleright;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧐̸&quot;</span>: <span class="string">&quot;&amp;NotRightTriangleBar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋭&quot;</span>: <span class="string">&quot;&amp;ntrianglerighteq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊏̸&quot;</span>: <span class="string">&quot;&amp;NotSquareSubset;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋢&quot;</span>: <span class="string">&quot;&amp;nsqsube;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊐̸&quot;</span>: <span class="string">&quot;&amp;NotSquareSuperset;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋣&quot;</span>: <span class="string">&quot;&amp;nsqsupe;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊂⃒&quot;</span>: <span class="string">&quot;&amp;vnsub;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊈&quot;</span>: <span class="string">&quot;&amp;nsubseteq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊁&quot;</span>: <span class="string">&quot;&amp;nsucc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪰̸&quot;</span>: <span class="string">&quot;&amp;nsucceq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋡&quot;</span>: <span class="string">&quot;&amp;nsccue;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≿̸&quot;</span>: <span class="string">&quot;&amp;NotSucceedsTilde;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊃⃒&quot;</span>: <span class="string">&quot;&amp;vnsup;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊉&quot;</span>: <span class="string">&quot;&amp;nsupseteq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≁&quot;</span>: <span class="string">&quot;&amp;nsim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≄&quot;</span>: <span class="string">&quot;&amp;nsimeq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≇&quot;</span>: <span class="string">&quot;&amp;ncong;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≉&quot;</span>: <span class="string">&quot;&amp;napprox;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∤&quot;</span>: <span class="string">&quot;&amp;nsmid;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒩&quot;</span>: <span class="string">&quot;&amp;Nscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ñ&quot;</span>: <span class="string">&quot;&amp;Ntilde;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ν&quot;</span>: <span class="string">&quot;&amp;Nu;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Œ&quot;</span>: <span class="string">&quot;&amp;OElig;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ó&quot;</span>: <span class="string">&quot;&amp;Oacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ô&quot;</span>: <span class="string">&quot;&amp;Ocirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;О&quot;</span>: <span class="string">&quot;&amp;Ocy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ő&quot;</span>: <span class="string">&quot;&amp;Odblac;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔒&quot;</span>: <span class="string">&quot;&amp;Ofr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ò&quot;</span>: <span class="string">&quot;&amp;Ograve;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ō&quot;</span>: <span class="string">&quot;&amp;Omacr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ω&quot;</span>: <span class="string">&quot;&amp;ohm;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ο&quot;</span>: <span class="string">&quot;&amp;Omicron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕆&quot;</span>: <span class="string">&quot;&amp;Oopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;“&quot;</span>: <span class="string">&quot;&amp;ldquo;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‘&quot;</span>: <span class="string">&quot;&amp;lsquo;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩔&quot;</span>: <span class="string">&quot;&amp;Or;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒪&quot;</span>: <span class="string">&quot;&amp;Oscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ø&quot;</span>: <span class="string">&quot;&amp;Oslash;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Õ&quot;</span>: <span class="string">&quot;&amp;Otilde;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨷&quot;</span>: <span class="string">&quot;&amp;Otimes;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ö&quot;</span>: <span class="string">&quot;&amp;Ouml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‾&quot;</span>: <span class="string">&quot;&amp;oline;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⏞&quot;</span>: <span class="string">&quot;&amp;OverBrace;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⎴&quot;</span>: <span class="string">&quot;&amp;tbrk;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⏜&quot;</span>: <span class="string">&quot;&amp;OverParenthesis;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∂&quot;</span>: <span class="string">&quot;&amp;part;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;П&quot;</span>: <span class="string">&quot;&amp;Pcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔓&quot;</span>: <span class="string">&quot;&amp;Pfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Φ&quot;</span>: <span class="string">&quot;&amp;Phi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Π&quot;</span>: <span class="string">&quot;&amp;Pi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;±&quot;</span>: <span class="string">&quot;&amp;pm;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℙ&quot;</span>: <span class="string">&quot;&amp;primes;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪻&quot;</span>: <span class="string">&quot;&amp;Pr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≺&quot;</span>: <span class="string">&quot;&amp;prec;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪯&quot;</span>: <span class="string">&quot;&amp;preceq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≼&quot;</span>: <span class="string">&quot;&amp;preccurlyeq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≾&quot;</span>: <span class="string">&quot;&amp;prsim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;″&quot;</span>: <span class="string">&quot;&amp;Prime;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∏&quot;</span>: <span class="string">&quot;&amp;prod;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∝&quot;</span>: <span class="string">&quot;&amp;vprop;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒫&quot;</span>: <span class="string">&quot;&amp;Pscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ψ&quot;</span>: <span class="string">&quot;&amp;Psi;&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;&quot;&#x27;</span>: <span class="string">&quot;&amp;quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔔&quot;</span>: <span class="string">&quot;&amp;Qfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℚ&quot;</span>: <span class="string">&quot;&amp;rationals;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒬&quot;</span>: <span class="string">&quot;&amp;Qscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤐&quot;</span>: <span class="string">&quot;&amp;drbkarow;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;®&quot;</span>: <span class="string">&quot;&amp;reg;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ŕ&quot;</span>: <span class="string">&quot;&amp;Racute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⟫&quot;</span>: <span class="string">&quot;&amp;Rang;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↠&quot;</span>: <span class="string">&quot;&amp;twoheadrightarrow;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤖&quot;</span>: <span class="string">&quot;&amp;Rarrtl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ř&quot;</span>: <span class="string">&quot;&amp;Rcaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ŗ&quot;</span>: <span class="string">&quot;&amp;Rcedil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Р&quot;</span>: <span class="string">&quot;&amp;Rcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℜ&quot;</span>: <span class="string">&quot;&amp;realpart;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∋&quot;</span>: <span class="string">&quot;&amp;niv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇋&quot;</span>: <span class="string">&quot;&amp;lrhar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥯&quot;</span>: <span class="string">&quot;&amp;duhar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ρ&quot;</span>: <span class="string">&quot;&amp;Rho;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⟩&quot;</span>: <span class="string">&quot;&amp;rangle;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;→&quot;</span>: <span class="string">&quot;&amp;srarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇥&quot;</span>: <span class="string">&quot;&amp;rarrb;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇄&quot;</span>: <span class="string">&quot;&amp;rlarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌉&quot;</span>: <span class="string">&quot;&amp;rceil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⟧&quot;</span>: <span class="string">&quot;&amp;robrk;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥝&quot;</span>: <span class="string">&quot;&amp;RightDownTeeVector;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇂&quot;</span>: <span class="string">&quot;&amp;downharpoonright;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥕&quot;</span>: <span class="string">&quot;&amp;RightDownVectorBar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌋&quot;</span>: <span class="string">&quot;&amp;rfloor;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊢&quot;</span>: <span class="string">&quot;&amp;vdash;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↦&quot;</span>: <span class="string">&quot;&amp;mapsto;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥛&quot;</span>: <span class="string">&quot;&amp;RightTeeVector;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊳&quot;</span>: <span class="string">&quot;&amp;vrtri;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧐&quot;</span>: <span class="string">&quot;&amp;RightTriangleBar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊵&quot;</span>: <span class="string">&quot;&amp;trianglerighteq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥏&quot;</span>: <span class="string">&quot;&amp;RightUpDownVector;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥜&quot;</span>: <span class="string">&quot;&amp;RightUpTeeVector;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↾&quot;</span>: <span class="string">&quot;&amp;upharpoonright;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥔&quot;</span>: <span class="string">&quot;&amp;RightUpVectorBar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇀&quot;</span>: <span class="string">&quot;&amp;rightharpoonup;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥓&quot;</span>: <span class="string">&quot;&amp;RightVectorBar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℝ&quot;</span>: <span class="string">&quot;&amp;reals;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥰&quot;</span>: <span class="string">&quot;&amp;RoundImplies;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇛&quot;</span>: <span class="string">&quot;&amp;rAarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℛ&quot;</span>: <span class="string">&quot;&amp;realine;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↱&quot;</span>: <span class="string">&quot;&amp;rsh;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧴&quot;</span>: <span class="string">&quot;&amp;RuleDelayed;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Щ&quot;</span>: <span class="string">&quot;&amp;SHCHcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ш&quot;</span>: <span class="string">&quot;&amp;SHcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ь&quot;</span>: <span class="string">&quot;&amp;SOFTcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ś&quot;</span>: <span class="string">&quot;&amp;Sacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪼&quot;</span>: <span class="string">&quot;&amp;Sc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Š&quot;</span>: <span class="string">&quot;&amp;Scaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ş&quot;</span>: <span class="string">&quot;&amp;Scedil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ŝ&quot;</span>: <span class="string">&quot;&amp;Scirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;С&quot;</span>: <span class="string">&quot;&amp;Scy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔖&quot;</span>: <span class="string">&quot;&amp;Sfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↑&quot;</span>: <span class="string">&quot;&amp;uparrow;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Σ&quot;</span>: <span class="string">&quot;&amp;Sigma;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∘&quot;</span>: <span class="string">&quot;&amp;compfn;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕊&quot;</span>: <span class="string">&quot;&amp;Sopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;√&quot;</span>: <span class="string">&quot;&amp;radic;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;□&quot;</span>: <span class="string">&quot;&amp;square;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊓&quot;</span>: <span class="string">&quot;&amp;sqcap;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊏&quot;</span>: <span class="string">&quot;&amp;sqsubset;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊑&quot;</span>: <span class="string">&quot;&amp;sqsubseteq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊐&quot;</span>: <span class="string">&quot;&amp;sqsupset;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊒&quot;</span>: <span class="string">&quot;&amp;sqsupseteq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊔&quot;</span>: <span class="string">&quot;&amp;sqcup;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒮&quot;</span>: <span class="string">&quot;&amp;Sscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋆&quot;</span>: <span class="string">&quot;&amp;sstarf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋐&quot;</span>: <span class="string">&quot;&amp;Subset;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊆&quot;</span>: <span class="string">&quot;&amp;subseteq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≻&quot;</span>: <span class="string">&quot;&amp;succ;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪰&quot;</span>: <span class="string">&quot;&amp;succeq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≽&quot;</span>: <span class="string">&quot;&amp;succcurlyeq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≿&quot;</span>: <span class="string">&quot;&amp;succsim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∑&quot;</span>: <span class="string">&quot;&amp;sum;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋑&quot;</span>: <span class="string">&quot;&amp;Supset;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊃&quot;</span>: <span class="string">&quot;&amp;supset;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊇&quot;</span>: <span class="string">&quot;&amp;supseteq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Þ&quot;</span>: <span class="string">&quot;&amp;THORN;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;™&quot;</span>: <span class="string">&quot;&amp;trade;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ћ&quot;</span>: <span class="string">&quot;&amp;TSHcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ц&quot;</span>: <span class="string">&quot;&amp;TScy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;\t&quot;</span>: <span class="string">&quot;&amp;Tab;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Τ&quot;</span>: <span class="string">&quot;&amp;Tau;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ť&quot;</span>: <span class="string">&quot;&amp;Tcaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ţ&quot;</span>: <span class="string">&quot;&amp;Tcedil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Т&quot;</span>: <span class="string">&quot;&amp;Tcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔗&quot;</span>: <span class="string">&quot;&amp;Tfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∴&quot;</span>: <span class="string">&quot;&amp;therefore;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Θ&quot;</span>: <span class="string">&quot;&amp;Theta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  &quot;</span>: <span class="string">&quot;&amp;ThickSpace;&quot;</span>,</span><br><span class="line">      <span class="string">&quot; &quot;</span>: <span class="string">&quot;&amp;thinsp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∼&quot;</span>: <span class="string">&quot;&amp;thksim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≃&quot;</span>: <span class="string">&quot;&amp;simeq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≅&quot;</span>: <span class="string">&quot;&amp;cong;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≈&quot;</span>: <span class="string">&quot;&amp;thkap;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕋&quot;</span>: <span class="string">&quot;&amp;Topf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⃛&quot;</span>: <span class="string">&quot;&amp;tdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒯&quot;</span>: <span class="string">&quot;&amp;Tscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ŧ&quot;</span>: <span class="string">&quot;&amp;Tstrok;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ú&quot;</span>: <span class="string">&quot;&amp;Uacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↟&quot;</span>: <span class="string">&quot;&amp;Uarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥉&quot;</span>: <span class="string">&quot;&amp;Uarrocir;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ў&quot;</span>: <span class="string">&quot;&amp;Ubrcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ŭ&quot;</span>: <span class="string">&quot;&amp;Ubreve;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Û&quot;</span>: <span class="string">&quot;&amp;Ucirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;У&quot;</span>: <span class="string">&quot;&amp;Ucy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ű&quot;</span>: <span class="string">&quot;&amp;Udblac;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔘&quot;</span>: <span class="string">&quot;&amp;Ufr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ù&quot;</span>: <span class="string">&quot;&amp;Ugrave;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ū&quot;</span>: <span class="string">&quot;&amp;Umacr;&quot;</span>,</span><br><span class="line">      <span class="attr">_</span>: <span class="string">&quot;&amp;lowbar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⏟&quot;</span>: <span class="string">&quot;&amp;UnderBrace;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⎵&quot;</span>: <span class="string">&quot;&amp;bbrk;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⏝&quot;</span>: <span class="string">&quot;&amp;UnderParenthesis;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋃&quot;</span>: <span class="string">&quot;&amp;xcup;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊎&quot;</span>: <span class="string">&quot;&amp;uplus;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ų&quot;</span>: <span class="string">&quot;&amp;Uogon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕌&quot;</span>: <span class="string">&quot;&amp;Uopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤒&quot;</span>: <span class="string">&quot;&amp;UpArrowBar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇅&quot;</span>: <span class="string">&quot;&amp;udarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↕&quot;</span>: <span class="string">&quot;&amp;varr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥮&quot;</span>: <span class="string">&quot;&amp;udhar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊥&quot;</span>: <span class="string">&quot;&amp;perp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↥&quot;</span>: <span class="string">&quot;&amp;mapstoup;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↖&quot;</span>: <span class="string">&quot;&amp;nwarrow;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↗&quot;</span>: <span class="string">&quot;&amp;nearrow;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ϒ&quot;</span>: <span class="string">&quot;&amp;upsih;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Υ&quot;</span>: <span class="string">&quot;&amp;Upsilon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ů&quot;</span>: <span class="string">&quot;&amp;Uring;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒰&quot;</span>: <span class="string">&quot;&amp;Uscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ũ&quot;</span>: <span class="string">&quot;&amp;Utilde;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ü&quot;</span>: <span class="string">&quot;&amp;Uuml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊫&quot;</span>: <span class="string">&quot;&amp;VDash;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫫&quot;</span>: <span class="string">&quot;&amp;Vbar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;В&quot;</span>: <span class="string">&quot;&amp;Vcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊩&quot;</span>: <span class="string">&quot;&amp;Vdash;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫦&quot;</span>: <span class="string">&quot;&amp;Vdashl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋁&quot;</span>: <span class="string">&quot;&amp;xvee;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‖&quot;</span>: <span class="string">&quot;&amp;Vert;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∣&quot;</span>: <span class="string">&quot;&amp;smid;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;|&quot;</span>: <span class="string">&quot;&amp;vert;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;❘&quot;</span>: <span class="string">&quot;&amp;VerticalSeparator;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≀&quot;</span>: <span class="string">&quot;&amp;wreath;&quot;</span>,</span><br><span class="line">      <span class="string">&quot; &quot;</span>: <span class="string">&quot;&amp;hairsp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔙&quot;</span>: <span class="string">&quot;&amp;Vfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕍&quot;</span>: <span class="string">&quot;&amp;Vopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒱&quot;</span>: <span class="string">&quot;&amp;Vscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊪&quot;</span>: <span class="string">&quot;&amp;Vvdash;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ŵ&quot;</span>: <span class="string">&quot;&amp;Wcirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋀&quot;</span>: <span class="string">&quot;&amp;xwedge;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔚&quot;</span>: <span class="string">&quot;&amp;Wfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕎&quot;</span>: <span class="string">&quot;&amp;Wopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒲&quot;</span>: <span class="string">&quot;&amp;Wscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔛&quot;</span>: <span class="string">&quot;&amp;Xfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ξ&quot;</span>: <span class="string">&quot;&amp;Xi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕏&quot;</span>: <span class="string">&quot;&amp;Xopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒳&quot;</span>: <span class="string">&quot;&amp;Xscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Я&quot;</span>: <span class="string">&quot;&amp;YAcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ї&quot;</span>: <span class="string">&quot;&amp;YIcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ю&quot;</span>: <span class="string">&quot;&amp;YUcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ý&quot;</span>: <span class="string">&quot;&amp;Yacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ŷ&quot;</span>: <span class="string">&quot;&amp;Ycirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ы&quot;</span>: <span class="string">&quot;&amp;Ycy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔜&quot;</span>: <span class="string">&quot;&amp;Yfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕐&quot;</span>: <span class="string">&quot;&amp;Yopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒴&quot;</span>: <span class="string">&quot;&amp;Yscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ÿ&quot;</span>: <span class="string">&quot;&amp;Yuml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ж&quot;</span>: <span class="string">&quot;&amp;ZHcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ź&quot;</span>: <span class="string">&quot;&amp;Zacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ž&quot;</span>: <span class="string">&quot;&amp;Zcaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;З&quot;</span>: <span class="string">&quot;&amp;Zcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ż&quot;</span>: <span class="string">&quot;&amp;Zdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ζ&quot;</span>: <span class="string">&quot;&amp;Zeta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℨ&quot;</span>: <span class="string">&quot;&amp;zeetrf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℤ&quot;</span>: <span class="string">&quot;&amp;integers;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒵&quot;</span>: <span class="string">&quot;&amp;Zscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;á&quot;</span>: <span class="string">&quot;&amp;aacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ă&quot;</span>: <span class="string">&quot;&amp;abreve;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∾&quot;</span>: <span class="string">&quot;&amp;mstpos;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∾̳&quot;</span>: <span class="string">&quot;&amp;acE;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∿&quot;</span>: <span class="string">&quot;&amp;acd;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;â&quot;</span>: <span class="string">&quot;&amp;acirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;а&quot;</span>: <span class="string">&quot;&amp;acy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;æ&quot;</span>: <span class="string">&quot;&amp;aelig;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔞&quot;</span>: <span class="string">&quot;&amp;afr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;à&quot;</span>: <span class="string">&quot;&amp;agrave;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℵ&quot;</span>: <span class="string">&quot;&amp;aleph;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;α&quot;</span>: <span class="string">&quot;&amp;alpha;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ā&quot;</span>: <span class="string">&quot;&amp;amacr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨿&quot;</span>: <span class="string">&quot;&amp;amalg;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∧&quot;</span>: <span class="string">&quot;&amp;wedge;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩕&quot;</span>: <span class="string">&quot;&amp;andand;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩜&quot;</span>: <span class="string">&quot;&amp;andd;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩘&quot;</span>: <span class="string">&quot;&amp;andslope;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩚&quot;</span>: <span class="string">&quot;&amp;andv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∠&quot;</span>: <span class="string">&quot;&amp;angle;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦤&quot;</span>: <span class="string">&quot;&amp;ange;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∡&quot;</span>: <span class="string">&quot;&amp;measuredangle;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦨&quot;</span>: <span class="string">&quot;&amp;angmsdaa;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦩&quot;</span>: <span class="string">&quot;&amp;angmsdab;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦪&quot;</span>: <span class="string">&quot;&amp;angmsdac;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦫&quot;</span>: <span class="string">&quot;&amp;angmsdad;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦬&quot;</span>: <span class="string">&quot;&amp;angmsdae;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦭&quot;</span>: <span class="string">&quot;&amp;angmsdaf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦮&quot;</span>: <span class="string">&quot;&amp;angmsdag;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦯&quot;</span>: <span class="string">&quot;&amp;angmsdah;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∟&quot;</span>: <span class="string">&quot;&amp;angrt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊾&quot;</span>: <span class="string">&quot;&amp;angrtvb;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦝&quot;</span>: <span class="string">&quot;&amp;angrtvbd;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∢&quot;</span>: <span class="string">&quot;&amp;angsph;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⍼&quot;</span>: <span class="string">&quot;&amp;angzarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ą&quot;</span>: <span class="string">&quot;&amp;aogon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕒&quot;</span>: <span class="string">&quot;&amp;aopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩰&quot;</span>: <span class="string">&quot;&amp;apE;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩯&quot;</span>: <span class="string">&quot;&amp;apacir;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≊&quot;</span>: <span class="string">&quot;&amp;approxeq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≋&quot;</span>: <span class="string">&quot;&amp;apid;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&#x27;&quot;</span>: <span class="string">&quot;&amp;apos;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;å&quot;</span>: <span class="string">&quot;&amp;aring;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒶&quot;</span>: <span class="string">&quot;&amp;ascr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;*&quot;</span>: <span class="string">&quot;&amp;midast;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ã&quot;</span>: <span class="string">&quot;&amp;atilde;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ä&quot;</span>: <span class="string">&quot;&amp;auml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨑&quot;</span>: <span class="string">&quot;&amp;awint;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫭&quot;</span>: <span class="string">&quot;&amp;bNot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≌&quot;</span>: <span class="string">&quot;&amp;bcong;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;϶&quot;</span>: <span class="string">&quot;&amp;bepsi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‵&quot;</span>: <span class="string">&quot;&amp;bprime;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∽&quot;</span>: <span class="string">&quot;&amp;bsim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋍&quot;</span>: <span class="string">&quot;&amp;bsime;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊽&quot;</span>: <span class="string">&quot;&amp;barvee;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌅&quot;</span>: <span class="string">&quot;&amp;barwedge;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⎶&quot;</span>: <span class="string">&quot;&amp;bbrktbrk;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;б&quot;</span>: <span class="string">&quot;&amp;bcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;„&quot;</span>: <span class="string">&quot;&amp;ldquor;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦰&quot;</span>: <span class="string">&quot;&amp;bemptyv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;β&quot;</span>: <span class="string">&quot;&amp;beta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℶ&quot;</span>: <span class="string">&quot;&amp;beth;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≬&quot;</span>: <span class="string">&quot;&amp;twixt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔟&quot;</span>: <span class="string">&quot;&amp;bfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;◯&quot;</span>: <span class="string">&quot;&amp;xcirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨀&quot;</span>: <span class="string">&quot;&amp;xodot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨁&quot;</span>: <span class="string">&quot;&amp;xoplus;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨂&quot;</span>: <span class="string">&quot;&amp;xotime;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨆&quot;</span>: <span class="string">&quot;&amp;xsqcup;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;★&quot;</span>: <span class="string">&quot;&amp;starf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;▽&quot;</span>: <span class="string">&quot;&amp;xdtri;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;△&quot;</span>: <span class="string">&quot;&amp;xutri;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨄&quot;</span>: <span class="string">&quot;&amp;xuplus;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤍&quot;</span>: <span class="string">&quot;&amp;rbarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧫&quot;</span>: <span class="string">&quot;&amp;lozf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;▴&quot;</span>: <span class="string">&quot;&amp;utrif;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;▾&quot;</span>: <span class="string">&quot;&amp;dtrif;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;◂&quot;</span>: <span class="string">&quot;&amp;ltrif;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;▸&quot;</span>: <span class="string">&quot;&amp;rtrif;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;␣&quot;</span>: <span class="string">&quot;&amp;blank;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;▒&quot;</span>: <span class="string">&quot;&amp;blk12;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;░&quot;</span>: <span class="string">&quot;&amp;blk14;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;▓&quot;</span>: <span class="string">&quot;&amp;blk34;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;█&quot;</span>: <span class="string">&quot;&amp;block;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;=⃥&quot;</span>: <span class="string">&quot;&amp;bne;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≡⃥&quot;</span>: <span class="string">&quot;&amp;bnequiv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌐&quot;</span>: <span class="string">&quot;&amp;bnot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕓&quot;</span>: <span class="string">&quot;&amp;bopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋈&quot;</span>: <span class="string">&quot;&amp;bowtie;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╗&quot;</span>: <span class="string">&quot;&amp;boxDL;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╔&quot;</span>: <span class="string">&quot;&amp;boxDR;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╖&quot;</span>: <span class="string">&quot;&amp;boxDl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╓&quot;</span>: <span class="string">&quot;&amp;boxDr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;═&quot;</span>: <span class="string">&quot;&amp;boxH;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╦&quot;</span>: <span class="string">&quot;&amp;boxHD;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╩&quot;</span>: <span class="string">&quot;&amp;boxHU;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╤&quot;</span>: <span class="string">&quot;&amp;boxHd;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╧&quot;</span>: <span class="string">&quot;&amp;boxHu;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╝&quot;</span>: <span class="string">&quot;&amp;boxUL;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╚&quot;</span>: <span class="string">&quot;&amp;boxUR;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╜&quot;</span>: <span class="string">&quot;&amp;boxUl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╙&quot;</span>: <span class="string">&quot;&amp;boxUr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;║&quot;</span>: <span class="string">&quot;&amp;boxV;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╬&quot;</span>: <span class="string">&quot;&amp;boxVH;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╣&quot;</span>: <span class="string">&quot;&amp;boxVL;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╠&quot;</span>: <span class="string">&quot;&amp;boxVR;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╫&quot;</span>: <span class="string">&quot;&amp;boxVh;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╢&quot;</span>: <span class="string">&quot;&amp;boxVl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╟&quot;</span>: <span class="string">&quot;&amp;boxVr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧉&quot;</span>: <span class="string">&quot;&amp;boxbox;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╕&quot;</span>: <span class="string">&quot;&amp;boxdL;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╒&quot;</span>: <span class="string">&quot;&amp;boxdR;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;┐&quot;</span>: <span class="string">&quot;&amp;boxdl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;┌&quot;</span>: <span class="string">&quot;&amp;boxdr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╥&quot;</span>: <span class="string">&quot;&amp;boxhD;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╨&quot;</span>: <span class="string">&quot;&amp;boxhU;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;┬&quot;</span>: <span class="string">&quot;&amp;boxhd;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;┴&quot;</span>: <span class="string">&quot;&amp;boxhu;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊟&quot;</span>: <span class="string">&quot;&amp;minusb;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊞&quot;</span>: <span class="string">&quot;&amp;plusb;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊠&quot;</span>: <span class="string">&quot;&amp;timesb;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╛&quot;</span>: <span class="string">&quot;&amp;boxuL;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╘&quot;</span>: <span class="string">&quot;&amp;boxuR;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;┘&quot;</span>: <span class="string">&quot;&amp;boxul;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;└&quot;</span>: <span class="string">&quot;&amp;boxur;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;│&quot;</span>: <span class="string">&quot;&amp;boxv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╪&quot;</span>: <span class="string">&quot;&amp;boxvH;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╡&quot;</span>: <span class="string">&quot;&amp;boxvL;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;╞&quot;</span>: <span class="string">&quot;&amp;boxvR;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;┼&quot;</span>: <span class="string">&quot;&amp;boxvh;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;┤&quot;</span>: <span class="string">&quot;&amp;boxvl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;├&quot;</span>: <span class="string">&quot;&amp;boxvr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¦&quot;</span>: <span class="string">&quot;&amp;brvbar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒷&quot;</span>: <span class="string">&quot;&amp;bscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⁏&quot;</span>: <span class="string">&quot;&amp;bsemi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;\\&quot;</span>: <span class="string">&quot;&amp;bsol;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧅&quot;</span>: <span class="string">&quot;&amp;bsolb;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⟈&quot;</span>: <span class="string">&quot;&amp;bsolhsub;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;•&quot;</span>: <span class="string">&quot;&amp;bullet;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪮&quot;</span>: <span class="string">&quot;&amp;bumpE;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ć&quot;</span>: <span class="string">&quot;&amp;cacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∩&quot;</span>: <span class="string">&quot;&amp;cap;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩄&quot;</span>: <span class="string">&quot;&amp;capand;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩉&quot;</span>: <span class="string">&quot;&amp;capbrcup;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩋&quot;</span>: <span class="string">&quot;&amp;capcap;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩇&quot;</span>: <span class="string">&quot;&amp;capcup;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩀&quot;</span>: <span class="string">&quot;&amp;capdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∩︀&quot;</span>: <span class="string">&quot;&amp;caps;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⁁&quot;</span>: <span class="string">&quot;&amp;caret;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩍&quot;</span>: <span class="string">&quot;&amp;ccaps;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;č&quot;</span>: <span class="string">&quot;&amp;ccaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ç&quot;</span>: <span class="string">&quot;&amp;ccedil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ĉ&quot;</span>: <span class="string">&quot;&amp;ccirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩌&quot;</span>: <span class="string">&quot;&amp;ccups;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩐&quot;</span>: <span class="string">&quot;&amp;ccupssm;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ċ&quot;</span>: <span class="string">&quot;&amp;cdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦲&quot;</span>: <span class="string">&quot;&amp;cemptyv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¢&quot;</span>: <span class="string">&quot;&amp;cent;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔠&quot;</span>: <span class="string">&quot;&amp;cfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ч&quot;</span>: <span class="string">&quot;&amp;chcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;✓&quot;</span>: <span class="string">&quot;&amp;checkmark;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;χ&quot;</span>: <span class="string">&quot;&amp;chi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;○&quot;</span>: <span class="string">&quot;&amp;cir;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧃&quot;</span>: <span class="string">&quot;&amp;cirE;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ˆ&quot;</span>: <span class="string">&quot;&amp;circ;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≗&quot;</span>: <span class="string">&quot;&amp;cire;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↺&quot;</span>: <span class="string">&quot;&amp;olarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↻&quot;</span>: <span class="string">&quot;&amp;orarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ⓢ&quot;</span>: <span class="string">&quot;&amp;oS;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊛&quot;</span>: <span class="string">&quot;&amp;oast;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊚&quot;</span>: <span class="string">&quot;&amp;ocir;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊝&quot;</span>: <span class="string">&quot;&amp;odash;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨐&quot;</span>: <span class="string">&quot;&amp;cirfnint;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫯&quot;</span>: <span class="string">&quot;&amp;cirmid;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧂&quot;</span>: <span class="string">&quot;&amp;cirscir;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;♣&quot;</span>: <span class="string">&quot;&amp;clubsuit;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;:&quot;</span>: <span class="string">&quot;&amp;colon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;,&quot;</span>: <span class="string">&quot;&amp;comma;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: <span class="string">&quot;&amp;commat;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∁&quot;</span>: <span class="string">&quot;&amp;complement;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩭&quot;</span>: <span class="string">&quot;&amp;congdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕔&quot;</span>: <span class="string">&quot;&amp;copf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;℗&quot;</span>: <span class="string">&quot;&amp;copysr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↵&quot;</span>: <span class="string">&quot;&amp;crarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;✗&quot;</span>: <span class="string">&quot;&amp;cross;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒸&quot;</span>: <span class="string">&quot;&amp;cscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫏&quot;</span>: <span class="string">&quot;&amp;csub;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫑&quot;</span>: <span class="string">&quot;&amp;csube;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫐&quot;</span>: <span class="string">&quot;&amp;csup;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫒&quot;</span>: <span class="string">&quot;&amp;csupe;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋯&quot;</span>: <span class="string">&quot;&amp;ctdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤸&quot;</span>: <span class="string">&quot;&amp;cudarrl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤵&quot;</span>: <span class="string">&quot;&amp;cudarrr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋞&quot;</span>: <span class="string">&quot;&amp;curlyeqprec;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋟&quot;</span>: <span class="string">&quot;&amp;curlyeqsucc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↶&quot;</span>: <span class="string">&quot;&amp;curvearrowleft;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤽&quot;</span>: <span class="string">&quot;&amp;cularrp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∪&quot;</span>: <span class="string">&quot;&amp;cup;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩈&quot;</span>: <span class="string">&quot;&amp;cupbrcap;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩆&quot;</span>: <span class="string">&quot;&amp;cupcap;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩊&quot;</span>: <span class="string">&quot;&amp;cupcup;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊍&quot;</span>: <span class="string">&quot;&amp;cupdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩅&quot;</span>: <span class="string">&quot;&amp;cupor;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∪︀&quot;</span>: <span class="string">&quot;&amp;cups;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↷&quot;</span>: <span class="string">&quot;&amp;curvearrowright;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤼&quot;</span>: <span class="string">&quot;&amp;curarrm;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋎&quot;</span>: <span class="string">&quot;&amp;cuvee;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋏&quot;</span>: <span class="string">&quot;&amp;cuwed;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¤&quot;</span>: <span class="string">&quot;&amp;curren;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∱&quot;</span>: <span class="string">&quot;&amp;cwint;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌭&quot;</span>: <span class="string">&quot;&amp;cylcty;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥥&quot;</span>: <span class="string">&quot;&amp;dHar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;†&quot;</span>: <span class="string">&quot;&amp;dagger;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℸ&quot;</span>: <span class="string">&quot;&amp;daleth;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‐&quot;</span>: <span class="string">&quot;&amp;hyphen;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤏&quot;</span>: <span class="string">&quot;&amp;rBarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ď&quot;</span>: <span class="string">&quot;&amp;dcaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;д&quot;</span>: <span class="string">&quot;&amp;dcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇊&quot;</span>: <span class="string">&quot;&amp;downdownarrows;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩷&quot;</span>: <span class="string">&quot;&amp;eDDot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;°&quot;</span>: <span class="string">&quot;&amp;deg;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;δ&quot;</span>: <span class="string">&quot;&amp;delta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦱&quot;</span>: <span class="string">&quot;&amp;demptyv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥿&quot;</span>: <span class="string">&quot;&amp;dfisht;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔡&quot;</span>: <span class="string">&quot;&amp;dfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;♦&quot;</span>: <span class="string">&quot;&amp;diams;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ϝ&quot;</span>: <span class="string">&quot;&amp;gammad;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋲&quot;</span>: <span class="string">&quot;&amp;disin;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;÷&quot;</span>: <span class="string">&quot;&amp;divide;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋇&quot;</span>: <span class="string">&quot;&amp;divonx;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ђ&quot;</span>: <span class="string">&quot;&amp;djcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌞&quot;</span>: <span class="string">&quot;&amp;llcorner;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌍&quot;</span>: <span class="string">&quot;&amp;dlcrop;&quot;</span>,</span><br><span class="line">      <span class="attr">$</span>: <span class="string">&quot;&amp;dollar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕕&quot;</span>: <span class="string">&quot;&amp;dopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≑&quot;</span>: <span class="string">&quot;&amp;eDot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∸&quot;</span>: <span class="string">&quot;&amp;minusd;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∔&quot;</span>: <span class="string">&quot;&amp;plusdo;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊡&quot;</span>: <span class="string">&quot;&amp;sdotb;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌟&quot;</span>: <span class="string">&quot;&amp;lrcorner;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌌&quot;</span>: <span class="string">&quot;&amp;drcrop;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒹&quot;</span>: <span class="string">&quot;&amp;dscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ѕ&quot;</span>: <span class="string">&quot;&amp;dscy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧶&quot;</span>: <span class="string">&quot;&amp;dsol;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;đ&quot;</span>: <span class="string">&quot;&amp;dstrok;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋱&quot;</span>: <span class="string">&quot;&amp;dtdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;▿&quot;</span>: <span class="string">&quot;&amp;triangledown;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦦&quot;</span>: <span class="string">&quot;&amp;dwangle;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;џ&quot;</span>: <span class="string">&quot;&amp;dzcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⟿&quot;</span>: <span class="string">&quot;&amp;dzigrarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;é&quot;</span>: <span class="string">&quot;&amp;eacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩮&quot;</span>: <span class="string">&quot;&amp;easter;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ě&quot;</span>: <span class="string">&quot;&amp;ecaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≖&quot;</span>: <span class="string">&quot;&amp;eqcirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ê&quot;</span>: <span class="string">&quot;&amp;ecirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≕&quot;</span>: <span class="string">&quot;&amp;eqcolon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;э&quot;</span>: <span class="string">&quot;&amp;ecy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ė&quot;</span>: <span class="string">&quot;&amp;edot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≒&quot;</span>: <span class="string">&quot;&amp;fallingdotseq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔢&quot;</span>: <span class="string">&quot;&amp;efr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪚&quot;</span>: <span class="string">&quot;&amp;eg;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;è&quot;</span>: <span class="string">&quot;&amp;egrave;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪖&quot;</span>: <span class="string">&quot;&amp;eqslantgtr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪘&quot;</span>: <span class="string">&quot;&amp;egsdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪙&quot;</span>: <span class="string">&quot;&amp;el;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⏧&quot;</span>: <span class="string">&quot;&amp;elinters;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℓ&quot;</span>: <span class="string">&quot;&amp;ell;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪕&quot;</span>: <span class="string">&quot;&amp;eqslantless;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪗&quot;</span>: <span class="string">&quot;&amp;elsdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ē&quot;</span>: <span class="string">&quot;&amp;emacr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∅&quot;</span>: <span class="string">&quot;&amp;varnothing;&quot;</span>,</span><br><span class="line">      <span class="string">&quot; &quot;</span>: <span class="string">&quot;&amp;emsp13;&quot;</span>,</span><br><span class="line">      <span class="string">&quot; &quot;</span>: <span class="string">&quot;&amp;emsp14;&quot;</span>,</span><br><span class="line">      <span class="string">&quot; &quot;</span>: <span class="string">&quot;&amp;emsp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ŋ&quot;</span>: <span class="string">&quot;&amp;eng;&quot;</span>,</span><br><span class="line">      <span class="string">&quot; &quot;</span>: <span class="string">&quot;&amp;ensp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ę&quot;</span>: <span class="string">&quot;&amp;eogon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕖&quot;</span>: <span class="string">&quot;&amp;eopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋕&quot;</span>: <span class="string">&quot;&amp;epar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧣&quot;</span>: <span class="string">&quot;&amp;eparsl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩱&quot;</span>: <span class="string">&quot;&amp;eplus;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ε&quot;</span>: <span class="string">&quot;&amp;epsilon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ϵ&quot;</span>: <span class="string">&quot;&amp;varepsilon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;=&quot;</span>: <span class="string">&quot;&amp;equals;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≟&quot;</span>: <span class="string">&quot;&amp;questeq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩸&quot;</span>: <span class="string">&quot;&amp;equivDD;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧥&quot;</span>: <span class="string">&quot;&amp;eqvparsl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≓&quot;</span>: <span class="string">&quot;&amp;risingdotseq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥱&quot;</span>: <span class="string">&quot;&amp;erarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℯ&quot;</span>: <span class="string">&quot;&amp;escr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;η&quot;</span>: <span class="string">&quot;&amp;eta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ð&quot;</span>: <span class="string">&quot;&amp;eth;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ë&quot;</span>: <span class="string">&quot;&amp;euml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;€&quot;</span>: <span class="string">&quot;&amp;euro;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;!&quot;</span>: <span class="string">&quot;&amp;excl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ф&quot;</span>: <span class="string">&quot;&amp;fcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;♀&quot;</span>: <span class="string">&quot;&amp;female;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ﬃ&quot;</span>: <span class="string">&quot;&amp;ffilig;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ﬀ&quot;</span>: <span class="string">&quot;&amp;fflig;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ﬄ&quot;</span>: <span class="string">&quot;&amp;ffllig;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔣&quot;</span>: <span class="string">&quot;&amp;ffr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ﬁ&quot;</span>: <span class="string">&quot;&amp;filig;&quot;</span>,</span><br><span class="line">      <span class="attr">fj</span>: <span class="string">&quot;&amp;fjlig;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;♭&quot;</span>: <span class="string">&quot;&amp;flat;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ﬂ&quot;</span>: <span class="string">&quot;&amp;fllig;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;▱&quot;</span>: <span class="string">&quot;&amp;fltns;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ƒ&quot;</span>: <span class="string">&quot;&amp;fnof;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕗&quot;</span>: <span class="string">&quot;&amp;fopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋔&quot;</span>: <span class="string">&quot;&amp;pitchfork;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫙&quot;</span>: <span class="string">&quot;&amp;forkv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨍&quot;</span>: <span class="string">&quot;&amp;fpartint;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;½&quot;</span>: <span class="string">&quot;&amp;half;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⅓&quot;</span>: <span class="string">&quot;&amp;frac13;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¼&quot;</span>: <span class="string">&quot;&amp;frac14;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⅕&quot;</span>: <span class="string">&quot;&amp;frac15;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⅙&quot;</span>: <span class="string">&quot;&amp;frac16;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⅛&quot;</span>: <span class="string">&quot;&amp;frac18;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⅔&quot;</span>: <span class="string">&quot;&amp;frac23;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⅖&quot;</span>: <span class="string">&quot;&amp;frac25;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¾&quot;</span>: <span class="string">&quot;&amp;frac34;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⅗&quot;</span>: <span class="string">&quot;&amp;frac35;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⅜&quot;</span>: <span class="string">&quot;&amp;frac38;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⅘&quot;</span>: <span class="string">&quot;&amp;frac45;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⅚&quot;</span>: <span class="string">&quot;&amp;frac56;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⅝&quot;</span>: <span class="string">&quot;&amp;frac58;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⅞&quot;</span>: <span class="string">&quot;&amp;frac78;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⁄&quot;</span>: <span class="string">&quot;&amp;frasl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌢&quot;</span>: <span class="string">&quot;&amp;sfrown;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒻&quot;</span>: <span class="string">&quot;&amp;fscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪌&quot;</span>: <span class="string">&quot;&amp;gtreqqless;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ǵ&quot;</span>: <span class="string">&quot;&amp;gacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;γ&quot;</span>: <span class="string">&quot;&amp;gamma;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪆&quot;</span>: <span class="string">&quot;&amp;gtrapprox;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ğ&quot;</span>: <span class="string">&quot;&amp;gbreve;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ĝ&quot;</span>: <span class="string">&quot;&amp;gcirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;г&quot;</span>: <span class="string">&quot;&amp;gcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ġ&quot;</span>: <span class="string">&quot;&amp;gdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪩&quot;</span>: <span class="string">&quot;&amp;gescc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪀&quot;</span>: <span class="string">&quot;&amp;gesdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪂&quot;</span>: <span class="string">&quot;&amp;gesdoto;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪄&quot;</span>: <span class="string">&quot;&amp;gesdotol;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋛︀&quot;</span>: <span class="string">&quot;&amp;gesl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪔&quot;</span>: <span class="string">&quot;&amp;gesles;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔤&quot;</span>: <span class="string">&quot;&amp;gfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℷ&quot;</span>: <span class="string">&quot;&amp;gimel;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ѓ&quot;</span>: <span class="string">&quot;&amp;gjcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪒&quot;</span>: <span class="string">&quot;&amp;glE;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪥&quot;</span>: <span class="string">&quot;&amp;gla;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪤&quot;</span>: <span class="string">&quot;&amp;glj;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≩&quot;</span>: <span class="string">&quot;&amp;gneqq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪊&quot;</span>: <span class="string">&quot;&amp;gnapprox;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪈&quot;</span>: <span class="string">&quot;&amp;gneq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋧&quot;</span>: <span class="string">&quot;&amp;gnsim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕘&quot;</span>: <span class="string">&quot;&amp;gopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℊ&quot;</span>: <span class="string">&quot;&amp;gscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪎&quot;</span>: <span class="string">&quot;&amp;gsime;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪐&quot;</span>: <span class="string">&quot;&amp;gsiml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪧&quot;</span>: <span class="string">&quot;&amp;gtcc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩺&quot;</span>: <span class="string">&quot;&amp;gtcir;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋗&quot;</span>: <span class="string">&quot;&amp;gtrdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦕&quot;</span>: <span class="string">&quot;&amp;gtlPar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩼&quot;</span>: <span class="string">&quot;&amp;gtquest;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥸&quot;</span>: <span class="string">&quot;&amp;gtrarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≩︀&quot;</span>: <span class="string">&quot;&amp;gvnE;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ъ&quot;</span>: <span class="string">&quot;&amp;hardcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥈&quot;</span>: <span class="string">&quot;&amp;harrcir;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↭&quot;</span>: <span class="string">&quot;&amp;leftrightsquigarrow;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℏ&quot;</span>: <span class="string">&quot;&amp;plankv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ĥ&quot;</span>: <span class="string">&quot;&amp;hcirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;♥&quot;</span>: <span class="string">&quot;&amp;heartsuit;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;…&quot;</span>: <span class="string">&quot;&amp;mldr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊹&quot;</span>: <span class="string">&quot;&amp;hercon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔥&quot;</span>: <span class="string">&quot;&amp;hfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤥&quot;</span>: <span class="string">&quot;&amp;searhk;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤦&quot;</span>: <span class="string">&quot;&amp;swarhk;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇿&quot;</span>: <span class="string">&quot;&amp;hoarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∻&quot;</span>: <span class="string">&quot;&amp;homtht;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↩&quot;</span>: <span class="string">&quot;&amp;larrhk;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↪&quot;</span>: <span class="string">&quot;&amp;rarrhk;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕙&quot;</span>: <span class="string">&quot;&amp;hopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;―&quot;</span>: <span class="string">&quot;&amp;horbar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒽&quot;</span>: <span class="string">&quot;&amp;hscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ħ&quot;</span>: <span class="string">&quot;&amp;hstrok;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⁃&quot;</span>: <span class="string">&quot;&amp;hybull;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;í&quot;</span>: <span class="string">&quot;&amp;iacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;î&quot;</span>: <span class="string">&quot;&amp;icirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;и&quot;</span>: <span class="string">&quot;&amp;icy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;е&quot;</span>: <span class="string">&quot;&amp;iecy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¡&quot;</span>: <span class="string">&quot;&amp;iexcl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔦&quot;</span>: <span class="string">&quot;&amp;ifr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ì&quot;</span>: <span class="string">&quot;&amp;igrave;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨌&quot;</span>: <span class="string">&quot;&amp;qint;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∭&quot;</span>: <span class="string">&quot;&amp;tint;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧜&quot;</span>: <span class="string">&quot;&amp;iinfin;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;℩&quot;</span>: <span class="string">&quot;&amp;iiota;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ĳ&quot;</span>: <span class="string">&quot;&amp;ijlig;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ī&quot;</span>: <span class="string">&quot;&amp;imacr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ı&quot;</span>: <span class="string">&quot;&amp;inodot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊷&quot;</span>: <span class="string">&quot;&amp;imof;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Ƶ&quot;</span>: <span class="string">&quot;&amp;imped;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;℅&quot;</span>: <span class="string">&quot;&amp;incare;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∞&quot;</span>: <span class="string">&quot;&amp;infin;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧝&quot;</span>: <span class="string">&quot;&amp;infintie;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊺&quot;</span>: <span class="string">&quot;&amp;intercal;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨗&quot;</span>: <span class="string">&quot;&amp;intlarhk;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨼&quot;</span>: <span class="string">&quot;&amp;iprod;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ё&quot;</span>: <span class="string">&quot;&amp;iocy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;į&quot;</span>: <span class="string">&quot;&amp;iogon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕚&quot;</span>: <span class="string">&quot;&amp;iopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ι&quot;</span>: <span class="string">&quot;&amp;iota;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¿&quot;</span>: <span class="string">&quot;&amp;iquest;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒾&quot;</span>: <span class="string">&quot;&amp;iscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋹&quot;</span>: <span class="string">&quot;&amp;isinE;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋵&quot;</span>: <span class="string">&quot;&amp;isindot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋴&quot;</span>: <span class="string">&quot;&amp;isins;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋳&quot;</span>: <span class="string">&quot;&amp;isinsv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ĩ&quot;</span>: <span class="string">&quot;&amp;itilde;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;і&quot;</span>: <span class="string">&quot;&amp;iukcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ï&quot;</span>: <span class="string">&quot;&amp;iuml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ĵ&quot;</span>: <span class="string">&quot;&amp;jcirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;й&quot;</span>: <span class="string">&quot;&amp;jcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔧&quot;</span>: <span class="string">&quot;&amp;jfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ȷ&quot;</span>: <span class="string">&quot;&amp;jmath;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕛&quot;</span>: <span class="string">&quot;&amp;jopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝒿&quot;</span>: <span class="string">&quot;&amp;jscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ј&quot;</span>: <span class="string">&quot;&amp;jsercy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;є&quot;</span>: <span class="string">&quot;&amp;jukcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;κ&quot;</span>: <span class="string">&quot;&amp;kappa;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ϰ&quot;</span>: <span class="string">&quot;&amp;varkappa;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ķ&quot;</span>: <span class="string">&quot;&amp;kcedil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;к&quot;</span>: <span class="string">&quot;&amp;kcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔨&quot;</span>: <span class="string">&quot;&amp;kfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ĸ&quot;</span>: <span class="string">&quot;&amp;kgreen;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;х&quot;</span>: <span class="string">&quot;&amp;khcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ќ&quot;</span>: <span class="string">&quot;&amp;kjcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕜&quot;</span>: <span class="string">&quot;&amp;kopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝓀&quot;</span>: <span class="string">&quot;&amp;kscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤛&quot;</span>: <span class="string">&quot;&amp;lAtail;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤎&quot;</span>: <span class="string">&quot;&amp;lBarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪋&quot;</span>: <span class="string">&quot;&amp;lesseqqgtr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥢&quot;</span>: <span class="string">&quot;&amp;lHar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ĺ&quot;</span>: <span class="string">&quot;&amp;lacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦴&quot;</span>: <span class="string">&quot;&amp;laemptyv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;λ&quot;</span>: <span class="string">&quot;&amp;lambda;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦑&quot;</span>: <span class="string">&quot;&amp;langd;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪅&quot;</span>: <span class="string">&quot;&amp;lessapprox;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;«&quot;</span>: <span class="string">&quot;&amp;laquo;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤟&quot;</span>: <span class="string">&quot;&amp;larrbfs;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤝&quot;</span>: <span class="string">&quot;&amp;larrfs;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↫&quot;</span>: <span class="string">&quot;&amp;looparrowleft;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤹&quot;</span>: <span class="string">&quot;&amp;larrpl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥳&quot;</span>: <span class="string">&quot;&amp;larrsim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↢&quot;</span>: <span class="string">&quot;&amp;leftarrowtail;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪫&quot;</span>: <span class="string">&quot;&amp;lat;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤙&quot;</span>: <span class="string">&quot;&amp;latail;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪭&quot;</span>: <span class="string">&quot;&amp;late;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪭︀&quot;</span>: <span class="string">&quot;&amp;lates;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤌&quot;</span>: <span class="string">&quot;&amp;lbarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;❲&quot;</span>: <span class="string">&quot;&amp;lbbrk;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&#123;&quot;</span>: <span class="string">&quot;&amp;lcub;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;[&quot;</span>: <span class="string">&quot;&amp;lsqb;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦋&quot;</span>: <span class="string">&quot;&amp;lbrke;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦏&quot;</span>: <span class="string">&quot;&amp;lbrksld;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦍&quot;</span>: <span class="string">&quot;&amp;lbrkslu;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ľ&quot;</span>: <span class="string">&quot;&amp;lcaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ļ&quot;</span>: <span class="string">&quot;&amp;lcedil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;л&quot;</span>: <span class="string">&quot;&amp;lcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤶&quot;</span>: <span class="string">&quot;&amp;ldca;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥧&quot;</span>: <span class="string">&quot;&amp;ldrdhar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥋&quot;</span>: <span class="string">&quot;&amp;ldrushar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↲&quot;</span>: <span class="string">&quot;&amp;ldsh;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≤&quot;</span>: <span class="string">&quot;&amp;leq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇇&quot;</span>: <span class="string">&quot;&amp;llarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋋&quot;</span>: <span class="string">&quot;&amp;lthree;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪨&quot;</span>: <span class="string">&quot;&amp;lescc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩿&quot;</span>: <span class="string">&quot;&amp;lesdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪁&quot;</span>: <span class="string">&quot;&amp;lesdoto;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪃&quot;</span>: <span class="string">&quot;&amp;lesdotor;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋚︀&quot;</span>: <span class="string">&quot;&amp;lesg;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪓&quot;</span>: <span class="string">&quot;&amp;lesges;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋖&quot;</span>: <span class="string">&quot;&amp;ltdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥼&quot;</span>: <span class="string">&quot;&amp;lfisht;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔩&quot;</span>: <span class="string">&quot;&amp;lfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪑&quot;</span>: <span class="string">&quot;&amp;lgE;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥪&quot;</span>: <span class="string">&quot;&amp;lharul;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;▄&quot;</span>: <span class="string">&quot;&amp;lhblk;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;љ&quot;</span>: <span class="string">&quot;&amp;ljcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥫&quot;</span>: <span class="string">&quot;&amp;llhard;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;◺&quot;</span>: <span class="string">&quot;&amp;lltri;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ŀ&quot;</span>: <span class="string">&quot;&amp;lmidot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⎰&quot;</span>: <span class="string">&quot;&amp;lmoustache;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≨&quot;</span>: <span class="string">&quot;&amp;lneqq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪉&quot;</span>: <span class="string">&quot;&amp;lnapprox;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪇&quot;</span>: <span class="string">&quot;&amp;lneq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋦&quot;</span>: <span class="string">&quot;&amp;lnsim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⟬&quot;</span>: <span class="string">&quot;&amp;loang;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇽&quot;</span>: <span class="string">&quot;&amp;loarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⟼&quot;</span>: <span class="string">&quot;&amp;xmap;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↬&quot;</span>: <span class="string">&quot;&amp;rarrlp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦅&quot;</span>: <span class="string">&quot;&amp;lopar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕝&quot;</span>: <span class="string">&quot;&amp;lopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨭&quot;</span>: <span class="string">&quot;&amp;loplus;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨴&quot;</span>: <span class="string">&quot;&amp;lotimes;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∗&quot;</span>: <span class="string">&quot;&amp;lowast;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;◊&quot;</span>: <span class="string">&quot;&amp;lozenge;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;(&quot;</span>: <span class="string">&quot;&amp;lpar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦓&quot;</span>: <span class="string">&quot;&amp;lparlt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥭&quot;</span>: <span class="string">&quot;&amp;lrhard;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‎&quot;</span>: <span class="string">&quot;&amp;lrm;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊿&quot;</span>: <span class="string">&quot;&amp;lrtri;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‹&quot;</span>: <span class="string">&quot;&amp;lsaquo;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝓁&quot;</span>: <span class="string">&quot;&amp;lscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪍&quot;</span>: <span class="string">&quot;&amp;lsime;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪏&quot;</span>: <span class="string">&quot;&amp;lsimg;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‚&quot;</span>: <span class="string">&quot;&amp;sbquo;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ł&quot;</span>: <span class="string">&quot;&amp;lstrok;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪦&quot;</span>: <span class="string">&quot;&amp;ltcc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩹&quot;</span>: <span class="string">&quot;&amp;ltcir;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋉&quot;</span>: <span class="string">&quot;&amp;ltimes;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥶&quot;</span>: <span class="string">&quot;&amp;ltlarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩻&quot;</span>: <span class="string">&quot;&amp;ltquest;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦖&quot;</span>: <span class="string">&quot;&amp;ltrPar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;◃&quot;</span>: <span class="string">&quot;&amp;triangleleft;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥊&quot;</span>: <span class="string">&quot;&amp;lurdshar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥦&quot;</span>: <span class="string">&quot;&amp;luruhar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≨︀&quot;</span>: <span class="string">&quot;&amp;lvnE;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∺&quot;</span>: <span class="string">&quot;&amp;mDDot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¯&quot;</span>: <span class="string">&quot;&amp;strns;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;♂&quot;</span>: <span class="string">&quot;&amp;male;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;✠&quot;</span>: <span class="string">&quot;&amp;maltese;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;▮&quot;</span>: <span class="string">&quot;&amp;marker;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨩&quot;</span>: <span class="string">&quot;&amp;mcomma;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;м&quot;</span>: <span class="string">&quot;&amp;mcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;—&quot;</span>: <span class="string">&quot;&amp;mdash;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔪&quot;</span>: <span class="string">&quot;&amp;mfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;℧&quot;</span>: <span class="string">&quot;&amp;mho;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;µ&quot;</span>: <span class="string">&quot;&amp;micro;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫰&quot;</span>: <span class="string">&quot;&amp;midcir;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;−&quot;</span>: <span class="string">&quot;&amp;minus;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨪&quot;</span>: <span class="string">&quot;&amp;minusdu;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫛&quot;</span>: <span class="string">&quot;&amp;mlcp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊧&quot;</span>: <span class="string">&quot;&amp;models;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕞&quot;</span>: <span class="string">&quot;&amp;mopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝓂&quot;</span>: <span class="string">&quot;&amp;mscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;μ&quot;</span>: <span class="string">&quot;&amp;mu;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊸&quot;</span>: <span class="string">&quot;&amp;mumap;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋙̸&quot;</span>: <span class="string">&quot;&amp;nGg;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≫⃒&quot;</span>: <span class="string">&quot;&amp;nGt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇍&quot;</span>: <span class="string">&quot;&amp;nlArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇎&quot;</span>: <span class="string">&quot;&amp;nhArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋘̸&quot;</span>: <span class="string">&quot;&amp;nLl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≪⃒&quot;</span>: <span class="string">&quot;&amp;nLt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇏&quot;</span>: <span class="string">&quot;&amp;nrArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊯&quot;</span>: <span class="string">&quot;&amp;nVDash;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊮&quot;</span>: <span class="string">&quot;&amp;nVdash;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ń&quot;</span>: <span class="string">&quot;&amp;nacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∠⃒&quot;</span>: <span class="string">&quot;&amp;nang;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩰̸&quot;</span>: <span class="string">&quot;&amp;napE;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≋̸&quot;</span>: <span class="string">&quot;&amp;napid;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ŉ&quot;</span>: <span class="string">&quot;&amp;napos;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;♮&quot;</span>: <span class="string">&quot;&amp;natural;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩃&quot;</span>: <span class="string">&quot;&amp;ncap;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ň&quot;</span>: <span class="string">&quot;&amp;ncaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ņ&quot;</span>: <span class="string">&quot;&amp;ncedil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩭̸&quot;</span>: <span class="string">&quot;&amp;ncongdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩂&quot;</span>: <span class="string">&quot;&amp;ncup;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;н&quot;</span>: <span class="string">&quot;&amp;ncy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;–&quot;</span>: <span class="string">&quot;&amp;ndash;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇗&quot;</span>: <span class="string">&quot;&amp;neArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤤&quot;</span>: <span class="string">&quot;&amp;nearhk;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≐̸&quot;</span>: <span class="string">&quot;&amp;nedot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤨&quot;</span>: <span class="string">&quot;&amp;toea;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔫&quot;</span>: <span class="string">&quot;&amp;nfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↮&quot;</span>: <span class="string">&quot;&amp;nleftrightarrow;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫲&quot;</span>: <span class="string">&quot;&amp;nhpar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋼&quot;</span>: <span class="string">&quot;&amp;nis;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋺&quot;</span>: <span class="string">&quot;&amp;nisd;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;њ&quot;</span>: <span class="string">&quot;&amp;njcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≦̸&quot;</span>: <span class="string">&quot;&amp;nleqq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↚&quot;</span>: <span class="string">&quot;&amp;nleftarrow;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‥&quot;</span>: <span class="string">&quot;&amp;nldr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕟&quot;</span>: <span class="string">&quot;&amp;nopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¬&quot;</span>: <span class="string">&quot;&amp;not;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋹̸&quot;</span>: <span class="string">&quot;&amp;notinE;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋵̸&quot;</span>: <span class="string">&quot;&amp;notindot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋷&quot;</span>: <span class="string">&quot;&amp;notinvb;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋶&quot;</span>: <span class="string">&quot;&amp;notinvc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋾&quot;</span>: <span class="string">&quot;&amp;notnivb;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋽&quot;</span>: <span class="string">&quot;&amp;notnivc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫽⃥&quot;</span>: <span class="string">&quot;&amp;nparsl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∂̸&quot;</span>: <span class="string">&quot;&amp;npart;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨔&quot;</span>: <span class="string">&quot;&amp;npolint;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↛&quot;</span>: <span class="string">&quot;&amp;nrightarrow;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤳̸&quot;</span>: <span class="string">&quot;&amp;nrarrc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↝̸&quot;</span>: <span class="string">&quot;&amp;nrarrw;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝓃&quot;</span>: <span class="string">&quot;&amp;nscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊄&quot;</span>: <span class="string">&quot;&amp;nsub;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫅̸&quot;</span>: <span class="string">&quot;&amp;nsubseteqq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊅&quot;</span>: <span class="string">&quot;&amp;nsup;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫆̸&quot;</span>: <span class="string">&quot;&amp;nsupseteqq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ñ&quot;</span>: <span class="string">&quot;&amp;ntilde;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ν&quot;</span>: <span class="string">&quot;&amp;nu;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;#&quot;</span>: <span class="string">&quot;&amp;num;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;№&quot;</span>: <span class="string">&quot;&amp;numero;&quot;</span>,</span><br><span class="line">      <span class="string">&quot; &quot;</span>: <span class="string">&quot;&amp;numsp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊭&quot;</span>: <span class="string">&quot;&amp;nvDash;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤄&quot;</span>: <span class="string">&quot;&amp;nvHarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≍⃒&quot;</span>: <span class="string">&quot;&amp;nvap;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊬&quot;</span>: <span class="string">&quot;&amp;nvdash;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≥⃒&quot;</span>: <span class="string">&quot;&amp;nvge;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&gt;⃒&quot;</span>: <span class="string">&quot;&amp;nvgt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧞&quot;</span>: <span class="string">&quot;&amp;nvinfin;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤂&quot;</span>: <span class="string">&quot;&amp;nvlArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≤⃒&quot;</span>: <span class="string">&quot;&amp;nvle;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;⃒&quot;</span>: <span class="string">&quot;&amp;nvlt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊴⃒&quot;</span>: <span class="string">&quot;&amp;nvltrie;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤃&quot;</span>: <span class="string">&quot;&amp;nvrArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊵⃒&quot;</span>: <span class="string">&quot;&amp;nvrtrie;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∼⃒&quot;</span>: <span class="string">&quot;&amp;nvsim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇖&quot;</span>: <span class="string">&quot;&amp;nwArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤣&quot;</span>: <span class="string">&quot;&amp;nwarhk;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤧&quot;</span>: <span class="string">&quot;&amp;nwnear;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ó&quot;</span>: <span class="string">&quot;&amp;oacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ô&quot;</span>: <span class="string">&quot;&amp;ocirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;о&quot;</span>: <span class="string">&quot;&amp;ocy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ő&quot;</span>: <span class="string">&quot;&amp;odblac;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨸&quot;</span>: <span class="string">&quot;&amp;odiv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦼&quot;</span>: <span class="string">&quot;&amp;odsold;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;œ&quot;</span>: <span class="string">&quot;&amp;oelig;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦿&quot;</span>: <span class="string">&quot;&amp;ofcir;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔬&quot;</span>: <span class="string">&quot;&amp;ofr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;˛&quot;</span>: <span class="string">&quot;&amp;ogon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ò&quot;</span>: <span class="string">&quot;&amp;ograve;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧁&quot;</span>: <span class="string">&quot;&amp;ogt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦵&quot;</span>: <span class="string">&quot;&amp;ohbar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦾&quot;</span>: <span class="string">&quot;&amp;olcir;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦻&quot;</span>: <span class="string">&quot;&amp;olcross;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧀&quot;</span>: <span class="string">&quot;&amp;olt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ō&quot;</span>: <span class="string">&quot;&amp;omacr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ω&quot;</span>: <span class="string">&quot;&amp;omega;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ο&quot;</span>: <span class="string">&quot;&amp;omicron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦶&quot;</span>: <span class="string">&quot;&amp;omid;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕠&quot;</span>: <span class="string">&quot;&amp;oopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦷&quot;</span>: <span class="string">&quot;&amp;opar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦹&quot;</span>: <span class="string">&quot;&amp;operp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∨&quot;</span>: <span class="string">&quot;&amp;vee;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩝&quot;</span>: <span class="string">&quot;&amp;ord;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℴ&quot;</span>: <span class="string">&quot;&amp;oscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ª&quot;</span>: <span class="string">&quot;&amp;ordf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;º&quot;</span>: <span class="string">&quot;&amp;ordm;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊶&quot;</span>: <span class="string">&quot;&amp;origof;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩖&quot;</span>: <span class="string">&quot;&amp;oror;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩗&quot;</span>: <span class="string">&quot;&amp;orslope;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩛&quot;</span>: <span class="string">&quot;&amp;orv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ø&quot;</span>: <span class="string">&quot;&amp;oslash;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊘&quot;</span>: <span class="string">&quot;&amp;osol;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;õ&quot;</span>: <span class="string">&quot;&amp;otilde;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨶&quot;</span>: <span class="string">&quot;&amp;otimesas;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ö&quot;</span>: <span class="string">&quot;&amp;ouml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌽&quot;</span>: <span class="string">&quot;&amp;ovbar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¶&quot;</span>: <span class="string">&quot;&amp;para;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫳&quot;</span>: <span class="string">&quot;&amp;parsim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫽&quot;</span>: <span class="string">&quot;&amp;parsl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;п&quot;</span>: <span class="string">&quot;&amp;pcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;%&quot;</span>: <span class="string">&quot;&amp;percnt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;.&quot;</span>: <span class="string">&quot;&amp;period;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‰&quot;</span>: <span class="string">&quot;&amp;permil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‱&quot;</span>: <span class="string">&quot;&amp;pertenk;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔭&quot;</span>: <span class="string">&quot;&amp;pfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;φ&quot;</span>: <span class="string">&quot;&amp;phi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ϕ&quot;</span>: <span class="string">&quot;&amp;varphi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;☎&quot;</span>: <span class="string">&quot;&amp;phone;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;π&quot;</span>: <span class="string">&quot;&amp;pi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ϖ&quot;</span>: <span class="string">&quot;&amp;varpi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ℎ&quot;</span>: <span class="string">&quot;&amp;planckh;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;+&quot;</span>: <span class="string">&quot;&amp;plus;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨣&quot;</span>: <span class="string">&quot;&amp;plusacir;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨢&quot;</span>: <span class="string">&quot;&amp;pluscir;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨥&quot;</span>: <span class="string">&quot;&amp;plusdu;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩲&quot;</span>: <span class="string">&quot;&amp;pluse;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨦&quot;</span>: <span class="string">&quot;&amp;plussim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨧&quot;</span>: <span class="string">&quot;&amp;plustwo;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨕&quot;</span>: <span class="string">&quot;&amp;pointint;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕡&quot;</span>: <span class="string">&quot;&amp;popf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;£&quot;</span>: <span class="string">&quot;&amp;pound;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪳&quot;</span>: <span class="string">&quot;&amp;prE;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪷&quot;</span>: <span class="string">&quot;&amp;precapprox;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪹&quot;</span>: <span class="string">&quot;&amp;prnap;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪵&quot;</span>: <span class="string">&quot;&amp;prnE;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋨&quot;</span>: <span class="string">&quot;&amp;prnsim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;′&quot;</span>: <span class="string">&quot;&amp;prime;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌮&quot;</span>: <span class="string">&quot;&amp;profalar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌒&quot;</span>: <span class="string">&quot;&amp;profline;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌓&quot;</span>: <span class="string">&quot;&amp;profsurf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊰&quot;</span>: <span class="string">&quot;&amp;prurel;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝓅&quot;</span>: <span class="string">&quot;&amp;pscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ψ&quot;</span>: <span class="string">&quot;&amp;psi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot; &quot;</span>: <span class="string">&quot;&amp;puncsp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔮&quot;</span>: <span class="string">&quot;&amp;qfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕢&quot;</span>: <span class="string">&quot;&amp;qopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⁗&quot;</span>: <span class="string">&quot;&amp;qprime;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝓆&quot;</span>: <span class="string">&quot;&amp;qscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨖&quot;</span>: <span class="string">&quot;&amp;quatint;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;?&quot;</span>: <span class="string">&quot;&amp;quest;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤜&quot;</span>: <span class="string">&quot;&amp;rAtail;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥤&quot;</span>: <span class="string">&quot;&amp;rHar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∽̱&quot;</span>: <span class="string">&quot;&amp;race;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ŕ&quot;</span>: <span class="string">&quot;&amp;racute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦳&quot;</span>: <span class="string">&quot;&amp;raemptyv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦒&quot;</span>: <span class="string">&quot;&amp;rangd;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦥&quot;</span>: <span class="string">&quot;&amp;range;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;»&quot;</span>: <span class="string">&quot;&amp;raquo;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥵&quot;</span>: <span class="string">&quot;&amp;rarrap;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤠&quot;</span>: <span class="string">&quot;&amp;rarrbfs;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤳&quot;</span>: <span class="string">&quot;&amp;rarrc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤞&quot;</span>: <span class="string">&quot;&amp;rarrfs;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥅&quot;</span>: <span class="string">&quot;&amp;rarrpl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥴&quot;</span>: <span class="string">&quot;&amp;rarrsim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↣&quot;</span>: <span class="string">&quot;&amp;rightarrowtail;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↝&quot;</span>: <span class="string">&quot;&amp;rightsquigarrow;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤚&quot;</span>: <span class="string">&quot;&amp;ratail;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;∶&quot;</span>: <span class="string">&quot;&amp;ratio;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;❳&quot;</span>: <span class="string">&quot;&amp;rbbrk;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&#125;&quot;</span>: <span class="string">&quot;&amp;rcub;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;]&quot;</span>: <span class="string">&quot;&amp;rsqb;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦌&quot;</span>: <span class="string">&quot;&amp;rbrke;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦎&quot;</span>: <span class="string">&quot;&amp;rbrksld;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦐&quot;</span>: <span class="string">&quot;&amp;rbrkslu;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ř&quot;</span>: <span class="string">&quot;&amp;rcaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ŗ&quot;</span>: <span class="string">&quot;&amp;rcedil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;р&quot;</span>: <span class="string">&quot;&amp;rcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤷&quot;</span>: <span class="string">&quot;&amp;rdca;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥩&quot;</span>: <span class="string">&quot;&amp;rdldhar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;↳&quot;</span>: <span class="string">&quot;&amp;rdsh;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;▭&quot;</span>: <span class="string">&quot;&amp;rect;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥽&quot;</span>: <span class="string">&quot;&amp;rfisht;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔯&quot;</span>: <span class="string">&quot;&amp;rfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥬&quot;</span>: <span class="string">&quot;&amp;rharul;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ρ&quot;</span>: <span class="string">&quot;&amp;rho;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ϱ&quot;</span>: <span class="string">&quot;&amp;varrho;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇉&quot;</span>: <span class="string">&quot;&amp;rrarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋌&quot;</span>: <span class="string">&quot;&amp;rthree;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;˚&quot;</span>: <span class="string">&quot;&amp;ring;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‏&quot;</span>: <span class="string">&quot;&amp;rlm;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⎱&quot;</span>: <span class="string">&quot;&amp;rmoustache;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫮&quot;</span>: <span class="string">&quot;&amp;rnmid;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⟭&quot;</span>: <span class="string">&quot;&amp;roang;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇾&quot;</span>: <span class="string">&quot;&amp;roarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦆&quot;</span>: <span class="string">&quot;&amp;ropar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕣&quot;</span>: <span class="string">&quot;&amp;ropf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨮&quot;</span>: <span class="string">&quot;&amp;roplus;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨵&quot;</span>: <span class="string">&quot;&amp;rotimes;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;)&quot;</span>: <span class="string">&quot;&amp;rpar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦔&quot;</span>: <span class="string">&quot;&amp;rpargt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨒&quot;</span>: <span class="string">&quot;&amp;rppolint;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;›&quot;</span>: <span class="string">&quot;&amp;rsaquo;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝓇&quot;</span>: <span class="string">&quot;&amp;rscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋊&quot;</span>: <span class="string">&quot;&amp;rtimes;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;▹&quot;</span>: <span class="string">&quot;&amp;triangleright;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧎&quot;</span>: <span class="string">&quot;&amp;rtriltri;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥨&quot;</span>: <span class="string">&quot;&amp;ruluhar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;℞&quot;</span>: <span class="string">&quot;&amp;rx;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ś&quot;</span>: <span class="string">&quot;&amp;sacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪴&quot;</span>: <span class="string">&quot;&amp;scE;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪸&quot;</span>: <span class="string">&quot;&amp;succapprox;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;š&quot;</span>: <span class="string">&quot;&amp;scaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ş&quot;</span>: <span class="string">&quot;&amp;scedil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ŝ&quot;</span>: <span class="string">&quot;&amp;scirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪶&quot;</span>: <span class="string">&quot;&amp;succneqq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪺&quot;</span>: <span class="string">&quot;&amp;succnapprox;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋩&quot;</span>: <span class="string">&quot;&amp;succnsim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨓&quot;</span>: <span class="string">&quot;&amp;scpolint;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;с&quot;</span>: <span class="string">&quot;&amp;scy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋅&quot;</span>: <span class="string">&quot;&amp;sdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩦&quot;</span>: <span class="string">&quot;&amp;sdote;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇘&quot;</span>: <span class="string">&quot;&amp;seArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;§&quot;</span>: <span class="string">&quot;&amp;sect;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;;&quot;</span>: <span class="string">&quot;&amp;semi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤩&quot;</span>: <span class="string">&quot;&amp;tosa;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;✶&quot;</span>: <span class="string">&quot;&amp;sext;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔰&quot;</span>: <span class="string">&quot;&amp;sfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;♯&quot;</span>: <span class="string">&quot;&amp;sharp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;щ&quot;</span>: <span class="string">&quot;&amp;shchcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ш&quot;</span>: <span class="string">&quot;&amp;shcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;­&quot;</span>: <span class="string">&quot;&amp;shy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;σ&quot;</span>: <span class="string">&quot;&amp;sigma;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ς&quot;</span>: <span class="string">&quot;&amp;varsigma;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩪&quot;</span>: <span class="string">&quot;&amp;simdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪞&quot;</span>: <span class="string">&quot;&amp;simg;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪠&quot;</span>: <span class="string">&quot;&amp;simgE;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪝&quot;</span>: <span class="string">&quot;&amp;siml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪟&quot;</span>: <span class="string">&quot;&amp;simlE;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≆&quot;</span>: <span class="string">&quot;&amp;simne;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨤&quot;</span>: <span class="string">&quot;&amp;simplus;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥲&quot;</span>: <span class="string">&quot;&amp;simrarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨳&quot;</span>: <span class="string">&quot;&amp;smashp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧤&quot;</span>: <span class="string">&quot;&amp;smeparsl;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌣&quot;</span>: <span class="string">&quot;&amp;ssmile;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪪&quot;</span>: <span class="string">&quot;&amp;smt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪬&quot;</span>: <span class="string">&quot;&amp;smte;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪬︀&quot;</span>: <span class="string">&quot;&amp;smtes;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ь&quot;</span>: <span class="string">&quot;&amp;softcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;/&quot;</span>: <span class="string">&quot;&amp;sol;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧄&quot;</span>: <span class="string">&quot;&amp;solb;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌿&quot;</span>: <span class="string">&quot;&amp;solbar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕤&quot;</span>: <span class="string">&quot;&amp;sopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;♠&quot;</span>: <span class="string">&quot;&amp;spadesuit;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊓︀&quot;</span>: <span class="string">&quot;&amp;sqcaps;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊔︀&quot;</span>: <span class="string">&quot;&amp;sqcups;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝓈&quot;</span>: <span class="string">&quot;&amp;sscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;☆&quot;</span>: <span class="string">&quot;&amp;star;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊂&quot;</span>: <span class="string">&quot;&amp;subset;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫅&quot;</span>: <span class="string">&quot;&amp;subseteqq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪽&quot;</span>: <span class="string">&quot;&amp;subdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫃&quot;</span>: <span class="string">&quot;&amp;subedot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫁&quot;</span>: <span class="string">&quot;&amp;submult;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫋&quot;</span>: <span class="string">&quot;&amp;subsetneqq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊊&quot;</span>: <span class="string">&quot;&amp;subsetneq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪿&quot;</span>: <span class="string">&quot;&amp;subplus;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥹&quot;</span>: <span class="string">&quot;&amp;subrarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫇&quot;</span>: <span class="string">&quot;&amp;subsim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫕&quot;</span>: <span class="string">&quot;&amp;subsub;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫓&quot;</span>: <span class="string">&quot;&amp;subsup;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;♪&quot;</span>: <span class="string">&quot;&amp;sung;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¹&quot;</span>: <span class="string">&quot;&amp;sup1;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;²&quot;</span>: <span class="string">&quot;&amp;sup2;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;³&quot;</span>: <span class="string">&quot;&amp;sup3;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫆&quot;</span>: <span class="string">&quot;&amp;supseteqq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⪾&quot;</span>: <span class="string">&quot;&amp;supdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫘&quot;</span>: <span class="string">&quot;&amp;supdsub;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫄&quot;</span>: <span class="string">&quot;&amp;supedot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⟉&quot;</span>: <span class="string">&quot;&amp;suphsol;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫗&quot;</span>: <span class="string">&quot;&amp;suphsub;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥻&quot;</span>: <span class="string">&quot;&amp;suplarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫂&quot;</span>: <span class="string">&quot;&amp;supmult;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫌&quot;</span>: <span class="string">&quot;&amp;supsetneqq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊋&quot;</span>: <span class="string">&quot;&amp;supsetneq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫀&quot;</span>: <span class="string">&quot;&amp;supplus;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫈&quot;</span>: <span class="string">&quot;&amp;supsim;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫔&quot;</span>: <span class="string">&quot;&amp;supsub;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫖&quot;</span>: <span class="string">&quot;&amp;supsup;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇙&quot;</span>: <span class="string">&quot;&amp;swArr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⤪&quot;</span>: <span class="string">&quot;&amp;swnwar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ß&quot;</span>: <span class="string">&quot;&amp;szlig;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌖&quot;</span>: <span class="string">&quot;&amp;target;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;τ&quot;</span>: <span class="string">&quot;&amp;tau;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ť&quot;</span>: <span class="string">&quot;&amp;tcaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ţ&quot;</span>: <span class="string">&quot;&amp;tcedil;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;т&quot;</span>: <span class="string">&quot;&amp;tcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌕&quot;</span>: <span class="string">&quot;&amp;telrec;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔱&quot;</span>: <span class="string">&quot;&amp;tfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;θ&quot;</span>: <span class="string">&quot;&amp;theta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ϑ&quot;</span>: <span class="string">&quot;&amp;vartheta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;þ&quot;</span>: <span class="string">&quot;&amp;thorn;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;×&quot;</span>: <span class="string">&quot;&amp;times;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨱&quot;</span>: <span class="string">&quot;&amp;timesbar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨰&quot;</span>: <span class="string">&quot;&amp;timesd;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌶&quot;</span>: <span class="string">&quot;&amp;topbot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫱&quot;</span>: <span class="string">&quot;&amp;topcir;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕥&quot;</span>: <span class="string">&quot;&amp;topf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫚&quot;</span>: <span class="string">&quot;&amp;topfork;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‴&quot;</span>: <span class="string">&quot;&amp;tprime;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;▵&quot;</span>: <span class="string">&quot;&amp;utri;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≜&quot;</span>: <span class="string">&quot;&amp;trie;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;◬&quot;</span>: <span class="string">&quot;&amp;tridot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨺&quot;</span>: <span class="string">&quot;&amp;triminus;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨹&quot;</span>: <span class="string">&quot;&amp;triplus;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⧍&quot;</span>: <span class="string">&quot;&amp;trisb;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⨻&quot;</span>: <span class="string">&quot;&amp;tritime;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⏢&quot;</span>: <span class="string">&quot;&amp;trpezium;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝓉&quot;</span>: <span class="string">&quot;&amp;tscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ц&quot;</span>: <span class="string">&quot;&amp;tscy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ћ&quot;</span>: <span class="string">&quot;&amp;tshcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ŧ&quot;</span>: <span class="string">&quot;&amp;tstrok;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥣&quot;</span>: <span class="string">&quot;&amp;uHar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ú&quot;</span>: <span class="string">&quot;&amp;uacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ў&quot;</span>: <span class="string">&quot;&amp;ubrcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ŭ&quot;</span>: <span class="string">&quot;&amp;ubreve;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;û&quot;</span>: <span class="string">&quot;&amp;ucirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;у&quot;</span>: <span class="string">&quot;&amp;ucy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ű&quot;</span>: <span class="string">&quot;&amp;udblac;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⥾&quot;</span>: <span class="string">&quot;&amp;ufisht;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔲&quot;</span>: <span class="string">&quot;&amp;ufr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ù&quot;</span>: <span class="string">&quot;&amp;ugrave;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;▀&quot;</span>: <span class="string">&quot;&amp;uhblk;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌜&quot;</span>: <span class="string">&quot;&amp;ulcorner;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌏&quot;</span>: <span class="string">&quot;&amp;ulcrop;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;◸&quot;</span>: <span class="string">&quot;&amp;ultri;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ū&quot;</span>: <span class="string">&quot;&amp;umacr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ų&quot;</span>: <span class="string">&quot;&amp;uogon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕦&quot;</span>: <span class="string">&quot;&amp;uopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;υ&quot;</span>: <span class="string">&quot;&amp;upsilon;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇈&quot;</span>: <span class="string">&quot;&amp;uuarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌝&quot;</span>: <span class="string">&quot;&amp;urcorner;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⌎&quot;</span>: <span class="string">&quot;&amp;urcrop;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ů&quot;</span>: <span class="string">&quot;&amp;uring;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;◹&quot;</span>: <span class="string">&quot;&amp;urtri;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝓊&quot;</span>: <span class="string">&quot;&amp;uscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋰&quot;</span>: <span class="string">&quot;&amp;utdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ũ&quot;</span>: <span class="string">&quot;&amp;utilde;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ü&quot;</span>: <span class="string">&quot;&amp;uuml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦧&quot;</span>: <span class="string">&quot;&amp;uwangle;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫨&quot;</span>: <span class="string">&quot;&amp;vBar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫩&quot;</span>: <span class="string">&quot;&amp;vBarv;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦜&quot;</span>: <span class="string">&quot;&amp;vangrt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊊︀&quot;</span>: <span class="string">&quot;&amp;vsubne;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫋︀&quot;</span>: <span class="string">&quot;&amp;vsubnE;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊋︀&quot;</span>: <span class="string">&quot;&amp;vsupne;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⫌︀&quot;</span>: <span class="string">&quot;&amp;vsupnE;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;в&quot;</span>: <span class="string">&quot;&amp;vcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⊻&quot;</span>: <span class="string">&quot;&amp;veebar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≚&quot;</span>: <span class="string">&quot;&amp;veeeq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋮&quot;</span>: <span class="string">&quot;&amp;vellip;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔳&quot;</span>: <span class="string">&quot;&amp;vfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕧&quot;</span>: <span class="string">&quot;&amp;vopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝓋&quot;</span>: <span class="string">&quot;&amp;vscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⦚&quot;</span>: <span class="string">&quot;&amp;vzigzag;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ŵ&quot;</span>: <span class="string">&quot;&amp;wcirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⩟&quot;</span>: <span class="string">&quot;&amp;wedbar;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;≙&quot;</span>: <span class="string">&quot;&amp;wedgeq;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;℘&quot;</span>: <span class="string">&quot;&amp;wp;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔴&quot;</span>: <span class="string">&quot;&amp;wfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕨&quot;</span>: <span class="string">&quot;&amp;wopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝓌&quot;</span>: <span class="string">&quot;&amp;wscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔵&quot;</span>: <span class="string">&quot;&amp;xfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ξ&quot;</span>: <span class="string">&quot;&amp;xi;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⋻&quot;</span>: <span class="string">&quot;&amp;xnis;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕩&quot;</span>: <span class="string">&quot;&amp;xopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝓍&quot;</span>: <span class="string">&quot;&amp;xscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ý&quot;</span>: <span class="string">&quot;&amp;yacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;я&quot;</span>: <span class="string">&quot;&amp;yacy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ŷ&quot;</span>: <span class="string">&quot;&amp;ycirc;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ы&quot;</span>: <span class="string">&quot;&amp;ycy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;¥&quot;</span>: <span class="string">&quot;&amp;yen;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔶&quot;</span>: <span class="string">&quot;&amp;yfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ї&quot;</span>: <span class="string">&quot;&amp;yicy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕪&quot;</span>: <span class="string">&quot;&amp;yopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝓎&quot;</span>: <span class="string">&quot;&amp;yscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ю&quot;</span>: <span class="string">&quot;&amp;yucy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ÿ&quot;</span>: <span class="string">&quot;&amp;yuml;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ź&quot;</span>: <span class="string">&quot;&amp;zacute;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ž&quot;</span>: <span class="string">&quot;&amp;zcaron;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;з&quot;</span>: <span class="string">&quot;&amp;zcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ż&quot;</span>: <span class="string">&quot;&amp;zdot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ζ&quot;</span>: <span class="string">&quot;&amp;zeta;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝔷&quot;</span>: <span class="string">&quot;&amp;zfr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ж&quot;</span>: <span class="string">&quot;&amp;zhcy;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;⇝&quot;</span>: <span class="string">&quot;&amp;zigrarr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝕫&quot;</span>: <span class="string">&quot;&amp;zopf;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;𝓏&quot;</span>: <span class="string">&quot;&amp;zscr;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‍&quot;</span>: <span class="string">&quot;&amp;zwj;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;‌&quot;</span>: <span class="string">&quot;&amp;zwnj;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">9613</span>:</span><br><span class="line"><span class="comment">/*!***************************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/html-entities/lib/numeric-unicode-map.js ***!</span></span><br><span class="line"><span class="comment">  \***************************************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, <span class="built_in">exports</span></span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, (&#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">numericUnicodeMap</span> = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="number">65533</span>,</span><br><span class="line">  <span class="number">128</span>: <span class="number">8364</span>,</span><br><span class="line">  <span class="number">130</span>: <span class="number">8218</span>,</span><br><span class="line">  <span class="number">131</span>: <span class="number">402</span>,</span><br><span class="line">  <span class="number">132</span>: <span class="number">8222</span>,</span><br><span class="line">  <span class="number">133</span>: <span class="number">8230</span>,</span><br><span class="line">  <span class="number">134</span>: <span class="number">8224</span>,</span><br><span class="line">  <span class="number">135</span>: <span class="number">8225</span>,</span><br><span class="line">  <span class="number">136</span>: <span class="number">710</span>,</span><br><span class="line">  <span class="number">137</span>: <span class="number">8240</span>,</span><br><span class="line">  <span class="number">138</span>: <span class="number">352</span>,</span><br><span class="line">  <span class="number">139</span>: <span class="number">8249</span>,</span><br><span class="line">  <span class="number">140</span>: <span class="number">338</span>,</span><br><span class="line">  <span class="number">142</span>: <span class="number">381</span>,</span><br><span class="line">  <span class="number">145</span>: <span class="number">8216</span>,</span><br><span class="line">  <span class="number">146</span>: <span class="number">8217</span>,</span><br><span class="line">  <span class="number">147</span>: <span class="number">8220</span>,</span><br><span class="line">  <span class="number">148</span>: <span class="number">8221</span>,</span><br><span class="line">  <span class="number">149</span>: <span class="number">8226</span>,</span><br><span class="line">  <span class="number">150</span>: <span class="number">8211</span>,</span><br><span class="line">  <span class="number">151</span>: <span class="number">8212</span>,</span><br><span class="line">  <span class="number">152</span>: <span class="number">732</span>,</span><br><span class="line">  <span class="number">153</span>: <span class="number">8482</span>,</span><br><span class="line">  <span class="number">154</span>: <span class="number">353</span>,</span><br><span class="line">  <span class="number">155</span>: <span class="number">8250</span>,</span><br><span class="line">  <span class="number">156</span>: <span class="number">339</span>,</span><br><span class="line">  <span class="number">158</span>: <span class="number">382</span>,</span><br><span class="line">  <span class="number">159</span>: <span class="number">376</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">8305</span>:</span><br><span class="line"><span class="comment">/*!***********************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/html-entities/lib/surrogate-pairs.js ***!</span></span><br><span class="line"><span class="comment">  \***********************************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, <span class="built_in">exports</span></span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, (&#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">fromCodePoint</span> = <span class="title class_">String</span>.<span class="property">fromCodePoint</span> || <span class="keyword">function</span> (<span class="params">astralCodePoint</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>((astralCodePoint - <span class="number">65536</span>) / <span class="number">1024</span>) + <span class="number">55296</span>, (astralCodePoint - <span class="number">65536</span>) % <span class="number">1024</span> + <span class="number">56320</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">getCodePoint</span> = <span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">codePointAt</span> ? <span class="keyword">function</span> (<span class="params">input, position</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> input.<span class="title function_">codePointAt</span>(position);</span><br><span class="line">&#125; : <span class="keyword">function</span> (<span class="params">input, position</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (input.<span class="title function_">charCodeAt</span>(position) - <span class="number">55296</span>) * <span class="number">1024</span> + input.<span class="title function_">charCodeAt</span>(position + <span class="number">1</span>) - <span class="number">56320</span> + <span class="number">65536</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">highSurrogateFrom</span> = <span class="number">55296</span>;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">highSurrogateTo</span> = <span class="number">56319</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">5218</span>:</span><br><span class="line"><span class="comment">/*!***************************************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/webpack-dev-server/client/clients/WebSocketClient.js ***!</span></span><br><span class="line"><span class="comment">  \***************************************************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;default&quot;</span>: <span class="function">() =&gt;</span> (<span class="comment">/* binding */</span> <span class="title class_">WebSocketClient</span>)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _utils_log_js__WEBPACK_IMPORTED_MODULE_0__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ../utils/log.js */</span> <span class="number">4664</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_classCallCheck</span>(<span class="params">instance, Constructor</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> <span class="title class_">Constructor</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Cannot call a class as a function&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_defineProperties</span>(<span class="params">target, props</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; props.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> descriptor = props[i];</span><br><span class="line">    descriptor.<span class="property">enumerable</span> = descriptor.<span class="property">enumerable</span> || <span class="literal">false</span>;</span><br><span class="line">    descriptor.<span class="property">configurable</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;value&quot;</span> <span class="keyword">in</span> descriptor) descriptor.<span class="property">writable</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, descriptor.<span class="property">key</span>, descriptor);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_createClass</span>(<span class="params">Constructor, protoProps, staticProps</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (protoProps) <span class="title function_">_defineProperties</span>(<span class="title class_">Constructor</span>.<span class="property"><span class="keyword">prototype</span></span>, protoProps);</span><br><span class="line">  <span class="keyword">if</span> (staticProps) <span class="title function_">_defineProperties</span>(<span class="title class_">Constructor</span>, staticProps);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Constructor</span>, <span class="string">&quot;prototype&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Constructor</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">WebSocketClient</span> = <span class="comment">/*#__PURE__*/</span><span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">url</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">WebSocketClient</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="title function_">_classCallCheck</span>(<span class="variable language_">this</span>, <span class="title class_">WebSocketClient</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">client</span> = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(url);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">client</span>.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">      _utils_log_js__WEBPACK_IMPORTED_MODULE_0__.<span class="property">log</span>.<span class="title function_">error</span>(error);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">(...args: any[]) =&gt; void</span>&#125; <span class="variable">f</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">_createClass</span>(<span class="title class_">WebSocketClient</span>, [&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;onOpen&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">onOpen</span>(<span class="params">f</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">client</span>.<span class="property">onopen</span> = f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">(...args: any[]) =&gt; void</span>&#125; <span class="variable">f</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;onClose&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">onClose</span>(<span class="params">f</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">client</span>.<span class="property">onclose</span> = f;</span><br><span class="line">    &#125; <span class="comment">// call f with the message string as the first argument</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">(...args: any[]) =&gt; void</span>&#125; <span class="variable">f</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;onMessage&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">onMessage</span>(<span class="params">f</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">client</span>.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="title function_">f</span>(e.<span class="property">data</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">WebSocketClient</span>;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">1211</span>:</span><br><span class="line"><span class="comment">/*!************************************************************************************************************************************************************************************************************************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/webpack-dev-server/client/index.js?protocol=auto%3A&amp;username=&amp;password=&amp;hostname=0.0.0.0&amp;port=0&amp;pathname=%2Fng-cli-ws&amp;logging=info&amp;overlay=%7B%22errors%22%3Atrue%2C%22warnings%22%3Afalse%7D&amp;reconnect=10&amp;hot=false&amp;live-reload=true ***!</span></span><br><span class="line"><span class="comment">  \************************************************************************************************************************************************************************************************************************************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> __resourceQuery = <span class="string">&quot;?protocol=auto%3A&amp;username=&amp;password=&amp;hostname=0.0.0.0&amp;port=0&amp;pathname=%2Fng-cli-ws&amp;logging=info&amp;overlay=%7B%22errors%22%3Atrue%2C%22warnings%22%3Afalse%7D&amp;reconnect=10&amp;hot=false&amp;live-reload=true&quot;</span>;</span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! webpack/hot/log.js */</span> <span class="number">1877</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0___default = <span class="comment">/*#__PURE__*/</span>__webpack_require__.<span class="title function_">n</span>(webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0__);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _utils_stripAnsi_js__WEBPACK_IMPORTED_MODULE_1__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./utils/stripAnsi.js */</span> <span class="number">8931</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _utils_parseURL_js__WEBPACK_IMPORTED_MODULE_2__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./utils/parseURL.js */</span> <span class="number">8587</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _socket_js__WEBPACK_IMPORTED_MODULE_3__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./socket.js */</span> <span class="number">9178</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _overlay_js__WEBPACK_IMPORTED_MODULE_4__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./overlay.js */</span> <span class="number">4754</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _utils_log_js__WEBPACK_IMPORTED_MODULE_5__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./utils/log.js */</span> <span class="number">4664</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./utils/sendMessage.js */</span> <span class="number">430</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _utils_reloadApp_js__WEBPACK_IMPORTED_MODULE_7__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./utils/reloadApp.js */</span> <span class="number">4163</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _utils_createSocketURL_js__WEBPACK_IMPORTED_MODULE_8__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./utils/createSocketURL.js */</span> <span class="number">7308</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ownKeys</span>(<span class="params">object, enumerableOnly</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(object);</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property">getOwnPropertySymbols</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(object);</span><br><span class="line">    enumerableOnly &amp;&amp; (symbols = symbols.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">sym</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(object, sym).<span class="property">enumerable</span>;</span><br><span class="line">    &#125;)), keys.<span class="property">push</span>.<span class="title function_">apply</span>(keys, symbols);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> keys;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_objectSpread</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> source = <span class="literal">null</span> != <span class="variable language_">arguments</span>[i] ? <span class="variable language_">arguments</span>[i] : &#123;&#125;;</span><br><span class="line">    i % <span class="number">2</span> ? <span class="title function_">ownKeys</span>(<span class="title class_">Object</span>(source), !<span class="number">0</span>).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">      <span class="title function_">_defineProperty</span>(target, key, source[key]);</span><br><span class="line">    &#125;) : <span class="title class_">Object</span>.<span class="property">getOwnPropertyDescriptors</span> ? <span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(target, <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(source)) : <span class="title function_">ownKeys</span>(<span class="title class_">Object</span>(source)).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, key, <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(source, key));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_defineProperty</span>(<span class="params">obj, key, value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">      <span class="attr">value</span>: value,</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    obj[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* global __resourceQuery, __webpack_hash__ */</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;webpack/module&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@typedef</span> &#123;<span class="type">Object</span>&#125; <span class="variable">Options</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> &#123;<span class="type">boolean</span>&#125; <span class="variable">hot</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> &#123;<span class="type">boolean</span>&#125; <span class="variable">liveReload</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> &#123;<span class="type">boolean</span>&#125; <span class="variable">progress</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> &#123;<span class="type">boolean | &#123; warnings?: boolean, errors?: boolean, trustedTypesPolicyName?: string </span>&#125;&#125; overlay</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> &#123;<span class="type">string</span>&#125; [logging]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> &#123;<span class="type">number</span>&#125; [reconnect]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@typedef</span> &#123;<span class="type">Object</span>&#125; <span class="variable">Status</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> &#123;<span class="type">boolean</span>&#125; <span class="variable">isUnloading</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> &#123;<span class="type">string</span>&#125; <span class="variable">currentHash</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> &#123;<span class="type">string</span>&#125; [previousHash]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type</span> &#123;<span class="type">Status</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> status = &#123;</span><br><span class="line">  <span class="attr">isUnloading</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// TODO Workaround for webpack v4, `__webpack_hash__` is not replaced without HotModuleReplacement</span></span><br><span class="line">  <span class="comment">// eslint-disable-next-line camelcase</span></span><br><span class="line">  <span class="attr">currentHash</span>:  <span class="literal">true</span> ? __webpack_require__.<span class="title function_">h</span>() : <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">Options</span>&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  <span class="attr">hot</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">liveReload</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">progress</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">overlay</span>: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> parsedResourceQuery = (<span class="number">0</span>,_utils_parseURL_js__WEBPACK_IMPORTED_MODULE_2__[<span class="string">&quot;default&quot;</span>])(__resourceQuery);</span><br><span class="line"><span class="keyword">var</span> enabledFeatures = &#123;</span><br><span class="line">  <span class="string">&quot;Hot Module Replacement&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;Live Reloading&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="title class_">Progress</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="title class_">Overlay</span>: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (parsedResourceQuery.<span class="property">hot</span> === <span class="string">&quot;true&quot;</span>) &#123;</span><br><span class="line">  options.<span class="property">hot</span> = <span class="literal">true</span>;</span><br><span class="line">  enabledFeatures[<span class="string">&quot;Hot Module Replacement&quot;</span>] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parsedResourceQuery[<span class="string">&quot;live-reload&quot;</span>] === <span class="string">&quot;true&quot;</span>) &#123;</span><br><span class="line">  options.<span class="property">liveReload</span> = <span class="literal">true</span>;</span><br><span class="line">  enabledFeatures[<span class="string">&quot;Live Reloading&quot;</span>] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parsedResourceQuery.<span class="property">progress</span> === <span class="string">&quot;true&quot;</span>) &#123;</span><br><span class="line">  options.<span class="property">progress</span> = <span class="literal">true</span>;</span><br><span class="line">  enabledFeatures.<span class="property">Progress</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parsedResourceQuery.<span class="property">overlay</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    options.<span class="property">overlay</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(parsedResourceQuery.<span class="property">overlay</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.<span class="property">log</span>.<span class="title function_">error</span>(<span class="string">&quot;Error parsing overlay options from resource query:&quot;</span>, e);</span><br><span class="line">  &#125; <span class="comment">// Fill in default &quot;true&quot; params for partially-specified objects.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">overlay</span> === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    options.<span class="property">overlay</span> = <span class="title function_">_objectSpread</span>(&#123;</span><br><span class="line">      <span class="attr">errors</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">warnings</span>: <span class="literal">true</span></span><br><span class="line">    &#125;, options.<span class="property">overlay</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  enabledFeatures.<span class="property">Overlay</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parsedResourceQuery.<span class="property">logging</span>) &#123;</span><br><span class="line">  options.<span class="property">logging</span> = parsedResourceQuery.<span class="property">logging</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> parsedResourceQuery.<span class="property">reconnect</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">  options.<span class="property">reconnect</span> = <span class="title class_">Number</span>(parsedResourceQuery.<span class="property">reconnect</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">level</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setAllLogLevel</span>(<span class="params">level</span>) &#123;</span><br><span class="line">  <span class="comment">// This is needed because the HMR logger operate separately from dev server logger</span></span><br><span class="line">  <span class="title function_">webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0___default</span>().<span class="title function_">setLogLevel</span>(level === <span class="string">&quot;verbose&quot;</span> || level === <span class="string">&quot;log&quot;</span> ? <span class="string">&quot;info&quot;</span> : level);</span><br><span class="line">  (<span class="number">0</span>,_utils_log_js__WEBPACK_IMPORTED_MODULE_5__.<span class="property">setLogLevel</span>)(level);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (options.<span class="property">logging</span>) &#123;</span><br><span class="line">  <span class="title function_">setAllLogLevel</span>(options.<span class="property">logging</span>);</span><br><span class="line">&#125;</span><br><span class="line">(<span class="number">0</span>,_utils_log_js__WEBPACK_IMPORTED_MODULE_5__.<span class="property">logEnabledFeatures</span>)(enabledFeatures);</span><br><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;beforeunload&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  status.<span class="property">isUnloading</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> onSocketMessage = &#123;</span><br><span class="line">  <span class="attr">hot</span>: <span class="keyword">function</span> <span class="title function_">hot</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (parsedResourceQuery.<span class="property">hot</span> === <span class="string">&quot;false&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    options.<span class="property">hot</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">liveReload</span>: <span class="keyword">function</span> <span class="title function_">liveReload</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (parsedResourceQuery[<span class="string">&quot;live-reload&quot;</span>] === <span class="string">&quot;false&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    options.<span class="property">liveReload</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">invalid</span>: <span class="keyword">function</span> <span class="title function_">invalid</span>(<span class="params"></span>) &#123;</span><br><span class="line">    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.<span class="property">log</span>.<span class="title function_">info</span>(<span class="string">&quot;App updated. Recompiling...&quot;</span>); <span class="comment">// Fixes #1042. overlay doesn&#x27;t clear if errors are fixed but warnings remain.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">overlay</span>) &#123;</span><br><span class="line">      (<span class="number">0</span>,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.<span class="property">hide</span>)();</span><br><span class="line">    &#125;</span><br><span class="line">    (<span class="number">0</span>,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__[<span class="string">&quot;default&quot;</span>])(<span class="string">&quot;Invalid&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">hash</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">hash</span>: <span class="keyword">function</span> <span class="title function_">hash</span>(<span class="params">_hash</span>) &#123;</span><br><span class="line">    status.<span class="property">previousHash</span> = status.<span class="property">currentHash</span>;</span><br><span class="line">    status.<span class="property">currentHash</span> = _hash;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">logging</span>: setAllLogLevel,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">boolean</span>&#125; <span class="variable">value</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">overlay</span>: <span class="keyword">function</span> <span class="title function_">overlay</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">document</span> === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    options.<span class="property">overlay</span> = value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">value</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">reconnect</span>: <span class="keyword">function</span> <span class="title function_">reconnect</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (parsedResourceQuery.<span class="property">reconnect</span> === <span class="string">&quot;false&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    options.<span class="property">reconnect</span> = value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">boolean</span>&#125; <span class="variable">value</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">progress</span>: <span class="keyword">function</span> <span class="title function_">progress</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    options.<span class="property">progress</span> = value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">&#123; pluginName?: string, percent: number, msg: string </span>&#125;&#125; data</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="string">&quot;progress-update&quot;</span>: <span class="keyword">function</span> <span class="title function_">progressUpdate</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">progress</span>) &#123;</span><br><span class="line">      _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.<span class="property">log</span>.<span class="title function_">info</span>(<span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(data.<span class="property">pluginName</span> ? <span class="string">&quot;[&quot;</span>.<span class="title function_">concat</span>(data.<span class="property">pluginName</span>, <span class="string">&quot;] &quot;</span>) : <span class="string">&quot;&quot;</span>).<span class="title function_">concat</span>(data.<span class="property">percent</span>, <span class="string">&quot;% - &quot;</span>).<span class="title function_">concat</span>(data.<span class="property">msg</span>, <span class="string">&quot;.&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    (<span class="number">0</span>,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__[<span class="string">&quot;default&quot;</span>])(<span class="string">&quot;Progress&quot;</span>, data);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;still-ok&quot;</span>: <span class="keyword">function</span> <span class="title function_">stillOk</span>(<span class="params"></span>) &#123;</span><br><span class="line">    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.<span class="property">log</span>.<span class="title function_">info</span>(<span class="string">&quot;Nothing changed.&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">overlay</span>) &#123;</span><br><span class="line">      (<span class="number">0</span>,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.<span class="property">hide</span>)();</span><br><span class="line">    &#125;</span><br><span class="line">    (<span class="number">0</span>,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__[<span class="string">&quot;default&quot;</span>])(<span class="string">&quot;StillOk&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">ok</span>: <span class="keyword">function</span> <span class="title function_">ok</span>(<span class="params"></span>) &#123;</span><br><span class="line">    (<span class="number">0</span>,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__[<span class="string">&quot;default&quot;</span>])(<span class="string">&quot;Ok&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">overlay</span>) &#123;</span><br><span class="line">      (<span class="number">0</span>,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.<span class="property">hide</span>)();</span><br><span class="line">    &#125;</span><br><span class="line">    (<span class="number">0</span>,_utils_reloadApp_js__WEBPACK_IMPORTED_MODULE_7__[<span class="string">&quot;default&quot;</span>])(options, status);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> remove in v5 in favor of &#x27;static-changed&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">file</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="string">&quot;content-changed&quot;</span>: <span class="keyword">function</span> <span class="title function_">contentChanged</span>(<span class="params">file</span>) &#123;</span><br><span class="line">    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.<span class="property">log</span>.<span class="title function_">info</span>(<span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(file ? <span class="string">&quot;\&quot;&quot;</span>.<span class="title function_">concat</span>(file, <span class="string">&quot;\&quot;&quot;</span>) : <span class="string">&quot;Content&quot;</span>, <span class="string">&quot; from static directory was changed. Reloading...&quot;</span>));</span><br><span class="line">    self.<span class="property">location</span>.<span class="title function_">reload</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">file</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="string">&quot;static-changed&quot;</span>: <span class="keyword">function</span> <span class="title function_">staticChanged</span>(<span class="params">file</span>) &#123;</span><br><span class="line">    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.<span class="property">log</span>.<span class="title function_">info</span>(<span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(file ? <span class="string">&quot;\&quot;&quot;</span>.<span class="title function_">concat</span>(file, <span class="string">&quot;\&quot;&quot;</span>) : <span class="string">&quot;Content&quot;</span>, <span class="string">&quot; from static directory was changed. Reloading...&quot;</span>));</span><br><span class="line">    self.<span class="property">location</span>.<span class="title function_">reload</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Error[]</span>&#125; <span class="variable">warnings</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">any</span>&#125; <span class="variable">params</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">warnings</span>: <span class="keyword">function</span> <span class="title function_">warnings</span>(<span class="params">_warnings, params</span>) &#123;</span><br><span class="line">    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.<span class="property">log</span>.<span class="title function_">warn</span>(<span class="string">&quot;Warnings while compiling.&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> printableWarnings = _warnings.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> _formatProblem = (<span class="number">0</span>,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.<span class="property">formatProblem</span>)(<span class="string">&quot;warning&quot;</span>, error),</span><br><span class="line">        header = _formatProblem.<span class="property">header</span>,</span><br><span class="line">        body = _formatProblem.<span class="property">body</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(header, <span class="string">&quot;\n&quot;</span>).<span class="title function_">concat</span>((<span class="number">0</span>,_utils_stripAnsi_js__WEBPACK_IMPORTED_MODULE_1__[<span class="string">&quot;default&quot;</span>])(body));</span><br><span class="line">    &#125;);</span><br><span class="line">    (<span class="number">0</span>,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__[<span class="string">&quot;default&quot;</span>])(<span class="string">&quot;Warnings&quot;</span>, printableWarnings);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; printableWarnings.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.<span class="property">log</span>.<span class="title function_">warn</span>(printableWarnings[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> needShowOverlayForWarnings = <span class="keyword">typeof</span> options.<span class="property">overlay</span> === <span class="string">&quot;boolean&quot;</span> ? options.<span class="property">overlay</span> : options.<span class="property">overlay</span> &amp;&amp; options.<span class="property">overlay</span>.<span class="property">warnings</span>;</span><br><span class="line">    <span class="keyword">if</span> (needShowOverlayForWarnings) &#123;</span><br><span class="line">      <span class="keyword">var</span> trustedTypesPolicyName = <span class="keyword">typeof</span> options.<span class="property">overlay</span> === <span class="string">&quot;object&quot;</span> &amp;&amp; options.<span class="property">overlay</span>.<span class="property">trustedTypesPolicyName</span>;</span><br><span class="line">      (<span class="number">0</span>,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.<span class="property">show</span>)(<span class="string">&quot;warning&quot;</span>, _warnings, trustedTypesPolicyName || <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (params &amp;&amp; params.<span class="property">preventReloading</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    (<span class="number">0</span>,_utils_reloadApp_js__WEBPACK_IMPORTED_MODULE_7__[<span class="string">&quot;default&quot;</span>])(options, status);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Error[]</span>&#125; <span class="variable">errors</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">errors</span>: <span class="keyword">function</span> <span class="title function_">errors</span>(<span class="params">_errors</span>) &#123;</span><br><span class="line">    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.<span class="property">log</span>.<span class="title function_">error</span>(<span class="string">&quot;Errors while compiling. Reload prevented.&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> printableErrors = _errors.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> _formatProblem2 = (<span class="number">0</span>,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.<span class="property">formatProblem</span>)(<span class="string">&quot;error&quot;</span>, error),</span><br><span class="line">        header = _formatProblem2.<span class="property">header</span>,</span><br><span class="line">        body = _formatProblem2.<span class="property">body</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(header, <span class="string">&quot;\n&quot;</span>).<span class="title function_">concat</span>((<span class="number">0</span>,_utils_stripAnsi_js__WEBPACK_IMPORTED_MODULE_1__[<span class="string">&quot;default&quot;</span>])(body));</span><br><span class="line">    &#125;);</span><br><span class="line">    (<span class="number">0</span>,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__[<span class="string">&quot;default&quot;</span>])(<span class="string">&quot;Errors&quot;</span>, printableErrors);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; printableErrors.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.<span class="property">log</span>.<span class="title function_">error</span>(printableErrors[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> needShowOverlayForErrors = <span class="keyword">typeof</span> options.<span class="property">overlay</span> === <span class="string">&quot;boolean&quot;</span> ? options.<span class="property">overlay</span> : options.<span class="property">overlay</span> &amp;&amp; options.<span class="property">overlay</span>.<span class="property">errors</span>;</span><br><span class="line">    <span class="keyword">if</span> (needShowOverlayForErrors) &#123;</span><br><span class="line">      <span class="keyword">var</span> trustedTypesPolicyName = <span class="keyword">typeof</span> options.<span class="property">overlay</span> === <span class="string">&quot;object&quot;</span> &amp;&amp; options.<span class="property">overlay</span>.<span class="property">trustedTypesPolicyName</span>;</span><br><span class="line">      (<span class="number">0</span>,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.<span class="property">show</span>)(<span class="string">&quot;error&quot;</span>, _errors, trustedTypesPolicyName || <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Error</span>&#125; <span class="variable">error</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">_error</span>) &#123;</span><br><span class="line">    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.<span class="property">log</span>.<span class="title function_">error</span>(_error);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">close</span>: <span class="keyword">function</span> <span class="title function_">close</span>(<span class="params"></span>) &#123;</span><br><span class="line">    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.<span class="property">log</span>.<span class="title function_">info</span>(<span class="string">&quot;Disconnected!&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">overlay</span>) &#123;</span><br><span class="line">      (<span class="number">0</span>,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.<span class="property">hide</span>)();</span><br><span class="line">    &#125;</span><br><span class="line">    (<span class="number">0</span>,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__[<span class="string">&quot;default&quot;</span>])(<span class="string">&quot;Close&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> socketURL = (<span class="number">0</span>,_utils_createSocketURL_js__WEBPACK_IMPORTED_MODULE_8__[<span class="string">&quot;default&quot;</span>])(parsedResourceQuery);</span><br><span class="line">(<span class="number">0</span>,_socket_js__WEBPACK_IMPORTED_MODULE_3__[<span class="string">&quot;default&quot;</span>])(socketURL, onSocketMessage, options.<span class="property">reconnect</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">3431</span>:</span><br><span class="line"><span class="comment">/*!************************************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/webpack-dev-server/client/modules/logger/index.js ***!</span></span><br><span class="line"><span class="comment">  \************************************************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, <span class="built_in">exports</span></span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// webpackBootstrap</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">    <span class="comment">/***/</span><span class="string">&quot;./client-src/modules/logger/SyncBailHookFake.js&quot;</span>:</span><br><span class="line">    <span class="comment">/*!*******************************************************!*\</span></span><br><span class="line"><span class="comment">      !*** ./client-src/modules/logger/SyncBailHookFake.js ***!</span></span><br><span class="line"><span class="comment">      \*******************************************************/</span></span><br><span class="line">    <span class="comment">/***/</span></span><br><span class="line">    <span class="keyword">function</span> (<span class="params"><span class="variable language_">module</span></span>) &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Client stub for tapable SyncBailHook</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">      <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> <span class="title function_">clientTapableSyncBailHook</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">call</span>: <span class="keyword">function</span> <span class="title function_">call</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/***/</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***/</span><span class="string">&quot;./node_modules/webpack/lib/logging/Logger.js&quot;</span>:</span><br><span class="line">    <span class="comment">/*!****************************************************!*\</span></span><br><span class="line"><span class="comment">      !*** ./node_modules/webpack/lib/logging/Logger.js ***!</span></span><br><span class="line"><span class="comment">      \****************************************************/</span></span><br><span class="line">    <span class="comment">/***/</span></span><br><span class="line">    <span class="keyword">function</span> (<span class="params">__unused_webpack_module, <span class="built_in">exports</span></span>) &#123;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      	MIT License http://www.opensource.org/licenses/mit-license.php</span></span><br><span class="line"><span class="comment">      	Author Tobias Koppers @sokra</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">_toConsumableArray</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">_arrayWithoutHoles</span>(arr) || <span class="title function_">_iterableToArray</span>(arr) || <span class="title function_">_unsupportedIterableToArray</span>(arr) || <span class="title function_">_nonIterableSpread</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">_nonIterableSpread</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">_unsupportedIterableToArray</span>(<span class="params">o, minLen</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!o) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> o === <span class="string">&quot;string&quot;</span>) <span class="keyword">return</span> <span class="title function_">_arrayLikeToArray</span>(o, minLen);</span><br><span class="line">        <span class="keyword">var</span> n = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (n === <span class="string">&quot;Object&quot;</span> &amp;&amp; o.<span class="property">constructor</span>) n = o.<span class="property">constructor</span>.<span class="property">name</span>;</span><br><span class="line">        <span class="keyword">if</span> (n === <span class="string">&quot;Map&quot;</span> || n === <span class="string">&quot;Set&quot;</span>) <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(o);</span><br><span class="line">        <span class="keyword">if</span> (n === <span class="string">&quot;Arguments&quot;</span> || <span class="regexp">/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/</span>.<span class="title function_">test</span>(n)) <span class="keyword">return</span> <span class="title function_">_arrayLikeToArray</span>(o, minLen);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">_iterableToArray</span>(<span class="params">iter</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">typeof</span> (<span class="keyword">typeof</span> <span class="title class_">Symbol</span> !== <span class="string">&quot;undefined&quot;</span> ? <span class="title class_">Symbol</span> : <span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> i;</span><br><span class="line">        &#125;) !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; iter[(<span class="keyword">typeof</span> <span class="title class_">Symbol</span> !== <span class="string">&quot;undefined&quot;</span> ? <span class="title class_">Symbol</span> : <span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> i;</span><br><span class="line">        &#125;).<span class="property">iterator</span>] != <span class="literal">null</span> || iter[<span class="string">&quot;@@iterator&quot;</span>] != <span class="literal">null</span>) <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(iter);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">_arrayWithoutHoles</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) <span class="keyword">return</span> <span class="title function_">_arrayLikeToArray</span>(arr);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">_arrayLikeToArray</span>(<span class="params">arr, len</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="literal">null</span> || len &gt; arr.<span class="property">length</span>) len = arr.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(len); i &lt; len; i++) &#123;</span><br><span class="line">          arr2[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr2;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">_classCallCheck</span>(<span class="params">instance, Constructor</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> <span class="title class_">Constructor</span>)) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Cannot call a class as a function&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">_defineProperties</span>(<span class="params">target, props</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; props.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> descriptor = props[i];</span><br><span class="line">          descriptor.<span class="property">enumerable</span> = descriptor.<span class="property">enumerable</span> || <span class="literal">false</span>;</span><br><span class="line">          descriptor.<span class="property">configurable</span> = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">if</span> (<span class="string">&quot;value&quot;</span> <span class="keyword">in</span> descriptor) descriptor.<span class="property">writable</span> = <span class="literal">true</span>;</span><br><span class="line">          <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, descriptor.<span class="property">key</span>, descriptor);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">_createClass</span>(<span class="params">Constructor, protoProps, staticProps</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (protoProps) <span class="title function_">_defineProperties</span>(<span class="title class_">Constructor</span>.<span class="property"><span class="keyword">prototype</span></span>, protoProps);</span><br><span class="line">        <span class="keyword">if</span> (staticProps) <span class="title function_">_defineProperties</span>(<span class="title class_">Constructor</span>, staticProps);</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Constructor</span>, <span class="string">&quot;prototype&quot;</span>, &#123;</span><br><span class="line">          <span class="attr">writable</span>: <span class="literal">false</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Constructor</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> <span class="title class_">LogType</span> = <span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123;</span><br><span class="line">        <span class="attr">error</span>: <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">&quot;error&quot;</span>&#125; */</span></span><br><span class="line">        <span class="string">&quot;error&quot;</span>,</span><br><span class="line">        <span class="comment">// message, c style arguments</span></span><br><span class="line">        <span class="attr">warn</span>: <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">&quot;warn&quot;</span>&#125; */</span></span><br><span class="line">        <span class="string">&quot;warn&quot;</span>,</span><br><span class="line">        <span class="comment">// message, c style arguments</span></span><br><span class="line">        <span class="attr">info</span>: <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">&quot;info&quot;</span>&#125; */</span></span><br><span class="line">        <span class="string">&quot;info&quot;</span>,</span><br><span class="line">        <span class="comment">// message, c style arguments</span></span><br><span class="line">        <span class="attr">log</span>: <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">&quot;log&quot;</span>&#125; */</span></span><br><span class="line">        <span class="string">&quot;log&quot;</span>,</span><br><span class="line">        <span class="comment">// message, c style arguments</span></span><br><span class="line">        <span class="attr">debug</span>: <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">&quot;debug&quot;</span>&#125; */</span></span><br><span class="line">        <span class="string">&quot;debug&quot;</span>,</span><br><span class="line">        <span class="comment">// message, c style arguments</span></span><br><span class="line">        <span class="attr">trace</span>: <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">&quot;trace&quot;</span>&#125; */</span></span><br><span class="line">        <span class="string">&quot;trace&quot;</span>,</span><br><span class="line">        <span class="comment">// no arguments</span></span><br><span class="line">        <span class="attr">group</span>: <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">&quot;group&quot;</span>&#125; */</span></span><br><span class="line">        <span class="string">&quot;group&quot;</span>,</span><br><span class="line">        <span class="comment">// [label]</span></span><br><span class="line">        <span class="attr">groupCollapsed</span>: <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">&quot;groupCollapsed&quot;</span>&#125; */</span></span><br><span class="line">        <span class="string">&quot;groupCollapsed&quot;</span>,</span><br><span class="line">        <span class="comment">// [label]</span></span><br><span class="line">        <span class="attr">groupEnd</span>: <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">&quot;groupEnd&quot;</span>&#125; */</span></span><br><span class="line">        <span class="string">&quot;groupEnd&quot;</span>,</span><br><span class="line">        <span class="comment">// [label]</span></span><br><span class="line">        <span class="attr">profile</span>: <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">&quot;profile&quot;</span>&#125; */</span></span><br><span class="line">        <span class="string">&quot;profile&quot;</span>,</span><br><span class="line">        <span class="comment">// [profileName]</span></span><br><span class="line">        <span class="attr">profileEnd</span>: <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">&quot;profileEnd&quot;</span>&#125; */</span></span><br><span class="line">        <span class="string">&quot;profileEnd&quot;</span>,</span><br><span class="line">        <span class="comment">// [profileName]</span></span><br><span class="line">        <span class="attr">time</span>: <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">&quot;time&quot;</span>&#125; */</span></span><br><span class="line">        <span class="string">&quot;time&quot;</span>,</span><br><span class="line">        <span class="comment">// name, time as [seconds, nanoseconds]</span></span><br><span class="line">        <span class="attr">clear</span>: <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">&quot;clear&quot;</span>&#125; */</span></span><br><span class="line">        <span class="string">&quot;clear&quot;</span>,</span><br><span class="line">        <span class="comment">// no arguments</span></span><br><span class="line">        <span class="attr">status</span>: <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">&quot;status&quot;</span>&#125; */</span></span><br><span class="line">        <span class="string">&quot;status&quot;</span> <span class="comment">// message, arguments</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">exports</span>.<span class="property">LogType</span> = <span class="title class_">LogType</span>;</span><br><span class="line">      <span class="comment">/** <span class="doctag">@typedef</span> &#123;<span class="type">typeof LogType[keyof typeof LogType]</span>&#125; LogTypeEnum */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> <span class="variable constant_">LOG_SYMBOL</span> = (<span class="keyword">typeof</span> <span class="title class_">Symbol</span> !== <span class="string">&quot;undefined&quot;</span> ? <span class="title class_">Symbol</span> : <span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">      &#125;)(<span class="string">&quot;webpack logger raw log method&quot;</span>);</span><br><span class="line">      <span class="keyword">var</span> <span class="variable constant_">TIMERS_SYMBOL</span> = (<span class="keyword">typeof</span> <span class="title class_">Symbol</span> !== <span class="string">&quot;undefined&quot;</span> ? <span class="title class_">Symbol</span> : <span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">      &#125;)(<span class="string">&quot;webpack logger times&quot;</span>);</span><br><span class="line">      <span class="keyword">var</span> <span class="variable constant_">TIMERS_AGGREGATES_SYMBOL</span> = (<span class="keyword">typeof</span> <span class="title class_">Symbol</span> !== <span class="string">&quot;undefined&quot;</span> ? <span class="title class_">Symbol</span> : <span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">      &#125;)(<span class="string">&quot;webpack logger aggregated times&quot;</span>);</span><br><span class="line">      <span class="keyword">var</span> <span class="title class_">WebpackLogger</span> = <span class="comment">/*#__PURE__*/</span><span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> &#123;<span class="type">function(LogTypeEnum, any[]=): void</span>&#125; log log function</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> &#123;<span class="type">function(string | function(): string): WebpackLogger</span>&#125; getChildLogger function to create child logger</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">WebpackLogger</span>(<span class="params">log, getChildLogger</span>) &#123;</span><br><span class="line">          <span class="title function_">_classCallCheck</span>(<span class="variable language_">this</span>, <span class="title class_">WebpackLogger</span>);</span><br><span class="line">          <span class="variable language_">this</span>[<span class="variable constant_">LOG_SYMBOL</span>] = log;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">getChildLogger</span> = getChildLogger;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">_createClass</span>(<span class="title class_">WebpackLogger</span>, [&#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">error</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> _len = <span class="variable language_">arguments</span>.<span class="property">length</span>, args = <span class="keyword">new</span> <span class="title class_">Array</span>(_len), _key = <span class="number">0</span>; _key &lt; _len; _key++) &#123;</span><br><span class="line">              args[_key] = <span class="variable language_">arguments</span>[_key];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">LOG_SYMBOL</span>](<span class="title class_">LogType</span>.<span class="property">error</span>, args);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;warn&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">warn</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> _len2 = <span class="variable language_">arguments</span>.<span class="property">length</span>, args = <span class="keyword">new</span> <span class="title class_">Array</span>(_len2), _key2 = <span class="number">0</span>; _key2 &lt; _len2; _key2++) &#123;</span><br><span class="line">              args[_key2] = <span class="variable language_">arguments</span>[_key2];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">LOG_SYMBOL</span>](<span class="title class_">LogType</span>.<span class="property">warn</span>, args);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;info&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">info</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> _len3 = <span class="variable language_">arguments</span>.<span class="property">length</span>, args = <span class="keyword">new</span> <span class="title class_">Array</span>(_len3), _key3 = <span class="number">0</span>; _key3 &lt; _len3; _key3++) &#123;</span><br><span class="line">              args[_key3] = <span class="variable language_">arguments</span>[_key3];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">LOG_SYMBOL</span>](<span class="title class_">LogType</span>.<span class="property">info</span>, args);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;log&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">log</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> _len4 = <span class="variable language_">arguments</span>.<span class="property">length</span>, args = <span class="keyword">new</span> <span class="title class_">Array</span>(_len4), _key4 = <span class="number">0</span>; _key4 &lt; _len4; _key4++) &#123;</span><br><span class="line">              args[_key4] = <span class="variable language_">arguments</span>[_key4];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">LOG_SYMBOL</span>](<span class="title class_">LogType</span>.<span class="property">log</span>, args);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;debug&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">debug</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> _len5 = <span class="variable language_">arguments</span>.<span class="property">length</span>, args = <span class="keyword">new</span> <span class="title class_">Array</span>(_len5), _key5 = <span class="number">0</span>; _key5 &lt; _len5; _key5++) &#123;</span><br><span class="line">              args[_key5] = <span class="variable language_">arguments</span>[_key5];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">LOG_SYMBOL</span>](<span class="title class_">LogType</span>.<span class="property">debug</span>, args);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;assert&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">assert</span>(<span class="params">assertion</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!assertion) &#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> _len6 = <span class="variable language_">arguments</span>.<span class="property">length</span>, args = <span class="keyword">new</span> <span class="title class_">Array</span>(_len6 &gt; <span class="number">1</span> ? _len6 - <span class="number">1</span> : <span class="number">0</span>), _key6 = <span class="number">1</span>; _key6 &lt; _len6; _key6++) &#123;</span><br><span class="line">                args[_key6 - <span class="number">1</span>] = <span class="variable language_">arguments</span>[_key6];</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="variable language_">this</span>[<span class="variable constant_">LOG_SYMBOL</span>](<span class="title class_">LogType</span>.<span class="property">error</span>, args);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;trace&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">trace</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">LOG_SYMBOL</span>](<span class="title class_">LogType</span>.<span class="property">trace</span>, [<span class="string">&quot;Trace&quot;</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;clear&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">LOG_SYMBOL</span>](<span class="title class_">LogType</span>.<span class="property">clear</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;status&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">status</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> _len7 = <span class="variable language_">arguments</span>.<span class="property">length</span>, args = <span class="keyword">new</span> <span class="title class_">Array</span>(_len7), _key7 = <span class="number">0</span>; _key7 &lt; _len7; _key7++) &#123;</span><br><span class="line">              args[_key7] = <span class="variable language_">arguments</span>[_key7];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">LOG_SYMBOL</span>](<span class="title class_">LogType</span>.<span class="property">status</span>, args);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;group&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">group</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> _len8 = <span class="variable language_">arguments</span>.<span class="property">length</span>, args = <span class="keyword">new</span> <span class="title class_">Array</span>(_len8), _key8 = <span class="number">0</span>; _key8 &lt; _len8; _key8++) &#123;</span><br><span class="line">              args[_key8] = <span class="variable language_">arguments</span>[_key8];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">LOG_SYMBOL</span>](<span class="title class_">LogType</span>.<span class="property">group</span>, args);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;groupCollapsed&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">groupCollapsed</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> _len9 = <span class="variable language_">arguments</span>.<span class="property">length</span>, args = <span class="keyword">new</span> <span class="title class_">Array</span>(_len9), _key9 = <span class="number">0</span>; _key9 &lt; _len9; _key9++) &#123;</span><br><span class="line">              args[_key9] = <span class="variable language_">arguments</span>[_key9];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">LOG_SYMBOL</span>](<span class="title class_">LogType</span>.<span class="property">groupCollapsed</span>, args);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;groupEnd&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">groupEnd</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> _len10 = <span class="variable language_">arguments</span>.<span class="property">length</span>, args = <span class="keyword">new</span> <span class="title class_">Array</span>(_len10), _key10 = <span class="number">0</span>; _key10 &lt; _len10; _key10++) &#123;</span><br><span class="line">              args[_key10] = <span class="variable language_">arguments</span>[_key10];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">LOG_SYMBOL</span>](<span class="title class_">LogType</span>.<span class="property">groupEnd</span>, args);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;profile&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">profile</span>(<span class="params">label</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">LOG_SYMBOL</span>](<span class="title class_">LogType</span>.<span class="property">profile</span>, [label]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;profileEnd&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">profileEnd</span>(<span class="params">label</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">LOG_SYMBOL</span>](<span class="title class_">LogType</span>.<span class="property">profileEnd</span>, [label]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;time&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">time</span>(<span class="params">label</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">TIMERS_SYMBOL</span>] = <span class="variable language_">this</span>[<span class="variable constant_">TIMERS_SYMBOL</span>] || <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">TIMERS_SYMBOL</span>].<span class="title function_">set</span>(label, process.<span class="title function_">hrtime</span>());</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;timeLog&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">timeLog</span>(<span class="params">label</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> prev = <span class="variable language_">this</span>[<span class="variable constant_">TIMERS_SYMBOL</span>] &amp;&amp; <span class="variable language_">this</span>[<span class="variable constant_">TIMERS_SYMBOL</span>].<span class="title function_">get</span>(label);</span><br><span class="line">            <span class="keyword">if</span> (!prev) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;No such label &#x27;&quot;</span>.<span class="title function_">concat</span>(label, <span class="string">&quot;&#x27; for WebpackLogger.timeLog()&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> time = process.<span class="title function_">hrtime</span>(prev);</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">LOG_SYMBOL</span>](<span class="title class_">LogType</span>.<span class="property">time</span>, [label].<span class="title function_">concat</span>(<span class="title function_">_toConsumableArray</span>(time)));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;timeEnd&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">timeEnd</span>(<span class="params">label</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> prev = <span class="variable language_">this</span>[<span class="variable constant_">TIMERS_SYMBOL</span>] &amp;&amp; <span class="variable language_">this</span>[<span class="variable constant_">TIMERS_SYMBOL</span>].<span class="title function_">get</span>(label);</span><br><span class="line">            <span class="keyword">if</span> (!prev) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;No such label &#x27;&quot;</span>.<span class="title function_">concat</span>(label, <span class="string">&quot;&#x27; for WebpackLogger.timeEnd()&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> time = process.<span class="title function_">hrtime</span>(prev);</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">TIMERS_SYMBOL</span>].<span class="title function_">delete</span>(label);</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">LOG_SYMBOL</span>](<span class="title class_">LogType</span>.<span class="property">time</span>, [label].<span class="title function_">concat</span>(<span class="title function_">_toConsumableArray</span>(time)));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;timeAggregate&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">timeAggregate</span>(<span class="params">label</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> prev = <span class="variable language_">this</span>[<span class="variable constant_">TIMERS_SYMBOL</span>] &amp;&amp; <span class="variable language_">this</span>[<span class="variable constant_">TIMERS_SYMBOL</span>].<span class="title function_">get</span>(label);</span><br><span class="line">            <span class="keyword">if</span> (!prev) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;No such label &#x27;&quot;</span>.<span class="title function_">concat</span>(label, <span class="string">&quot;&#x27; for WebpackLogger.timeAggregate()&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> time = process.<span class="title function_">hrtime</span>(prev);</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">TIMERS_SYMBOL</span>].<span class="title function_">delete</span>(label);</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">TIMERS_AGGREGATES_SYMBOL</span>] = <span class="variable language_">this</span>[<span class="variable constant_">TIMERS_AGGREGATES_SYMBOL</span>] || <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">            <span class="keyword">var</span> current = <span class="variable language_">this</span>[<span class="variable constant_">TIMERS_AGGREGATES_SYMBOL</span>].<span class="title function_">get</span>(label);</span><br><span class="line">            <span class="keyword">if</span> (current !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (time[<span class="number">1</span>] + current[<span class="number">1</span>] &gt; <span class="number">1e9</span>) &#123;</span><br><span class="line">                time[<span class="number">0</span>] += current[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">                time[<span class="number">1</span>] = time[<span class="number">1</span>] - <span class="number">1e9</span> + current[<span class="number">1</span>];</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                time[<span class="number">0</span>] += current[<span class="number">0</span>];</span><br><span class="line">                time[<span class="number">1</span>] += current[<span class="number">1</span>];</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">TIMERS_AGGREGATES_SYMBOL</span>].<span class="title function_">set</span>(label, time);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;timeAggregateEnd&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">timeAggregateEnd</span>(<span class="params">label</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>[<span class="variable constant_">TIMERS_AGGREGATES_SYMBOL</span>] === <span class="literal">undefined</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">var</span> time = <span class="variable language_">this</span>[<span class="variable constant_">TIMERS_AGGREGATES_SYMBOL</span>].<span class="title function_">get</span>(label);</span><br><span class="line">            <span class="keyword">if</span> (time === <span class="literal">undefined</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">TIMERS_AGGREGATES_SYMBOL</span>].<span class="title function_">delete</span>(label);</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">LOG_SYMBOL</span>](<span class="title class_">LogType</span>.<span class="property">time</span>, [label].<span class="title function_">concat</span>(<span class="title function_">_toConsumableArray</span>(time)));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;]);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">WebpackLogger</span>;</span><br><span class="line">      &#125;();</span><br><span class="line">      <span class="built_in">exports</span>.<span class="property">Logger</span> = <span class="title class_">WebpackLogger</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/***/</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***/</span><span class="string">&quot;./node_modules/webpack/lib/logging/createConsoleLogger.js&quot;</span>:</span><br><span class="line">    <span class="comment">/*!*****************************************************************!*\</span></span><br><span class="line"><span class="comment">      !*** ./node_modules/webpack/lib/logging/createConsoleLogger.js ***!</span></span><br><span class="line"><span class="comment">      \*****************************************************************/</span></span><br><span class="line">    <span class="comment">/***/</span></span><br><span class="line">    <span class="keyword">function</span> (<span class="params"><span class="variable language_">module</span>, __unused_webpack_exports, __nested_webpack_require_12589__</span>) &#123;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      	MIT License http://www.opensource.org/licenses/mit-license.php</span></span><br><span class="line"><span class="comment">      	Author Tobias Koppers @sokra</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">_toConsumableArray</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">_arrayWithoutHoles</span>(arr) || <span class="title function_">_iterableToArray</span>(arr) || <span class="title function_">_unsupportedIterableToArray</span>(arr) || <span class="title function_">_nonIterableSpread</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">_nonIterableSpread</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">_unsupportedIterableToArray</span>(<span class="params">o, minLen</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!o) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> o === <span class="string">&quot;string&quot;</span>) <span class="keyword">return</span> <span class="title function_">_arrayLikeToArray</span>(o, minLen);</span><br><span class="line">        <span class="keyword">var</span> n = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (n === <span class="string">&quot;Object&quot;</span> &amp;&amp; o.<span class="property">constructor</span>) n = o.<span class="property">constructor</span>.<span class="property">name</span>;</span><br><span class="line">        <span class="keyword">if</span> (n === <span class="string">&quot;Map&quot;</span> || n === <span class="string">&quot;Set&quot;</span>) <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(o);</span><br><span class="line">        <span class="keyword">if</span> (n === <span class="string">&quot;Arguments&quot;</span> || <span class="regexp">/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/</span>.<span class="title function_">test</span>(n)) <span class="keyword">return</span> <span class="title function_">_arrayLikeToArray</span>(o, minLen);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">_iterableToArray</span>(<span class="params">iter</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">typeof</span> (<span class="keyword">typeof</span> <span class="title class_">Symbol</span> !== <span class="string">&quot;undefined&quot;</span> ? <span class="title class_">Symbol</span> : <span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> i;</span><br><span class="line">        &#125;) !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; iter[(<span class="keyword">typeof</span> <span class="title class_">Symbol</span> !== <span class="string">&quot;undefined&quot;</span> ? <span class="title class_">Symbol</span> : <span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> i;</span><br><span class="line">        &#125;).<span class="property">iterator</span>] != <span class="literal">null</span> || iter[<span class="string">&quot;@@iterator&quot;</span>] != <span class="literal">null</span>) <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(iter);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">_arrayWithoutHoles</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) <span class="keyword">return</span> <span class="title function_">_arrayLikeToArray</span>(arr);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">_arrayLikeToArray</span>(<span class="params">arr, len</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="literal">null</span> || len &gt; arr.<span class="property">length</span>) len = arr.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(len); i &lt; len; i++) &#123;</span><br><span class="line">          arr2[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr2;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> _require = <span class="title function_">__nested_webpack_require_12589__</span>( <span class="comment">/*! ./Logger */</span><span class="string">&quot;./node_modules/webpack/lib/logging/Logger.js&quot;</span>),</span><br><span class="line">        <span class="title class_">LogType</span> = _require.<span class="property">LogType</span>;</span><br><span class="line">      <span class="comment">/** <span class="doctag">@typedef</span> &#123;<span class="type">import(&quot;../../declarations/WebpackOptions&quot;).FilterItemTypes</span>&#125; FilterItemTypes */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/** <span class="doctag">@typedef</span> &#123;<span class="type">import(&quot;../../declarations/WebpackOptions&quot;).FilterTypes</span>&#125; FilterTypes */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/** <span class="doctag">@typedef</span> &#123;<span class="type">import(&quot;./Logger&quot;).LogTypeEnum</span>&#125; LogTypeEnum */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/** <span class="doctag">@typedef</span> &#123;<span class="type">function(string): boolean</span>&#125; FilterFunction */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@typedef</span> &#123;<span class="type">Object</span>&#125; <span class="variable">LoggerConsole</span></span></span><br><span class="line"><span class="comment">       * <span class="doctag">@property</span> &#123;<span class="type">function(): void</span>&#125; <span class="variable">clear</span></span></span><br><span class="line"><span class="comment">       * <span class="doctag">@property</span> &#123;<span class="type">function(): void</span>&#125; <span class="variable">trace</span></span></span><br><span class="line"><span class="comment">       * <span class="doctag">@property</span> &#123;<span class="type">(...args: any[]) =&gt; void</span>&#125; <span class="variable">info</span></span></span><br><span class="line"><span class="comment">       * <span class="doctag">@property</span> &#123;<span class="type">(...args: any[]) =&gt; void</span>&#125; <span class="variable">log</span></span></span><br><span class="line"><span class="comment">       * <span class="doctag">@property</span> &#123;<span class="type">(...args: any[]) =&gt; void</span>&#125; <span class="variable">warn</span></span></span><br><span class="line"><span class="comment">       * <span class="doctag">@property</span> &#123;<span class="type">(...args: any[]) =&gt; void</span>&#125; <span class="variable">error</span></span></span><br><span class="line"><span class="comment">       * <span class="doctag">@property</span> &#123;<span class="type">(...args: any[]) =&gt; void=</span>&#125; <span class="variable">debug</span></span></span><br><span class="line"><span class="comment">       * <span class="doctag">@property</span> &#123;<span class="type">(...args: any[]) =&gt; void=</span>&#125; <span class="variable">group</span></span></span><br><span class="line"><span class="comment">       * <span class="doctag">@property</span> &#123;<span class="type">(...args: any[]) =&gt; void=</span>&#125; <span class="variable">groupCollapsed</span></span></span><br><span class="line"><span class="comment">       * <span class="doctag">@property</span> &#123;<span class="type">(...args: any[]) =&gt; void=</span>&#125; <span class="variable">groupEnd</span></span></span><br><span class="line"><span class="comment">       * <span class="doctag">@property</span> &#123;<span class="type">(...args: any[]) =&gt; void=</span>&#125; <span class="variable">status</span></span></span><br><span class="line"><span class="comment">       * <span class="doctag">@property</span> &#123;<span class="type">(...args: any[]) =&gt; void=</span>&#125; <span class="variable">profile</span></span></span><br><span class="line"><span class="comment">       * <span class="doctag">@property</span> &#123;<span class="type">(...args: any[]) =&gt; void=</span>&#125; <span class="variable">profileEnd</span></span></span><br><span class="line"><span class="comment">       * <span class="doctag">@property</span> &#123;<span class="type">(...args: any[]) =&gt; void=</span>&#125; <span class="variable">logTime</span></span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@typedef</span> &#123;<span class="type">Object</span>&#125; <span class="variable">LoggerOptions</span></span></span><br><span class="line"><span class="comment">       * <span class="doctag">@property</span> &#123;<span class="type">false|true|&quot;none&quot;|&quot;error&quot;|&quot;warn&quot;|&quot;info&quot;|&quot;log&quot;|&quot;verbose&quot;</span>&#125; level loglevel</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@property</span> &#123;<span class="type">FilterTypes|boolean</span>&#125; debug filter for debug logging</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@property</span> &#123;<span class="type">LoggerConsole</span>&#125; console the console to log to</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span> &#123;<span class="type">FilterItemTypes</span>&#125; item an input item</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@returns</span> &#123;<span class="type">FilterFunction</span>&#125; filter function</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> filterToFunction = <span class="keyword">function</span> <span class="title function_">filterToFunction</span>(<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> regExp = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;[\\\\/]&quot;</span>.<span class="title function_">concat</span>(item.<span class="title function_">replace</span>(</span><br><span class="line">          <span class="comment">// eslint-disable-next-line no-useless-escape</span></span><br><span class="line">          <span class="regexp">/[-[\]&#123;&#125;()*+?.\\^$|]/g</span>, <span class="string">&quot;\\$&amp;&quot;</span>), <span class="string">&quot;([\\\\/]|$|!|\\?)&quot;</span>));</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">ident</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> regExp.<span class="title function_">test</span>(ident);</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (item &amp;&amp; <span class="keyword">typeof</span> item === <span class="string">&quot;object&quot;</span> &amp;&amp; <span class="keyword">typeof</span> item.<span class="property">test</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">ident</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> item.<span class="title function_">test</span>(ident);</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;boolean&quot;</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@enum</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> <span class="title class_">LogLevel</span> = &#123;</span><br><span class="line">        <span class="attr">none</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">false</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">error</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">warn</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">info</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">log</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">true</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">verbose</span>: <span class="number">1</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span> &#123;<span class="type">LoggerOptions</span>&#125; options options object</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@returns</span> &#123;<span class="type">function(string, LogTypeEnum, any[]): void</span>&#125; logging function</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">      <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">_ref</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> _ref$level = _ref.<span class="property">level</span>,</span><br><span class="line">          level = _ref$level === <span class="keyword">void</span> <span class="number">0</span> ? <span class="string">&quot;info&quot;</span> : _ref$level,</span><br><span class="line">          _ref$debug = _ref.<span class="property">debug</span>,</span><br><span class="line">          debug = _ref$debug === <span class="keyword">void</span> <span class="number">0</span> ? <span class="literal">false</span> : _ref$debug,</span><br><span class="line">          <span class="variable language_">console</span> = _ref.<span class="property">console</span>;</span><br><span class="line">        <span class="keyword">var</span> debugFilters = <span class="keyword">typeof</span> debug === <span class="string">&quot;boolean&quot;</span> ? [<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> debug;</span><br><span class="line">        &#125;] : <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">FilterItemTypes[]</span>&#125; */</span></span><br><span class="line">        [].<span class="title function_">concat</span>(debug).<span class="title function_">map</span>(filterToFunction);</span><br><span class="line">        <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">number</span>&#125; */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> loglevel = <span class="title class_">LogLevel</span>[<span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(level)] || <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; name name of the logger</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> &#123;<span class="type">LogTypeEnum</span>&#125; type type of the log entry</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> &#123;<span class="type">any[]</span>&#125; args arguments of the log entry</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@returns</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> logger = <span class="keyword">function</span> <span class="title function_">logger</span>(<span class="params">name, type, args</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> labeledArgs = <span class="keyword">function</span> <span class="title function_">labeledArgs</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(args)) &#123;</span><br><span class="line">              <span class="keyword">if</span> (args.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">typeof</span> args[<span class="number">0</span>] === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> [<span class="string">&quot;[&quot;</span>.<span class="title function_">concat</span>(name, <span class="string">&quot;] &quot;</span>).<span class="title function_">concat</span>(args[<span class="number">0</span>])].<span class="title function_">concat</span>(<span class="title function_">_toConsumableArray</span>(args.<span class="title function_">slice</span>(<span class="number">1</span>)));</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> [<span class="string">&quot;[&quot;</span>.<span class="title function_">concat</span>(name, <span class="string">&quot;]&quot;</span>)].<span class="title function_">concat</span>(<span class="title function_">_toConsumableArray</span>(args));</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> [];</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">          <span class="keyword">var</span> debug = debugFilters.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">f</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">f</span>(name);</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="title class_">LogType</span>.<span class="property">debug</span>:</span><br><span class="line">              <span class="keyword">if</span> (!debug) <span class="keyword">return</span>; <span class="comment">// eslint-disable-next-line node/no-unsupported-features/node-builtins</span></span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">console</span>.<span class="property">debug</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                <span class="comment">// eslint-disable-next-line node/no-unsupported-features/node-builtins</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="property">debug</span>.<span class="title function_">apply</span>(<span class="variable language_">console</span>, <span class="title function_">_toConsumableArray</span>(<span class="title function_">labeledArgs</span>()));</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">apply</span>(<span class="variable language_">console</span>, <span class="title function_">_toConsumableArray</span>(<span class="title function_">labeledArgs</span>()));</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="title class_">LogType</span>.<span class="property">log</span>:</span><br><span class="line">              <span class="keyword">if</span> (!debug &amp;&amp; loglevel &gt; <span class="title class_">LogLevel</span>.<span class="property">log</span>) <span class="keyword">return</span>;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">apply</span>(<span class="variable language_">console</span>, <span class="title function_">_toConsumableArray</span>(<span class="title function_">labeledArgs</span>()));</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="title class_">LogType</span>.<span class="property">info</span>:</span><br><span class="line">              <span class="keyword">if</span> (!debug &amp;&amp; loglevel &gt; <span class="title class_">LogLevel</span>.<span class="property">info</span>) <span class="keyword">return</span>;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="property">info</span>.<span class="title function_">apply</span>(<span class="variable language_">console</span>, <span class="title function_">_toConsumableArray</span>(<span class="title function_">labeledArgs</span>()));</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="title class_">LogType</span>.<span class="property">warn</span>:</span><br><span class="line">              <span class="keyword">if</span> (!debug &amp;&amp; loglevel &gt; <span class="title class_">LogLevel</span>.<span class="property">warn</span>) <span class="keyword">return</span>;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="property">warn</span>.<span class="title function_">apply</span>(<span class="variable language_">console</span>, <span class="title function_">_toConsumableArray</span>(<span class="title function_">labeledArgs</span>()));</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="title class_">LogType</span>.<span class="property">error</span>:</span><br><span class="line">              <span class="keyword">if</span> (!debug &amp;&amp; loglevel &gt; <span class="title class_">LogLevel</span>.<span class="property">error</span>) <span class="keyword">return</span>;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="property">error</span>.<span class="title function_">apply</span>(<span class="variable language_">console</span>, <span class="title function_">_toConsumableArray</span>(<span class="title function_">labeledArgs</span>()));</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="title class_">LogType</span>.<span class="property">trace</span>:</span><br><span class="line">              <span class="keyword">if</span> (!debug) <span class="keyword">return</span>;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">trace</span>();</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="title class_">LogType</span>.<span class="property">groupCollapsed</span>:</span><br><span class="line">              <span class="keyword">if</span> (!debug &amp;&amp; loglevel &gt; <span class="title class_">LogLevel</span>.<span class="property">log</span>) <span class="keyword">return</span>;</span><br><span class="line">              <span class="keyword">if</span> (!debug &amp;&amp; loglevel &gt; <span class="title class_">LogLevel</span>.<span class="property">verbose</span>) &#123;</span><br><span class="line">                <span class="comment">// eslint-disable-next-line node/no-unsupported-features/node-builtins</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">console</span>.<span class="property">groupCollapsed</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                  <span class="comment">// eslint-disable-next-line node/no-unsupported-features/node-builtins</span></span><br><span class="line">                  <span class="variable language_">console</span>.<span class="property">groupCollapsed</span>.<span class="title function_">apply</span>(<span class="variable language_">console</span>, <span class="title function_">_toConsumableArray</span>(<span class="title function_">labeledArgs</span>()));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">apply</span>(<span class="variable language_">console</span>, <span class="title function_">_toConsumableArray</span>(<span class="title function_">labeledArgs</span>()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// falls through</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="title class_">LogType</span>.<span class="property">group</span>:</span><br><span class="line">              <span class="keyword">if</span> (!debug &amp;&amp; loglevel &gt; <span class="title class_">LogLevel</span>.<span class="property">log</span>) <span class="keyword">return</span>; <span class="comment">// eslint-disable-next-line node/no-unsupported-features/node-builtins</span></span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">console</span>.<span class="property">group</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                <span class="comment">// eslint-disable-next-line node/no-unsupported-features/node-builtins</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="property">group</span>.<span class="title function_">apply</span>(<span class="variable language_">console</span>, <span class="title function_">_toConsumableArray</span>(<span class="title function_">labeledArgs</span>()));</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">apply</span>(<span class="variable language_">console</span>, <span class="title function_">_toConsumableArray</span>(<span class="title function_">labeledArgs</span>()));</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="title class_">LogType</span>.<span class="property">groupEnd</span>:</span><br><span class="line">              <span class="keyword">if</span> (!debug &amp;&amp; loglevel &gt; <span class="title class_">LogLevel</span>.<span class="property">log</span>) <span class="keyword">return</span>; <span class="comment">// eslint-disable-next-line node/no-unsupported-features/node-builtins</span></span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">console</span>.<span class="property">groupEnd</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                <span class="comment">// eslint-disable-next-line node/no-unsupported-features/node-builtins</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">groupEnd</span>();</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="title class_">LogType</span>.<span class="property">time</span>:</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="keyword">if</span> (!debug &amp;&amp; loglevel &gt; <span class="title class_">LogLevel</span>.<span class="property">log</span>) <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">var</span> ms = args[<span class="number">1</span>] * <span class="number">1000</span> + args[<span class="number">2</span>] / <span class="number">1000000</span>;</span><br><span class="line">                <span class="keyword">var</span> msg = <span class="string">&quot;[&quot;</span>.<span class="title function_">concat</span>(name, <span class="string">&quot;] &quot;</span>).<span class="title function_">concat</span>(args[<span class="number">0</span>], <span class="string">&quot;: &quot;</span>).<span class="title function_">concat</span>(ms, <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">console</span>.<span class="property">logTime</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">logTime</span>(msg);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="title class_">LogType</span>.<span class="property">profile</span>:</span><br><span class="line">              <span class="comment">// eslint-disable-next-line node/no-unsupported-features/node-builtins</span></span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">console</span>.<span class="property">profile</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                <span class="comment">// eslint-disable-next-line node/no-unsupported-features/node-builtins</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="property">profile</span>.<span class="title function_">apply</span>(<span class="variable language_">console</span>, <span class="title function_">_toConsumableArray</span>(<span class="title function_">labeledArgs</span>()));</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="title class_">LogType</span>.<span class="property">profileEnd</span>:</span><br><span class="line">              <span class="comment">// eslint-disable-next-line node/no-unsupported-features/node-builtins</span></span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">console</span>.<span class="property">profileEnd</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                <span class="comment">// eslint-disable-next-line node/no-unsupported-features/node-builtins</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="property">profileEnd</span>.<span class="title function_">apply</span>(<span class="variable language_">console</span>, <span class="title function_">_toConsumableArray</span>(<span class="title function_">labeledArgs</span>()));</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="title class_">LogType</span>.<span class="property">clear</span>:</span><br><span class="line">              <span class="keyword">if</span> (!debug &amp;&amp; loglevel &gt; <span class="title class_">LogLevel</span>.<span class="property">log</span>) <span class="keyword">return</span>; <span class="comment">// eslint-disable-next-line node/no-unsupported-features/node-builtins</span></span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">console</span>.<span class="property">clear</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                <span class="comment">// eslint-disable-next-line node/no-unsupported-features/node-builtins</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">clear</span>();</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="title class_">LogType</span>.<span class="property">status</span>:</span><br><span class="line">              <span class="keyword">if</span> (!debug &amp;&amp; loglevel &gt; <span class="title class_">LogLevel</span>.<span class="property">info</span>) <span class="keyword">return</span>;</span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">console</span>.<span class="property">status</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (args.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">status</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="property">status</span>.<span class="title function_">apply</span>(<span class="variable language_">console</span>, <span class="title function_">_toConsumableArray</span>(<span class="title function_">labeledArgs</span>()));</span><br><span class="line">                &#125;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (args.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="property">info</span>.<span class="title function_">apply</span>(<span class="variable language_">console</span>, <span class="title function_">_toConsumableArray</span>(<span class="title function_">labeledArgs</span>()));</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unexpected LogType &quot;</span>.<span class="title function_">concat</span>(type));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> logger;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/***/</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***/</span><span class="string">&quot;./node_modules/webpack/lib/logging/runtime.js&quot;</span>:</span><br><span class="line">    <span class="comment">/*!*****************************************************!*\</span></span><br><span class="line"><span class="comment">      !*** ./node_modules/webpack/lib/logging/runtime.js ***!</span></span><br><span class="line"><span class="comment">      \*****************************************************/</span></span><br><span class="line">    <span class="comment">/***/</span></span><br><span class="line">    <span class="keyword">function</span> (<span class="params">__unused_webpack_module, <span class="built_in">exports</span>, __nested_webpack_require_24187__</span>) &#123;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      	MIT License http://www.opensource.org/licenses/mit-license.php</span></span><br><span class="line"><span class="comment">      	Author Tobias Koppers @sokra</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">_extends</span>(<span class="params"></span>) &#123;</span><br><span class="line">        _extends = <span class="title class_">Object</span>.<span class="property">assign</span> ? <span class="title class_">Object</span>.<span class="property">assign</span>.<span class="title function_">bind</span>() : <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> source = <span class="variable language_">arguments</span>[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">              <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(source, key)) &#123;</span><br><span class="line">                target[key] = source[key];</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> target;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> _extends.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> <span class="title class_">SyncBailHook</span> = <span class="title function_">__nested_webpack_require_24187__</span>( <span class="comment">/*! tapable/lib/SyncBailHook */</span><span class="string">&quot;./client-src/modules/logger/SyncBailHookFake.js&quot;</span>);</span><br><span class="line">      <span class="keyword">var</span> _require = <span class="title function_">__nested_webpack_require_24187__</span>( <span class="comment">/*! ./Logger */</span><span class="string">&quot;./node_modules/webpack/lib/logging/Logger.js&quot;</span>),</span><br><span class="line">        <span class="title class_">Logger</span> = _require.<span class="property">Logger</span>;</span><br><span class="line">      <span class="keyword">var</span> createConsoleLogger = <span class="title function_">__nested_webpack_require_24187__</span>( <span class="comment">/*! ./createConsoleLogger */</span><span class="string">&quot;./node_modules/webpack/lib/logging/createConsoleLogger.js&quot;</span>);</span><br><span class="line">      <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">createConsoleLogger.LoggerOptions</span>&#125; */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> currentDefaultLoggerOptions = &#123;</span><br><span class="line">        <span class="attr">level</span>: <span class="string">&quot;info&quot;</span>,</span><br><span class="line">        <span class="attr">debug</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">console</span>: <span class="variable language_">console</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">var</span> currentDefaultLogger = <span class="title function_">createConsoleLogger</span>(currentDefaultLoggerOptions);</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; name name of the logger</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@returns</span> &#123;<span class="type">Logger</span>&#125; a logger</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">exports</span>.<span class="property">getLogger</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Logger</span>(<span class="keyword">function</span> (<span class="params">type, args</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">exports</span>.<span class="property">hooks</span>.<span class="property">log</span>.<span class="title function_">call</span>(name, type, args) === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="title function_">currentDefaultLogger</span>(name, type, args);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="keyword">function</span> (<span class="params">childName</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">exports</span>.<span class="title function_">getLogger</span>(<span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(name, <span class="string">&quot;/&quot;</span>).<span class="title function_">concat</span>(childName));</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span> &#123;<span class="type">createConsoleLogger.LoggerOptions</span>&#125; options new options, merge with old options</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@returns</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">exports</span>.<span class="property">configureDefaultLogger</span> = <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">        <span class="title function_">_extends</span>(currentDefaultLoggerOptions, options);</span><br><span class="line">        currentDefaultLogger = <span class="title function_">createConsoleLogger</span>(currentDefaultLoggerOptions);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="built_in">exports</span>.<span class="property">hooks</span> = &#123;</span><br><span class="line">        <span class="attr">log</span>: <span class="keyword">new</span> <span class="title class_">SyncBailHook</span>([<span class="string">&quot;origin&quot;</span>, <span class="string">&quot;type&quot;</span>, <span class="string">&quot;args&quot;</span>])</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/***/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/************************************************************************/</span></span><br><span class="line">  <span class="comment">/******/</span> <span class="comment">// The module cache</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="comment">/******/</span> <span class="comment">// The require function</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">__nested_webpack_require_26652__</span>(<span class="params">moduleId</span>) &#123;</span><br><span class="line">    <span class="comment">/******/</span> <span class="comment">// Check if module is in cache</span></span><br><span class="line">    <span class="comment">/******/</span><span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">    <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="comment">/******/</span><span class="keyword">return</span> cachedModule.<span class="property">exports</span>;</span><br><span class="line">      <span class="comment">/******/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/******/</span> <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable language_">module</span> = __webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">      <span class="comment">/******/</span> <span class="comment">// no module.id needed</span></span><br><span class="line">      <span class="comment">/******/</span> <span class="comment">// no module.loaded needed</span></span><br><span class="line">      <span class="comment">/******/</span><span class="attr">exports</span>: &#123;&#125;</span><br><span class="line">      <span class="comment">/******/</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">    <span class="comment">/******/</span> <span class="comment">// Execute the module function</span></span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">    __webpack_modules__[moduleId](<span class="variable language_">module</span>, <span class="variable language_">module</span>.<span class="property">exports</span>, __nested_webpack_require_26652__);</span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">    <span class="comment">/******/</span> <span class="comment">// Return the exports of the module</span></span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="comment">/************************************************************************/</span></span><br><span class="line">  <span class="comment">/******/</span> <span class="comment">/* webpack/runtime/define property getters */</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  !<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/******/</span> <span class="comment">// define getter functions for harmony exports</span></span><br><span class="line">    <span class="comment">/******/</span>__nested_webpack_require_26652__.<span class="property">d</span> = <span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, definition</span>) &#123;</span><br><span class="line">      <span class="comment">/******/</span><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line">        <span class="comment">/******/</span><span class="keyword">if</span> (__nested_webpack_require_26652__.<span class="title function_">o</span>(definition, key) &amp;&amp; !__nested_webpack_require_26652__.<span class="title function_">o</span>(<span class="built_in">exports</span>, key)) &#123;</span><br><span class="line">          <span class="comment">/******/</span><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, key, &#123;</span><br><span class="line">            <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">get</span>: definition[key]</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="comment">/******/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/******/</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/******/</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">  &#125;();</span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="comment">/******/</span> <span class="comment">/* webpack/runtime/hasOwnProperty shorthand */</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  !<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/******/</span>__nested_webpack_require_26652__.<span class="property">o</span> = <span class="keyword">function</span> (<span class="params">obj, prop</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(obj, prop);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">  &#125;();</span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="comment">/******/</span> <span class="comment">/* webpack/runtime/make namespace object */</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  !<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/******/</span> <span class="comment">// define __esModule on exports</span></span><br><span class="line">    <span class="comment">/******/</span>__nested_webpack_require_26652__.<span class="property">r</span> = <span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span></span>) &#123;</span><br><span class="line">      <span class="comment">/******/</span><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="title class_">Symbol</span>.<span class="property">toStringTag</span>) &#123;</span><br><span class="line">        <span class="comment">/******/</span><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="title class_">Symbol</span>.<span class="property">toStringTag</span>, &#123;</span><br><span class="line">          <span class="attr">value</span>: <span class="string">&#x27;Module&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">/******/</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/******/</span></span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&#x27;__esModule&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="literal">true</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">/******/</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">  &#125;();</span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">  <span class="comment">/************************************************************************/</span></span><br><span class="line">  <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line">  <span class="comment">// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.</span></span><br><span class="line">  !<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/*!********************************************!*\</span></span><br><span class="line"><span class="comment">      !*** ./client-src/modules/logger/index.js ***!</span></span><br><span class="line"><span class="comment">      \********************************************/</span></span><br><span class="line">    __nested_webpack_require_26652__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line">    <span class="comment">/* harmony export */</span></span><br><span class="line">    __nested_webpack_require_26652__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line">      <span class="comment">/* harmony export */</span><span class="string">&quot;default&quot;</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="comment">/* reexport default export from named module */</span>webpack_lib_logging_runtime_js__WEBPACK_IMPORTED_MODULE_0__</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* harmony export */</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">/* harmony import */</span></span><br><span class="line">    <span class="keyword">var</span> webpack_lib_logging_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = <span class="title function_">__nested_webpack_require_26652__</span>( <span class="comment">/*! webpack/lib/logging/runtime.js */</span><span class="string">&quot;./node_modules/webpack/lib/logging/runtime.js&quot;</span>);</span><br><span class="line">  &#125;();</span><br><span class="line">  <span class="keyword">var</span> __webpack_export_target__ = <span class="built_in">exports</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];</span><br><span class="line">  <span class="keyword">if</span> (__webpack_exports__.<span class="property">__esModule</span>) <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(__webpack_export_target__, <span class="string">&quot;__esModule&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">4754</span>:</span><br><span class="line"><span class="comment">/*!***********************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/webpack-dev-server/client/overlay.js ***!</span></span><br><span class="line"><span class="comment">  \***********************************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;formatProblem&quot;</span>: <span class="function">() =&gt;</span> (<span class="comment">/* binding */</span> formatProblem),</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;hide&quot;</span>: <span class="function">() =&gt;</span> (<span class="comment">/* binding */</span> hide),</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;show&quot;</span>: <span class="function">() =&gt;</span> (<span class="comment">/* binding */</span> show)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> ansi_html_community__WEBPACK_IMPORTED_MODULE_0__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ansi-html-community */</span> <span class="number">7716</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default = <span class="comment">/*#__PURE__*/</span>__webpack_require__.<span class="title function_">n</span>(ansi_html_community__WEBPACK_IMPORTED_MODULE_0__);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> html_entities__WEBPACK_IMPORTED_MODULE_1__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! html-entities */</span> <span class="number">4948</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> html_entities__WEBPACK_IMPORTED_MODULE_1___default = <span class="comment">/*#__PURE__*/</span>__webpack_require__.<span class="title function_">n</span>(html_entities__WEBPACK_IMPORTED_MODULE_1__);</span><br><span class="line"><span class="comment">// The error overlay is inspired (and mostly copied) from Create React App (https://github.com/facebookincubator/create-react-app)</span></span><br><span class="line"><span class="comment">// They, in turn, got inspired by webpack-hot-middleware (https://github.com/glenjamin/webpack-hot-middleware).</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> colors = &#123;</span><br><span class="line">  <span class="attr">reset</span>: [<span class="string">&quot;transparent&quot;</span>, <span class="string">&quot;transparent&quot;</span>],</span><br><span class="line">  <span class="attr">black</span>: <span class="string">&quot;181818&quot;</span>,</span><br><span class="line">  <span class="attr">red</span>: <span class="string">&quot;E36049&quot;</span>,</span><br><span class="line">  <span class="attr">green</span>: <span class="string">&quot;B3CB74&quot;</span>,</span><br><span class="line">  <span class="attr">yellow</span>: <span class="string">&quot;FFD080&quot;</span>,</span><br><span class="line">  <span class="attr">blue</span>: <span class="string">&quot;7CAFC2&quot;</span>,</span><br><span class="line">  <span class="attr">magenta</span>: <span class="string">&quot;7FACCA&quot;</span>,</span><br><span class="line">  <span class="attr">cyan</span>: <span class="string">&quot;C3C2EF&quot;</span>,</span><br><span class="line">  <span class="attr">lightgrey</span>: <span class="string">&quot;EBE7E3&quot;</span>,</span><br><span class="line">  <span class="attr">darkgrey</span>: <span class="string">&quot;6D7891&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">HTMLIFrameElement | null | undefined</span>&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iframeContainerElement;</span><br><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">HTMLDivElement | null | undefined</span>&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> containerElement;</span><br><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">Array&lt;(element: HTMLDivElement) =&gt; void&gt;</span>&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> onLoadQueue = [];</span><br><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">TrustedTypePolicy | undefined</span>&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> overlayTrustedTypesPolicy;</span><br><span class="line"><span class="title function_">ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default</span>().<span class="title function_">setColors</span>(colors);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string | null</span>&#125; <span class="variable">trustedTypesPolicyName</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createContainer</span>(<span class="params">trustedTypesPolicyName</span>) &#123;</span><br><span class="line">  <span class="comment">// Enable Trusted Types if they are available in the current browser.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">trustedTypes</span>) &#123;</span><br><span class="line">    overlayTrustedTypesPolicy = <span class="variable language_">window</span>.<span class="property">trustedTypes</span>.<span class="title function_">createPolicy</span>(trustedTypesPolicyName || <span class="string">&quot;webpack-dev-server#overlay&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">createHTML</span>: <span class="keyword">function</span> <span class="title function_">createHTML</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  iframeContainerElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;iframe&quot;</span>);</span><br><span class="line">  iframeContainerElement.<span class="property">id</span> = <span class="string">&quot;webpack-dev-server-client-overlay&quot;</span>;</span><br><span class="line">  iframeContainerElement.<span class="property">src</span> = <span class="string">&quot;about:blank&quot;</span>;</span><br><span class="line">  iframeContainerElement.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&quot;fixed&quot;</span>;</span><br><span class="line">  iframeContainerElement.<span class="property">style</span>.<span class="property">left</span> = <span class="number">0</span>;</span><br><span class="line">  iframeContainerElement.<span class="property">style</span>.<span class="property">top</span> = <span class="number">0</span>;</span><br><span class="line">  iframeContainerElement.<span class="property">style</span>.<span class="property">right</span> = <span class="number">0</span>;</span><br><span class="line">  iframeContainerElement.<span class="property">style</span>.<span class="property">bottom</span> = <span class="number">0</span>;</span><br><span class="line">  iframeContainerElement.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;100vw&quot;</span>;</span><br><span class="line">  iframeContainerElement.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;100vh&quot;</span>;</span><br><span class="line">  iframeContainerElement.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  iframeContainerElement.<span class="property">style</span>.<span class="property">zIndex</span> = <span class="number">9999999999</span>;</span><br><span class="line">  iframeContainerElement.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    containerElement = <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">Document</span>&#125; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">HTMLIFrameElement</span>&#125; */</span></span><br><span class="line">    iframeContainerElement.<span class="property">contentDocument</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    containerElement.<span class="property">id</span> = <span class="string">&quot;webpack-dev-server-client-overlay-div&quot;</span>;</span><br><span class="line">    containerElement.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&quot;fixed&quot;</span>;</span><br><span class="line">    containerElement.<span class="property">style</span>.<span class="property">boxSizing</span> = <span class="string">&quot;border-box&quot;</span>;</span><br><span class="line">    containerElement.<span class="property">style</span>.<span class="property">left</span> = <span class="number">0</span>;</span><br><span class="line">    containerElement.<span class="property">style</span>.<span class="property">top</span> = <span class="number">0</span>;</span><br><span class="line">    containerElement.<span class="property">style</span>.<span class="property">right</span> = <span class="number">0</span>;</span><br><span class="line">    containerElement.<span class="property">style</span>.<span class="property">bottom</span> = <span class="number">0</span>;</span><br><span class="line">    containerElement.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;100vw&quot;</span>;</span><br><span class="line">    containerElement.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;100vh&quot;</span>;</span><br><span class="line">    containerElement.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;rgba(0, 0, 0, 0.85)&quot;</span>;</span><br><span class="line">    containerElement.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;#E8E8E8&quot;</span>;</span><br><span class="line">    containerElement.<span class="property">style</span>.<span class="property">fontFamily</span> = <span class="string">&quot;Menlo, Consolas, monospace&quot;</span>;</span><br><span class="line">    containerElement.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&quot;large&quot;</span>;</span><br><span class="line">    containerElement.<span class="property">style</span>.<span class="property">padding</span> = <span class="string">&quot;2rem&quot;</span>;</span><br><span class="line">    containerElement.<span class="property">style</span>.<span class="property">lineHeight</span> = <span class="string">&quot;1.2&quot;</span>;</span><br><span class="line">    containerElement.<span class="property">style</span>.<span class="property">whiteSpace</span> = <span class="string">&quot;pre-wrap&quot;</span>;</span><br><span class="line">    containerElement.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&quot;auto&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> headerElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">    headerElement.<span class="property">innerText</span> = <span class="string">&quot;Compiled with problems:&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> closeButtonElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">    closeButtonElement.<span class="property">innerText</span> = <span class="string">&quot;X&quot;</span>;</span><br><span class="line">    closeButtonElement.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&quot;transparent&quot;</span>;</span><br><span class="line">    closeButtonElement.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    closeButtonElement.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&quot;20px&quot;</span>;</span><br><span class="line">    closeButtonElement.<span class="property">style</span>.<span class="property">fontWeight</span> = <span class="string">&quot;bold&quot;</span>;</span><br><span class="line">    closeButtonElement.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;white&quot;</span>;</span><br><span class="line">    closeButtonElement.<span class="property">style</span>.<span class="property">cursor</span> = <span class="string">&quot;pointer&quot;</span>;</span><br><span class="line">    closeButtonElement.<span class="property">style</span>.<span class="property">cssFloat</span> = <span class="string">&quot;right&quot;</span>; <span class="comment">// @ts-ignore</span></span><br><span class="line"></span><br><span class="line">    closeButtonElement.<span class="property">style</span>.<span class="property">styleFloat</span> = <span class="string">&quot;right&quot;</span>;</span><br><span class="line">    closeButtonElement.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">hide</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    containerElement.<span class="title function_">appendChild</span>(headerElement);</span><br><span class="line">    containerElement.<span class="title function_">appendChild</span>(closeButtonElement);</span><br><span class="line">    containerElement.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;br&quot;</span>));</span><br><span class="line">    containerElement.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;br&quot;</span>));</span><br><span class="line">    <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">Document</span>&#125; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">HTMLIFrameElement</span>&#125; */</span></span><br><span class="line">    iframeContainerElement.<span class="property">contentDocument</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(containerElement);</span><br><span class="line">    onLoadQueue.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">onLoad</span>) &#123;</span><br><span class="line">      <span class="title function_">onLoad</span>( <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">HTMLDivElement</span>&#125; */</span></span><br><span class="line">      containerElement);</span><br><span class="line">    &#125;);</span><br><span class="line">    onLoadQueue = [];</span><br><span class="line">    <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">HTMLIFrameElement</span>&#125; */</span></span><br><span class="line"></span><br><span class="line">    iframeContainerElement.<span class="property">onload</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframeContainerElement);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">(element: HTMLDivElement) =&gt; void</span>&#125; <span class="variable">callback</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string | null</span>&#125; <span class="variable">trustedTypesPolicyName</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ensureOverlayExists</span>(<span class="params">callback, trustedTypesPolicyName</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (containerElement) &#123;</span><br><span class="line">    <span class="comment">// Everything is ready, call the callback right away.</span></span><br><span class="line">    <span class="title function_">callback</span>(containerElement);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  onLoadQueue.<span class="title function_">push</span>(callback);</span><br><span class="line">  <span class="keyword">if</span> (iframeContainerElement) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">createContainer</span>(trustedTypesPolicyName);</span><br><span class="line">&#125; <span class="comment">// Successful compilation.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hide</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!iframeContainerElement) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="comment">// Clean up and reset internal state.</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(iframeContainerElement);</span><br><span class="line">  iframeContainerElement = <span class="literal">null</span>;</span><br><span class="line">  containerElement = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">type</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string  | &#123; file?: string, moduleName?: string, loc?: string, message?: string </span>&#125;&#125; item</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">&#123; header: string, body: string </span>&#125;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatProblem</span>(<span class="params">type, item</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> header = type === <span class="string">&quot;warning&quot;</span> ? <span class="string">&quot;WARNING&quot;</span> : <span class="string">&quot;ERROR&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> body = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    body += item;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> file = item.<span class="property">file</span> || <span class="string">&quot;&quot;</span>; <span class="comment">// eslint-disable-next-line no-nested-ternary</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> moduleName = item.<span class="property">moduleName</span> ? item.<span class="property">moduleName</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;!&quot;</span>) !== -<span class="number">1</span> ? <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(item.<span class="property">moduleName</span>.<span class="title function_">replace</span>(<span class="regexp">/^(\s|\S)*!/</span>, <span class="string">&quot;&quot;</span>), <span class="string">&quot; (&quot;</span>).<span class="title function_">concat</span>(item.<span class="property">moduleName</span>, <span class="string">&quot;)&quot;</span>) : <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(item.<span class="property">moduleName</span>) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> loc = item.<span class="property">loc</span>;</span><br><span class="line">    header += <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(moduleName || file ? <span class="string">&quot; in &quot;</span>.<span class="title function_">concat</span>(moduleName ? <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(moduleName).<span class="title function_">concat</span>(file ? <span class="string">&quot; (&quot;</span>.<span class="title function_">concat</span>(file, <span class="string">&quot;)&quot;</span>) : <span class="string">&quot;&quot;</span>) : file).<span class="title function_">concat</span>(loc ? <span class="string">&quot; &quot;</span>.<span class="title function_">concat</span>(loc) : <span class="string">&quot;&quot;</span>) : <span class="string">&quot;&quot;</span>);</span><br><span class="line">    body += item.<span class="property">message</span> || <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">header</span>: header,</span><br><span class="line">    <span class="attr">body</span>: body</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; <span class="comment">// Compilation with errors (e.g. syntax error or missing modules).</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">type</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array&lt;string  | &#123; file?: string, moduleName?: string, loc?: string, message?: string </span>&#125;&gt;&#125; messages</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string | null</span>&#125; <span class="variable">trustedTypesPolicyName</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">type, messages, trustedTypesPolicyName</span>) &#123;</span><br><span class="line">  <span class="title function_">ensureOverlayExists</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    messages.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">message</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> entryElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      <span class="keyword">var</span> typeElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">      <span class="keyword">var</span> _formatProblem = <span class="title function_">formatProblem</span>(type, message),</span><br><span class="line">        header = _formatProblem.<span class="property">header</span>,</span><br><span class="line">        body = _formatProblem.<span class="property">body</span>;</span><br><span class="line">      typeElement.<span class="property">innerText</span> = header;</span><br><span class="line">      typeElement.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;#&quot;</span>.<span class="title function_">concat</span>(colors.<span class="property">red</span>); <span class="comment">// Make it look similar to our terminal.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> text = <span class="title function_">ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default</span>()((<span class="number">0</span>,html_entities__WEBPACK_IMPORTED_MODULE_1__.<span class="property">encode</span>)(body));</span><br><span class="line">      <span class="keyword">var</span> messageTextNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      messageTextNode.<span class="property">innerHTML</span> = overlayTrustedTypesPolicy ? overlayTrustedTypesPolicy.<span class="title function_">createHTML</span>(text) : text;</span><br><span class="line">      entryElement.<span class="title function_">appendChild</span>(typeElement);</span><br><span class="line">      entryElement.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;br&quot;</span>));</span><br><span class="line">      entryElement.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;br&quot;</span>));</span><br><span class="line">      entryElement.<span class="title function_">appendChild</span>(messageTextNode);</span><br><span class="line">      entryElement.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;br&quot;</span>));</span><br><span class="line">      entryElement.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;br&quot;</span>));</span><br><span class="line">      <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">HTMLDivElement</span>&#125; */</span></span><br><span class="line"></span><br><span class="line">      containerElement.<span class="title function_">appendChild</span>(entryElement);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, trustedTypesPolicyName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">9178</span>:</span><br><span class="line"><span class="comment">/*!**********************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/webpack-dev-server/client/socket.js ***!</span></span><br><span class="line"><span class="comment">  \**********************************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;client&quot;</span>: <span class="function">() =&gt;</span> (<span class="comment">/* binding */</span> client),</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;default&quot;</span>: <span class="function">() =&gt;</span> (__WEBPACK_DEFAULT_EXPORT__)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _clients_WebSocketClient_js__WEBPACK_IMPORTED_MODULE_0__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./clients/WebSocketClient.js */</span> <span class="number">5218</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _utils_log_js__WEBPACK_IMPORTED_MODULE_1__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./utils/log.js */</span> <span class="number">4664</span>);</span><br><span class="line"><span class="comment">/* provided dependency */</span> <span class="keyword">var</span> __webpack_dev_server_client__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./node_modules/webpack-dev-server/client/clients/WebSocketClient.js */</span> <span class="number">5218</span>);</span><br><span class="line"><span class="comment">/* global __webpack_dev_server_client__ */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// this WebsocketClient is here as a default fallback, in case the client is not injected</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable camelcase */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Client</span> =</span><br><span class="line"><span class="comment">// eslint-disable-next-line no-nested-ternary</span></span><br><span class="line"><span class="keyword">typeof</span> __webpack_dev_server_client__ !== <span class="string">&quot;undefined&quot;</span> ? <span class="keyword">typeof</span> __webpack_dev_server_client__.<span class="property">default</span> !== <span class="string">&quot;undefined&quot;</span> ? __webpack_dev_server_client__.<span class="property">default</span> : __webpack_dev_server_client__ : _clients_WebSocketClient_js__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;default&quot;</span>];</span><br><span class="line"><span class="comment">/* eslint-enable camelcase */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> retries = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> maxRetries = <span class="number">10</span>; <span class="comment">// Initialized client is exported so external consumers can utilize the same instance</span></span><br><span class="line"><span class="comment">// It is mutable to enforce singleton</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line import/no-mutable-exports</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">url</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">&#123; [handler: string]: (data?: any, params?: any) =&gt; any </span>&#125;&#125; handlers</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; [reconnect]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> socket = <span class="keyword">function</span> <span class="title function_">initSocket</span>(<span class="params">url, handlers, reconnect</span>) &#123;</span><br><span class="line">  client = <span class="keyword">new</span> <span class="title class_">Client</span>(url);</span><br><span class="line">  client.<span class="title function_">onOpen</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    retries = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> reconnect !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">      maxRetries = reconnect;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  client.<span class="title function_">onClose</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (retries === <span class="number">0</span>) &#123;</span><br><span class="line">      handlers.<span class="title function_">close</span>();</span><br><span class="line">    &#125; <span class="comment">// Try to reconnect.</span></span><br><span class="line"></span><br><span class="line">    client = <span class="literal">null</span>; <span class="comment">// After 10 retries stop trying, to prevent logspam.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (retries &lt; maxRetries) &#123;</span><br><span class="line">      <span class="comment">// Exponentially increase timeout to reconnect.</span></span><br><span class="line">      <span class="comment">// Respectfully copied from the package `got`.</span></span><br><span class="line">      <span class="comment">// eslint-disable-next-line no-restricted-properties</span></span><br><span class="line">      <span class="keyword">var</span> retryInMs = <span class="number">1000</span> * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, retries) + <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>;</span><br><span class="line">      retries += <span class="number">1</span>;</span><br><span class="line">      _utils_log_js__WEBPACK_IMPORTED_MODULE_1__.<span class="property">log</span>.<span class="title function_">info</span>(<span class="string">&quot;Trying to reconnect...&quot;</span>);</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">socket</span>(url, handlers, reconnect);</span><br><span class="line">      &#125;, retryInMs);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  client.<span class="title function_">onMessage</span>(</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">any</span>&#125; <span class="variable">data</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">    <span class="keyword">if</span> (handlers[message.<span class="property">type</span>]) &#123;</span><br><span class="line">      handlers[message.<span class="property">type</span>](message.<span class="property">data</span>, message.<span class="property">params</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* harmony default export */</span> <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = (socket);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">7308</span>:</span><br><span class="line"><span class="comment">/*!*************************************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/webpack-dev-server/client/utils/createSocketURL.js ***!</span></span><br><span class="line"><span class="comment">  \*************************************************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;default&quot;</span>: <span class="function">() =&gt;</span> (__WEBPACK_DEFAULT_EXPORT__)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">&#123; protocol?: string, auth?: string, hostname?: string, port?: string, pathname?: string, search?: string, hash?: string, slashes?: boolean </span>&#125;&#125; objURL</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">format</span>(<span class="params">objURL</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> protocol = objURL.<span class="property">protocol</span> || <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (protocol &amp;&amp; protocol.<span class="title function_">substr</span>(-<span class="number">1</span>) !== <span class="string">&quot;:&quot;</span>) &#123;</span><br><span class="line">    protocol += <span class="string">&quot;:&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> auth = objURL.<span class="property">auth</span> || <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (auth) &#123;</span><br><span class="line">    auth = <span class="built_in">encodeURIComponent</span>(auth);</span><br><span class="line">    auth = auth.<span class="title function_">replace</span>(<span class="regexp">/%3A/i</span>, <span class="string">&quot;:&quot;</span>);</span><br><span class="line">    auth += <span class="string">&quot;@&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> host = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (objURL.<span class="property">hostname</span>) &#123;</span><br><span class="line">    host = auth + (objURL.<span class="property">hostname</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;:&quot;</span>) === -<span class="number">1</span> ? objURL.<span class="property">hostname</span> : <span class="string">&quot;[&quot;</span>.<span class="title function_">concat</span>(objURL.<span class="property">hostname</span>, <span class="string">&quot;]&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (objURL.<span class="property">port</span>) &#123;</span><br><span class="line">      host += <span class="string">&quot;:&quot;</span>.<span class="title function_">concat</span>(objURL.<span class="property">port</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> pathname = objURL.<span class="property">pathname</span> || <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (objURL.<span class="property">slashes</span>) &#123;</span><br><span class="line">    host = <span class="string">&quot;//&quot;</span>.<span class="title function_">concat</span>(host || <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pathname &amp;&amp; pathname.<span class="title function_">charAt</span>(<span class="number">0</span>) !== <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">      pathname = <span class="string">&quot;/&quot;</span>.<span class="title function_">concat</span>(pathname);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!host) &#123;</span><br><span class="line">    host = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> search = objURL.<span class="property">search</span> || <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (search &amp;&amp; search.<span class="title function_">charAt</span>(<span class="number">0</span>) !== <span class="string">&quot;?&quot;</span>) &#123;</span><br><span class="line">    search = <span class="string">&quot;?&quot;</span>.<span class="title function_">concat</span>(search);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> hash = objURL.<span class="property">hash</span> || <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (hash &amp;&amp; hash.<span class="title function_">charAt</span>(<span class="number">0</span>) !== <span class="string">&quot;#&quot;</span>) &#123;</span><br><span class="line">    hash = <span class="string">&quot;#&quot;</span>.<span class="title function_">concat</span>(hash);</span><br><span class="line">  &#125;</span><br><span class="line">  pathname = pathname.<span class="title function_">replace</span>(<span class="regexp">/[?#]/g</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">match</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">function</span> (<span class="params">match</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(match);</span><br><span class="line">  &#125;);</span><br><span class="line">  search = search.<span class="title function_">replace</span>(<span class="string">&quot;#&quot;</span>, <span class="string">&quot;%23&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(protocol).<span class="title function_">concat</span>(host).<span class="title function_">concat</span>(pathname).<span class="title function_">concat</span>(search).<span class="title function_">concat</span>(hash);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">URL &amp; &#123; fromCurrentScript?: boolean </span>&#125;&#125; parsedURL</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSocketURL</span>(<span class="params">parsedURL</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> hostname = parsedURL.<span class="property">hostname</span>; <span class="comment">// Node.js module parses it as `::`</span></span><br><span class="line">  <span class="comment">// `new URL(urlString, [baseURLString])` parses it as &#x27;[::]&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> isInAddrAny = hostname === <span class="string">&quot;0.0.0.0&quot;</span> || hostname === <span class="string">&quot;::&quot;</span> || hostname === <span class="string">&quot;[::]&quot;</span>; <span class="comment">// why do we need this check?</span></span><br><span class="line">  <span class="comment">// hostname n/a for file protocol (example, when using electron, ionic)</span></span><br><span class="line">  <span class="comment">// see: https://github.com/webpack/webpack-dev-server/pull/384</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isInAddrAny &amp;&amp; self.<span class="property">location</span>.<span class="property">hostname</span> &amp;&amp; self.<span class="property">location</span>.<span class="property">protocol</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;http&quot;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">    hostname = self.<span class="property">location</span>.<span class="property">hostname</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> socketURLProtocol = parsedURL.<span class="property">protocol</span> || self.<span class="property">location</span>.<span class="property">protocol</span>; <span class="comment">// When https is used in the app, secure web sockets are always necessary because the browser doesn&#x27;t accept non-secure web sockets.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (socketURLProtocol === <span class="string">&quot;auto:&quot;</span> || hostname &amp;&amp; isInAddrAny &amp;&amp; self.<span class="property">location</span>.<span class="property">protocol</span> === <span class="string">&quot;https:&quot;</span>) &#123;</span><br><span class="line">    socketURLProtocol = self.<span class="property">location</span>.<span class="property">protocol</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  socketURLProtocol = socketURLProtocol.<span class="title function_">replace</span>(<span class="regexp">/^(?:http|.+-extension|file)/i</span>, <span class="string">&quot;ws&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> socketURLAuth = <span class="string">&quot;&quot;</span>; <span class="comment">// `new URL(urlString, [baseURLstring])` doesn&#x27;t have `auth` property</span></span><br><span class="line">  <span class="comment">// Parse authentication credentials in case we need them</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (parsedURL.<span class="property">username</span>) &#123;</span><br><span class="line">    socketURLAuth = parsedURL.<span class="property">username</span>; <span class="comment">// Since HTTP basic authentication does not allow empty username,</span></span><br><span class="line">    <span class="comment">// we only include password if the username is not empty.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parsedURL.<span class="property">password</span>) &#123;</span><br><span class="line">      <span class="comment">// Result: &lt;username&gt;:&lt;password&gt;</span></span><br><span class="line">      socketURLAuth = socketURLAuth.<span class="title function_">concat</span>(<span class="string">&quot;:&quot;</span>, parsedURL.<span class="property">password</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="comment">// In case the host is a raw IPv6 address, it can be enclosed in</span></span><br><span class="line">  <span class="comment">// the brackets as the brackets are needed in the final URL string.</span></span><br><span class="line">  <span class="comment">// Need to remove those as url.format blindly adds its own set of brackets</span></span><br><span class="line">  <span class="comment">// if the host string contains colons. That would lead to non-working</span></span><br><span class="line">  <span class="comment">// double brackets (e.g. [[::]]) host</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// All of these web socket url params are optionally passed in through resourceQuery,</span></span><br><span class="line">  <span class="comment">// so we need to fall back to the default if they are not provided</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> socketURLHostname = (hostname || self.<span class="property">location</span>.<span class="property">hostname</span> || <span class="string">&quot;localhost&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/^\[(.*)\]$/</span>, <span class="string">&quot;$1&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> socketURLPort = parsedURL.<span class="property">port</span>;</span><br><span class="line">  <span class="keyword">if</span> (!socketURLPort || socketURLPort === <span class="string">&quot;0&quot;</span>) &#123;</span><br><span class="line">    socketURLPort = self.<span class="property">location</span>.<span class="property">port</span>;</span><br><span class="line">  &#125; <span class="comment">// If path is provided it&#x27;ll be passed in via the resourceQuery as a</span></span><br><span class="line">  <span class="comment">// query param so it has to be parsed out of the querystring in order for the</span></span><br><span class="line">  <span class="comment">// client to open the socket to the correct location.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> socketURLPathname = <span class="string">&quot;/ws&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (parsedURL.<span class="property">pathname</span> &amp;&amp; !parsedURL.<span class="property">fromCurrentScript</span>) &#123;</span><br><span class="line">    socketURLPathname = parsedURL.<span class="property">pathname</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">format</span>(&#123;</span><br><span class="line">    <span class="attr">protocol</span>: socketURLProtocol,</span><br><span class="line">    <span class="attr">auth</span>: socketURLAuth,</span><br><span class="line">    <span class="attr">hostname</span>: socketURLHostname,</span><br><span class="line">    <span class="attr">port</span>: socketURLPort,</span><br><span class="line">    <span class="attr">pathname</span>: socketURLPathname,</span><br><span class="line">    <span class="attr">slashes</span>: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* harmony default export */</span> <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = (createSocketURL);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">6671</span>:</span><br><span class="line"><span class="comment">/*!********************************************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js ***!</span></span><br><span class="line"><span class="comment">  \********************************************************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;default&quot;</span>: <span class="function">() =&gt;</span> (__WEBPACK_DEFAULT_EXPORT__)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCurrentScriptSource</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// `document.currentScript` is the most accurate way to find the current script,</span></span><br><span class="line">  <span class="comment">// but is not supported in all browsers.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">currentScript</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="property">currentScript</span>.<span class="title function_">getAttribute</span>(<span class="string">&quot;src&quot;</span>);</span><br><span class="line">  &#125; <span class="comment">// Fallback to getting all scripts running in the document.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> scriptElements = <span class="variable language_">document</span>.<span class="property">scripts</span> || [];</span><br><span class="line">  <span class="keyword">var</span> scriptElementsWithSrc = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">filter</span>.<span class="title function_">call</span>(scriptElements, <span class="keyword">function</span> (<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> element.<span class="title function_">getAttribute</span>(<span class="string">&quot;src&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (scriptElementsWithSrc.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> currentScript = scriptElementsWithSrc[scriptElementsWithSrc.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> currentScript.<span class="title function_">getAttribute</span>(<span class="string">&quot;src&quot;</span>);</span><br><span class="line">  &#125; <span class="comment">// Fail as there was no script to use.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;[webpack-dev-server] Failed to get current script source.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* harmony default export */</span> <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = (getCurrentScriptSource);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">4664</span>:</span><br><span class="line"><span class="comment">/*!*************************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/webpack-dev-server/client/utils/log.js ***!</span></span><br><span class="line"><span class="comment">  \*************************************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;log&quot;</span>: <span class="function">() =&gt;</span> (<span class="comment">/* binding */</span> log),</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;logEnabledFeatures&quot;</span>: <span class="function">() =&gt;</span> (<span class="comment">/* binding */</span> logEnabledFeatures),</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;setLogLevel&quot;</span>: <span class="function">() =&gt;</span> (<span class="comment">/* binding */</span> setLogLevel)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ../modules/logger/index.js */</span> <span class="number">3431</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default = <span class="comment">/*#__PURE__*/</span>__webpack_require__.<span class="title function_">n</span>(_modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0__);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;webpack-dev-server&quot;</span>; <span class="comment">// default level is set on the client side, so it does not need</span></span><br><span class="line"><span class="comment">// to be set by the CLI or API</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> defaultLevel = <span class="string">&quot;info&quot;</span>; <span class="comment">// options new options, merge with old options</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">false | true | &quot;none&quot; | &quot;error&quot; | &quot;warn&quot; | &quot;info&quot; | &quot;log&quot; | &quot;verbose&quot;</span>&#125; <span class="variable">level</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setLogLevel</span>(<span class="params">level</span>) &#123;</span><br><span class="line">  <span class="title function_">_modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default</span>().<span class="title function_">configureDefaultLogger</span>(&#123;</span><br><span class="line">    <span class="attr">level</span>: level</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setLogLevel</span>(defaultLevel);</span><br><span class="line"><span class="keyword">var</span> log = <span class="title function_">_modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default</span>().<span class="title function_">getLogger</span>(name);</span><br><span class="line"><span class="keyword">var</span> logEnabledFeatures = <span class="keyword">function</span> <span class="title function_">logEnabledFeatures</span>(<span class="params">features</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> enabledFeatures = <span class="title class_">Object</span>.<span class="title function_">keys</span>(features);</span><br><span class="line">  <span class="keyword">if</span> (!features || enabledFeatures.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> logString = <span class="string">&quot;Server started:&quot;</span>; <span class="comment">// Server started: Hot Module Replacement enabled, Live Reloading enabled, Overlay disabled.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; enabledFeatures.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> key = enabledFeatures[i];</span><br><span class="line">    logString += <span class="string">&quot; &quot;</span>.<span class="title function_">concat</span>(key, <span class="string">&quot; &quot;</span>).<span class="title function_">concat</span>(features[key] ? <span class="string">&quot;enabled&quot;</span> : <span class="string">&quot;disabled&quot;</span>, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">  &#125; <span class="comment">// replace last comma with a period</span></span><br><span class="line"></span><br><span class="line">  logString = logString.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>).<span class="title function_">concat</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  log.<span class="title function_">info</span>(logString);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">8587</span>:</span><br><span class="line"><span class="comment">/*!******************************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/webpack-dev-server/client/utils/parseURL.js ***!</span></span><br><span class="line"><span class="comment">  \******************************************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;default&quot;</span>: <span class="function">() =&gt;</span> (__WEBPACK_DEFAULT_EXPORT__)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _getCurrentScriptSource_js__WEBPACK_IMPORTED_MODULE_0__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./getCurrentScriptSource.js */</span> <span class="number">6671</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">resourceQuery</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">&#123; [key: string]: string | boolean </span>&#125;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parseURL</span>(<span class="params">resourceQuery</span>) &#123;</span><br><span class="line">  <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">&#123; [key: string]: string </span>&#125;&#125; */</span></span><br><span class="line">  <span class="keyword">var</span> options = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> resourceQuery === <span class="string">&quot;string&quot;</span> &amp;&amp; resourceQuery !== <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> searchParams = resourceQuery.<span class="title function_">slice</span>(<span class="number">1</span>).<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; searchParams.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> pair = searchParams[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">      options[pair[<span class="number">0</span>]] = <span class="built_in">decodeURIComponent</span>(pair[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Else, get the url from the &lt;script&gt; this file was called with.</span></span><br><span class="line">    <span class="keyword">var</span> scriptSource = (<span class="number">0</span>,_getCurrentScriptSource_js__WEBPACK_IMPORTED_MODULE_0__[<span class="string">&quot;default&quot;</span>])();</span><br><span class="line">    <span class="keyword">var</span> scriptSourceURL;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// The placeholder `baseURL` with `window.location.href`,</span></span><br><span class="line">      <span class="comment">// is to allow parsing of path-relative or protocol-relative URLs,</span></span><br><span class="line">      <span class="comment">// and will have no effect if `scriptSource` is a fully valid URL.</span></span><br><span class="line">      scriptSourceURL = <span class="keyword">new</span> <span class="title function_">URL</span>(scriptSource, self.<span class="property">location</span>.<span class="property">href</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;<span class="comment">// URL parsing failed, do nothing.</span></span><br><span class="line">      <span class="comment">// We will still proceed to see if we can recover using `resourceQuery`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (scriptSourceURL) &#123;</span><br><span class="line">      options = scriptSourceURL;</span><br><span class="line">      options.<span class="property">fromCurrentScript</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> options;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* harmony default export */</span> <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = (parseURL);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">4163</span>:</span><br><span class="line"><span class="comment">/*!*******************************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/webpack-dev-server/client/utils/reloadApp.js ***!</span></span><br><span class="line"><span class="comment">  \*******************************************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;default&quot;</span>: <span class="function">() =&gt;</span> (__WEBPACK_DEFAULT_EXPORT__)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! webpack/hot/emitter.js */</span> <span class="number">6226</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0___default = <span class="comment">/*#__PURE__*/</span>__webpack_require__.<span class="title function_">n</span>(webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0__);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _log_js__WEBPACK_IMPORTED_MODULE_1__ = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! ./log.js */</span> <span class="number">4664</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@typedef</span> &#123;<span class="type">import(&quot;../index&quot;).Options</span>&#125; <span class="variable">Options</span></span></span><br><span class="line"><span class="comment">/** <span class="doctag">@typedef</span> &#123;<span class="type">import(&quot;../index&quot;).Status</span>&#125; <span class="variable">Status</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Options</span>&#125; <span class="variable">options</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Status</span>&#125; <span class="variable">status</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reloadApp</span>(<span class="params">_ref, status</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> hot = _ref.<span class="property">hot</span>,</span><br><span class="line">    liveReload = _ref.<span class="property">liveReload</span>;</span><br><span class="line">  <span class="keyword">if</span> (status.<span class="property">isUnloading</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> currentHash = status.<span class="property">currentHash</span>,</span><br><span class="line">    previousHash = status.<span class="property">previousHash</span>;</span><br><span class="line">  <span class="keyword">var</span> isInitial = currentHash.<span class="title function_">indexOf</span>( <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">string</span>&#125; */</span></span><br><span class="line">  previousHash) &gt;= <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (isInitial) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Window</span>&#125; <span class="variable">rootWindow</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">intervalId</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">applyReload</span>(<span class="params">rootWindow, intervalId</span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(intervalId);</span><br><span class="line">    _log_js__WEBPACK_IMPORTED_MODULE_1__.<span class="property">log</span>.<span class="title function_">info</span>(<span class="string">&quot;App updated. Reloading...&quot;</span>);</span><br><span class="line">    rootWindow.<span class="property">location</span>.<span class="title function_">reload</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> search = self.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line">  <span class="keyword">var</span> allowToHot = search.<span class="title function_">indexOf</span>(<span class="string">&quot;webpack-dev-server-hot=false&quot;</span>) === -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> allowToLiveReload = search.<span class="title function_">indexOf</span>(<span class="string">&quot;webpack-dev-server-live-reload=false&quot;</span>) === -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (hot &amp;&amp; allowToHot) &#123;</span><br><span class="line">    _log_js__WEBPACK_IMPORTED_MODULE_1__.<span class="property">log</span>.<span class="title function_">info</span>(<span class="string">&quot;App hot update...&quot;</span>);</span><br><span class="line">    <span class="title function_">webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0___default</span>().<span class="title function_">emit</span>(<span class="string">&quot;webpackHotUpdate&quot;</span>, status.<span class="property">currentHash</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> self !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; self.<span class="property">window</span>) &#123;</span><br><span class="line">      <span class="comment">// broadcast update to window</span></span><br><span class="line">      self.<span class="title function_">postMessage</span>(<span class="string">&quot;webpackHotUpdate&quot;</span>.<span class="title function_">concat</span>(status.<span class="property">currentHash</span>), <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="comment">// allow refreshing the page only if liveReload isn&#x27;t disabled</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (liveReload &amp;&amp; allowToLiveReload) &#123;</span><br><span class="line">    <span class="keyword">var</span> rootWindow = self; <span class="comment">// use parent window for reload (in case we&#x27;re in an iframe with no valid src)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> intervalId = self.<span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (rootWindow.<span class="property">location</span>.<span class="property">protocol</span> !== <span class="string">&quot;about:&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// reload immediately if protocol is valid</span></span><br><span class="line">        <span class="title function_">applyReload</span>(rootWindow, intervalId);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rootWindow = rootWindow.<span class="property">parent</span>;</span><br><span class="line">        <span class="keyword">if</span> (rootWindow.<span class="property">parent</span> === rootWindow) &#123;</span><br><span class="line">          <span class="comment">// if parent equals current window we&#x27;ve reached the root which would continue forever, so trigger a reload anyways</span></span><br><span class="line">          <span class="title function_">applyReload</span>(rootWindow, intervalId);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* harmony default export */</span> <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = (reloadApp);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">430</span>:</span><br><span class="line"><span class="comment">/*!*********************************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/webpack-dev-server/client/utils/sendMessage.js ***!</span></span><br><span class="line"><span class="comment">  \*********************************************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;default&quot;</span>: <span class="function">() =&gt;</span> (__WEBPACK_DEFAULT_EXPORT__)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="comment">/* global __resourceQuery WorkerGlobalScope */</span></span><br><span class="line"><span class="comment">// Send messages to the outside, so plugins can consume it.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">type</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">any</span>&#125; [data]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendMsg</span>(<span class="params">type, data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> self !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; (<span class="keyword">typeof</span> <span class="title class_">WorkerGlobalScope</span> === <span class="string">&quot;undefined&quot;</span> || !(self <span class="keyword">instanceof</span> <span class="title class_">WorkerGlobalScope</span>))) &#123;</span><br><span class="line">    self.<span class="title function_">postMessage</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;webpack&quot;</span>.<span class="title function_">concat</span>(type),</span><br><span class="line">      <span class="attr">data</span>: data</span><br><span class="line">    &#125;, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* harmony default export */</span> <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = (sendMsg);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">8931</span>:</span><br><span class="line"><span class="comment">/*!*******************************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/webpack-dev-server/client/utils/stripAnsi.js ***!</span></span><br><span class="line"><span class="comment">  \*******************************************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">__webpack_require__.<span class="title function_">r</span>(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">&quot;default&quot;</span>: <span class="function">() =&gt;</span> (__WEBPACK_DEFAULT_EXPORT__)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="keyword">var</span> ansiRegex = <span class="keyword">new</span> <span class="title class_">RegExp</span>([<span class="string">&quot;[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&amp;.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&amp;.:=?%@~_]*)*)?\\u0007)&quot;</span>, <span class="string">&quot;(?:(?:\\d&#123;1,4&#125;(?:;\\d&#123;0,4&#125;)*)?[\\dA-PR-TZcf-nq-uy=&gt;&lt;~]))&quot;</span>].<span class="title function_">join</span>(<span class="string">&quot;|&quot;</span>), <span class="string">&quot;g&quot;</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Strip [ANSI escape codes](https://en.wikipedia.org/wiki/ANSI_escape_code) from a string.</span></span><br><span class="line"><span class="comment"> * Adapted from code originally released by Sindre Sorhus</span></span><br><span class="line"><span class="comment"> * Licensed the MIT License</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">string</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stripAnsi</span>(<span class="params">string</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> string !== <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Expected a `string`, got `&quot;</span>.<span class="title function_">concat</span>(<span class="keyword">typeof</span> string, <span class="string">&quot;`&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> string.<span class="title function_">replace</span>(ansiRegex, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* harmony default export */</span> <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = (stripAnsi);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">6226</span>:</span><br><span class="line"><span class="comment">/*!*********************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/webpack/hot/emitter.js ***!</span></span><br><span class="line"><span class="comment">  \*********************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params"><span class="variable language_">module</span>, __unused_webpack_exports, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">EventEmitter</span> = <span class="title function_">__webpack_require__</span>(<span class="comment">/*! events */</span> <span class="number">3358</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">1877</span>:</span><br><span class="line"><span class="comment">/*!*****************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/webpack/hot/log.js ***!</span></span><br><span class="line"><span class="comment">  \*****************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logLevel = <span class="string">&quot;info&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dummy</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shouldLog</span>(<span class="params">level</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> shouldLog = logLevel === <span class="string">&quot;info&quot;</span> &amp;&amp; level === <span class="string">&quot;info&quot;</span> || [<span class="string">&quot;info&quot;</span>, <span class="string">&quot;warning&quot;</span>].<span class="title function_">indexOf</span>(logLevel) &gt;= <span class="number">0</span> &amp;&amp; level === <span class="string">&quot;warning&quot;</span> || [<span class="string">&quot;info&quot;</span>, <span class="string">&quot;warning&quot;</span>, <span class="string">&quot;error&quot;</span>].<span class="title function_">indexOf</span>(logLevel) &gt;= <span class="number">0</span> &amp;&amp; level === <span class="string">&quot;error&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> shouldLog;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logGroup</span>(<span class="params">logFn</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">level, msg</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">shouldLog</span>(level)) &#123;</span><br><span class="line">      <span class="title function_">logFn</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">level, msg</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">shouldLog</span>(level)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (level === <span class="string">&quot;info&quot;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (level === <span class="string">&quot;warning&quot;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (level === <span class="string">&quot;error&quot;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable node/no-unsupported-features/node-builtins */</span></span><br><span class="line"><span class="keyword">var</span> group = <span class="variable language_">console</span>.<span class="property">group</span> || dummy;</span><br><span class="line"><span class="keyword">var</span> groupCollapsed = <span class="variable language_">console</span>.<span class="property">groupCollapsed</span> || dummy;</span><br><span class="line"><span class="keyword">var</span> groupEnd = <span class="variable language_">console</span>.<span class="property">groupEnd</span> || dummy;</span><br><span class="line"><span class="comment">/* eslint-enable node/no-unsupported-features/node-builtins */</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">group</span> = <span class="title function_">logGroup</span>(group);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">groupCollapsed</span> = <span class="title function_">logGroup</span>(groupCollapsed);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">groupEnd</span> = <span class="title function_">logGroup</span>(groupEnd);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">setLogLevel</span> = <span class="keyword">function</span> (<span class="params">level</span>) &#123;</span><br><span class="line">  logLevel = level;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">formatError</span> = <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> message = err.<span class="property">message</span>;</span><br><span class="line">  <span class="keyword">var</span> stack = err.<span class="property">stack</span>;</span><br><span class="line">  <span class="keyword">if</span> (!stack) &#123;</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stack.<span class="title function_">indexOf</span>(message) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> message + <span class="string">&quot;\n&quot;</span> + stack;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> stack;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="number">4946</span>:</span><br><span class="line"><span class="comment">/*!***********************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/zone.js/fesm2015/zone.js ***!</span></span><br><span class="line"><span class="comment">  \***********************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span> Angular v15.1.0-next.0</span></span><br><span class="line"><span class="comment"> * (c) 2010-2022 Google LLC. https://angular.io/</span></span><br><span class="line"><span class="comment"> * License: MIT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span></span></span><br><span class="line"><span class="comment"> * Copyright Google LLC All Rights Reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Use of this source code is governed by an MIT-style license that can be</span></span><br><span class="line"><span class="comment"> * found in the LICENSE file at https://angular.io/license</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="variable language_">global</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> performance = <span class="variable language_">global</span>[<span class="string">&#x27;performance&#x27;</span>];</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">mark</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    performance &amp;&amp; performance[<span class="string">&#x27;mark&#x27;</span>] &amp;&amp; performance[<span class="string">&#x27;mark&#x27;</span>](name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">performanceMeasure</span>(<span class="params">name, label</span>) &#123;</span><br><span class="line">    performance &amp;&amp; performance[<span class="string">&#x27;measure&#x27;</span>] &amp;&amp; performance[<span class="string">&#x27;measure&#x27;</span>](name, label);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">mark</span>(<span class="string">&#x27;Zone&#x27;</span>);</span><br><span class="line">  <span class="comment">// Initialize before it&#x27;s accessed below.</span></span><br><span class="line">  <span class="comment">// __Zone_symbol_prefix global can be used to override the default zone</span></span><br><span class="line">  <span class="comment">// symbol prefix with a custom one if needed.</span></span><br><span class="line">  <span class="keyword">const</span> symbolPrefix = <span class="variable language_">global</span>[<span class="string">&#x27;__Zone_symbol_prefix&#x27;</span>] || <span class="string">&#x27;__zone_symbol__&#x27;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">__symbol__</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> symbolPrefix + name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> checkDuplicate = <span class="variable language_">global</span>[<span class="title function_">__symbol__</span>(<span class="string">&#x27;forceDuplicateZoneCheck&#x27;</span>)] === <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">global</span>[<span class="string">&#x27;Zone&#x27;</span>]) &#123;</span><br><span class="line">    <span class="comment">// if global[&#x27;Zone&#x27;] already exists (maybe zone.js was already loaded or</span></span><br><span class="line">    <span class="comment">// some other lib also registered a global object named Zone), we may need</span></span><br><span class="line">    <span class="comment">// to throw an error, but sometimes user may not want this error.</span></span><br><span class="line">    <span class="comment">// For example,</span></span><br><span class="line">    <span class="comment">// we have two web pages, page1 includes zone.js, page2 doesn&#x27;t.</span></span><br><span class="line">    <span class="comment">// and the 1st time user load page1 and page2, everything work fine,</span></span><br><span class="line">    <span class="comment">// but when user load page2 again, error occurs because global[&#x27;Zone&#x27;] already exists.</span></span><br><span class="line">    <span class="comment">// so we add a flag to let user choose whether to throw this error or not.</span></span><br><span class="line">    <span class="comment">// By default, if existing Zone is from zone.js, we will not throw the error.</span></span><br><span class="line">    <span class="keyword">if</span> (checkDuplicate || <span class="keyword">typeof</span> <span class="variable language_">global</span>[<span class="string">&#x27;Zone&#x27;</span>].<span class="property">__symbol__</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Zone already loaded.&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">global</span>[<span class="string">&#x27;Zone&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Zone</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">parent, zoneSpec</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_parent</span> = parent;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_name</span> = zoneSpec ? zoneSpec.<span class="property">name</span> || <span class="string">&#x27;unnamed&#x27;</span> : <span class="string">&#x27;&lt;root&gt;&#x27;</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_properties</span> = zoneSpec &amp;&amp; zoneSpec.<span class="property">properties</span> || &#123;&#125;;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_zoneDelegate</span> = <span class="keyword">new</span> <span class="title function_">_ZoneDelegate</span>(<span class="variable language_">this</span>, <span class="variable language_">this</span>.<span class="property">_parent</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">_parent</span>.<span class="property">_zoneDelegate</span>, zoneSpec);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">assertZonePatched</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">global</span>[<span class="string">&#x27;Promise&#x27;</span>] !== patches[<span class="string">&#x27;ZoneAwarePromise&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Zone.js has detected that ZoneAwarePromise `(window|global).Promise` &#x27;</span> + <span class="string">&#x27;has been overwritten.\n&#x27;</span> + <span class="string">&#x27;Most likely cause is that a Promise polyfill has been loaded &#x27;</span> + <span class="string">&#x27;after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. &#x27;</span> + <span class="string">&#x27;If you must load one, do so before loading zone.js.)&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">get</span> <span class="title function_">root</span>() &#123;</span><br><span class="line">      <span class="keyword">let</span> zone = <span class="title class_">Zone</span>.<span class="property">current</span>;</span><br><span class="line">      <span class="keyword">while</span> (zone.<span class="property">parent</span>) &#123;</span><br><span class="line">        zone = zone.<span class="property">parent</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> zone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">get</span> <span class="title function_">current</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> _currentZoneFrame.<span class="property">zone</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">get</span> <span class="title function_">currentTask</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> _currentTask;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// tslint:disable-next-line:require-internal-with-underscore</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">__load_patch</span>(<span class="params">name, fn, ignoreDuplicate = <span class="literal">false</span></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (patches.<span class="title function_">hasOwnProperty</span>(name)) &#123;</span><br><span class="line">        <span class="comment">// `checkDuplicate` option is defined from global variable</span></span><br><span class="line">        <span class="comment">// so it works for all modules.</span></span><br><span class="line">        <span class="comment">// `ignoreDuplicate` can work for the specified module</span></span><br><span class="line">        <span class="keyword">if</span> (!ignoreDuplicate &amp;&amp; checkDuplicate) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;Already loaded patch: &#x27;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="variable language_">global</span>[<span class="string">&#x27;__Zone_disable_&#x27;</span> + name]) &#123;</span><br><span class="line">        <span class="keyword">const</span> perfName = <span class="string">&#x27;Zone:&#x27;</span> + name;</span><br><span class="line">        <span class="title function_">mark</span>(perfName);</span><br><span class="line">        patches[name] = <span class="title function_">fn</span>(<span class="variable language_">global</span>, <span class="title class_">Zone</span>, _api);</span><br><span class="line">        <span class="title function_">performanceMeasure</span>(perfName, perfName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">parent</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_parent</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> zone = <span class="variable language_">this</span>.<span class="title function_">getZoneWith</span>(key);</span><br><span class="line">      <span class="keyword">if</span> (zone) <span class="keyword">return</span> zone.<span class="property">_properties</span>[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getZoneWith</span>(<span class="params">key</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> current = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="keyword">while</span> (current) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.<span class="property">_properties</span>.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">          <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current.<span class="property">_parent</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fork</span>(<span class="params">zoneSpec</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!zoneSpec) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;ZoneSpec required!&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_zoneDelegate</span>.<span class="title function_">fork</span>(<span class="variable language_">this</span>, zoneSpec);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">wrap</span>(<span class="params">callback, source</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Expecting function got: &#x27;</span> + callback);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> _callback = <span class="variable language_">this</span>.<span class="property">_zoneDelegate</span>.<span class="title function_">intercept</span>(<span class="variable language_">this</span>, callback, source);</span><br><span class="line">      <span class="keyword">const</span> zone = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> zone.<span class="title function_">runGuarded</span>(_callback, <span class="variable language_">this</span>, <span class="variable language_">arguments</span>, source);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params">callback, applyThis, applyArgs, source</span>) &#123;</span><br><span class="line">      _currentZoneFrame = &#123;</span><br><span class="line">        <span class="attr">parent</span>: _currentZoneFrame,</span><br><span class="line">        <span class="attr">zone</span>: <span class="variable language_">this</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_zoneDelegate</span>.<span class="title function_">invoke</span>(<span class="variable language_">this</span>, callback, applyThis, applyArgs, source);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        _currentZoneFrame = _currentZoneFrame.<span class="property">parent</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">runGuarded</span>(<span class="params">callback, applyThis = <span class="literal">null</span>, applyArgs, source</span>) &#123;</span><br><span class="line">      _currentZoneFrame = &#123;</span><br><span class="line">        <span class="attr">parent</span>: _currentZoneFrame,</span><br><span class="line">        <span class="attr">zone</span>: <span class="variable language_">this</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_zoneDelegate</span>.<span class="title function_">invoke</span>(<span class="variable language_">this</span>, callback, applyThis, applyArgs, source);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_zoneDelegate</span>.<span class="title function_">handleError</span>(<span class="variable language_">this</span>, error)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> error;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        _currentZoneFrame = _currentZoneFrame.<span class="property">parent</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">runTask</span>(<span class="params">task, applyThis, applyArgs</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (task.<span class="property">zone</span> != <span class="variable language_">this</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;A task can only be run in the zone of creation! (Creation: &#x27;</span> + (task.<span class="property">zone</span> || <span class="variable constant_">NO_ZONE</span>).<span class="property">name</span> + <span class="string">&#x27;; Execution: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// https://github.com/angular/zone.js/issues/778, sometimes eventTask</span></span><br><span class="line">      <span class="comment">// will run in notScheduled(canceled) state, we should not try to</span></span><br><span class="line">      <span class="comment">// run such kind of task but just return</span></span><br><span class="line">      <span class="keyword">if</span> (task.<span class="property">state</span> === notScheduled &amp;&amp; (task.<span class="property">type</span> === eventTask || task.<span class="property">type</span> === macroTask)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> reEntryGuard = task.<span class="property">state</span> != running;</span><br><span class="line">      reEntryGuard &amp;&amp; task.<span class="title function_">_transitionTo</span>(running, scheduled);</span><br><span class="line">      task.<span class="property">runCount</span>++;</span><br><span class="line">      <span class="keyword">const</span> previousTask = _currentTask;</span><br><span class="line">      _currentTask = task;</span><br><span class="line">      _currentZoneFrame = &#123;</span><br><span class="line">        <span class="attr">parent</span>: _currentZoneFrame,</span><br><span class="line">        <span class="attr">zone</span>: <span class="variable language_">this</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (task.<span class="property">type</span> == macroTask &amp;&amp; task.<span class="property">data</span> &amp;&amp; !task.<span class="property">data</span>.<span class="property">isPeriodic</span>) &#123;</span><br><span class="line">          task.<span class="property">cancelFn</span> = <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_zoneDelegate</span>.<span class="title function_">invokeTask</span>(<span class="variable language_">this</span>, task, applyThis, applyArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_zoneDelegate</span>.<span class="title function_">handleError</span>(<span class="variable language_">this</span>, error)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> error;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// if the task&#x27;s state is notScheduled or unknown, then it has already been cancelled</span></span><br><span class="line">        <span class="comment">// we should not reset the state to scheduled</span></span><br><span class="line">        <span class="keyword">if</span> (task.<span class="property">state</span> !== notScheduled &amp;&amp; task.<span class="property">state</span> !== unknown) &#123;</span><br><span class="line">          <span class="keyword">if</span> (task.<span class="property">type</span> == eventTask || task.<span class="property">data</span> &amp;&amp; task.<span class="property">data</span>.<span class="property">isPeriodic</span>) &#123;</span><br><span class="line">            reEntryGuard &amp;&amp; task.<span class="title function_">_transitionTo</span>(scheduled, running);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            task.<span class="property">runCount</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">_updateTaskCount</span>(task, -<span class="number">1</span>);</span><br><span class="line">            reEntryGuard &amp;&amp; task.<span class="title function_">_transitionTo</span>(notScheduled, running, notScheduled);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        _currentZoneFrame = _currentZoneFrame.<span class="property">parent</span>;</span><br><span class="line">        _currentTask = previousTask;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">scheduleTask</span>(<span class="params">task</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (task.<span class="property">zone</span> &amp;&amp; task.<span class="property">zone</span> !== <span class="variable language_">this</span>) &#123;</span><br><span class="line">        <span class="comment">// check if the task was rescheduled, the newZone</span></span><br><span class="line">        <span class="comment">// should not be the children of the original zone</span></span><br><span class="line">        <span class="keyword">let</span> newZone = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">while</span> (newZone) &#123;</span><br><span class="line">          <span class="keyword">if</span> (newZone === task.<span class="property">zone</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">`can not reschedule task to <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> which is descendants of the original zone <span class="subst">$&#123;task.zone.name&#125;</span>`</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          newZone = newZone.<span class="property">parent</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      task.<span class="title function_">_transitionTo</span>(scheduling, notScheduled);</span><br><span class="line">      <span class="keyword">const</span> zoneDelegates = [];</span><br><span class="line">      task.<span class="property">_zoneDelegates</span> = zoneDelegates;</span><br><span class="line">      task.<span class="property">_zone</span> = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        task = <span class="variable language_">this</span>.<span class="property">_zoneDelegate</span>.<span class="title function_">scheduleTask</span>(<span class="variable language_">this</span>, task);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="comment">// should set task&#x27;s state to unknown when scheduleTask throw error</span></span><br><span class="line">        <span class="comment">// because the err may from reschedule, so the fromState maybe notScheduled</span></span><br><span class="line">        task.<span class="title function_">_transitionTo</span>(unknown, scheduling, notScheduled);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> @JiaLiPassion, should we check the result from handleError?</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_zoneDelegate</span>.<span class="title function_">handleError</span>(<span class="variable language_">this</span>, err);</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (task.<span class="property">_zoneDelegates</span> === zoneDelegates) &#123;</span><br><span class="line">        <span class="comment">// we have to check because internally the delegate can reschedule the task.</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">_updateTaskCount</span>(task, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (task.<span class="property">state</span> == scheduling) &#123;</span><br><span class="line">        task.<span class="title function_">_transitionTo</span>(scheduled, scheduling);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> task;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">scheduleMicroTask</span>(<span class="params">source, callback, data, customSchedule</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">scheduleTask</span>(<span class="keyword">new</span> <span class="title class_">ZoneTask</span>(microTask, source, callback, data, customSchedule, <span class="literal">undefined</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">scheduleMacroTask</span>(<span class="params">source, callback, data, customSchedule, customCancel</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">scheduleTask</span>(<span class="keyword">new</span> <span class="title class_">ZoneTask</span>(macroTask, source, callback, data, customSchedule, customCancel));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">scheduleEventTask</span>(<span class="params">source, callback, data, customSchedule, customCancel</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">scheduleTask</span>(<span class="keyword">new</span> <span class="title class_">ZoneTask</span>(eventTask, source, callback, data, customSchedule, customCancel));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">cancelTask</span>(<span class="params">task</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (task.<span class="property">zone</span> != <span class="variable language_">this</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;A task can only be cancelled in the zone of creation! (Creation: &#x27;</span> + (task.<span class="property">zone</span> || <span class="variable constant_">NO_ZONE</span>).<span class="property">name</span> + <span class="string">&#x27;; Execution: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (task.<span class="property">state</span> !== scheduled &amp;&amp; task.<span class="property">state</span> !== running) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      task.<span class="title function_">_transitionTo</span>(canceling, scheduled, running);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_zoneDelegate</span>.<span class="title function_">cancelTask</span>(<span class="variable language_">this</span>, task);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="comment">// if error occurs when cancelTask, transit the state to unknown</span></span><br><span class="line">        task.<span class="title function_">_transitionTo</span>(unknown, canceling);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_zoneDelegate</span>.<span class="title function_">handleError</span>(<span class="variable language_">this</span>, err);</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_updateTaskCount</span>(task, -<span class="number">1</span>);</span><br><span class="line">      task.<span class="title function_">_transitionTo</span>(notScheduled, canceling);</span><br><span class="line">      task.<span class="property">runCount</span> = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> task;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">_updateTaskCount</span>(<span class="params">task, count</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> zoneDelegates = task.<span class="property">_zoneDelegates</span>;</span><br><span class="line">      <span class="keyword">if</span> (count == -<span class="number">1</span>) &#123;</span><br><span class="line">        task.<span class="property">_zoneDelegates</span> = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; zoneDelegates.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        zoneDelegates[i].<span class="title function_">_updateTaskCount</span>(task.<span class="property">type</span>, count);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// tslint:disable-next-line:require-internal-with-underscore</span></span><br><span class="line">  <span class="title class_">Zone</span>.<span class="property">__symbol__</span> = __symbol__;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">DELEGATE_ZS</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">onHasTask</span>: <span class="function">(<span class="params">delegate, _, target, hasTaskState</span>) =&gt;</span> delegate.<span class="title function_">hasTask</span>(target, hasTaskState),</span><br><span class="line">    <span class="attr">onScheduleTask</span>: <span class="function">(<span class="params">delegate, _, target, task</span>) =&gt;</span> delegate.<span class="title function_">scheduleTask</span>(target, task),</span><br><span class="line">    <span class="attr">onInvokeTask</span>: <span class="function">(<span class="params">delegate, _, target, task, applyThis, applyArgs</span>) =&gt;</span> delegate.<span class="title function_">invokeTask</span>(target, task, applyThis, applyArgs),</span><br><span class="line">    <span class="attr">onCancelTask</span>: <span class="function">(<span class="params">delegate, _, target, task</span>) =&gt;</span> delegate.<span class="title function_">cancelTask</span>(target, task)</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">_ZoneDelegate</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">zone, parentDelegate, zoneSpec</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_taskCounts</span> = &#123;</span><br><span class="line">        <span class="string">&#x27;microTask&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;macroTask&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;eventTask&#x27;</span>: <span class="number">0</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">zone</span> = zone;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_parentDelegate</span> = parentDelegate;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_forkZS</span> = zoneSpec &amp;&amp; (zoneSpec &amp;&amp; zoneSpec.<span class="property">onFork</span> ? zoneSpec : parentDelegate.<span class="property">_forkZS</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_forkDlgt</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onFork</span> ? parentDelegate : parentDelegate.<span class="property">_forkDlgt</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_forkCurrZone</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onFork</span> ? <span class="variable language_">this</span>.<span class="property">zone</span> : parentDelegate.<span class="property">_forkCurrZone</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_interceptZS</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onIntercept</span> ? zoneSpec : parentDelegate.<span class="property">_interceptZS</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_interceptDlgt</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onIntercept</span> ? parentDelegate : parentDelegate.<span class="property">_interceptDlgt</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_interceptCurrZone</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onIntercept</span> ? <span class="variable language_">this</span>.<span class="property">zone</span> : parentDelegate.<span class="property">_interceptCurrZone</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_invokeZS</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onInvoke</span> ? zoneSpec : parentDelegate.<span class="property">_invokeZS</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_invokeDlgt</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onInvoke</span> ? parentDelegate : parentDelegate.<span class="property">_invokeDlgt</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_invokeCurrZone</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onInvoke</span> ? <span class="variable language_">this</span>.<span class="property">zone</span> : parentDelegate.<span class="property">_invokeCurrZone</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_handleErrorZS</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onHandleError</span> ? zoneSpec : parentDelegate.<span class="property">_handleErrorZS</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_handleErrorDlgt</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onHandleError</span> ? parentDelegate : parentDelegate.<span class="property">_handleErrorDlgt</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_handleErrorCurrZone</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onHandleError</span> ? <span class="variable language_">this</span>.<span class="property">zone</span> : parentDelegate.<span class="property">_handleErrorCurrZone</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_scheduleTaskZS</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onScheduleTask</span> ? zoneSpec : parentDelegate.<span class="property">_scheduleTaskZS</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_scheduleTaskDlgt</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onScheduleTask</span> ? parentDelegate : parentDelegate.<span class="property">_scheduleTaskDlgt</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_scheduleTaskCurrZone</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onScheduleTask</span> ? <span class="variable language_">this</span>.<span class="property">zone</span> : parentDelegate.<span class="property">_scheduleTaskCurrZone</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_invokeTaskZS</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onInvokeTask</span> ? zoneSpec : parentDelegate.<span class="property">_invokeTaskZS</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_invokeTaskDlgt</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onInvokeTask</span> ? parentDelegate : parentDelegate.<span class="property">_invokeTaskDlgt</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_invokeTaskCurrZone</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onInvokeTask</span> ? <span class="variable language_">this</span>.<span class="property">zone</span> : parentDelegate.<span class="property">_invokeTaskCurrZone</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_cancelTaskZS</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onCancelTask</span> ? zoneSpec : parentDelegate.<span class="property">_cancelTaskZS</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_cancelTaskDlgt</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onCancelTask</span> ? parentDelegate : parentDelegate.<span class="property">_cancelTaskDlgt</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_cancelTaskCurrZone</span> = zoneSpec &amp;&amp; (zoneSpec.<span class="property">onCancelTask</span> ? <span class="variable language_">this</span>.<span class="property">zone</span> : parentDelegate.<span class="property">_cancelTaskCurrZone</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_hasTaskZS</span> = <span class="literal">null</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_hasTaskDlgt</span> = <span class="literal">null</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_hasTaskDlgtOwner</span> = <span class="literal">null</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_hasTaskCurrZone</span> = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">const</span> zoneSpecHasTask = zoneSpec &amp;&amp; zoneSpec.<span class="property">onHasTask</span>;</span><br><span class="line">      <span class="keyword">const</span> parentHasTask = parentDelegate &amp;&amp; parentDelegate.<span class="property">_hasTaskZS</span>;</span><br><span class="line">      <span class="keyword">if</span> (zoneSpecHasTask || parentHasTask) &#123;</span><br><span class="line">        <span class="comment">// If we need to report hasTask, than this ZS needs to do ref counting on tasks. In such</span></span><br><span class="line">        <span class="comment">// a case all task related interceptors must go through this ZD. We can&#x27;t short circuit it.</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_hasTaskZS</span> = zoneSpecHasTask ? zoneSpec : <span class="variable constant_">DELEGATE_ZS</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_hasTaskDlgt</span> = parentDelegate;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_hasTaskDlgtOwner</span> = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_hasTaskCurrZone</span> = zone;</span><br><span class="line">        <span class="keyword">if</span> (!zoneSpec.<span class="property">onScheduleTask</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_scheduleTaskZS</span> = <span class="variable constant_">DELEGATE_ZS</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_scheduleTaskDlgt</span> = parentDelegate;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_scheduleTaskCurrZone</span> = <span class="variable language_">this</span>.<span class="property">zone</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!zoneSpec.<span class="property">onInvokeTask</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_invokeTaskZS</span> = <span class="variable constant_">DELEGATE_ZS</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_invokeTaskDlgt</span> = parentDelegate;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_invokeTaskCurrZone</span> = <span class="variable language_">this</span>.<span class="property">zone</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!zoneSpec.<span class="property">onCancelTask</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_cancelTaskZS</span> = <span class="variable constant_">DELEGATE_ZS</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_cancelTaskDlgt</span> = parentDelegate;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_cancelTaskCurrZone</span> = <span class="variable language_">this</span>.<span class="property">zone</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fork</span>(<span class="params">targetZone, zoneSpec</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_forkZS</span> ? <span class="variable language_">this</span>.<span class="property">_forkZS</span>.<span class="title function_">onFork</span>(<span class="variable language_">this</span>.<span class="property">_forkDlgt</span>, <span class="variable language_">this</span>.<span class="property">zone</span>, targetZone, zoneSpec) : <span class="keyword">new</span> <span class="title class_">Zone</span>(targetZone, zoneSpec);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">intercept</span>(<span class="params">targetZone, callback, source</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_interceptZS</span> ? <span class="variable language_">this</span>.<span class="property">_interceptZS</span>.<span class="title function_">onIntercept</span>(<span class="variable language_">this</span>.<span class="property">_interceptDlgt</span>, <span class="variable language_">this</span>.<span class="property">_interceptCurrZone</span>, targetZone, callback, source) : callback;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">invoke</span>(<span class="params">targetZone, callback, applyThis, applyArgs, source</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_invokeZS</span> ? <span class="variable language_">this</span>.<span class="property">_invokeZS</span>.<span class="title function_">onInvoke</span>(<span class="variable language_">this</span>.<span class="property">_invokeDlgt</span>, <span class="variable language_">this</span>.<span class="property">_invokeCurrZone</span>, targetZone, callback, applyThis, applyArgs, source) : callback.<span class="title function_">apply</span>(applyThis, applyArgs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">handleError</span>(<span class="params">targetZone, error</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_handleErrorZS</span> ? <span class="variable language_">this</span>.<span class="property">_handleErrorZS</span>.<span class="title function_">onHandleError</span>(<span class="variable language_">this</span>.<span class="property">_handleErrorDlgt</span>, <span class="variable language_">this</span>.<span class="property">_handleErrorCurrZone</span>, targetZone, error) : <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">scheduleTask</span>(<span class="params">targetZone, task</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> returnTask = task;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_scheduleTaskZS</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_hasTaskZS</span>) &#123;</span><br><span class="line">          returnTask.<span class="property">_zoneDelegates</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">_hasTaskDlgtOwner</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// clang-format off</span></span><br><span class="line">        returnTask = <span class="variable language_">this</span>.<span class="property">_scheduleTaskZS</span>.<span class="title function_">onScheduleTask</span>(<span class="variable language_">this</span>.<span class="property">_scheduleTaskDlgt</span>, <span class="variable language_">this</span>.<span class="property">_scheduleTaskCurrZone</span>, targetZone, task);</span><br><span class="line">        <span class="comment">// clang-format on</span></span><br><span class="line">        <span class="keyword">if</span> (!returnTask) returnTask = task;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (task.<span class="property">scheduleFn</span>) &#123;</span><br><span class="line">          task.<span class="title function_">scheduleFn</span>(task);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (task.<span class="property">type</span> == microTask) &#123;</span><br><span class="line">          <span class="title function_">scheduleMicroTask</span>(task);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Task is missing scheduleFn.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> returnTask;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">invokeTask</span>(<span class="params">targetZone, task, applyThis, applyArgs</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_invokeTaskZS</span> ? <span class="variable language_">this</span>.<span class="property">_invokeTaskZS</span>.<span class="title function_">onInvokeTask</span>(<span class="variable language_">this</span>.<span class="property">_invokeTaskDlgt</span>, <span class="variable language_">this</span>.<span class="property">_invokeTaskCurrZone</span>, targetZone, task, applyThis, applyArgs) : task.<span class="property">callback</span>.<span class="title function_">apply</span>(applyThis, applyArgs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">cancelTask</span>(<span class="params">targetZone, task</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> value;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_cancelTaskZS</span>) &#123;</span><br><span class="line">        value = <span class="variable language_">this</span>.<span class="property">_cancelTaskZS</span>.<span class="title function_">onCancelTask</span>(<span class="variable language_">this</span>.<span class="property">_cancelTaskDlgt</span>, <span class="variable language_">this</span>.<span class="property">_cancelTaskCurrZone</span>, targetZone, task);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!task.<span class="property">cancelFn</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;Task is not cancelable&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        value = task.<span class="title function_">cancelFn</span>(task);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">hasTask</span>(<span class="params">targetZone, isEmpty</span>) &#123;</span><br><span class="line">      <span class="comment">// hasTask should not throw error so other ZoneDelegate</span></span><br><span class="line">      <span class="comment">// can still trigger hasTask callback</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_hasTaskZS</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">_hasTaskZS</span>.<span class="title function_">onHasTask</span>(<span class="variable language_">this</span>.<span class="property">_hasTaskDlgt</span>, <span class="variable language_">this</span>.<span class="property">_hasTaskCurrZone</span>, targetZone, isEmpty);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">handleError</span>(targetZone, err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// tslint:disable-next-line:require-internal-with-underscore</span></span><br><span class="line">    <span class="title function_">_updateTaskCount</span>(<span class="params">type, count</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> counts = <span class="variable language_">this</span>.<span class="property">_taskCounts</span>;</span><br><span class="line">      <span class="keyword">const</span> prev = counts[type];</span><br><span class="line">      <span class="keyword">const</span> next = counts[type] = prev + count;</span><br><span class="line">      <span class="keyword">if</span> (next &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;More tasks executed then were scheduled.&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (prev == <span class="number">0</span> || next == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> isEmpty = &#123;</span><br><span class="line">          <span class="attr">microTask</span>: counts[<span class="string">&#x27;microTask&#x27;</span>] &gt; <span class="number">0</span>,</span><br><span class="line">          <span class="attr">macroTask</span>: counts[<span class="string">&#x27;macroTask&#x27;</span>] &gt; <span class="number">0</span>,</span><br><span class="line">          <span class="attr">eventTask</span>: counts[<span class="string">&#x27;eventTask&#x27;</span>] &gt; <span class="number">0</span>,</span><br><span class="line">          <span class="attr">change</span>: type</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">hasTask</span>(<span class="variable language_">this</span>.<span class="property">zone</span>, isEmpty);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">ZoneTask</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">type, source, callback, options, scheduleFn, cancelFn</span>) &#123;</span><br><span class="line">      <span class="comment">// tslint:disable-next-line:require-internal-with-underscore</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_zone</span> = <span class="literal">null</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">runCount</span> = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">// tslint:disable-next-line:require-internal-with-underscore</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_zoneDelegates</span> = <span class="literal">null</span>;</span><br><span class="line">      <span class="comment">// tslint:disable-next-line:require-internal-with-underscore</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_state</span> = <span class="string">&#x27;notScheduled&#x27;</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">type</span> = type;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">source</span> = source;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">data</span> = options;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">scheduleFn</span> = scheduleFn;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cancelFn</span> = cancelFn;</span><br><span class="line">      <span class="keyword">if</span> (!callback) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;callback is not defined&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">callback</span> = callback;</span><br><span class="line">      <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> @JiaLiPassion options should have interface</span></span><br><span class="line">      <span class="keyword">if</span> (type === eventTask &amp;&amp; options &amp;&amp; options.<span class="property">useG</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">invoke</span> = <span class="title class_">ZoneTask</span>.<span class="property">invokeTask</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">invoke</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">ZoneTask</span>.<span class="property">invokeTask</span>.<span class="title function_">call</span>(<span class="variable language_">global</span>, self, <span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">invokeTask</span>(<span class="params">task, target, args</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!task) &#123;</span><br><span class="line">        task = <span class="variable language_">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      _numberOfNestedTaskFrames++;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        task.<span class="property">runCount</span>++;</span><br><span class="line">        <span class="keyword">return</span> task.<span class="property">zone</span>.<span class="title function_">runTask</span>(task, target, args);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_numberOfNestedTaskFrames == <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="title function_">drainMicroTaskQueue</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        _numberOfNestedTaskFrames--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">zone</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_zone</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">state</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_state</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">cancelScheduleRequest</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_transitionTo</span>(notScheduled, scheduling);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// tslint:disable-next-line:require-internal-with-underscore</span></span><br><span class="line">    <span class="title function_">_transitionTo</span>(<span class="params">toState, fromState1, fromState2</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_state</span> === fromState1 || <span class="variable language_">this</span>.<span class="property">_state</span> === fromState2) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_state</span> = toState;</span><br><span class="line">        <span class="keyword">if</span> (toState == notScheduled) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_zoneDelegates</span> = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.type&#125;</span> &#x27;<span class="subst">$&#123;<span class="variable language_">this</span>.source&#125;</span>&#x27;: can not transition to &#x27;<span class="subst">$&#123;toState&#125;</span>&#x27;, expecting state &#x27;<span class="subst">$&#123;fromState1&#125;</span>&#x27;<span class="subst">$&#123;fromState2 ? <span class="string">&#x27; or \&#x27;&#x27;</span> + fromState2 + <span class="string">&#x27;\&#x27;&#x27;</span> : <span class="string">&#x27;&#x27;</span>&#125;</span>, was &#x27;<span class="subst">$&#123;<span class="variable language_">this</span>._state&#125;</span>&#x27;.`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span> &amp;&amp; <span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">handleId</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">handleId</span>.<span class="title function_">toString</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// add toJSON method to prevent cyclic error when</span></span><br><span class="line">    <span class="comment">// call JSON.stringify(zoneTask)</span></span><br><span class="line">    <span class="title function_">toJSON</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="variable language_">this</span>.<span class="property">type</span>,</span><br><span class="line">        <span class="attr">state</span>: <span class="variable language_">this</span>.<span class="property">state</span>,</span><br><span class="line">        <span class="attr">source</span>: <span class="variable language_">this</span>.<span class="property">source</span>,</span><br><span class="line">        <span class="attr">zone</span>: <span class="variable language_">this</span>.<span class="property">zone</span>.<span class="property">name</span>,</span><br><span class="line">        <span class="attr">runCount</span>: <span class="variable language_">this</span>.<span class="property">runCount</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="comment">//////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="comment">///  MICROTASK QUEUE</span></span><br><span class="line">  <span class="comment">//////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="comment">//////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="keyword">const</span> symbolSetTimeout = <span class="title function_">__symbol__</span>(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> symbolPromise = <span class="title function_">__symbol__</span>(<span class="string">&#x27;Promise&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> symbolThen = <span class="title function_">__symbol__</span>(<span class="string">&#x27;then&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> _microTaskQueue = [];</span><br><span class="line">  <span class="keyword">let</span> _isDrainingMicrotaskQueue = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">let</span> nativeMicroTaskQueuePromise;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">nativeScheduleMicroTask</span>(<span class="params">func</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!nativeMicroTaskQueuePromise) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">global</span>[symbolPromise]) &#123;</span><br><span class="line">        nativeMicroTaskQueuePromise = <span class="variable language_">global</span>[symbolPromise].<span class="title function_">resolve</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nativeMicroTaskQueuePromise) &#123;</span><br><span class="line">      <span class="keyword">let</span> nativeThen = nativeMicroTaskQueuePromise[symbolThen];</span><br><span class="line">      <span class="keyword">if</span> (!nativeThen) &#123;</span><br><span class="line">        <span class="comment">// native Promise is not patchable, we need to use `then` directly</span></span><br><span class="line">        <span class="comment">// issue 1078</span></span><br><span class="line">        nativeThen = nativeMicroTaskQueuePromise[<span class="string">&#x27;then&#x27;</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      nativeThen.<span class="title function_">call</span>(nativeMicroTaskQueuePromise, func);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">global</span>[symbolSetTimeout](func, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">scheduleMicroTask</span>(<span class="params">task</span>) &#123;</span><br><span class="line">    <span class="comment">// if we are not running in any task, and there has not been anything scheduled</span></span><br><span class="line">    <span class="comment">// we must bootstrap the initial task creation by manually scheduling the drain</span></span><br><span class="line">    <span class="keyword">if</span> (_numberOfNestedTaskFrames === <span class="number">0</span> &amp;&amp; _microTaskQueue.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// We are not running in Task, so we need to kickstart the microtask queue.</span></span><br><span class="line">      <span class="title function_">nativeScheduleMicroTask</span>(drainMicroTaskQueue);</span><br><span class="line">    &#125;</span><br><span class="line">    task &amp;&amp; _microTaskQueue.<span class="title function_">push</span>(task);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">drainMicroTaskQueue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_isDrainingMicrotaskQueue) &#123;</span><br><span class="line">      _isDrainingMicrotaskQueue = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">while</span> (_microTaskQueue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> queue = _microTaskQueue;</span><br><span class="line">        _microTaskQueue = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; queue.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">const</span> task = queue[i];</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            task.<span class="property">zone</span>.<span class="title function_">runTask</span>(task, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            _api.<span class="title function_">onUnhandledError</span>(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      _api.<span class="title function_">microtaskDrainDone</span>();</span><br><span class="line">      _isDrainingMicrotaskQueue = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="comment">//////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="comment">///  BOOTSTRAP</span></span><br><span class="line">  <span class="comment">//////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="comment">//////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">NO_ZONE</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;NO ZONE&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> notScheduled = <span class="string">&#x27;notScheduled&#x27;</span>,</span><br><span class="line">    scheduling = <span class="string">&#x27;scheduling&#x27;</span>,</span><br><span class="line">    scheduled = <span class="string">&#x27;scheduled&#x27;</span>,</span><br><span class="line">    running = <span class="string">&#x27;running&#x27;</span>,</span><br><span class="line">    canceling = <span class="string">&#x27;canceling&#x27;</span>,</span><br><span class="line">    unknown = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> microTask = <span class="string">&#x27;microTask&#x27;</span>,</span><br><span class="line">    macroTask = <span class="string">&#x27;macroTask&#x27;</span>,</span><br><span class="line">    eventTask = <span class="string">&#x27;eventTask&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> patches = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> _api = &#123;</span><br><span class="line">    <span class="attr">symbol</span>: __symbol__,</span><br><span class="line">    <span class="attr">currentZoneFrame</span>: <span class="function">() =&gt;</span> _currentZoneFrame,</span><br><span class="line">    <span class="attr">onUnhandledError</span>: noop,</span><br><span class="line">    <span class="attr">microtaskDrainDone</span>: noop,</span><br><span class="line">    <span class="attr">scheduleMicroTask</span>: scheduleMicroTask,</span><br><span class="line">    <span class="attr">showUncaughtError</span>: <span class="function">() =&gt;</span> !<span class="title class_">Zone</span>[<span class="title function_">__symbol__</span>(<span class="string">&#x27;ignoreConsoleErrorUncaughtError&#x27;</span>)],</span><br><span class="line">    <span class="attr">patchEventTarget</span>: <span class="function">() =&gt;</span> [],</span><br><span class="line">    <span class="attr">patchOnProperties</span>: noop,</span><br><span class="line">    <span class="attr">patchMethod</span>: <span class="function">() =&gt;</span> noop,</span><br><span class="line">    <span class="attr">bindArguments</span>: <span class="function">() =&gt;</span> [],</span><br><span class="line">    <span class="attr">patchThen</span>: <span class="function">() =&gt;</span> noop,</span><br><span class="line">    <span class="attr">patchMacroTask</span>: <span class="function">() =&gt;</span> noop,</span><br><span class="line">    <span class="attr">patchEventPrototype</span>: <span class="function">() =&gt;</span> noop,</span><br><span class="line">    <span class="attr">isIEOrEdge</span>: <span class="function">() =&gt;</span> <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">getGlobalObjects</span>: <span class="function">() =&gt;</span> <span class="literal">undefined</span>,</span><br><span class="line">    <span class="title class_">ObjectDefineProperty</span>: <span class="function">() =&gt;</span> noop,</span><br><span class="line">    <span class="title class_">ObjectGetOwnPropertyDescriptor</span>: <span class="function">() =&gt;</span> <span class="literal">undefined</span>,</span><br><span class="line">    <span class="title class_">ObjectCreate</span>: <span class="function">() =&gt;</span> <span class="literal">undefined</span>,</span><br><span class="line">    <span class="title class_">ArraySlice</span>: <span class="function">() =&gt;</span> [],</span><br><span class="line">    <span class="attr">patchClass</span>: <span class="function">() =&gt;</span> noop,</span><br><span class="line">    <span class="attr">wrapWithCurrentZone</span>: <span class="function">() =&gt;</span> noop,</span><br><span class="line">    <span class="attr">filterProperties</span>: <span class="function">() =&gt;</span> [],</span><br><span class="line">    <span class="attr">attachOriginToPatched</span>: <span class="function">() =&gt;</span> noop,</span><br><span class="line">    <span class="attr">_redefineProperty</span>: <span class="function">() =&gt;</span> noop,</span><br><span class="line">    <span class="attr">patchCallbacks</span>: <span class="function">() =&gt;</span> noop,</span><br><span class="line">    <span class="attr">nativeScheduleMicroTask</span>: nativeScheduleMicroTask</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> _currentZoneFrame = &#123;</span><br><span class="line">    <span class="attr">parent</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">zone</span>: <span class="keyword">new</span> <span class="title class_">Zone</span>(<span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> _currentTask = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> _numberOfNestedTaskFrames = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">noop</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">performanceMeasure</span>(<span class="string">&#x27;Zone&#x27;</span>, <span class="string">&#x27;Zone&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">global</span>[<span class="string">&#x27;Zone&#x27;</span>] = <span class="title class_">Zone</span>;</span><br><span class="line">&#125;)(<span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="variable language_">window</span> || <span class="keyword">typeof</span> self !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; self || <span class="variable language_">global</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span></span></span><br><span class="line"><span class="comment"> * Copyright Google LLC All Rights Reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Use of this source code is governed by an MIT-style license that can be</span></span><br><span class="line"><span class="comment"> * found in the LICENSE file at https://angular.io/license</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Suppress closure compiler errors about unknown &#x27;Zone&#x27; variable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@fileoverview</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@suppress</span> &#123;<span class="type">undefinedVars,globalThis,missingRequire</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;node&quot;/&gt;</span></span><br><span class="line"><span class="comment">// issue #989, to reduce bundle size, use short name</span></span><br><span class="line"><span class="comment">/** Object.getOwnPropertyDescriptor */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ObjectGetOwnPropertyDescriptor</span> = <span class="title class_">Object</span>.<span class="property">getOwnPropertyDescriptor</span>;</span><br><span class="line"><span class="comment">/** Object.defineProperty */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ObjectDefineProperty</span> = <span class="title class_">Object</span>.<span class="property">defineProperty</span>;</span><br><span class="line"><span class="comment">/** Object.getPrototypeOf */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ObjectGetPrototypeOf</span> = <span class="title class_">Object</span>.<span class="property">getPrototypeOf</span>;</span><br><span class="line"><span class="comment">/** Object.create */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ObjectCreate</span> = <span class="title class_">Object</span>.<span class="property">create</span>;</span><br><span class="line"><span class="comment">/** Array.prototype.slice */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ArraySlice</span> = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>;</span><br><span class="line"><span class="comment">/** addEventListener string const */</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ADD_EVENT_LISTENER_STR</span> = <span class="string">&#x27;addEventListener&#x27;</span>;</span><br><span class="line"><span class="comment">/** removeEventListener string const */</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REMOVE_EVENT_LISTENER_STR</span> = <span class="string">&#x27;removeEventListener&#x27;</span>;</span><br><span class="line"><span class="comment">/** zoneSymbol addEventListener */</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ZONE_SYMBOL_ADD_EVENT_LISTENER</span> = <span class="title class_">Zone</span>.<span class="title function_">__symbol__</span>(<span class="variable constant_">ADD_EVENT_LISTENER_STR</span>);</span><br><span class="line"><span class="comment">/** zoneSymbol removeEventListener */</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ZONE_SYMBOL_REMOVE_EVENT_LISTENER</span> = <span class="title class_">Zone</span>.<span class="title function_">__symbol__</span>(<span class="variable constant_">REMOVE_EVENT_LISTENER_STR</span>);</span><br><span class="line"><span class="comment">/** true string const */</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TRUE_STR</span> = <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line"><span class="comment">/** false string const */</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FALSE_STR</span> = <span class="string">&#x27;false&#x27;</span>;</span><br><span class="line"><span class="comment">/** Zone symbol prefix string const. */</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ZONE_SYMBOL_PREFIX</span> = <span class="title class_">Zone</span>.<span class="title function_">__symbol__</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">wrapWithCurrentZone</span>(<span class="params">callback, source</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Zone</span>.<span class="property">current</span>.<span class="title function_">wrap</span>(callback, source);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">scheduleMacroTaskWithCurrentZone</span>(<span class="params">source, callback, data, customSchedule, customCancel</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Zone</span>.<span class="property">current</span>.<span class="title function_">scheduleMacroTask</span>(source, callback, data, customSchedule, customCancel);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> zoneSymbol = <span class="title class_">Zone</span>.<span class="property">__symbol__</span>;</span><br><span class="line"><span class="keyword">const</span> isWindowExists = <span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&#x27;undefined&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> internalWindow = isWindowExists ? <span class="variable language_">window</span> : <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">const</span> _global = isWindowExists &amp;&amp; internalWindow || <span class="keyword">typeof</span> self === <span class="string">&#x27;object&#x27;</span> &amp;&amp; self || <span class="variable language_">global</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REMOVE_ATTRIBUTE</span> = <span class="string">&#x27;removeAttribute&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindArguments</span>(<span class="params">args, source</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = args.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> args[i] === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      args[i] = <span class="title function_">wrapWithCurrentZone</span>(args[i], source + <span class="string">&#x27;_&#x27;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchPrototype</span>(<span class="params">prototype, fnNames</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> source = prototype.<span class="property">constructor</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fnNames.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = fnNames[i];</span><br><span class="line">    <span class="keyword">const</span> delegate = prototype[name];</span><br><span class="line">    <span class="keyword">if</span> (delegate) &#123;</span><br><span class="line">      <span class="keyword">const</span> prototypeDesc = <span class="title class_">ObjectGetOwnPropertyDescriptor</span>(prototype, name);</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title function_">isPropertyWritable</span>(prototypeDesc)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      prototype[name] = (<span class="function"><span class="params">delegate</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> patched = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> delegate.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="title function_">bindArguments</span>(<span class="variable language_">arguments</span>, source + <span class="string">&#x27;.&#x27;</span> + name));</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="title function_">attachOriginToPatched</span>(patched, delegate);</span><br><span class="line">        <span class="keyword">return</span> patched;</span><br><span class="line">      &#125;)(delegate);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isPropertyWritable</span>(<span class="params">propertyDesc</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!propertyDesc) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (propertyDesc.<span class="property">writable</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> !(<span class="keyword">typeof</span> propertyDesc.<span class="property">get</span> === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> propertyDesc.<span class="property">set</span> === <span class="string">&#x27;undefined&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> isWebWorker = <span class="keyword">typeof</span> <span class="title class_">WorkerGlobalScope</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; self <span class="keyword">instanceof</span> <span class="title class_">WorkerGlobalScope</span>;</span><br><span class="line"><span class="comment">// Make sure to access `process` through `_global` so that WebPack does not accidentally browserify</span></span><br><span class="line"><span class="comment">// this code.</span></span><br><span class="line"><span class="keyword">const</span> isNode = !(<span class="string">&#x27;nw&#x27;</span> <span class="keyword">in</span> _global) &amp;&amp; <span class="keyword">typeof</span> _global.<span class="property">process</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; &#123;&#125;.<span class="property">toString</span>.<span class="title function_">call</span>(_global.<span class="property">process</span>) === <span class="string">&#x27;[object process]&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> isBrowser = !isNode &amp;&amp; !isWebWorker &amp;&amp; !!(isWindowExists &amp;&amp; internalWindow[<span class="string">&#x27;HTMLElement&#x27;</span>]);</span><br><span class="line"><span class="comment">// we are in electron of nw, so we are both browser and nodejs</span></span><br><span class="line"><span class="comment">// Make sure to access `process` through `_global` so that WebPack does not accidentally browserify</span></span><br><span class="line"><span class="comment">// this code.</span></span><br><span class="line"><span class="keyword">const</span> isMix = <span class="keyword">typeof</span> _global.<span class="property">process</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; &#123;&#125;.<span class="property">toString</span>.<span class="title function_">call</span>(_global.<span class="property">process</span>) === <span class="string">&#x27;[object process]&#x27;</span> &amp;&amp; !isWebWorker &amp;&amp; !!(isWindowExists &amp;&amp; internalWindow[<span class="string">&#x27;HTMLElement&#x27;</span>]);</span><br><span class="line"><span class="keyword">const</span> zoneSymbolEventNames$1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> wrapFn = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">// https://github.com/angular/zone.js/issues/911, in IE, sometimes</span></span><br><span class="line">  <span class="comment">// event will be undefined, so we need to use window.event</span></span><br><span class="line">  event = event || _global.<span class="property">event</span>;</span><br><span class="line">  <span class="keyword">if</span> (!event) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> eventNameSymbol = zoneSymbolEventNames$1[event.<span class="property">type</span>];</span><br><span class="line">  <span class="keyword">if</span> (!eventNameSymbol) &#123;</span><br><span class="line">    eventNameSymbol = zoneSymbolEventNames$1[event.<span class="property">type</span>] = <span class="title function_">zoneSymbol</span>(<span class="string">&#x27;ON_PROPERTY&#x27;</span> + event.<span class="property">type</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> target = <span class="variable language_">this</span> || event.<span class="property">target</span> || _global;</span><br><span class="line">  <span class="keyword">const</span> listener = target[eventNameSymbol];</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">if</span> (isBrowser &amp;&amp; target === internalWindow &amp;&amp; event.<span class="property">type</span> === <span class="string">&#x27;error&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// window.onerror have different signature</span></span><br><span class="line">    <span class="comment">// https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror#window.onerror</span></span><br><span class="line">    <span class="comment">// and onerror callback will prevent default when callback return true</span></span><br><span class="line">    <span class="keyword">const</span> errorEvent = event;</span><br><span class="line">    result = listener &amp;&amp; listener.<span class="title function_">call</span>(<span class="variable language_">this</span>, errorEvent.<span class="property">message</span>, errorEvent.<span class="property">filename</span>, errorEvent.<span class="property">lineno</span>, errorEvent.<span class="property">colno</span>, errorEvent.<span class="property">error</span>);</span><br><span class="line">    <span class="keyword">if</span> (result === <span class="literal">true</span>) &#123;</span><br><span class="line">      event.<span class="title function_">preventDefault</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = listener &amp;&amp; listener.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="literal">undefined</span> &amp;&amp; !result) &#123;</span><br><span class="line">      event.<span class="title function_">preventDefault</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchProperty</span>(<span class="params">obj, prop, prototype</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> desc = <span class="title class_">ObjectGetOwnPropertyDescriptor</span>(obj, prop);</span><br><span class="line">  <span class="keyword">if</span> (!desc &amp;&amp; prototype) &#123;</span><br><span class="line">    <span class="comment">// when patch window object, use prototype to check prop exist or not</span></span><br><span class="line">    <span class="keyword">const</span> prototypeDesc = <span class="title class_">ObjectGetOwnPropertyDescriptor</span>(prototype, prop);</span><br><span class="line">    <span class="keyword">if</span> (prototypeDesc) &#123;</span><br><span class="line">      desc = &#123;</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// if the descriptor not exists or is not configurable</span></span><br><span class="line">  <span class="comment">// just return</span></span><br><span class="line">  <span class="keyword">if</span> (!desc || !desc.<span class="property">configurable</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> onPropPatchedSymbol = <span class="title function_">zoneSymbol</span>(<span class="string">&#x27;on&#x27;</span> + prop + <span class="string">&#x27;patched&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(onPropPatchedSymbol) &amp;&amp; obj[onPropPatchedSymbol]) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// A property descriptor cannot have getter/setter and be writable</span></span><br><span class="line">  <span class="comment">// deleting the writable and value properties avoids this error:</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// TypeError: property descriptors must not specify a value or be writable when a</span></span><br><span class="line">  <span class="comment">// getter or setter has been specified</span></span><br><span class="line">  <span class="keyword">delete</span> desc.<span class="property">writable</span>;</span><br><span class="line">  <span class="keyword">delete</span> desc.<span class="property">value</span>;</span><br><span class="line">  <span class="keyword">const</span> originalDescGet = desc.<span class="property">get</span>;</span><br><span class="line">  <span class="keyword">const</span> originalDescSet = desc.<span class="property">set</span>;</span><br><span class="line">  <span class="comment">// slice(2) cuz &#x27;onclick&#x27; -&gt; &#x27;click&#x27;, etc</span></span><br><span class="line">  <span class="keyword">const</span> eventName = prop.<span class="title function_">slice</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">let</span> eventNameSymbol = zoneSymbolEventNames$1[eventName];</span><br><span class="line">  <span class="keyword">if</span> (!eventNameSymbol) &#123;</span><br><span class="line">    eventNameSymbol = zoneSymbolEventNames$1[eventName] = <span class="title function_">zoneSymbol</span>(<span class="string">&#x27;ON_PROPERTY&#x27;</span> + eventName);</span><br><span class="line">  &#125;</span><br><span class="line">  desc.<span class="property">set</span> = <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span><br><span class="line">    <span class="comment">// in some of windows&#x27;s onproperty callback, this is undefined</span></span><br><span class="line">    <span class="comment">// so we need to check it</span></span><br><span class="line">    <span class="keyword">let</span> target = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (!target &amp;&amp; obj === _global) &#123;</span><br><span class="line">      target = _global;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!target) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> previousValue = target[eventNameSymbol];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> previousValue === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      target.<span class="title function_">removeEventListener</span>(eventName, wrapFn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// issue #978, when onload handler was added before loading zone.js</span></span><br><span class="line">    <span class="comment">// we should remove it with originalDescSet</span></span><br><span class="line">    originalDescSet &amp;&amp; originalDescSet.<span class="title function_">call</span>(target, <span class="literal">null</span>);</span><br><span class="line">    target[eventNameSymbol] = newValue;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> newValue === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      target.<span class="title function_">addEventListener</span>(eventName, wrapFn, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// The getter would return undefined for unassigned properties but the default value of an</span></span><br><span class="line">  <span class="comment">// unassigned property is null</span></span><br><span class="line">  desc.<span class="property">get</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// in some of windows&#x27;s onproperty callback, this is undefined</span></span><br><span class="line">    <span class="comment">// so we need to check it</span></span><br><span class="line">    <span class="keyword">let</span> target = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (!target &amp;&amp; obj === _global) &#123;</span><br><span class="line">      target = _global;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!target) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> listener = target[eventNameSymbol];</span><br><span class="line">    <span class="keyword">if</span> (listener) &#123;</span><br><span class="line">      <span class="keyword">return</span> listener;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (originalDescGet) &#123;</span><br><span class="line">      <span class="comment">// result will be null when use inline event attribute,</span></span><br><span class="line">      <span class="comment">// such as &lt;button onclick=&quot;func();&quot;&gt;OK&lt;/button&gt;</span></span><br><span class="line">      <span class="comment">// because the onclick function is internal raw uncompiled handler</span></span><br><span class="line">      <span class="comment">// the onclick will be evaluated when first time event was triggered or</span></span><br><span class="line">      <span class="comment">// the property is accessed, https://github.com/angular/zone.js/issues/525</span></span><br><span class="line">      <span class="comment">// so we should use original native get to retrieve the handler</span></span><br><span class="line">      <span class="keyword">let</span> value = originalDescGet.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">      <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        desc.<span class="property">set</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, value);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> target[<span class="variable constant_">REMOVE_ATTRIBUTE</span>] === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">          target.<span class="title function_">removeAttribute</span>(prop);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title class_">ObjectDefineProperty</span>(obj, prop, desc);</span><br><span class="line">  obj[onPropPatchedSymbol] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchOnProperties</span>(<span class="params">obj, properties, prototype</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (properties) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; properties.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="title function_">patchProperty</span>(obj, <span class="string">&#x27;on&#x27;</span> + properties[i], prototype);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> onProperties = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (prop.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>) == <span class="string">&#x27;on&#x27;</span>) &#123;</span><br><span class="line">        onProperties.<span class="title function_">push</span>(prop);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; onProperties.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="title function_">patchProperty</span>(obj, onProperties[j], prototype);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> originalInstanceKey = <span class="title function_">zoneSymbol</span>(<span class="string">&#x27;originalInstance&#x27;</span>);</span><br><span class="line"><span class="comment">// wrap some native API on `window`</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchClass</span>(<span class="params">className</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">OriginalClass</span> = _global[className];</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">OriginalClass</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// keep original class in global</span></span><br><span class="line">  _global[<span class="title function_">zoneSymbol</span>(className)] = <span class="title class_">OriginalClass</span>;</span><br><span class="line">  _global[className] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="title function_">bindArguments</span>(<span class="variable language_">arguments</span>, className);</span><br><span class="line">    <span class="keyword">switch</span> (a.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="variable language_">this</span>[originalInstanceKey] = <span class="keyword">new</span> <span class="title class_">OriginalClass</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="variable language_">this</span>[originalInstanceKey] = <span class="keyword">new</span> <span class="title class_">OriginalClass</span>(a[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="variable language_">this</span>[originalInstanceKey] = <span class="keyword">new</span> <span class="title class_">OriginalClass</span>(a[<span class="number">0</span>], a[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="variable language_">this</span>[originalInstanceKey] = <span class="keyword">new</span> <span class="title class_">OriginalClass</span>(a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="variable language_">this</span>[originalInstanceKey] = <span class="keyword">new</span> <span class="title class_">OriginalClass</span>(a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>], a[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Arg list too long.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// attach original delegate to patched function</span></span><br><span class="line">  <span class="title function_">attachOriginToPatched</span>(_global[className], <span class="title class_">OriginalClass</span>);</span><br><span class="line">  <span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">OriginalClass</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;);</span><br><span class="line">  <span class="keyword">let</span> prop;</span><br><span class="line">  <span class="keyword">for</span> (prop <span class="keyword">in</span> instance) &#123;</span><br><span class="line">    <span class="comment">// https://bugs.webkit.org/show_bug.cgi?id=44721</span></span><br><span class="line">    <span class="keyword">if</span> (className === <span class="string">&#x27;XMLHttpRequest&#x27;</span> &amp;&amp; prop === <span class="string">&#x27;responseBlob&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">    (<span class="keyword">function</span> (<span class="params">prop</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> instance[prop] === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        _global[className].<span class="property"><span class="keyword">prototype</span></span>[prop] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>[originalInstanceKey][prop].<span class="title function_">apply</span>(<span class="variable language_">this</span>[originalInstanceKey], <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">ObjectDefineProperty</span>(_global[className].<span class="property"><span class="keyword">prototype</span></span>, prop, &#123;</span><br><span class="line">          <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> fn === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">              <span class="variable language_">this</span>[originalInstanceKey][prop] = <span class="title function_">wrapWithCurrentZone</span>(fn, className + <span class="string">&#x27;.&#x27;</span> + prop);</span><br><span class="line">              <span class="comment">// keep callback in wrapped function so we can</span></span><br><span class="line">              <span class="comment">// use it in Function.prototype.toString to return</span></span><br><span class="line">              <span class="comment">// the native one.</span></span><br><span class="line">              <span class="title function_">attachOriginToPatched</span>(<span class="variable language_">this</span>[originalInstanceKey][prop], fn);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="variable language_">this</span>[originalInstanceKey][prop] = fn;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>[originalInstanceKey][prop];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)(prop);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (prop <span class="keyword">in</span> <span class="title class_">OriginalClass</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop !== <span class="string">&#x27;prototype&#x27;</span> &amp;&amp; <span class="title class_">OriginalClass</span>.<span class="title function_">hasOwnProperty</span>(prop)) &#123;</span><br><span class="line">      _global[className][prop] = <span class="title class_">OriginalClass</span>[prop];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchMethod</span>(<span class="params">target, name, patchFn</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> proto = target;</span><br><span class="line">  <span class="keyword">while</span> (proto &amp;&amp; !proto.<span class="title function_">hasOwnProperty</span>(name)) &#123;</span><br><span class="line">    proto = <span class="title class_">ObjectGetPrototypeOf</span>(proto);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!proto &amp;&amp; target[name]) &#123;</span><br><span class="line">    <span class="comment">// somehow we did not find it, but we can see it. This happens on IE for Window properties.</span></span><br><span class="line">    proto = target;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> delegateName = <span class="title function_">zoneSymbol</span>(name);</span><br><span class="line">  <span class="keyword">let</span> delegate = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (proto &amp;&amp; (!(delegate = proto[delegateName]) || !proto.<span class="title function_">hasOwnProperty</span>(delegateName))) &#123;</span><br><span class="line">    delegate = proto[delegateName] = proto[name];</span><br><span class="line">    <span class="comment">// check whether proto[name] is writable</span></span><br><span class="line">    <span class="comment">// some property is readonly in safari, such as HtmlCanvasElement.prototype.toBlob</span></span><br><span class="line">    <span class="keyword">const</span> desc = proto &amp;&amp; <span class="title class_">ObjectGetOwnPropertyDescriptor</span>(proto, name);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isPropertyWritable</span>(desc)) &#123;</span><br><span class="line">      <span class="keyword">const</span> patchDelegate = <span class="title function_">patchFn</span>(delegate, delegateName, name);</span><br><span class="line">      proto[name] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">patchDelegate</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="title function_">attachOriginToPatched</span>(proto[name], delegate);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> delegate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> @JiaLiPassion, support cancel task later if necessary</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchMacroTask</span>(<span class="params">obj, funcName, metaCreator</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> setNative = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">scheduleTask</span>(<span class="params">task</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = task.<span class="property">data</span>;</span><br><span class="line">    data.<span class="property">args</span>[data.<span class="property">cbIdx</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      task.<span class="property">invoke</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    setNative.<span class="title function_">apply</span>(data.<span class="property">target</span>, data.<span class="property">args</span>);</span><br><span class="line">    <span class="keyword">return</span> task;</span><br><span class="line">  &#125;</span><br><span class="line">  setNative = <span class="title function_">patchMethod</span>(obj, funcName, <span class="function"><span class="params">delegate</span> =&gt;</span> <span class="keyword">function</span> (<span class="params">self, args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> meta = <span class="title function_">metaCreator</span>(self, args);</span><br><span class="line">    <span class="keyword">if</span> (meta.<span class="property">cbIdx</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">typeof</span> args[meta.<span class="property">cbIdx</span>] === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">scheduleMacroTaskWithCurrentZone</span>(meta.<span class="property">name</span>, args[meta.<span class="property">cbIdx</span>], meta, scheduleTask);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// cause an error by calling it directly.</span></span><br><span class="line">      <span class="keyword">return</span> delegate.<span class="title function_">apply</span>(self, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">attachOriginToPatched</span>(<span class="params">patched, original</span>) &#123;</span><br><span class="line">  patched[<span class="title function_">zoneSymbol</span>(<span class="string">&#x27;OriginalDelegate&#x27;</span>)] = original;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> isDetectedIEOrEdge = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> ieOrEdge = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isIE</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ua = internalWindow.<span class="property">navigator</span>.<span class="property">userAgent</span>;</span><br><span class="line">    <span class="keyword">if</span> (ua.<span class="title function_">indexOf</span>(<span class="string">&#x27;MSIE &#x27;</span>) !== -<span class="number">1</span> || ua.<span class="title function_">indexOf</span>(<span class="string">&#x27;Trident/&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isIEOrEdge</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (isDetectedIEOrEdge) &#123;</span><br><span class="line">    <span class="keyword">return</span> ieOrEdge;</span><br><span class="line">  &#125;</span><br><span class="line">  isDetectedIEOrEdge = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ua = internalWindow.<span class="property">navigator</span>.<span class="property">userAgent</span>;</span><br><span class="line">    <span class="keyword">if</span> (ua.<span class="title function_">indexOf</span>(<span class="string">&#x27;MSIE &#x27;</span>) !== -<span class="number">1</span> || ua.<span class="title function_">indexOf</span>(<span class="string">&#x27;Trident/&#x27;</span>) !== -<span class="number">1</span> || ua.<span class="title function_">indexOf</span>(<span class="string">&#x27;Edge/&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">      ieOrEdge = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> ieOrEdge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span></span></span><br><span class="line"><span class="comment"> * Copyright Google LLC All Rights Reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Use of this source code is governed by an MIT-style license that can be</span></span><br><span class="line"><span class="comment"> * found in the LICENSE file at https://angular.io/license</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Zone</span>.<span class="title function_">__load_patch</span>(<span class="string">&#x27;ZoneAwarePromise&#x27;</span>, <span class="function">(<span class="params"><span class="variable language_">global</span>, Zone, api</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">ObjectGetOwnPropertyDescriptor</span> = <span class="title class_">Object</span>.<span class="property">getOwnPropertyDescriptor</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">ObjectDefineProperty</span> = <span class="title class_">Object</span>.<span class="property">defineProperty</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">readableObjectToString</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj &amp;&amp; obj.<span class="property">toString</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> className = obj.<span class="property">constructor</span> &amp;&amp; obj.<span class="property">constructor</span>.<span class="property">name</span>;</span><br><span class="line">      <span class="keyword">return</span> (className ? className : <span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;: &#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj ? obj.<span class="title function_">toString</span>() : <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> __symbol__ = api.<span class="property">symbol</span>;</span><br><span class="line">  <span class="keyword">const</span> _uncaughtPromiseErrors = [];</span><br><span class="line">  <span class="keyword">const</span> isDisableWrappingUncaughtPromiseRejection = <span class="variable language_">global</span>[<span class="title function_">__symbol__</span>(<span class="string">&#x27;DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION&#x27;</span>)] === <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">const</span> symbolPromise = <span class="title function_">__symbol__</span>(<span class="string">&#x27;Promise&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> symbolThen = <span class="title function_">__symbol__</span>(<span class="string">&#x27;then&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> creationTrace = <span class="string">&#x27;__creationTrace__&#x27;</span>;</span><br><span class="line">  api.<span class="property">onUnhandledError</span> = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (api.<span class="title function_">showUncaughtError</span>()) &#123;</span><br><span class="line">      <span class="keyword">const</span> rejection = e &amp;&amp; e.<span class="property">rejection</span>;</span><br><span class="line">      <span class="keyword">if</span> (rejection) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Unhandled Promise rejection:&#x27;</span>, rejection <span class="keyword">instanceof</span> <span class="title class_">Error</span> ? rejection.<span class="property">message</span> : rejection, <span class="string">&#x27;; Zone:&#x27;</span>, e.<span class="property">zone</span>.<span class="property">name</span>, <span class="string">&#x27;; Task:&#x27;</span>, e.<span class="property">task</span> &amp;&amp; e.<span class="property">task</span>.<span class="property">source</span>, <span class="string">&#x27;; Value:&#x27;</span>, rejection, rejection <span class="keyword">instanceof</span> <span class="title class_">Error</span> ? rejection.<span class="property">stack</span> : <span class="literal">undefined</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  api.<span class="property">microtaskDrainDone</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (_uncaughtPromiseErrors.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> uncaughtPromiseError = _uncaughtPromiseErrors.<span class="title function_">shift</span>();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        uncaughtPromiseError.<span class="property">zone</span>.<span class="title function_">runGuarded</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (uncaughtPromiseError.<span class="property">throwOriginal</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> uncaughtPromiseError.<span class="property">rejection</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">throw</span> uncaughtPromiseError;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="title function_">handleUnhandledRejection</span>(error);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL</span> = <span class="title function_">__symbol__</span>(<span class="string">&#x27;unhandledPromiseRejectionHandler&#x27;</span>);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleUnhandledRejection</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    api.<span class="title function_">onUnhandledError</span>(e);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> handler = <span class="title class_">Zone</span>[<span class="variable constant_">UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL</span>];</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> handler === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        handler.<span class="title function_">call</span>(<span class="variable language_">this</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">isThenable</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value &amp;&amp; value.<span class="property">then</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">forwardResolution</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">forwardRejection</span>(<span class="params">rejection</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">ZoneAwarePromise</span>.<span class="title function_">reject</span>(rejection);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> symbolState = <span class="title function_">__symbol__</span>(<span class="string">&#x27;state&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> symbolValue = <span class="title function_">__symbol__</span>(<span class="string">&#x27;value&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> symbolFinally = <span class="title function_">__symbol__</span>(<span class="string">&#x27;finally&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> symbolParentPromiseValue = <span class="title function_">__symbol__</span>(<span class="string">&#x27;parentPromiseValue&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> symbolParentPromiseState = <span class="title function_">__symbol__</span>(<span class="string">&#x27;parentPromiseState&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> source = <span class="string">&#x27;Promise.then&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">UNRESOLVED</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">RESOLVED</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">REJECTED_NO_CATCH</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">makeResolver</span>(<span class="params">promise, state</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title function_">resolvePromise</span>(promise, state, v);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="title function_">resolvePromise</span>(promise, <span class="literal">false</span>, err);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Do not return value or you will break the Promise spec.</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> once = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> wasCalled = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">wrapper</span>(<span class="params">wrappedFunction</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (wasCalled) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        wasCalled = <span class="literal">true</span>;</span><br><span class="line">        wrappedFunction.<span class="title function_">apply</span>(<span class="literal">null</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">TYPE_ERROR</span> = <span class="string">&#x27;Promise resolved with itself&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">CURRENT_TASK_TRACE_SYMBOL</span> = <span class="title function_">__symbol__</span>(<span class="string">&#x27;currentTaskTrace&#x27;</span>);</span><br><span class="line">  <span class="comment">// Promise Resolution</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">resolvePromise</span>(<span class="params">promise, state, value</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> onceWrapper = <span class="title function_">once</span>();</span><br><span class="line">    <span class="keyword">if</span> (promise === value) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="variable constant_">TYPE_ERROR</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (promise[symbolState] === <span class="variable constant_">UNRESOLVED</span>) &#123;</span><br><span class="line">      <span class="comment">// should only get value.then once based on promise spec.</span></span><br><span class="line">      <span class="keyword">let</span> then = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> value === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">          then = value &amp;&amp; value.<span class="property">then</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="title function_">onceWrapper</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolvePromise</span>(promise, <span class="literal">false</span>, err);</span><br><span class="line">        &#125;)();</span><br><span class="line">        <span class="keyword">return</span> promise;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// if (value instanceof ZoneAwarePromise) &#123;</span></span><br><span class="line">      <span class="keyword">if</span> (state !== <span class="variable constant_">REJECTED</span> &amp;&amp; value <span class="keyword">instanceof</span> <span class="title class_">ZoneAwarePromise</span> &amp;&amp; value.<span class="title function_">hasOwnProperty</span>(symbolState) &amp;&amp; value.<span class="title function_">hasOwnProperty</span>(symbolValue) &amp;&amp; value[symbolState] !== <span class="variable constant_">UNRESOLVED</span>) &#123;</span><br><span class="line">        <span class="title function_">clearRejectedNoCatch</span>(value);</span><br><span class="line">        <span class="title function_">resolvePromise</span>(promise, value[symbolState], value[symbolValue]);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state !== <span class="variable constant_">REJECTED</span> &amp;&amp; <span class="keyword">typeof</span> then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          then.<span class="title function_">call</span>(value, <span class="title function_">onceWrapper</span>(<span class="title function_">makeResolver</span>(promise, state)), <span class="title function_">onceWrapper</span>(<span class="title function_">makeResolver</span>(promise, <span class="literal">false</span>)));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="title function_">onceWrapper</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolvePromise</span>(promise, <span class="literal">false</span>, err);</span><br><span class="line">          &#125;)();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        promise[symbolState] = state;</span><br><span class="line">        <span class="keyword">const</span> queue = promise[symbolValue];</span><br><span class="line">        promise[symbolValue] = value;</span><br><span class="line">        <span class="keyword">if</span> (promise[symbolFinally] === symbolFinally) &#123;</span><br><span class="line">          <span class="comment">// the promise is generated by Promise.prototype.finally</span></span><br><span class="line">          <span class="keyword">if</span> (state === <span class="variable constant_">RESOLVED</span>) &#123;</span><br><span class="line">            <span class="comment">// the state is resolved, should ignore the value</span></span><br><span class="line">            <span class="comment">// and use parent promise value</span></span><br><span class="line">            promise[symbolState] = promise[symbolParentPromiseState];</span><br><span class="line">            promise[symbolValue] = promise[symbolParentPromiseValue];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// record task information in value when error occurs, so we can</span></span><br><span class="line">        <span class="comment">// do some additional work such as render longStackTrace</span></span><br><span class="line">        <span class="keyword">if</span> (state === <span class="variable constant_">REJECTED</span> &amp;&amp; value <span class="keyword">instanceof</span> <span class="title class_">Error</span>) &#123;</span><br><span class="line">          <span class="comment">// check if longStackTraceZone is here</span></span><br><span class="line">          <span class="keyword">const</span> trace = <span class="title class_">Zone</span>.<span class="property">currentTask</span> &amp;&amp; <span class="title class_">Zone</span>.<span class="property">currentTask</span>.<span class="property">data</span> &amp;&amp; <span class="title class_">Zone</span>.<span class="property">currentTask</span>.<span class="property">data</span>[creationTrace];</span><br><span class="line">          <span class="keyword">if</span> (trace) &#123;</span><br><span class="line">            <span class="comment">// only keep the long stack trace into error when in longStackTraceZone</span></span><br><span class="line">            <span class="title class_">ObjectDefineProperty</span>(value, <span class="variable constant_">CURRENT_TASK_TRACE_SYMBOL</span>, &#123;</span><br><span class="line">              <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">value</span>: trace</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; queue.<span class="property">length</span>;) &#123;</span><br><span class="line">          <span class="title function_">scheduleResolveOrReject</span>(promise, queue[i++], queue[i++], queue[i++], queue[i++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (queue.<span class="property">length</span> == <span class="number">0</span> &amp;&amp; state == <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">          promise[symbolState] = <span class="variable constant_">REJECTED_NO_CATCH</span>;</span><br><span class="line">          <span class="keyword">let</span> uncaughtPromiseError = value;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Here we throws a new Error to print more readable error log</span></span><br><span class="line">            <span class="comment">// and if the value is not an error, zone.js builds an `Error`</span></span><br><span class="line">            <span class="comment">// Object here to attach the stack information.</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Uncaught (in promise): &#x27;</span> + <span class="title function_">readableObjectToString</span>(value) + (value &amp;&amp; value.<span class="property">stack</span> ? <span class="string">&#x27;\n&#x27;</span> + value.<span class="property">stack</span> : <span class="string">&#x27;&#x27;</span>));</span><br><span class="line">          &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            uncaughtPromiseError = err;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (isDisableWrappingUncaughtPromiseRejection) &#123;</span><br><span class="line">            <span class="comment">// If disable wrapping uncaught promise reject</span></span><br><span class="line">            <span class="comment">// use the value instead of wrapping it.</span></span><br><span class="line">            uncaughtPromiseError.<span class="property">throwOriginal</span> = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          uncaughtPromiseError.<span class="property">rejection</span> = value;</span><br><span class="line">          uncaughtPromiseError.<span class="property">promise</span> = promise;</span><br><span class="line">          uncaughtPromiseError.<span class="property">zone</span> = <span class="title class_">Zone</span>.<span class="property">current</span>;</span><br><span class="line">          uncaughtPromiseError.<span class="property">task</span> = <span class="title class_">Zone</span>.<span class="property">currentTask</span>;</span><br><span class="line">          _uncaughtPromiseErrors.<span class="title function_">push</span>(uncaughtPromiseError);</span><br><span class="line">          api.<span class="title function_">scheduleMicroTask</span>(); <span class="comment">// to make sure that it is running</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Resolving an already resolved promise is a noop.</span></span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">REJECTION_HANDLED_HANDLER</span> = <span class="title function_">__symbol__</span>(<span class="string">&#x27;rejectionHandledHandler&#x27;</span>);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">clearRejectedNoCatch</span>(<span class="params">promise</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (promise[symbolState] === <span class="variable constant_">REJECTED_NO_CATCH</span>) &#123;</span><br><span class="line">      <span class="comment">// if the promise is rejected no catch status</span></span><br><span class="line">      <span class="comment">// and queue.length &gt; 0, means there is a error handler</span></span><br><span class="line">      <span class="comment">// here to handle the rejected promise, we should trigger</span></span><br><span class="line">      <span class="comment">// windows.rejectionhandled eventHandler or nodejs rejectionHandled</span></span><br><span class="line">      <span class="comment">// eventHandler</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> handler = <span class="title class_">Zone</span>[<span class="variable constant_">REJECTION_HANDLED_HANDLER</span>];</span><br><span class="line">        <span class="keyword">if</span> (handler &amp;&amp; <span class="keyword">typeof</span> handler === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">          handler.<span class="title function_">call</span>(<span class="variable language_">this</span>, &#123;</span><br><span class="line">            <span class="attr">rejection</span>: promise[symbolValue],</span><br><span class="line">            <span class="attr">promise</span>: promise</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;&#125;</span><br><span class="line">      promise[symbolState] = <span class="variable constant_">REJECTED</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _uncaughtPromiseErrors.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (promise === _uncaughtPromiseErrors[i].<span class="property">promise</span>) &#123;</span><br><span class="line">          _uncaughtPromiseErrors.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">scheduleResolveOrReject</span>(<span class="params">promise, zone, chainPromise, onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="title function_">clearRejectedNoCatch</span>(promise);</span><br><span class="line">    <span class="keyword">const</span> promiseState = promise[symbolState];</span><br><span class="line">    <span class="keyword">const</span> delegate = promiseState ? <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : forwardResolution : <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : forwardRejection;</span><br><span class="line">    zone.<span class="title function_">scheduleMicroTask</span>(source, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> parentPromiseValue = promise[symbolValue];</span><br><span class="line">        <span class="keyword">const</span> isFinallyPromise = !!chainPromise &amp;&amp; symbolFinally === chainPromise[symbolFinally];</span><br><span class="line">        <span class="keyword">if</span> (isFinallyPromise) &#123;</span><br><span class="line">          <span class="comment">// if the promise is generated from finally call, keep parent promise&#x27;s state and value</span></span><br><span class="line">          chainPromise[symbolParentPromiseValue] = parentPromiseValue;</span><br><span class="line">          chainPromise[symbolParentPromiseState] = promiseState;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// should not pass value to finally callback</span></span><br><span class="line">        <span class="keyword">const</span> value = zone.<span class="title function_">run</span>(delegate, <span class="literal">undefined</span>, isFinallyPromise &amp;&amp; delegate !== forwardRejection &amp;&amp; delegate !== forwardResolution ? [] : [parentPromiseValue]);</span><br><span class="line">        <span class="title function_">resolvePromise</span>(chainPromise, <span class="literal">true</span>, value);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="comment">// if error occurs, should always return this error</span></span><br><span class="line">        <span class="title function_">resolvePromise</span>(chainPromise, <span class="literal">false</span>, error);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, chainPromise);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">ZONE_AWARE_PROMISE_TO_STRING</span> = <span class="string">&#x27;function ZoneAwarePromise() &#123; [native code] &#125;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> noop = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">AggregateError</span> = <span class="variable language_">global</span>.<span class="property">AggregateError</span>;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">ZoneAwarePromise</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable constant_">ZONE_AWARE_PROMISE_TO_STRING</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">resolvePromise</span>(<span class="keyword">new</span> <span class="title function_">this</span>(<span class="literal">null</span>), <span class="variable constant_">RESOLVED</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">error</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">resolvePromise</span>(<span class="keyword">new</span> <span class="title function_">this</span>(<span class="literal">null</span>), <span class="variable constant_">REJECTED</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">any</span>(<span class="params">values</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!values || <span class="keyword">typeof</span> values[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">AggregateError</span>([], <span class="string">&#x27;All promises were rejected&#x27;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> promises = [];</span><br><span class="line">      <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> values) &#123;</span><br><span class="line">          count++;</span><br><span class="line">          promises.<span class="title function_">push</span>(<span class="title class_">ZoneAwarePromise</span>.<span class="title function_">resolve</span>(v));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">AggregateError</span>([], <span class="string">&#x27;All promises were rejected&#x27;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">AggregateError</span>([], <span class="string">&#x27;All promises were rejected&#x27;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> finished = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">const</span> errors = [];</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ZoneAwarePromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          promises[i].<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (finished) &#123;</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            finished = <span class="literal">true</span>;</span><br><span class="line">            <span class="title function_">resolve</span>(v);</span><br><span class="line">          &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            errors.<span class="title function_">push</span>(err);</span><br><span class="line">            count--;</span><br><span class="line">            <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</span><br><span class="line">              finished = <span class="literal">true</span>;</span><br><span class="line">              <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">AggregateError</span>(errors, <span class="string">&#x27;All promises were rejected&#x27;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">values</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> resolve;</span><br><span class="line">      <span class="keyword">let</span> reject;</span><br><span class="line">      <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title function_">this</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve = res;</span><br><span class="line">        reject = rej;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">onResolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(value);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">onReject</span>(<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(error);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> values) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">isThenable</span>(value)) &#123;</span><br><span class="line">          value = <span class="variable language_">this</span>.<span class="title function_">resolve</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">        value.<span class="title function_">then</span>(onResolve, onReject);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> promise;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">values</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">ZoneAwarePromise</span>.<span class="title function_">allWithCallback</span>(values);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">allSettled</span>(<span class="params">values</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> P = <span class="variable language_">this</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="keyword">instanceof</span> <span class="title class_">ZoneAwarePromise</span> ? <span class="variable language_">this</span> : <span class="title class_">ZoneAwarePromise</span>;</span><br><span class="line">      <span class="keyword">return</span> P.<span class="title function_">allWithCallback</span>(values, &#123;</span><br><span class="line">        <span class="attr">thenCallback</span>: <span class="function"><span class="params">value</span> =&gt;</span> (&#123;</span><br><span class="line">          <span class="attr">status</span>: <span class="string">&#x27;fulfilled&#x27;</span>,</span><br><span class="line">          value</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="attr">errorCallback</span>: <span class="function"><span class="params">err</span> =&gt;</span> (&#123;</span><br><span class="line">          <span class="attr">status</span>: <span class="string">&#x27;rejected&#x27;</span>,</span><br><span class="line">          <span class="attr">reason</span>: err</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">allWithCallback</span>(<span class="params">values, callback</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> resolve;</span><br><span class="line">      <span class="keyword">let</span> reject;</span><br><span class="line">      <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title function_">this</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve = res;</span><br><span class="line">        reject = rej;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// Start at 2 to prevent prematurely resolving if .then is called immediately.</span></span><br><span class="line">      <span class="keyword">let</span> unresolvedCount = <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">let</span> valueIndex = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">const</span> resolvedValues = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> values) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">isThenable</span>(value)) &#123;</span><br><span class="line">          value = <span class="variable language_">this</span>.<span class="title function_">resolve</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> curValueIndex = valueIndex;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          value.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            resolvedValues[curValueIndex] = callback ? callback.<span class="title function_">thenCallback</span>(value) : value;</span><br><span class="line">            unresolvedCount--;</span><br><span class="line">            <span class="keyword">if</span> (unresolvedCount === <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(resolvedValues);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!callback) &#123;</span><br><span class="line">              <span class="title function_">reject</span>(err);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              resolvedValues[curValueIndex] = callback.<span class="title function_">errorCallback</span>(err);</span><br><span class="line">              unresolvedCount--;</span><br><span class="line">              <span class="keyword">if</span> (unresolvedCount === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(resolvedValues);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (thenErr) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(thenErr);</span><br><span class="line">        &#125;</span><br><span class="line">        unresolvedCount++;</span><br><span class="line">        valueIndex++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Make the unresolvedCount zero-based again.</span></span><br><span class="line">      unresolvedCount -= <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">if</span> (unresolvedCount === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(resolvedValues);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> promise;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> promise = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="keyword">if</span> (!(promise <span class="keyword">instanceof</span> <span class="title class_">ZoneAwarePromise</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Must be an instanceof Promise.&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      promise[symbolState] = <span class="variable constant_">UNRESOLVED</span>;</span><br><span class="line">      promise[symbolValue] = []; <span class="comment">// queue;</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> onceWrapper = <span class="title function_">once</span>();</span><br><span class="line">        executor &amp;&amp; <span class="title function_">executor</span>(<span class="title function_">onceWrapper</span>(<span class="title function_">makeResolver</span>(promise, <span class="variable constant_">RESOLVED</span>)), <span class="title function_">onceWrapper</span>(<span class="title function_">makeResolver</span>(promise, <span class="variable constant_">REJECTED</span>)));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="title function_">resolvePromise</span>(promise, <span class="literal">false</span>, error);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    get [<span class="title class_">Symbol</span>.<span class="property">toStringTag</span>]() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Promise&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    get [<span class="title class_">Symbol</span>.<span class="property">species</span>]() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">ZoneAwarePromise</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> _a;</span><br><span class="line">      <span class="comment">// We must read `Symbol.species` safely because `this` may be anything. For instance, `this`</span></span><br><span class="line">      <span class="comment">// may be an object without a prototype (created through `Object.create(null)`); thus</span></span><br><span class="line">      <span class="comment">// `this.constructor` will be undefined. One of the use cases is SystemJS creating</span></span><br><span class="line">      <span class="comment">// prototype-less objects (modules) via `Object.create(null)`. The SystemJS creates an empty</span></span><br><span class="line">      <span class="comment">// object and copies promise properties into that object (within the `getOrCreateLoad`</span></span><br><span class="line">      <span class="comment">// function). The zone.js then checks if the resolved value has the `then` method and invokes</span></span><br><span class="line">      <span class="comment">// it with the `value` context. Otherwise, this will throw an error: `TypeError: Cannot read</span></span><br><span class="line">      <span class="comment">// properties of undefined (reading &#x27;Symbol(Symbol.species)&#x27;)`.</span></span><br><span class="line">      <span class="keyword">let</span> C = (_a = <span class="variable language_">this</span>.<span class="property">constructor</span>) === <span class="literal">null</span> || _a === <span class="keyword">void</span> <span class="number">0</span> ? <span class="keyword">void</span> <span class="number">0</span> : _a[<span class="title class_">Symbol</span>.<span class="property">species</span>];</span><br><span class="line">      <span class="keyword">if</span> (!C || <span class="keyword">typeof</span> C !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        C = <span class="variable language_">this</span>.<span class="property">constructor</span> || <span class="title class_">ZoneAwarePromise</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> chainPromise = <span class="keyword">new</span> <span class="title function_">C</span>(noop);</span><br><span class="line">      <span class="keyword">const</span> zone = <span class="title class_">Zone</span>.<span class="property">current</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>[symbolState] == <span class="variable constant_">UNRESOLVED</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>[symbolValue].<span class="title function_">push</span>(zone, chainPromise, onFulfilled, onRejected);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">scheduleResolveOrReject</span>(<span class="variable language_">this</span>, zone, chainPromise, onFulfilled, onRejected);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> chainPromise;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">null</span>, onRejected);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">finally</span>(<span class="params">onFinally</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> _a;</span><br><span class="line">      <span class="comment">// See comment on the call to `then` about why thee `Symbol.species` is safely accessed.</span></span><br><span class="line">      <span class="keyword">let</span> C = (_a = <span class="variable language_">this</span>.<span class="property">constructor</span>) === <span class="literal">null</span> || _a === <span class="keyword">void</span> <span class="number">0</span> ? <span class="keyword">void</span> <span class="number">0</span> : _a[<span class="title class_">Symbol</span>.<span class="property">species</span>];</span><br><span class="line">      <span class="keyword">if</span> (!C || <span class="keyword">typeof</span> C !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        C = <span class="title class_">ZoneAwarePromise</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> chainPromise = <span class="keyword">new</span> <span class="title function_">C</span>(noop);</span><br><span class="line">      chainPromise[symbolFinally] = symbolFinally;</span><br><span class="line">      <span class="keyword">const</span> zone = <span class="title class_">Zone</span>.<span class="property">current</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>[symbolState] == <span class="variable constant_">UNRESOLVED</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>[symbolValue].<span class="title function_">push</span>(zone, chainPromise, onFinally, onFinally);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">scheduleResolveOrReject</span>(<span class="variable language_">this</span>, zone, chainPromise, onFinally, onFinally);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> chainPromise;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Protect against aggressive optimizers dropping seemingly unused properties.</span></span><br><span class="line">  <span class="comment">// E.g. Closure Compiler in advanced mode.</span></span><br><span class="line">  <span class="title class_">ZoneAwarePromise</span>[<span class="string">&#x27;resolve&#x27;</span>] = <span class="title class_">ZoneAwarePromise</span>.<span class="property">resolve</span>;</span><br><span class="line">  <span class="title class_">ZoneAwarePromise</span>[<span class="string">&#x27;reject&#x27;</span>] = <span class="title class_">ZoneAwarePromise</span>.<span class="property">reject</span>;</span><br><span class="line">  <span class="title class_">ZoneAwarePromise</span>[<span class="string">&#x27;race&#x27;</span>] = <span class="title class_">ZoneAwarePromise</span>.<span class="property">race</span>;</span><br><span class="line">  <span class="title class_">ZoneAwarePromise</span>[<span class="string">&#x27;all&#x27;</span>] = <span class="title class_">ZoneAwarePromise</span>.<span class="property">all</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">NativePromise</span> = <span class="variable language_">global</span>[symbolPromise] = <span class="variable language_">global</span>[<span class="string">&#x27;Promise&#x27;</span>];</span><br><span class="line">  <span class="variable language_">global</span>[<span class="string">&#x27;Promise&#x27;</span>] = <span class="title class_">ZoneAwarePromise</span>;</span><br><span class="line">  <span class="keyword">const</span> symbolThenPatched = <span class="title function_">__symbol__</span>(<span class="string">&#x27;thenPatched&#x27;</span>);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">patchThen</span>(<span class="params">Ctor</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> proto = <span class="title class_">Ctor</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="keyword">const</span> prop = <span class="title class_">ObjectGetOwnPropertyDescriptor</span>(proto, <span class="string">&#x27;then&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (prop &amp;&amp; (prop.<span class="property">writable</span> === <span class="literal">false</span> || !prop.<span class="property">configurable</span>)) &#123;</span><br><span class="line">      <span class="comment">// check Ctor.prototype.then propertyDescriptor is writable or not</span></span><br><span class="line">      <span class="comment">// in meteor env, writable is false, we should ignore such case</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> originalThen = proto.<span class="property">then</span>;</span><br><span class="line">    <span class="comment">// Keep a reference to the original method.</span></span><br><span class="line">    proto[symbolThen] = originalThen;</span><br><span class="line">    <span class="title class_">Ctor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onResolve, onReject</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> wrapped = <span class="keyword">new</span> <span class="title class_">ZoneAwarePromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        originalThen.<span class="title function_">call</span>(<span class="variable language_">this</span>, resolve, reject);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> wrapped.<span class="title function_">then</span>(onResolve, onReject);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title class_">Ctor</span>[symbolThenPatched] = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  api.<span class="property">patchThen</span> = patchThen;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">zoneify</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">self, args</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> resultPromise = fn.<span class="title function_">apply</span>(self, args);</span><br><span class="line">      <span class="keyword">if</span> (resultPromise <span class="keyword">instanceof</span> <span class="title class_">ZoneAwarePromise</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> resultPromise;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> ctor = resultPromise.<span class="property">constructor</span>;</span><br><span class="line">      <span class="keyword">if</span> (!ctor[symbolThenPatched]) &#123;</span><br><span class="line">        <span class="title function_">patchThen</span>(ctor);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> resultPromise;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">NativePromise</span>) &#123;</span><br><span class="line">    <span class="title function_">patchThen</span>(<span class="title class_">NativePromise</span>);</span><br><span class="line">    <span class="title function_">patchMethod</span>(<span class="variable language_">global</span>, <span class="string">&#x27;fetch&#x27;</span>, <span class="function"><span class="params">delegate</span> =&gt;</span> <span class="title function_">zoneify</span>(delegate));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// This is not part of public API, but it is useful for tests, so we expose it.</span></span><br><span class="line">  <span class="title class_">Promise</span>[<span class="title class_">Zone</span>.<span class="title function_">__symbol__</span>(<span class="string">&#x27;uncaughtPromiseErrors&#x27;</span>)] = _uncaughtPromiseErrors;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">ZoneAwarePromise</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span></span></span><br><span class="line"><span class="comment"> * Copyright Google LLC All Rights Reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Use of this source code is governed by an MIT-style license that can be</span></span><br><span class="line"><span class="comment"> * found in the LICENSE file at https://angular.io/license</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// override Function.prototype.toString to make zone.js patched function</span></span><br><span class="line"><span class="comment">// look like native function</span></span><br><span class="line"><span class="title class_">Zone</span>.<span class="title function_">__load_patch</span>(<span class="string">&#x27;toString&#x27;</span>, <span class="function"><span class="params">global</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// patch Func.prototype.toString to let them look like native</span></span><br><span class="line">  <span class="keyword">const</span> originalFunctionToString = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">ORIGINAL_DELEGATE_SYMBOL</span> = <span class="title function_">zoneSymbol</span>(<span class="string">&#x27;OriginalDelegate&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">PROMISE_SYMBOL</span> = <span class="title function_">zoneSymbol</span>(<span class="string">&#x27;Promise&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">ERROR_SYMBOL</span> = <span class="title function_">zoneSymbol</span>(<span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> newFunctionToString = <span class="keyword">function</span> <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> originalDelegate = <span class="variable language_">this</span>[<span class="variable constant_">ORIGINAL_DELEGATE_SYMBOL</span>];</span><br><span class="line">      <span class="keyword">if</span> (originalDelegate) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> originalDelegate === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> originalFunctionToString.<span class="title function_">call</span>(originalDelegate);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(originalDelegate);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span> === <span class="title class_">Promise</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> nativePromise = <span class="variable language_">global</span>[<span class="variable constant_">PROMISE_SYMBOL</span>];</span><br><span class="line">        <span class="keyword">if</span> (nativePromise) &#123;</span><br><span class="line">          <span class="keyword">return</span> originalFunctionToString.<span class="title function_">call</span>(nativePromise);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span> === <span class="title class_">Error</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> nativeError = <span class="variable language_">global</span>[<span class="variable constant_">ERROR_SYMBOL</span>];</span><br><span class="line">        <span class="keyword">if</span> (nativeError) &#123;</span><br><span class="line">          <span class="keyword">return</span> originalFunctionToString.<span class="title function_">call</span>(nativeError);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> originalFunctionToString.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  newFunctionToString[<span class="variable constant_">ORIGINAL_DELEGATE_SYMBOL</span>] = originalFunctionToString;</span><br><span class="line">  <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = newFunctionToString;</span><br><span class="line">  <span class="comment">// patch Object.prototype.toString to let them look like native</span></span><br><span class="line">  <span class="keyword">const</span> originalObjectToString = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">PROMISE_OBJECT_TO_STRING</span> = <span class="string">&#x27;[object Promise]&#x27;</span>;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Promise</span> === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable constant_">PROMISE_OBJECT_TO_STRING</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> originalObjectToString.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span></span></span><br><span class="line"><span class="comment"> * Copyright Google LLC All Rights Reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Use of this source code is governed by an MIT-style license that can be</span></span><br><span class="line"><span class="comment"> * found in the LICENSE file at https://angular.io/license</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> passiveSupported = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> options = <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(&#123;&#125;, <span class="string">&#x27;passive&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        passiveSupported = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// Note: We pass the `options` object as the event handler too. This is not compatible with the</span></span><br><span class="line">    <span class="comment">// signature of `addEventListener` or `removeEventListener` but enables us to remove the handler</span></span><br><span class="line">    <span class="comment">// without an actual handler.</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;test&#x27;</span>, options, options);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;test&#x27;</span>, options, options);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    passiveSupported = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// an identifier to tell ZoneTask do not create a new invoke closure</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">OPTIMIZED_ZONE_EVENT_TASK_DATA</span> = &#123;</span><br><span class="line">  <span class="attr">useG</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> zoneSymbolEventNames = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> globalSources = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">EVENT_NAME_SYMBOL_REGX</span> = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;^&#x27;</span> + <span class="variable constant_">ZONE_SYMBOL_PREFIX</span> + <span class="string">&#x27;(\\w+)(true|false)$&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IMMEDIATE_PROPAGATION_SYMBOL</span> = <span class="title function_">zoneSymbol</span>(<span class="string">&#x27;propagationStopped&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">prepareEventNames</span>(<span class="params">eventName, eventNameToString</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> falseEventName = (eventNameToString ? <span class="title function_">eventNameToString</span>(eventName) : eventName) + <span class="variable constant_">FALSE_STR</span>;</span><br><span class="line">  <span class="keyword">const</span> trueEventName = (eventNameToString ? <span class="title function_">eventNameToString</span>(eventName) : eventName) + <span class="variable constant_">TRUE_STR</span>;</span><br><span class="line">  <span class="keyword">const</span> symbol = <span class="variable constant_">ZONE_SYMBOL_PREFIX</span> + falseEventName;</span><br><span class="line">  <span class="keyword">const</span> symbolCapture = <span class="variable constant_">ZONE_SYMBOL_PREFIX</span> + trueEventName;</span><br><span class="line">  zoneSymbolEventNames[eventName] = &#123;&#125;;</span><br><span class="line">  zoneSymbolEventNames[eventName][<span class="variable constant_">FALSE_STR</span>] = symbol;</span><br><span class="line">  zoneSymbolEventNames[eventName][<span class="variable constant_">TRUE_STR</span>] = symbolCapture;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchEventTarget</span>(<span class="params">_global, api, apis, patchOptions</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">ADD_EVENT_LISTENER</span> = patchOptions &amp;&amp; patchOptions.<span class="property">add</span> || <span class="variable constant_">ADD_EVENT_LISTENER_STR</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">REMOVE_EVENT_LISTENER</span> = patchOptions &amp;&amp; patchOptions.<span class="property">rm</span> || <span class="variable constant_">REMOVE_EVENT_LISTENER_STR</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">LISTENERS_EVENT_LISTENER</span> = patchOptions &amp;&amp; patchOptions.<span class="property">listeners</span> || <span class="string">&#x27;eventListeners&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">REMOVE_ALL_LISTENERS_EVENT_LISTENER</span> = patchOptions &amp;&amp; patchOptions.<span class="property">rmAll</span> || <span class="string">&#x27;removeAllListeners&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> zoneSymbolAddEventListener = <span class="title function_">zoneSymbol</span>(<span class="variable constant_">ADD_EVENT_LISTENER</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">ADD_EVENT_LISTENER_SOURCE</span> = <span class="string">&#x27;.&#x27;</span> + <span class="variable constant_">ADD_EVENT_LISTENER</span> + <span class="string">&#x27;:&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">PREPEND_EVENT_LISTENER</span> = <span class="string">&#x27;prependListener&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">PREPEND_EVENT_LISTENER_SOURCE</span> = <span class="string">&#x27;.&#x27;</span> + <span class="variable constant_">PREPEND_EVENT_LISTENER</span> + <span class="string">&#x27;:&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> invokeTask = <span class="keyword">function</span> (<span class="params">task, target, event</span>) &#123;</span><br><span class="line">    <span class="comment">// for better performance, check isRemoved which is set</span></span><br><span class="line">    <span class="comment">// by removeEventListener</span></span><br><span class="line">    <span class="keyword">if</span> (task.<span class="property">isRemoved</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> delegate = task.<span class="property">callback</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> delegate === <span class="string">&#x27;object&#x27;</span> &amp;&amp; delegate.<span class="property">handleEvent</span>) &#123;</span><br><span class="line">      <span class="comment">// create the bind version of handleEvent when invoke</span></span><br><span class="line">      task.<span class="property">callback</span> = <span class="function"><span class="params">event</span> =&gt;</span> delegate.<span class="title function_">handleEvent</span>(event);</span><br><span class="line">      task.<span class="property">originalDelegate</span> = delegate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// invoke static task.invoke</span></span><br><span class="line">    <span class="comment">// need to try/catch error here, otherwise, the error in one event listener</span></span><br><span class="line">    <span class="comment">// will break the executions of the other event listeners. Also error will</span></span><br><span class="line">    <span class="comment">// not remove the event listener when `once` options is true.</span></span><br><span class="line">    <span class="keyword">let</span> error;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      task.<span class="title function_">invoke</span>(task, target, [event]);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      error = err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> options = task.<span class="property">options</span>;</span><br><span class="line">    <span class="keyword">if</span> (options &amp;&amp; <span class="keyword">typeof</span> options === <span class="string">&#x27;object&#x27;</span> &amp;&amp; options.<span class="property">once</span>) &#123;</span><br><span class="line">      <span class="comment">// if options.once is true, after invoke once remove listener here</span></span><br><span class="line">      <span class="comment">// only browser need to do this, nodejs eventEmitter will cal removeListener</span></span><br><span class="line">      <span class="comment">// inside EventEmitter.once</span></span><br><span class="line">      <span class="keyword">const</span> delegate = task.<span class="property">originalDelegate</span> ? task.<span class="property">originalDelegate</span> : task.<span class="property">callback</span>;</span><br><span class="line">      target[<span class="variable constant_">REMOVE_EVENT_LISTENER</span>].<span class="title function_">call</span>(target, event.<span class="property">type</span>, delegate, options);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">globalCallback</span>(<span class="params">context, event, isCapture</span>) &#123;</span><br><span class="line">    <span class="comment">// https://github.com/angular/zone.js/issues/911, in IE, sometimes</span></span><br><span class="line">    <span class="comment">// event will be undefined, so we need to use window.event</span></span><br><span class="line">    event = event || _global.<span class="property">event</span>;</span><br><span class="line">    <span class="keyword">if</span> (!event) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// event.target is needed for Samsung TV and SourceBuffer</span></span><br><span class="line">    <span class="comment">// || global is needed https://github.com/angular/zone.js/issues/190</span></span><br><span class="line">    <span class="keyword">const</span> target = context || event.<span class="property">target</span> || _global;</span><br><span class="line">    <span class="keyword">const</span> tasks = target[zoneSymbolEventNames[event.<span class="property">type</span>][isCapture ? <span class="variable constant_">TRUE_STR</span> : <span class="variable constant_">FALSE_STR</span>]];</span><br><span class="line">    <span class="keyword">if</span> (tasks) &#123;</span><br><span class="line">      <span class="keyword">const</span> errors = [];</span><br><span class="line">      <span class="comment">// invoke all tasks which attached to current target with given event.type and capture = false</span></span><br><span class="line">      <span class="comment">// for performance concern, if task.length === 1, just invoke</span></span><br><span class="line">      <span class="keyword">if</span> (tasks.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> err = <span class="title function_">invokeTask</span>(tasks[<span class="number">0</span>], target, event);</span><br><span class="line">        err &amp;&amp; errors.<span class="title function_">push</span>(err);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// https://github.com/angular/zone.js/issues/836</span></span><br><span class="line">        <span class="comment">// copy the tasks array before invoke, to avoid</span></span><br><span class="line">        <span class="comment">// the callback will remove itself or other listener</span></span><br><span class="line">        <span class="keyword">const</span> copyTasks = tasks.<span class="title function_">slice</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; copyTasks.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (event &amp;&amp; event[<span class="variable constant_">IMMEDIATE_PROPAGATION_SYMBOL</span>] === <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">const</span> err = <span class="title function_">invokeTask</span>(copyTasks[i], target, event);</span><br><span class="line">          err &amp;&amp; errors.<span class="title function_">push</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Since there is only one error, we don&#x27;t need to schedule microTask</span></span><br><span class="line">      <span class="comment">// to throw the error.</span></span><br><span class="line">      <span class="keyword">if</span> (errors.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> errors[<span class="number">0</span>];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; errors.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">const</span> err = errors[i];</span><br><span class="line">          api.<span class="title function_">nativeScheduleMicroTask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> err;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// global shared zoneAwareCallback to handle all event callback with capture = false</span></span><br><span class="line">  <span class="keyword">const</span> globalZoneAwareCallback = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">globalCallback</span>(<span class="variable language_">this</span>, event, <span class="literal">false</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// global shared zoneAwareCallback to handle all event callback with capture = true</span></span><br><span class="line">  <span class="keyword">const</span> globalZoneAwareCaptureCallback = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">globalCallback</span>(<span class="variable language_">this</span>, event, <span class="literal">true</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">patchEventTargetMethods</span>(<span class="params">obj, patchOptions</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!obj) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> useGlobalCallback = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (patchOptions &amp;&amp; patchOptions.<span class="property">useG</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      useGlobalCallback = patchOptions.<span class="property">useG</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> validateHandler = patchOptions &amp;&amp; patchOptions.<span class="property">vh</span>;</span><br><span class="line">    <span class="keyword">let</span> checkDuplicate = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (patchOptions &amp;&amp; patchOptions.<span class="property">chkDup</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      checkDuplicate = patchOptions.<span class="property">chkDup</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> returnTarget = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (patchOptions &amp;&amp; patchOptions.<span class="property">rt</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      returnTarget = patchOptions.<span class="property">rt</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> proto = obj;</span><br><span class="line">    <span class="keyword">while</span> (proto &amp;&amp; !proto.<span class="title function_">hasOwnProperty</span>(<span class="variable constant_">ADD_EVENT_LISTENER</span>)) &#123;</span><br><span class="line">      proto = <span class="title class_">ObjectGetPrototypeOf</span>(proto);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!proto &amp;&amp; obj[<span class="variable constant_">ADD_EVENT_LISTENER</span>]) &#123;</span><br><span class="line">      <span class="comment">// somehow we did not find it, but we can see it. This happens on IE for Window properties.</span></span><br><span class="line">      proto = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!proto) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (proto[zoneSymbolAddEventListener]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> eventNameToString = patchOptions &amp;&amp; patchOptions.<span class="property">eventNameToString</span>;</span><br><span class="line">    <span class="comment">// a shared global taskData to pass data for scheduleEventTask</span></span><br><span class="line">    <span class="comment">// so we do not need to create a new object just for pass some data</span></span><br><span class="line">    <span class="keyword">const</span> taskData = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> nativeAddEventListener = proto[zoneSymbolAddEventListener] = proto[<span class="variable constant_">ADD_EVENT_LISTENER</span>];</span><br><span class="line">    <span class="keyword">const</span> nativeRemoveEventListener = proto[<span class="title function_">zoneSymbol</span>(<span class="variable constant_">REMOVE_EVENT_LISTENER</span>)] = proto[<span class="variable constant_">REMOVE_EVENT_LISTENER</span>];</span><br><span class="line">    <span class="keyword">const</span> nativeListeners = proto[<span class="title function_">zoneSymbol</span>(<span class="variable constant_">LISTENERS_EVENT_LISTENER</span>)] = proto[<span class="variable constant_">LISTENERS_EVENT_LISTENER</span>];</span><br><span class="line">    <span class="keyword">const</span> nativeRemoveAllListeners = proto[<span class="title function_">zoneSymbol</span>(<span class="variable constant_">REMOVE_ALL_LISTENERS_EVENT_LISTENER</span>)] = proto[<span class="variable constant_">REMOVE_ALL_LISTENERS_EVENT_LISTENER</span>];</span><br><span class="line">    <span class="keyword">let</span> nativePrependEventListener;</span><br><span class="line">    <span class="keyword">if</span> (patchOptions &amp;&amp; patchOptions.<span class="property">prepend</span>) &#123;</span><br><span class="line">      nativePrependEventListener = proto[<span class="title function_">zoneSymbol</span>(patchOptions.<span class="property">prepend</span>)] = proto[patchOptions.<span class="property">prepend</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This util function will build an option object with passive option</span></span><br><span class="line"><span class="comment">     * to handle all possible input from the user.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">buildEventListenerOptions</span>(<span class="params">options, passive</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!passiveSupported &amp;&amp; <span class="keyword">typeof</span> options === <span class="string">&#x27;object&#x27;</span> &amp;&amp; options) &#123;</span><br><span class="line">        <span class="comment">// doesn&#x27;t support passive but user want to pass an object as options.</span></span><br><span class="line">        <span class="comment">// this will not work on some old browser, so we just pass a boolean</span></span><br><span class="line">        <span class="comment">// as useCapture parameter</span></span><br><span class="line">        <span class="keyword">return</span> !!options.<span class="property">capture</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!passiveSupported || !passive) &#123;</span><br><span class="line">        <span class="keyword">return</span> options;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">&#x27;boolean&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">capture</span>: options,</span><br><span class="line">          <span class="attr">passive</span>: <span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!options) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">passive</span>: <span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">&#x27;object&#x27;</span> &amp;&amp; options.<span class="property">passive</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, options), &#123;</span><br><span class="line">          <span class="attr">passive</span>: <span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> options;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> customScheduleGlobal = <span class="keyword">function</span> (<span class="params">task</span>) &#123;</span><br><span class="line">      <span class="comment">// if there is already a task for the eventName + capture,</span></span><br><span class="line">      <span class="comment">// just return, because we use the shared globalZoneAwareCallback here.</span></span><br><span class="line">      <span class="keyword">if</span> (taskData.<span class="property">isExisting</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> nativeAddEventListener.<span class="title function_">call</span>(taskData.<span class="property">target</span>, taskData.<span class="property">eventName</span>, taskData.<span class="property">capture</span> ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, taskData.<span class="property">options</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> customCancelGlobal = <span class="keyword">function</span> (<span class="params">task</span>) &#123;</span><br><span class="line">      <span class="comment">// if task is not marked as isRemoved, this call is directly</span></span><br><span class="line">      <span class="comment">// from Zone.prototype.cancelTask, we should remove the task</span></span><br><span class="line">      <span class="comment">// from tasksList of target first</span></span><br><span class="line">      <span class="keyword">if</span> (!task.<span class="property">isRemoved</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> symbolEventNames = zoneSymbolEventNames[task.<span class="property">eventName</span>];</span><br><span class="line">        <span class="keyword">let</span> symbolEventName;</span><br><span class="line">        <span class="keyword">if</span> (symbolEventNames) &#123;</span><br><span class="line">          symbolEventName = symbolEventNames[task.<span class="property">capture</span> ? <span class="variable constant_">TRUE_STR</span> : <span class="variable constant_">FALSE_STR</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> existingTasks = symbolEventName &amp;&amp; task.<span class="property">target</span>[symbolEventName];</span><br><span class="line">        <span class="keyword">if</span> (existingTasks) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; existingTasks.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> existingTask = existingTasks[i];</span><br><span class="line">            <span class="keyword">if</span> (existingTask === task) &#123;</span><br><span class="line">              existingTasks.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">              <span class="comment">// set isRemoved to data for faster invokeTask check</span></span><br><span class="line">              task.<span class="property">isRemoved</span> = <span class="literal">true</span>;</span><br><span class="line">              <span class="keyword">if</span> (existingTasks.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// all tasks for the eventName + capture have gone,</span></span><br><span class="line">                <span class="comment">// remove globalZoneAwareCallback and remove the task cache from target</span></span><br><span class="line">                task.<span class="property">allRemoved</span> = <span class="literal">true</span>;</span><br><span class="line">                task.<span class="property">target</span>[symbolEventName] = <span class="literal">null</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// if all tasks for the eventName + capture have gone,</span></span><br><span class="line">      <span class="comment">// we will really remove the global event callback,</span></span><br><span class="line">      <span class="comment">// if not, return</span></span><br><span class="line">      <span class="keyword">if</span> (!task.<span class="property">allRemoved</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> nativeRemoveEventListener.<span class="title function_">call</span>(task.<span class="property">target</span>, task.<span class="property">eventName</span>, task.<span class="property">capture</span> ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, task.<span class="property">options</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> customScheduleNonGlobal = <span class="keyword">function</span> (<span class="params">task</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> nativeAddEventListener.<span class="title function_">call</span>(taskData.<span class="property">target</span>, taskData.<span class="property">eventName</span>, task.<span class="property">invoke</span>, taskData.<span class="property">options</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> customSchedulePrepend = <span class="keyword">function</span> (<span class="params">task</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> nativePrependEventListener.<span class="title function_">call</span>(taskData.<span class="property">target</span>, taskData.<span class="property">eventName</span>, task.<span class="property">invoke</span>, taskData.<span class="property">options</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> customCancelNonGlobal = <span class="keyword">function</span> (<span class="params">task</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> nativeRemoveEventListener.<span class="title function_">call</span>(task.<span class="property">target</span>, task.<span class="property">eventName</span>, task.<span class="property">invoke</span>, task.<span class="property">options</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> customSchedule = useGlobalCallback ? customScheduleGlobal : customScheduleNonGlobal;</span><br><span class="line">    <span class="keyword">const</span> customCancel = useGlobalCallback ? customCancelGlobal : customCancelNonGlobal;</span><br><span class="line">    <span class="keyword">const</span> compareTaskCallbackVsDelegate = <span class="keyword">function</span> (<span class="params">task, delegate</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> typeOfDelegate = <span class="keyword">typeof</span> delegate;</span><br><span class="line">      <span class="keyword">return</span> typeOfDelegate === <span class="string">&#x27;function&#x27;</span> &amp;&amp; task.<span class="property">callback</span> === delegate || typeOfDelegate === <span class="string">&#x27;object&#x27;</span> &amp;&amp; task.<span class="property">originalDelegate</span> === delegate;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> compare = patchOptions &amp;&amp; patchOptions.<span class="property">diff</span> ? patchOptions.<span class="property">diff</span> : compareTaskCallbackVsDelegate;</span><br><span class="line">    <span class="keyword">const</span> unpatchedEvents = <span class="title class_">Zone</span>[<span class="title function_">zoneSymbol</span>(<span class="string">&#x27;UNPATCHED_EVENTS&#x27;</span>)];</span><br><span class="line">    <span class="keyword">const</span> passiveEvents = _global[<span class="title function_">zoneSymbol</span>(<span class="string">&#x27;PASSIVE_EVENTS&#x27;</span>)];</span><br><span class="line">    <span class="keyword">const</span> makeAddListener = <span class="keyword">function</span> (<span class="params">nativeListener, addSource, customScheduleFn, customCancelFn, returnTarget = <span class="literal">false</span>, prepend = <span class="literal">false</span></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> target = <span class="variable language_">this</span> || _global;</span><br><span class="line">        <span class="keyword">let</span> eventName = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (patchOptions &amp;&amp; patchOptions.<span class="property">transferEventName</span>) &#123;</span><br><span class="line">          eventName = patchOptions.<span class="title function_">transferEventName</span>(eventName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> delegate = <span class="variable language_">arguments</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (!delegate) &#123;</span><br><span class="line">          <span class="keyword">return</span> nativeListener.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isNode &amp;&amp; eventName === <span class="string">&#x27;uncaughtException&#x27;</span>) &#123;</span><br><span class="line">          <span class="comment">// don&#x27;t patch uncaughtException of nodejs to prevent endless loop</span></span><br><span class="line">          <span class="keyword">return</span> nativeListener.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// don&#x27;t create the bind delegate function for handleEvent</span></span><br><span class="line">        <span class="comment">// case here to improve addEventListener performance</span></span><br><span class="line">        <span class="comment">// we will create the bind delegate when invoke</span></span><br><span class="line">        <span class="keyword">let</span> isHandleEvent = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> delegate !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!delegate.<span class="property">handleEvent</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nativeListener.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          isHandleEvent = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (validateHandler &amp;&amp; !<span class="title function_">validateHandler</span>(nativeListener, delegate, target, <span class="variable language_">arguments</span>)) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> passive = passiveSupported &amp;&amp; !!passiveEvents &amp;&amp; passiveEvents.<span class="title function_">indexOf</span>(eventName) !== -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">const</span> options = <span class="title function_">buildEventListenerOptions</span>(<span class="variable language_">arguments</span>[<span class="number">2</span>], passive);</span><br><span class="line">        <span class="keyword">if</span> (unpatchedEvents) &#123;</span><br><span class="line">          <span class="comment">// check unpatched list</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; unpatchedEvents.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eventName === unpatchedEvents[i]) &#123;</span><br><span class="line">              <span class="keyword">if</span> (passive) &#123;</span><br><span class="line">                <span class="keyword">return</span> nativeListener.<span class="title function_">call</span>(target, eventName, delegate, options);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> nativeListener.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> capture = !options ? <span class="literal">false</span> : <span class="keyword">typeof</span> options === <span class="string">&#x27;boolean&#x27;</span> ? <span class="literal">true</span> : options.<span class="property">capture</span>;</span><br><span class="line">        <span class="keyword">const</span> once = options &amp;&amp; <span class="keyword">typeof</span> options === <span class="string">&#x27;object&#x27;</span> ? options.<span class="property">once</span> : <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">const</span> zone = <span class="title class_">Zone</span>.<span class="property">current</span>;</span><br><span class="line">        <span class="keyword">let</span> symbolEventNames = zoneSymbolEventNames[eventName];</span><br><span class="line">        <span class="keyword">if</span> (!symbolEventNames) &#123;</span><br><span class="line">          <span class="title function_">prepareEventNames</span>(eventName, eventNameToString);</span><br><span class="line">          symbolEventNames = zoneSymbolEventNames[eventName];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> symbolEventName = symbolEventNames[capture ? <span class="variable constant_">TRUE_STR</span> : <span class="variable constant_">FALSE_STR</span>];</span><br><span class="line">        <span class="keyword">let</span> existingTasks = target[symbolEventName];</span><br><span class="line">        <span class="keyword">let</span> isExisting = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (existingTasks) &#123;</span><br><span class="line">          <span class="comment">// already have task registered</span></span><br><span class="line">          isExisting = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">if</span> (checkDuplicate) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; existingTasks.<span class="property">length</span>; i++) &#123;</span><br><span class="line">              <span class="keyword">if</span> (<span class="title function_">compare</span>(existingTasks[i], delegate)) &#123;</span><br><span class="line">                <span class="comment">// same callback, same capture, same event name, just return</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          existingTasks = target[symbolEventName] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> source;</span><br><span class="line">        <span class="keyword">const</span> constructorName = target.<span class="property">constructor</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="keyword">const</span> targetSource = globalSources[constructorName];</span><br><span class="line">        <span class="keyword">if</span> (targetSource) &#123;</span><br><span class="line">          source = targetSource[eventName];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!source) &#123;</span><br><span class="line">          source = constructorName + addSource + (eventNameToString ? <span class="title function_">eventNameToString</span>(eventName) : eventName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// do not create a new object as task.data to pass those things</span></span><br><span class="line">        <span class="comment">// just use the global shared one</span></span><br><span class="line">        taskData.<span class="property">options</span> = options;</span><br><span class="line">        <span class="keyword">if</span> (once) &#123;</span><br><span class="line">          <span class="comment">// if addEventListener with once options, we don&#x27;t pass it to</span></span><br><span class="line">          <span class="comment">// native addEventListener, instead we keep the once setting</span></span><br><span class="line">          <span class="comment">// and handle ourselves.</span></span><br><span class="line">          taskData.<span class="property">options</span>.<span class="property">once</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        taskData.<span class="property">target</span> = target;</span><br><span class="line">        taskData.<span class="property">capture</span> = capture;</span><br><span class="line">        taskData.<span class="property">eventName</span> = eventName;</span><br><span class="line">        taskData.<span class="property">isExisting</span> = isExisting;</span><br><span class="line">        <span class="keyword">const</span> data = useGlobalCallback ? <span class="variable constant_">OPTIMIZED_ZONE_EVENT_TASK_DATA</span> : <span class="literal">undefined</span>;</span><br><span class="line">        <span class="comment">// keep taskData into data to allow onScheduleEventTask to access the task information</span></span><br><span class="line">        <span class="keyword">if</span> (data) &#123;</span><br><span class="line">          data.<span class="property">taskData</span> = taskData;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> task = zone.<span class="title function_">scheduleEventTask</span>(source, delegate, data, customScheduleFn, customCancelFn);</span><br><span class="line">        <span class="comment">// should clear taskData.target to avoid memory leak</span></span><br><span class="line">        <span class="comment">// issue, https://github.com/angular/angular/issues/20442</span></span><br><span class="line">        taskData.<span class="property">target</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// need to clear up taskData because it is a global object</span></span><br><span class="line">        <span class="keyword">if</span> (data) &#123;</span><br><span class="line">          data.<span class="property">taskData</span> = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// have to save those information to task in case</span></span><br><span class="line">        <span class="comment">// application may call task.zone.cancelTask() directly</span></span><br><span class="line">        <span class="keyword">if</span> (once) &#123;</span><br><span class="line">          options.<span class="property">once</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(!passiveSupported &amp;&amp; <span class="keyword">typeof</span> task.<span class="property">options</span> === <span class="string">&#x27;boolean&#x27;</span>)) &#123;</span><br><span class="line">          <span class="comment">// if not support passive, and we pass an option object</span></span><br><span class="line">          <span class="comment">// to addEventListener, we should save the options to task</span></span><br><span class="line">          task.<span class="property">options</span> = options;</span><br><span class="line">        &#125;</span><br><span class="line">        task.<span class="property">target</span> = target;</span><br><span class="line">        task.<span class="property">capture</span> = capture;</span><br><span class="line">        task.<span class="property">eventName</span> = eventName;</span><br><span class="line">        <span class="keyword">if</span> (isHandleEvent) &#123;</span><br><span class="line">          <span class="comment">// save original delegate for compare to check duplicate</span></span><br><span class="line">          task.<span class="property">originalDelegate</span> = delegate;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!prepend) &#123;</span><br><span class="line">          existingTasks.<span class="title function_">push</span>(task);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          existingTasks.<span class="title function_">unshift</span>(task);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (returnTarget) &#123;</span><br><span class="line">          <span class="keyword">return</span> target;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    proto[<span class="variable constant_">ADD_EVENT_LISTENER</span>] = <span class="title function_">makeAddListener</span>(nativeAddEventListener, <span class="variable constant_">ADD_EVENT_LISTENER_SOURCE</span>, customSchedule, customCancel, returnTarget);</span><br><span class="line">    <span class="keyword">if</span> (nativePrependEventListener) &#123;</span><br><span class="line">      proto[<span class="variable constant_">PREPEND_EVENT_LISTENER</span>] = <span class="title function_">makeAddListener</span>(nativePrependEventListener, <span class="variable constant_">PREPEND_EVENT_LISTENER_SOURCE</span>, customSchedulePrepend, customCancel, returnTarget, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    proto[<span class="variable constant_">REMOVE_EVENT_LISTENER</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> target = <span class="variable language_">this</span> || _global;</span><br><span class="line">      <span class="keyword">let</span> eventName = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">if</span> (patchOptions &amp;&amp; patchOptions.<span class="property">transferEventName</span>) &#123;</span><br><span class="line">        eventName = patchOptions.<span class="title function_">transferEventName</span>(eventName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> options = <span class="variable language_">arguments</span>[<span class="number">2</span>];</span><br><span class="line">      <span class="keyword">const</span> capture = !options ? <span class="literal">false</span> : <span class="keyword">typeof</span> options === <span class="string">&#x27;boolean&#x27;</span> ? <span class="literal">true</span> : options.<span class="property">capture</span>;</span><br><span class="line">      <span class="keyword">const</span> delegate = <span class="variable language_">arguments</span>[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">if</span> (!delegate) &#123;</span><br><span class="line">        <span class="keyword">return</span> nativeRemoveEventListener.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (validateHandler &amp;&amp; !<span class="title function_">validateHandler</span>(nativeRemoveEventListener, delegate, target, <span class="variable language_">arguments</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> symbolEventNames = zoneSymbolEventNames[eventName];</span><br><span class="line">      <span class="keyword">let</span> symbolEventName;</span><br><span class="line">      <span class="keyword">if</span> (symbolEventNames) &#123;</span><br><span class="line">        symbolEventName = symbolEventNames[capture ? <span class="variable constant_">TRUE_STR</span> : <span class="variable constant_">FALSE_STR</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> existingTasks = symbolEventName &amp;&amp; target[symbolEventName];</span><br><span class="line">      <span class="keyword">if</span> (existingTasks) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; existingTasks.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">const</span> existingTask = existingTasks[i];</span><br><span class="line">          <span class="keyword">if</span> (<span class="title function_">compare</span>(existingTask, delegate)) &#123;</span><br><span class="line">            existingTasks.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// set isRemoved to data for faster invokeTask check</span></span><br><span class="line">            existingTask.<span class="property">isRemoved</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (existingTasks.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="comment">// all tasks for the eventName + capture have gone,</span></span><br><span class="line">              <span class="comment">// remove globalZoneAwareCallback and remove the task cache from target</span></span><br><span class="line">              existingTask.<span class="property">allRemoved</span> = <span class="literal">true</span>;</span><br><span class="line">              target[symbolEventName] = <span class="literal">null</span>;</span><br><span class="line">              <span class="comment">// in the target, we have an event listener which is added by on_property</span></span><br><span class="line">              <span class="comment">// such as target.onclick = function() &#123;&#125;, so we need to clear this internal</span></span><br><span class="line">              <span class="comment">// property too if all delegates all removed</span></span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">typeof</span> eventName === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> onPropertySymbol = <span class="variable constant_">ZONE_SYMBOL_PREFIX</span> + <span class="string">&#x27;ON_PROPERTY&#x27;</span> + eventName;</span><br><span class="line">                target[onPropertySymbol] = <span class="literal">null</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            existingTask.<span class="property">zone</span>.<span class="title function_">cancelTask</span>(existingTask);</span><br><span class="line">            <span class="keyword">if</span> (returnTarget) &#123;</span><br><span class="line">              <span class="keyword">return</span> target;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// issue 930, didn&#x27;t find the event name or callback</span></span><br><span class="line">      <span class="comment">// from zone kept existingTasks, the callback maybe</span></span><br><span class="line">      <span class="comment">// added outside of zone, we need to call native removeEventListener</span></span><br><span class="line">      <span class="comment">// to try to remove it.</span></span><br><span class="line">      <span class="keyword">return</span> nativeRemoveEventListener.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    proto[<span class="variable constant_">LISTENERS_EVENT_LISTENER</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> target = <span class="variable language_">this</span> || _global;</span><br><span class="line">      <span class="keyword">let</span> eventName = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">if</span> (patchOptions &amp;&amp; patchOptions.<span class="property">transferEventName</span>) &#123;</span><br><span class="line">        eventName = patchOptions.<span class="title function_">transferEventName</span>(eventName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> listeners = [];</span><br><span class="line">      <span class="keyword">const</span> tasks = <span class="title function_">findEventTasks</span>(target, eventNameToString ? <span class="title function_">eventNameToString</span>(eventName) : eventName);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tasks.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> task = tasks[i];</span><br><span class="line">        <span class="keyword">let</span> delegate = task.<span class="property">originalDelegate</span> ? task.<span class="property">originalDelegate</span> : task.<span class="property">callback</span>;</span><br><span class="line">        listeners.<span class="title function_">push</span>(delegate);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> listeners;</span><br><span class="line">    &#125;;</span><br><span class="line">    proto[<span class="variable constant_">REMOVE_ALL_LISTENERS_EVENT_LISTENER</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> target = <span class="variable language_">this</span> || _global;</span><br><span class="line">      <span class="keyword">let</span> eventName = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">if</span> (!eventName) &#123;</span><br><span class="line">        <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(target);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">const</span> prop = keys[i];</span><br><span class="line">          <span class="keyword">const</span> match = <span class="variable constant_">EVENT_NAME_SYMBOL_REGX</span>.<span class="title function_">exec</span>(prop);</span><br><span class="line">          <span class="keyword">let</span> evtName = match &amp;&amp; match[<span class="number">1</span>];</span><br><span class="line">          <span class="comment">// in nodejs EventEmitter, removeListener event is</span></span><br><span class="line">          <span class="comment">// used for monitoring the removeListener call,</span></span><br><span class="line">          <span class="comment">// so just keep removeListener eventListener until</span></span><br><span class="line">          <span class="comment">// all other eventListeners are removed</span></span><br><span class="line">          <span class="keyword">if</span> (evtName &amp;&amp; evtName !== <span class="string">&#x27;removeListener&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">REMOVE_ALL_LISTENERS_EVENT_LISTENER</span>].<span class="title function_">call</span>(<span class="variable language_">this</span>, evtName);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// remove removeListener listener finally</span></span><br><span class="line">        <span class="variable language_">this</span>[<span class="variable constant_">REMOVE_ALL_LISTENERS_EVENT_LISTENER</span>].<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&#x27;removeListener&#x27;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (patchOptions &amp;&amp; patchOptions.<span class="property">transferEventName</span>) &#123;</span><br><span class="line">          eventName = patchOptions.<span class="title function_">transferEventName</span>(eventName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> symbolEventNames = zoneSymbolEventNames[eventName];</span><br><span class="line">        <span class="keyword">if</span> (symbolEventNames) &#123;</span><br><span class="line">          <span class="keyword">const</span> symbolEventName = symbolEventNames[<span class="variable constant_">FALSE_STR</span>];</span><br><span class="line">          <span class="keyword">const</span> symbolCaptureEventName = symbolEventNames[<span class="variable constant_">TRUE_STR</span>];</span><br><span class="line">          <span class="keyword">const</span> tasks = target[symbolEventName];</span><br><span class="line">          <span class="keyword">const</span> captureTasks = target[symbolCaptureEventName];</span><br><span class="line">          <span class="keyword">if</span> (tasks) &#123;</span><br><span class="line">            <span class="keyword">const</span> removeTasks = tasks.<span class="title function_">slice</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; removeTasks.<span class="property">length</span>; i++) &#123;</span><br><span class="line">              <span class="keyword">const</span> task = removeTasks[i];</span><br><span class="line">              <span class="keyword">let</span> delegate = task.<span class="property">originalDelegate</span> ? task.<span class="property">originalDelegate</span> : task.<span class="property">callback</span>;</span><br><span class="line">              <span class="variable language_">this</span>[<span class="variable constant_">REMOVE_EVENT_LISTENER</span>].<span class="title function_">call</span>(<span class="variable language_">this</span>, eventName, delegate, task.<span class="property">options</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (captureTasks) &#123;</span><br><span class="line">            <span class="keyword">const</span> removeTasks = captureTasks.<span class="title function_">slice</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; removeTasks.<span class="property">length</span>; i++) &#123;</span><br><span class="line">              <span class="keyword">const</span> task = removeTasks[i];</span><br><span class="line">              <span class="keyword">let</span> delegate = task.<span class="property">originalDelegate</span> ? task.<span class="property">originalDelegate</span> : task.<span class="property">callback</span>;</span><br><span class="line">              <span class="variable language_">this</span>[<span class="variable constant_">REMOVE_EVENT_LISTENER</span>].<span class="title function_">call</span>(<span class="variable language_">this</span>, eventName, delegate, task.<span class="property">options</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (returnTarget) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// for native toString patch</span></span><br><span class="line">    <span class="title function_">attachOriginToPatched</span>(proto[<span class="variable constant_">ADD_EVENT_LISTENER</span>], nativeAddEventListener);</span><br><span class="line">    <span class="title function_">attachOriginToPatched</span>(proto[<span class="variable constant_">REMOVE_EVENT_LISTENER</span>], nativeRemoveEventListener);</span><br><span class="line">    <span class="keyword">if</span> (nativeRemoveAllListeners) &#123;</span><br><span class="line">      <span class="title function_">attachOriginToPatched</span>(proto[<span class="variable constant_">REMOVE_ALL_LISTENERS_EVENT_LISTENER</span>], nativeRemoveAllListeners);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nativeListeners) &#123;</span><br><span class="line">      <span class="title function_">attachOriginToPatched</span>(proto[<span class="variable constant_">LISTENERS_EVENT_LISTENER</span>], nativeListeners);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> results = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; apis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    results[i] = <span class="title function_">patchEventTargetMethods</span>(apis[i], patchOptions);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findEventTasks</span>(<span class="params">target, eventName</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!eventName) &#123;</span><br><span class="line">    <span class="keyword">const</span> foundTasks = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> target) &#123;</span><br><span class="line">      <span class="keyword">const</span> match = <span class="variable constant_">EVENT_NAME_SYMBOL_REGX</span>.<span class="title function_">exec</span>(prop);</span><br><span class="line">      <span class="keyword">let</span> evtName = match &amp;&amp; match[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">if</span> (evtName &amp;&amp; (!eventName || evtName === eventName)) &#123;</span><br><span class="line">        <span class="keyword">const</span> tasks = target[prop];</span><br><span class="line">        <span class="keyword">if</span> (tasks) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tasks.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            foundTasks.<span class="title function_">push</span>(tasks[i]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> foundTasks;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> symbolEventName = zoneSymbolEventNames[eventName];</span><br><span class="line">  <span class="keyword">if</span> (!symbolEventName) &#123;</span><br><span class="line">    <span class="title function_">prepareEventNames</span>(eventName);</span><br><span class="line">    symbolEventName = zoneSymbolEventNames[eventName];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> captureFalseTasks = target[symbolEventName[<span class="variable constant_">FALSE_STR</span>]];</span><br><span class="line">  <span class="keyword">const</span> captureTrueTasks = target[symbolEventName[<span class="variable constant_">TRUE_STR</span>]];</span><br><span class="line">  <span class="keyword">if</span> (!captureFalseTasks) &#123;</span><br><span class="line">    <span class="keyword">return</span> captureTrueTasks ? captureTrueTasks.<span class="title function_">slice</span>() : [];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> captureTrueTasks ? captureFalseTasks.<span class="title function_">concat</span>(captureTrueTasks) : captureFalseTasks.<span class="title function_">slice</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchEventPrototype</span>(<span class="params"><span class="variable language_">global</span>, api</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Event</span> = <span class="variable language_">global</span>[<span class="string">&#x27;Event&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Event</span> &amp;&amp; <span class="title class_">Event</span>.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">    api.<span class="title function_">patchMethod</span>(<span class="title class_">Event</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;stopImmediatePropagation&#x27;</span>, <span class="function"><span class="params">delegate</span> =&gt;</span> <span class="keyword">function</span> (<span class="params">self, args</span>) &#123;</span><br><span class="line">      self[<span class="variable constant_">IMMEDIATE_PROPAGATION_SYMBOL</span>] = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// we need to call the native stopImmediatePropagation</span></span><br><span class="line">      <span class="comment">// in case in some hybrid application, some part of</span></span><br><span class="line">      <span class="comment">// application will be controlled by zone, some are not</span></span><br><span class="line">      delegate &amp;&amp; delegate.<span class="title function_">apply</span>(self, args);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span></span></span><br><span class="line"><span class="comment"> * Copyright Google LLC All Rights Reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Use of this source code is governed by an MIT-style license that can be</span></span><br><span class="line"><span class="comment"> * found in the LICENSE file at https://angular.io/license</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchCallbacks</span>(<span class="params">api, target, targetName, method, callbacks</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> symbol = <span class="title class_">Zone</span>.<span class="title function_">__symbol__</span>(method);</span><br><span class="line">  <span class="keyword">if</span> (target[symbol]) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> nativeDelegate = target[symbol] = target[method];</span><br><span class="line">  target[method] = <span class="keyword">function</span> (<span class="params">name, opts, options</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (opts &amp;&amp; opts.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">      callbacks.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> source = <span class="string">`<span class="subst">$&#123;targetName&#125;</span>.<span class="subst">$&#123;method&#125;</span>::`</span> + callback;</span><br><span class="line">        <span class="keyword">const</span> prototype = opts.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">        <span class="comment">// Note: the `patchCallbacks` is used for patching the `document.registerElement` and</span></span><br><span class="line">        <span class="comment">// `customElements.define`. We explicitly wrap the patching code into try-catch since</span></span><br><span class="line">        <span class="comment">// callbacks may be already patched by other web components frameworks (e.g. LWC), and they</span></span><br><span class="line">        <span class="comment">// make those properties non-writable. This means that patching callback will throw an error</span></span><br><span class="line">        <span class="comment">// `cannot assign to read-only property`. See this code as an example:</span></span><br><span class="line">        <span class="comment">// https://github.com/salesforce/lwc/blob/master/packages/@lwc/engine-core/src/framework/base-bridge-element.ts#L180-L186</span></span><br><span class="line">        <span class="comment">// We don&#x27;t want to stop the application rendering if we couldn&#x27;t patch some</span></span><br><span class="line">        <span class="comment">// callback, e.g. `attributeChangedCallback`.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (prototype.<span class="title function_">hasOwnProperty</span>(callback)) &#123;</span><br><span class="line">            <span class="keyword">const</span> descriptor = api.<span class="title class_">ObjectGetOwnPropertyDescriptor</span>(prototype, callback);</span><br><span class="line">            <span class="keyword">if</span> (descriptor &amp;&amp; descriptor.<span class="property">value</span>) &#123;</span><br><span class="line">              descriptor.<span class="property">value</span> = api.<span class="title function_">wrapWithCurrentZone</span>(descriptor.<span class="property">value</span>, source);</span><br><span class="line">              api.<span class="title function_">_redefineProperty</span>(opts.<span class="property"><span class="keyword">prototype</span></span>, callback, descriptor);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prototype[callback]) &#123;</span><br><span class="line">              prototype[callback] = api.<span class="title function_">wrapWithCurrentZone</span>(prototype[callback], source);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prototype[callback]) &#123;</span><br><span class="line">            prototype[callback] = api.<span class="title function_">wrapWithCurrentZone</span>(prototype[callback], source);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (_a) &#123;</span><br><span class="line">          <span class="comment">// Note: we leave the catch block empty since there&#x27;s no way to handle the error related</span></span><br><span class="line">          <span class="comment">// to non-writable property.</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nativeDelegate.<span class="title function_">call</span>(target, name, opts, options);</span><br><span class="line">  &#125;;</span><br><span class="line">  api.<span class="title function_">attachOriginToPatched</span>(target[method], nativeDelegate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span></span></span><br><span class="line"><span class="comment"> * Copyright Google LLC All Rights Reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Use of this source code is governed by an MIT-style license that can be</span></span><br><span class="line"><span class="comment"> * found in the LICENSE file at https://angular.io/license</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">filterProperties</span>(<span class="params">target, onProperties, ignoreProperties</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!ignoreProperties || ignoreProperties.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> onProperties;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> tip = ignoreProperties.<span class="title function_">filter</span>(<span class="function"><span class="params">ip</span> =&gt;</span> ip.<span class="property">target</span> === target);</span><br><span class="line">  <span class="keyword">if</span> (!tip || tip.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> onProperties;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> targetIgnoreProperties = tip[<span class="number">0</span>].<span class="property">ignoreProperties</span>;</span><br><span class="line">  <span class="keyword">return</span> onProperties.<span class="title function_">filter</span>(<span class="function"><span class="params">op</span> =&gt;</span> targetIgnoreProperties.<span class="title function_">indexOf</span>(op) === -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchFilteredProperties</span>(<span class="params">target, onProperties, ignoreProperties, prototype</span>) &#123;</span><br><span class="line">  <span class="comment">// check whether target is available, sometimes target will be undefined</span></span><br><span class="line">  <span class="comment">// because different browser or some 3rd party plugin.</span></span><br><span class="line">  <span class="keyword">if</span> (!target) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> filteredProperties = <span class="title function_">filterProperties</span>(target, onProperties, ignoreProperties);</span><br><span class="line">  <span class="title function_">patchOnProperties</span>(target, filteredProperties, prototype);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get all event name properties which the event name startsWith `on`</span></span><br><span class="line"><span class="comment"> * from the target object itself, inherited properties are not considered.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getOnEventNames</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(target).<span class="title function_">filter</span>(<span class="function"><span class="params">name</span> =&gt;</span> name.<span class="title function_">startsWith</span>(<span class="string">&#x27;on&#x27;</span>) &amp;&amp; name.<span class="property">length</span> &gt; <span class="number">2</span>).<span class="title function_">map</span>(<span class="function"><span class="params">name</span> =&gt;</span> name.<span class="title function_">substring</span>(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">propertyDescriptorPatch</span>(<span class="params">api, _global</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (isNode &amp;&amp; !isMix) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Zone</span>[api.<span class="title function_">symbol</span>(<span class="string">&#x27;patchEvents&#x27;</span>)]) &#123;</span><br><span class="line">    <span class="comment">// events are already been patched by legacy patch.</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> ignoreProperties = _global[<span class="string">&#x27;__Zone_ignore_on_properties&#x27;</span>];</span><br><span class="line">  <span class="comment">// for browsers that we can patch the descriptor:  Chrome &amp; Firefox</span></span><br><span class="line">  <span class="keyword">let</span> patchTargets = [];</span><br><span class="line">  <span class="keyword">if</span> (isBrowser) &#123;</span><br><span class="line">    <span class="keyword">const</span> internalWindow = <span class="variable language_">window</span>;</span><br><span class="line">    patchTargets = patchTargets.<span class="title function_">concat</span>([<span class="string">&#x27;Document&#x27;</span>, <span class="string">&#x27;SVGElement&#x27;</span>, <span class="string">&#x27;Element&#x27;</span>, <span class="string">&#x27;HTMLElement&#x27;</span>, <span class="string">&#x27;HTMLBodyElement&#x27;</span>, <span class="string">&#x27;HTMLMediaElement&#x27;</span>, <span class="string">&#x27;HTMLFrameSetElement&#x27;</span>, <span class="string">&#x27;HTMLFrameElement&#x27;</span>, <span class="string">&#x27;HTMLIFrameElement&#x27;</span>, <span class="string">&#x27;HTMLMarqueeElement&#x27;</span>, <span class="string">&#x27;Worker&#x27;</span>]);</span><br><span class="line">    <span class="keyword">const</span> ignoreErrorProperties = <span class="title function_">isIE</span>() ? [&#123;</span><br><span class="line">      <span class="attr">target</span>: internalWindow,</span><br><span class="line">      <span class="attr">ignoreProperties</span>: [<span class="string">&#x27;error&#x27;</span>]</span><br><span class="line">    &#125;] : [];</span><br><span class="line">    <span class="comment">// in IE/Edge, onProp not exist in window object, but in WindowPrototype</span></span><br><span class="line">    <span class="comment">// so we need to pass WindowPrototype to check onProp exist or not</span></span><br><span class="line">    <span class="title function_">patchFilteredProperties</span>(internalWindow, <span class="title function_">getOnEventNames</span>(internalWindow), ignoreProperties ? ignoreProperties.<span class="title function_">concat</span>(ignoreErrorProperties) : ignoreProperties, <span class="title class_">ObjectGetPrototypeOf</span>(internalWindow));</span><br><span class="line">  &#125;</span><br><span class="line">  patchTargets = patchTargets.<span class="title function_">concat</span>([<span class="string">&#x27;XMLHttpRequest&#x27;</span>, <span class="string">&#x27;XMLHttpRequestEventTarget&#x27;</span>, <span class="string">&#x27;IDBIndex&#x27;</span>, <span class="string">&#x27;IDBRequest&#x27;</span>, <span class="string">&#x27;IDBOpenDBRequest&#x27;</span>, <span class="string">&#x27;IDBDatabase&#x27;</span>, <span class="string">&#x27;IDBTransaction&#x27;</span>, <span class="string">&#x27;IDBCursor&#x27;</span>, <span class="string">&#x27;WebSocket&#x27;</span>]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; patchTargets.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> target = _global[patchTargets[i]];</span><br><span class="line">    target &amp;&amp; target.<span class="property"><span class="keyword">prototype</span></span> &amp;&amp; <span class="title function_">patchFilteredProperties</span>(target.<span class="property"><span class="keyword">prototype</span></span>, <span class="title function_">getOnEventNames</span>(target.<span class="property"><span class="keyword">prototype</span></span>), ignoreProperties);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span></span></span><br><span class="line"><span class="comment"> * Copyright Google LLC All Rights Reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Use of this source code is governed by an MIT-style license that can be</span></span><br><span class="line"><span class="comment"> * found in the LICENSE file at https://angular.io/license</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Zone</span>.<span class="title function_">__load_patch</span>(<span class="string">&#x27;util&#x27;</span>, <span class="function">(<span class="params"><span class="variable language_">global</span>, Zone, api</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Collect native event names by looking at properties</span></span><br><span class="line">  <span class="comment">// on the global namespace, e.g. &#x27;onclick&#x27;.</span></span><br><span class="line">  <span class="keyword">const</span> eventNames = <span class="title function_">getOnEventNames</span>(<span class="variable language_">global</span>);</span><br><span class="line">  api.<span class="property">patchOnProperties</span> = patchOnProperties;</span><br><span class="line">  api.<span class="property">patchMethod</span> = patchMethod;</span><br><span class="line">  api.<span class="property">bindArguments</span> = bindArguments;</span><br><span class="line">  api.<span class="property">patchMacroTask</span> = patchMacroTask;</span><br><span class="line">  <span class="comment">// In earlier version of zone.js (&lt;0.9.0), we use env name `__zone_symbol__BLACK_LISTED_EVENTS` to</span></span><br><span class="line">  <span class="comment">// define which events will not be patched by `Zone.js`.</span></span><br><span class="line">  <span class="comment">// In newer version (&gt;=0.9.0), we change the env name to `__zone_symbol__UNPATCHED_EVENTS` to keep</span></span><br><span class="line">  <span class="comment">// the name consistent with angular repo.</span></span><br><span class="line">  <span class="comment">// The  `__zone_symbol__BLACK_LISTED_EVENTS` is deprecated, but it is still be supported for</span></span><br><span class="line">  <span class="comment">// backwards compatibility.</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">SYMBOL_BLACK_LISTED_EVENTS</span> = <span class="title class_">Zone</span>.<span class="title function_">__symbol__</span>(<span class="string">&#x27;BLACK_LISTED_EVENTS&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">SYMBOL_UNPATCHED_EVENTS</span> = <span class="title class_">Zone</span>.<span class="title function_">__symbol__</span>(<span class="string">&#x27;UNPATCHED_EVENTS&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">global</span>[<span class="variable constant_">SYMBOL_UNPATCHED_EVENTS</span>]) &#123;</span><br><span class="line">    <span class="variable language_">global</span>[<span class="variable constant_">SYMBOL_BLACK_LISTED_EVENTS</span>] = <span class="variable language_">global</span>[<span class="variable constant_">SYMBOL_UNPATCHED_EVENTS</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">global</span>[<span class="variable constant_">SYMBOL_BLACK_LISTED_EVENTS</span>]) &#123;</span><br><span class="line">    <span class="title class_">Zone</span>[<span class="variable constant_">SYMBOL_BLACK_LISTED_EVENTS</span>] = <span class="title class_">Zone</span>[<span class="variable constant_">SYMBOL_UNPATCHED_EVENTS</span>] = <span class="variable language_">global</span>[<span class="variable constant_">SYMBOL_BLACK_LISTED_EVENTS</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  api.<span class="property">patchEventPrototype</span> = patchEventPrototype;</span><br><span class="line">  api.<span class="property">patchEventTarget</span> = patchEventTarget;</span><br><span class="line">  api.<span class="property">isIEOrEdge</span> = isIEOrEdge;</span><br><span class="line">  api.<span class="property">ObjectDefineProperty</span> = <span class="title class_">ObjectDefineProperty</span>;</span><br><span class="line">  api.<span class="property">ObjectGetOwnPropertyDescriptor</span> = <span class="title class_">ObjectGetOwnPropertyDescriptor</span>;</span><br><span class="line">  api.<span class="property">ObjectCreate</span> = <span class="title class_">ObjectCreate</span>;</span><br><span class="line">  api.<span class="property">ArraySlice</span> = <span class="title class_">ArraySlice</span>;</span><br><span class="line">  api.<span class="property">patchClass</span> = patchClass;</span><br><span class="line">  api.<span class="property">wrapWithCurrentZone</span> = wrapWithCurrentZone;</span><br><span class="line">  api.<span class="property">filterProperties</span> = filterProperties;</span><br><span class="line">  api.<span class="property">attachOriginToPatched</span> = attachOriginToPatched;</span><br><span class="line">  api.<span class="property">_redefineProperty</span> = <span class="title class_">Object</span>.<span class="property">defineProperty</span>;</span><br><span class="line">  api.<span class="property">patchCallbacks</span> = patchCallbacks;</span><br><span class="line">  api.<span class="property">getGlobalObjects</span> = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    globalSources,</span><br><span class="line">    zoneSymbolEventNames,</span><br><span class="line">    eventNames,</span><br><span class="line">    isBrowser,</span><br><span class="line">    isMix,</span><br><span class="line">    isNode,</span><br><span class="line">    <span class="variable constant_">TRUE_STR</span>,</span><br><span class="line">    <span class="variable constant_">FALSE_STR</span>,</span><br><span class="line">    <span class="variable constant_">ZONE_SYMBOL_PREFIX</span>,</span><br><span class="line">    <span class="variable constant_">ADD_EVENT_LISTENER_STR</span>,</span><br><span class="line">    <span class="variable constant_">REMOVE_EVENT_LISTENER_STR</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span></span></span><br><span class="line"><span class="comment"> * Copyright Google LLC All Rights Reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Use of this source code is governed by an MIT-style license that can be</span></span><br><span class="line"><span class="comment"> * found in the LICENSE file at https://angular.io/license</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> taskSymbol = <span class="title function_">zoneSymbol</span>(<span class="string">&#x27;zoneTask&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchTimer</span>(<span class="params"><span class="variable language_">window</span>, setName, cancelName, nameSuffix</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> setNative = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> clearNative = <span class="literal">null</span>;</span><br><span class="line">  setName += nameSuffix;</span><br><span class="line">  cancelName += nameSuffix;</span><br><span class="line">  <span class="keyword">const</span> tasksByHandleId = &#123;&#125;;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">scheduleTask</span>(<span class="params">task</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = task.<span class="property">data</span>;</span><br><span class="line">    data.<span class="property">args</span>[<span class="number">0</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> task.<span class="property">invoke</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    data.<span class="property">handleId</span> = setNative.<span class="title function_">apply</span>(<span class="variable language_">window</span>, data.<span class="property">args</span>);</span><br><span class="line">    <span class="keyword">return</span> task;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">clearTask</span>(<span class="params">task</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> clearNative.<span class="title function_">call</span>(<span class="variable language_">window</span>, task.<span class="property">data</span>.<span class="property">handleId</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  setNative = <span class="title function_">patchMethod</span>(<span class="variable language_">window</span>, setName, <span class="function"><span class="params">delegate</span> =&gt;</span> <span class="keyword">function</span> (<span class="params">self, args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> args[<span class="number">0</span>] === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> options = &#123;</span><br><span class="line">        <span class="attr">isPeriodic</span>: nameSuffix === <span class="string">&#x27;Interval&#x27;</span>,</span><br><span class="line">        <span class="attr">delay</span>: nameSuffix === <span class="string">&#x27;Timeout&#x27;</span> || nameSuffix === <span class="string">&#x27;Interval&#x27;</span> ? args[<span class="number">1</span>] || <span class="number">0</span> : <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">args</span>: args</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">const</span> callback = args[<span class="number">0</span>];</span><br><span class="line">      args[<span class="number">0</span>] = <span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> callback.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="comment">// issue-934, task will be cancelled</span></span><br><span class="line">          <span class="comment">// even it is a periodic task such as</span></span><br><span class="line">          <span class="comment">// setInterval</span></span><br><span class="line">          <span class="comment">// https://github.com/angular/angular/issues/40387</span></span><br><span class="line">          <span class="comment">// Cleanup tasksByHandleId should be handled before scheduleTask</span></span><br><span class="line">          <span class="comment">// Since some zoneSpec may intercept and doesn&#x27;t trigger</span></span><br><span class="line">          <span class="comment">// scheduleFn(scheduleTask) provided here.</span></span><br><span class="line">          <span class="keyword">if</span> (!options.<span class="property">isPeriodic</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">handleId</span> === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">              <span class="comment">// in non-nodejs env, we remove timerId</span></span><br><span class="line">              <span class="comment">// from local cache</span></span><br><span class="line">              <span class="keyword">delete</span> tasksByHandleId[options.<span class="property">handleId</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">handleId</span>) &#123;</span><br><span class="line">              <span class="comment">// Node returns complex objects as handleIds</span></span><br><span class="line">              <span class="comment">// we remove task reference from timer object</span></span><br><span class="line">              options.<span class="property">handleId</span>[taskSymbol] = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">const</span> task = <span class="title function_">scheduleMacroTaskWithCurrentZone</span>(setName, args[<span class="number">0</span>], options, scheduleTask, clearTask);</span><br><span class="line">      <span class="keyword">if</span> (!task) &#123;</span><br><span class="line">        <span class="keyword">return</span> task;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Node.js must additionally support the ref and unref functions.</span></span><br><span class="line">      <span class="keyword">const</span> handle = task.<span class="property">data</span>.<span class="property">handleId</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> handle === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// for non nodejs env, we save handleId: task</span></span><br><span class="line">        <span class="comment">// mapping in local cache for clearTimeout</span></span><br><span class="line">        tasksByHandleId[handle] = task;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (handle) &#123;</span><br><span class="line">        <span class="comment">// for nodejs env, we save task</span></span><br><span class="line">        <span class="comment">// reference in timerId Object for clearTimeout</span></span><br><span class="line">        handle[taskSymbol] = task;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// check whether handle is null, because some polyfill or browser</span></span><br><span class="line">      <span class="comment">// may return undefined from setTimeout/setInterval/setImmediate/requestAnimationFrame</span></span><br><span class="line">      <span class="keyword">if</span> (handle &amp;&amp; handle.<span class="property">ref</span> &amp;&amp; handle.<span class="property">unref</span> &amp;&amp; <span class="keyword">typeof</span> handle.<span class="property">ref</span> === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> handle.<span class="property">unref</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        task.<span class="property">ref</span> = handle.<span class="property">ref</span>.<span class="title function_">bind</span>(handle);</span><br><span class="line">        task.<span class="property">unref</span> = handle.<span class="property">unref</span>.<span class="title function_">bind</span>(handle);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> handle === <span class="string">&#x27;number&#x27;</span> || handle) &#123;</span><br><span class="line">        <span class="keyword">return</span> handle;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> task;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// cause an error by calling it directly.</span></span><br><span class="line">      <span class="keyword">return</span> delegate.<span class="title function_">apply</span>(<span class="variable language_">window</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  clearNative = <span class="title function_">patchMethod</span>(<span class="variable language_">window</span>, cancelName, <span class="function"><span class="params">delegate</span> =&gt;</span> <span class="keyword">function</span> (<span class="params">self, args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = args[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> task;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// non nodejs env.</span></span><br><span class="line">      task = tasksByHandleId[id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// nodejs env.</span></span><br><span class="line">      task = id &amp;&amp; id[taskSymbol];</span><br><span class="line">      <span class="comment">// other environments.</span></span><br><span class="line">      <span class="keyword">if</span> (!task) &#123;</span><br><span class="line">        task = id;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (task &amp;&amp; <span class="keyword">typeof</span> task.<span class="property">type</span> === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (task.<span class="property">state</span> !== <span class="string">&#x27;notScheduled&#x27;</span> &amp;&amp; (task.<span class="property">cancelFn</span> &amp;&amp; task.<span class="property">data</span>.<span class="property">isPeriodic</span> || task.<span class="property">runCount</span> === <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">delete</span> tasksByHandleId[id];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id) &#123;</span><br><span class="line">          id[taskSymbol] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Do not cancel already canceled functions</span></span><br><span class="line">        task.<span class="property">zone</span>.<span class="title function_">cancelTask</span>(task);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// cause an error by calling it directly.</span></span><br><span class="line">      delegate.<span class="title function_">apply</span>(<span class="variable language_">window</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span></span></span><br><span class="line"><span class="comment"> * Copyright Google LLC All Rights Reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Use of this source code is governed by an MIT-style license that can be</span></span><br><span class="line"><span class="comment"> * found in the LICENSE file at https://angular.io/license</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchCustomElements</span>(<span class="params">_global, api</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    isBrowser,</span><br><span class="line">    isMix</span><br><span class="line">  &#125; = api.<span class="title function_">getGlobalObjects</span>();</span><br><span class="line">  <span class="keyword">if</span> (!isBrowser &amp;&amp; !isMix || !_global[<span class="string">&#x27;customElements&#x27;</span>] || !(<span class="string">&#x27;customElements&#x27;</span> <span class="keyword">in</span> _global)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> callbacks = [<span class="string">&#x27;connectedCallback&#x27;</span>, <span class="string">&#x27;disconnectedCallback&#x27;</span>, <span class="string">&#x27;adoptedCallback&#x27;</span>, <span class="string">&#x27;attributeChangedCallback&#x27;</span>];</span><br><span class="line">  api.<span class="title function_">patchCallbacks</span>(api, _global.<span class="property">customElements</span>, <span class="string">&#x27;customElements&#x27;</span>, <span class="string">&#x27;define&#x27;</span>, callbacks);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span></span></span><br><span class="line"><span class="comment"> * Copyright Google LLC All Rights Reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Use of this source code is governed by an MIT-style license that can be</span></span><br><span class="line"><span class="comment"> * found in the LICENSE file at https://angular.io/license</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">eventTargetPatch</span>(<span class="params">_global, api</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Zone</span>[api.<span class="title function_">symbol</span>(<span class="string">&#x27;patchEventTarget&#x27;</span>)]) &#123;</span><br><span class="line">    <span class="comment">// EventTarget is already patched.</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    eventNames,</span><br><span class="line">    zoneSymbolEventNames,</span><br><span class="line">    <span class="variable constant_">TRUE_STR</span>,</span><br><span class="line">    <span class="variable constant_">FALSE_STR</span>,</span><br><span class="line">    <span class="variable constant_">ZONE_SYMBOL_PREFIX</span></span><br><span class="line">  &#125; = api.<span class="title function_">getGlobalObjects</span>();</span><br><span class="line">  <span class="comment">//  predefine all __zone_symbol__ + eventName + true/false string</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; eventNames.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> eventName = eventNames[i];</span><br><span class="line">    <span class="keyword">const</span> falseEventName = eventName + <span class="variable constant_">FALSE_STR</span>;</span><br><span class="line">    <span class="keyword">const</span> trueEventName = eventName + <span class="variable constant_">TRUE_STR</span>;</span><br><span class="line">    <span class="keyword">const</span> symbol = <span class="variable constant_">ZONE_SYMBOL_PREFIX</span> + falseEventName;</span><br><span class="line">    <span class="keyword">const</span> symbolCapture = <span class="variable constant_">ZONE_SYMBOL_PREFIX</span> + trueEventName;</span><br><span class="line">    zoneSymbolEventNames[eventName] = &#123;&#125;;</span><br><span class="line">    zoneSymbolEventNames[eventName][<span class="variable constant_">FALSE_STR</span>] = symbol;</span><br><span class="line">    zoneSymbolEventNames[eventName][<span class="variable constant_">TRUE_STR</span>] = symbolCapture;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">EVENT_TARGET</span> = _global[<span class="string">&#x27;EventTarget&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable constant_">EVENT_TARGET</span> || !<span class="variable constant_">EVENT_TARGET</span>.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  api.<span class="title function_">patchEventTarget</span>(_global, api, [<span class="variable constant_">EVENT_TARGET</span> &amp;&amp; <span class="variable constant_">EVENT_TARGET</span>.<span class="property"><span class="keyword">prototype</span></span>]);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchEvent</span>(<span class="params"><span class="variable language_">global</span>, api</span>) &#123;</span><br><span class="line">  api.<span class="title function_">patchEventPrototype</span>(<span class="variable language_">global</span>, api);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span></span></span><br><span class="line"><span class="comment"> * Copyright Google LLC All Rights Reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Use of this source code is governed by an MIT-style license that can be</span></span><br><span class="line"><span class="comment"> * found in the LICENSE file at https://angular.io/license</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Zone</span>.<span class="title function_">__load_patch</span>(<span class="string">&#x27;legacy&#x27;</span>, <span class="function"><span class="params">global</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> legacyPatch = <span class="variable language_">global</span>[<span class="title class_">Zone</span>.<span class="title function_">__symbol__</span>(<span class="string">&#x27;legacyPatch&#x27;</span>)];</span><br><span class="line">  <span class="keyword">if</span> (legacyPatch) &#123;</span><br><span class="line">    <span class="title function_">legacyPatch</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Zone</span>.<span class="title function_">__load_patch</span>(<span class="string">&#x27;queueMicrotask&#x27;</span>, <span class="function">(<span class="params"><span class="variable language_">global</span>, Zone, api</span>) =&gt;</span> &#123;</span><br><span class="line">  api.<span class="title function_">patchMethod</span>(<span class="variable language_">global</span>, <span class="string">&#x27;queueMicrotask&#x27;</span>, <span class="function"><span class="params">delegate</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">self, args</span>) &#123;</span><br><span class="line">      <span class="title class_">Zone</span>.<span class="property">current</span>.<span class="title function_">scheduleMicroTask</span>(<span class="string">&#x27;queueMicrotask&#x27;</span>, args[<span class="number">0</span>]);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Zone</span>.<span class="title function_">__load_patch</span>(<span class="string">&#x27;timers&#x27;</span>, <span class="function"><span class="params">global</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> set = <span class="string">&#x27;set&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> clear = <span class="string">&#x27;clear&#x27;</span>;</span><br><span class="line">  <span class="title function_">patchTimer</span>(<span class="variable language_">global</span>, set, clear, <span class="string">&#x27;Timeout&#x27;</span>);</span><br><span class="line">  <span class="title function_">patchTimer</span>(<span class="variable language_">global</span>, set, clear, <span class="string">&#x27;Interval&#x27;</span>);</span><br><span class="line">  <span class="title function_">patchTimer</span>(<span class="variable language_">global</span>, set, clear, <span class="string">&#x27;Immediate&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Zone</span>.<span class="title function_">__load_patch</span>(<span class="string">&#x27;requestAnimationFrame&#x27;</span>, <span class="function"><span class="params">global</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">patchTimer</span>(<span class="variable language_">global</span>, <span class="string">&#x27;request&#x27;</span>, <span class="string">&#x27;cancel&#x27;</span>, <span class="string">&#x27;AnimationFrame&#x27;</span>);</span><br><span class="line">  <span class="title function_">patchTimer</span>(<span class="variable language_">global</span>, <span class="string">&#x27;mozRequest&#x27;</span>, <span class="string">&#x27;mozCancel&#x27;</span>, <span class="string">&#x27;AnimationFrame&#x27;</span>);</span><br><span class="line">  <span class="title function_">patchTimer</span>(<span class="variable language_">global</span>, <span class="string">&#x27;webkitRequest&#x27;</span>, <span class="string">&#x27;webkitCancel&#x27;</span>, <span class="string">&#x27;AnimationFrame&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Zone</span>.<span class="title function_">__load_patch</span>(<span class="string">&#x27;blocking&#x27;</span>, <span class="function">(<span class="params"><span class="variable language_">global</span>, Zone</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> blockingMethods = [<span class="string">&#x27;alert&#x27;</span>, <span class="string">&#x27;prompt&#x27;</span>, <span class="string">&#x27;confirm&#x27;</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; blockingMethods.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = blockingMethods[i];</span><br><span class="line">    <span class="title function_">patchMethod</span>(<span class="variable language_">global</span>, name, <span class="function">(<span class="params">delegate, symbol, name</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">s, args</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Zone</span>.<span class="property">current</span>.<span class="title function_">run</span>(delegate, <span class="variable language_">global</span>, args, name);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Zone</span>.<span class="title function_">__load_patch</span>(<span class="string">&#x27;EventTarget&#x27;</span>, <span class="function">(<span class="params"><span class="variable language_">global</span>, Zone, api</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">patchEvent</span>(<span class="variable language_">global</span>, api);</span><br><span class="line">  <span class="title function_">eventTargetPatch</span>(<span class="variable language_">global</span>, api);</span><br><span class="line">  <span class="comment">// patch XMLHttpRequestEventTarget&#x27;s addEventListener/removeEventListener</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">XMLHttpRequestEventTarget</span> = <span class="variable language_">global</span>[<span class="string">&#x27;XMLHttpRequestEventTarget&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">XMLHttpRequestEventTarget</span> &amp;&amp; <span class="title class_">XMLHttpRequestEventTarget</span>.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">    api.<span class="title function_">patchEventTarget</span>(<span class="variable language_">global</span>, api, [<span class="title class_">XMLHttpRequestEventTarget</span>.<span class="property"><span class="keyword">prototype</span></span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Zone</span>.<span class="title function_">__load_patch</span>(<span class="string">&#x27;MutationObserver&#x27;</span>, <span class="function">(<span class="params"><span class="variable language_">global</span>, Zone, api</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">patchClass</span>(<span class="string">&#x27;MutationObserver&#x27;</span>);</span><br><span class="line">  <span class="title function_">patchClass</span>(<span class="string">&#x27;WebKitMutationObserver&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Zone</span>.<span class="title function_">__load_patch</span>(<span class="string">&#x27;IntersectionObserver&#x27;</span>, <span class="function">(<span class="params"><span class="variable language_">global</span>, Zone, api</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">patchClass</span>(<span class="string">&#x27;IntersectionObserver&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Zone</span>.<span class="title function_">__load_patch</span>(<span class="string">&#x27;FileReader&#x27;</span>, <span class="function">(<span class="params"><span class="variable language_">global</span>, Zone, api</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">patchClass</span>(<span class="string">&#x27;FileReader&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Zone</span>.<span class="title function_">__load_patch</span>(<span class="string">&#x27;on_property&#x27;</span>, <span class="function">(<span class="params"><span class="variable language_">global</span>, Zone, api</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">propertyDescriptorPatch</span>(api, <span class="variable language_">global</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Zone</span>.<span class="title function_">__load_patch</span>(<span class="string">&#x27;customElements&#x27;</span>, <span class="function">(<span class="params"><span class="variable language_">global</span>, Zone, api</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">patchCustomElements</span>(<span class="variable language_">global</span>, api);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Zone</span>.<span class="title function_">__load_patch</span>(<span class="string">&#x27;XHR&#x27;</span>, <span class="function">(<span class="params"><span class="variable language_">global</span>, Zone</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Treat XMLHttpRequest as a macrotask.</span></span><br><span class="line">  <span class="title function_">patchXHR</span>(<span class="variable language_">global</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">XHR_TASK</span> = <span class="title function_">zoneSymbol</span>(<span class="string">&#x27;xhrTask&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">XHR_SYNC</span> = <span class="title function_">zoneSymbol</span>(<span class="string">&#x27;xhrSync&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">XHR_LISTENER</span> = <span class="title function_">zoneSymbol</span>(<span class="string">&#x27;xhrListener&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">XHR_SCHEDULED</span> = <span class="title function_">zoneSymbol</span>(<span class="string">&#x27;xhrScheduled&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">XHR_URL</span> = <span class="title function_">zoneSymbol</span>(<span class="string">&#x27;xhrURL&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">XHR_ERROR_BEFORE_SCHEDULED</span> = <span class="title function_">zoneSymbol</span>(<span class="string">&#x27;xhrErrorBeforeScheduled&#x27;</span>);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">patchXHR</span>(<span class="params"><span class="variable language_">window</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">XMLHttpRequest</span> = <span class="variable language_">window</span>[<span class="string">&#x27;XMLHttpRequest&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">XMLHttpRequest</span>) &#123;</span><br><span class="line">      <span class="comment">// XMLHttpRequest is not available in service worker</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">XMLHttpRequestPrototype</span> = <span class="title class_">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">findPendingTask</span>(<span class="params">target</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> target[<span class="variable constant_">XHR_TASK</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> oriAddListener = <span class="title class_">XMLHttpRequestPrototype</span>[<span class="variable constant_">ZONE_SYMBOL_ADD_EVENT_LISTENER</span>];</span><br><span class="line">    <span class="keyword">let</span> oriRemoveListener = <span class="title class_">XMLHttpRequestPrototype</span>[<span class="variable constant_">ZONE_SYMBOL_REMOVE_EVENT_LISTENER</span>];</span><br><span class="line">    <span class="keyword">if</span> (!oriAddListener) &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title class_">XMLHttpRequestEventTarget</span> = <span class="variable language_">window</span>[<span class="string">&#x27;XMLHttpRequestEventTarget&#x27;</span>];</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">XMLHttpRequestEventTarget</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title class_">XMLHttpRequestEventTargetPrototype</span> = <span class="title class_">XMLHttpRequestEventTarget</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">        oriAddListener = <span class="title class_">XMLHttpRequestEventTargetPrototype</span>[<span class="variable constant_">ZONE_SYMBOL_ADD_EVENT_LISTENER</span>];</span><br><span class="line">        oriRemoveListener = <span class="title class_">XMLHttpRequestEventTargetPrototype</span>[<span class="variable constant_">ZONE_SYMBOL_REMOVE_EVENT_LISTENER</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">READY_STATE_CHANGE</span> = <span class="string">&#x27;readystatechange&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SCHEDULED</span> = <span class="string">&#x27;scheduled&#x27;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">scheduleTask</span>(<span class="params">task</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> data = task.<span class="property">data</span>;</span><br><span class="line">      <span class="keyword">const</span> target = data.<span class="property">target</span>;</span><br><span class="line">      target[<span class="variable constant_">XHR_SCHEDULED</span>] = <span class="literal">false</span>;</span><br><span class="line">      target[<span class="variable constant_">XHR_ERROR_BEFORE_SCHEDULED</span>] = <span class="literal">false</span>;</span><br><span class="line">      <span class="comment">// remove existing event listener</span></span><br><span class="line">      <span class="keyword">const</span> listener = target[<span class="variable constant_">XHR_LISTENER</span>];</span><br><span class="line">      <span class="keyword">if</span> (!oriAddListener) &#123;</span><br><span class="line">        oriAddListener = target[<span class="variable constant_">ZONE_SYMBOL_ADD_EVENT_LISTENER</span>];</span><br><span class="line">        oriRemoveListener = target[<span class="variable constant_">ZONE_SYMBOL_REMOVE_EVENT_LISTENER</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (listener) &#123;</span><br><span class="line">        oriRemoveListener.<span class="title function_">call</span>(target, <span class="variable constant_">READY_STATE_CHANGE</span>, listener);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> newListener = target[<span class="variable constant_">XHR_LISTENER</span>] = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target.<span class="property">readyState</span> === target.<span class="property">DONE</span>) &#123;</span><br><span class="line">          <span class="comment">// sometimes on some browsers XMLHttpRequest will fire onreadystatechange with</span></span><br><span class="line">          <span class="comment">// readyState=4 multiple times, so we need to check task state here</span></span><br><span class="line">          <span class="keyword">if</span> (!data.<span class="property">aborted</span> &amp;&amp; target[<span class="variable constant_">XHR_SCHEDULED</span>] &amp;&amp; task.<span class="property">state</span> === <span class="variable constant_">SCHEDULED</span>) &#123;</span><br><span class="line">            <span class="comment">// check whether the xhr has registered onload listener</span></span><br><span class="line">            <span class="comment">// if that is the case, the task should invoke after all</span></span><br><span class="line">            <span class="comment">// onload listeners finish.</span></span><br><span class="line">            <span class="comment">// Also if the request failed without response (status = 0), the load event handler</span></span><br><span class="line">            <span class="comment">// will not be triggered, in that case, we should also invoke the placeholder callback</span></span><br><span class="line">            <span class="comment">// to close the XMLHttpRequest::send macroTask.</span></span><br><span class="line">            <span class="comment">// https://github.com/angular/angular/issues/38795</span></span><br><span class="line">            <span class="keyword">const</span> loadTasks = target[<span class="title class_">Zone</span>.<span class="title function_">__symbol__</span>(<span class="string">&#x27;loadfalse&#x27;</span>)];</span><br><span class="line">            <span class="keyword">if</span> (target.<span class="property">status</span> !== <span class="number">0</span> &amp;&amp; loadTasks &amp;&amp; loadTasks.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="keyword">const</span> oriInvoke = task.<span class="property">invoke</span>;</span><br><span class="line">              task.<span class="property">invoke</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// need to load the tasks again, because in other</span></span><br><span class="line">                <span class="comment">// load listener, they may remove themselves</span></span><br><span class="line">                <span class="keyword">const</span> loadTasks = target[<span class="title class_">Zone</span>.<span class="title function_">__symbol__</span>(<span class="string">&#x27;loadfalse&#x27;</span>)];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; loadTasks.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (loadTasks[i] === task) &#123;</span><br><span class="line">                    loadTasks.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!data.<span class="property">aborted</span> &amp;&amp; task.<span class="property">state</span> === <span class="variable constant_">SCHEDULED</span>) &#123;</span><br><span class="line">                  oriInvoke.<span class="title function_">call</span>(task);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;;</span><br><span class="line">              loadTasks.<span class="title function_">push</span>(task);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              task.<span class="title function_">invoke</span>();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!data.<span class="property">aborted</span> &amp;&amp; target[<span class="variable constant_">XHR_SCHEDULED</span>] === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="comment">// error occurs when xhr.send()</span></span><br><span class="line">            target[<span class="variable constant_">XHR_ERROR_BEFORE_SCHEDULED</span>] = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      oriAddListener.<span class="title function_">call</span>(target, <span class="variable constant_">READY_STATE_CHANGE</span>, newListener);</span><br><span class="line">      <span class="keyword">const</span> storedTask = target[<span class="variable constant_">XHR_TASK</span>];</span><br><span class="line">      <span class="keyword">if</span> (!storedTask) &#123;</span><br><span class="line">        target[<span class="variable constant_">XHR_TASK</span>] = task;</span><br><span class="line">      &#125;</span><br><span class="line">      sendNative.<span class="title function_">apply</span>(target, data.<span class="property">args</span>);</span><br><span class="line">      target[<span class="variable constant_">XHR_SCHEDULED</span>] = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span> task;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">placeholderCallback</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">clearTask</span>(<span class="params">task</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> data = task.<span class="property">data</span>;</span><br><span class="line">      <span class="comment">// Note - ideally, we would call data.target.removeEventListener here, but it&#x27;s too late</span></span><br><span class="line">      <span class="comment">// to prevent it from firing. So instead, we store info for the event listener.</span></span><br><span class="line">      data.<span class="property">aborted</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span> abortNative.<span class="title function_">apply</span>(data.<span class="property">target</span>, data.<span class="property">args</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> openNative = <span class="title function_">patchMethod</span>(<span class="title class_">XMLHttpRequestPrototype</span>, <span class="string">&#x27;open&#x27;</span>, <span class="function">() =&gt;</span> <span class="keyword">function</span> (<span class="params">self, args</span>) &#123;</span><br><span class="line">      self[<span class="variable constant_">XHR_SYNC</span>] = args[<span class="number">2</span>] == <span class="literal">false</span>;</span><br><span class="line">      self[<span class="variable constant_">XHR_URL</span>] = args[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">return</span> openNative.<span class="title function_">apply</span>(self, args);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">XMLHTTPREQUEST_SOURCE</span> = <span class="string">&#x27;XMLHttpRequest.send&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> fetchTaskAborting = <span class="title function_">zoneSymbol</span>(<span class="string">&#x27;fetchTaskAborting&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> fetchTaskScheduling = <span class="title function_">zoneSymbol</span>(<span class="string">&#x27;fetchTaskScheduling&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> sendNative = <span class="title function_">patchMethod</span>(<span class="title class_">XMLHttpRequestPrototype</span>, <span class="string">&#x27;send&#x27;</span>, <span class="function">() =&gt;</span> <span class="keyword">function</span> (<span class="params">self, args</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Zone</span>.<span class="property">current</span>[fetchTaskScheduling] === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// a fetch is scheduling, so we are using xhr to polyfill fetch</span></span><br><span class="line">        <span class="comment">// and because we already schedule macroTask for fetch, we should</span></span><br><span class="line">        <span class="comment">// not schedule a macroTask for xhr again</span></span><br><span class="line">        <span class="keyword">return</span> sendNative.<span class="title function_">apply</span>(self, args);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (self[<span class="variable constant_">XHR_SYNC</span>]) &#123;</span><br><span class="line">        <span class="comment">// if the XHR is sync there is no task to schedule, just execute the code.</span></span><br><span class="line">        <span class="keyword">return</span> sendNative.<span class="title function_">apply</span>(self, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> options = &#123;</span><br><span class="line">          <span class="attr">target</span>: self,</span><br><span class="line">          <span class="attr">url</span>: self[<span class="variable constant_">XHR_URL</span>],</span><br><span class="line">          <span class="attr">isPeriodic</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">args</span>: args,</span><br><span class="line">          <span class="attr">aborted</span>: <span class="literal">false</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">const</span> task = <span class="title function_">scheduleMacroTaskWithCurrentZone</span>(<span class="variable constant_">XMLHTTPREQUEST_SOURCE</span>, placeholderCallback, options, scheduleTask, clearTask);</span><br><span class="line">        <span class="keyword">if</span> (self &amp;&amp; self[<span class="variable constant_">XHR_ERROR_BEFORE_SCHEDULED</span>] === <span class="literal">true</span> &amp;&amp; !options.<span class="property">aborted</span> &amp;&amp; task.<span class="property">state</span> === <span class="variable constant_">SCHEDULED</span>) &#123;</span><br><span class="line">          <span class="comment">// xhr request throw error when send</span></span><br><span class="line">          <span class="comment">// we should invoke task instead of leaving a scheduled</span></span><br><span class="line">          <span class="comment">// pending macroTask</span></span><br><span class="line">          task.<span class="title function_">invoke</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> abortNative = <span class="title function_">patchMethod</span>(<span class="title class_">XMLHttpRequestPrototype</span>, <span class="string">&#x27;abort&#x27;</span>, <span class="function">() =&gt;</span> <span class="keyword">function</span> (<span class="params">self, args</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> task = <span class="title function_">findPendingTask</span>(self);</span><br><span class="line">      <span class="keyword">if</span> (task &amp;&amp; <span class="keyword">typeof</span> task.<span class="property">type</span> == <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// If the XHR has already completed, do nothing.</span></span><br><span class="line">        <span class="comment">// If the XHR has already been aborted, do nothing.</span></span><br><span class="line">        <span class="comment">// Fix #569, call abort multiple times before done will cause</span></span><br><span class="line">        <span class="comment">// macroTask task count be negative number</span></span><br><span class="line">        <span class="keyword">if</span> (task.<span class="property">cancelFn</span> == <span class="literal">null</span> || task.<span class="property">data</span> &amp;&amp; task.<span class="property">data</span>.<span class="property">aborted</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        task.<span class="property">zone</span>.<span class="title function_">cancelTask</span>(task);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Zone</span>.<span class="property">current</span>[fetchTaskAborting] === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// the abort is called from fetch polyfill, we need to call native abort of XHR.</span></span><br><span class="line">        <span class="keyword">return</span> abortNative.<span class="title function_">apply</span>(self, args);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no</span></span><br><span class="line">      <span class="comment">// task</span></span><br><span class="line">      <span class="comment">// to cancel. Do nothing.</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Zone</span>.<span class="title function_">__load_patch</span>(<span class="string">&#x27;geolocation&#x27;</span>, <span class="function"><span class="params">global</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/// GEO_LOCATION</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">global</span>[<span class="string">&#x27;navigator&#x27;</span>] &amp;&amp; <span class="variable language_">global</span>[<span class="string">&#x27;navigator&#x27;</span>].<span class="property">geolocation</span>) &#123;</span><br><span class="line">    <span class="title function_">patchPrototype</span>(<span class="variable language_">global</span>[<span class="string">&#x27;navigator&#x27;</span>].<span class="property">geolocation</span>, [<span class="string">&#x27;getCurrentPosition&#x27;</span>, <span class="string">&#x27;watchPosition&#x27;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Zone</span>.<span class="title function_">__load_patch</span>(<span class="string">&#x27;PromiseRejectionEvent&#x27;</span>, <span class="function">(<span class="params"><span class="variable language_">global</span>, Zone</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// handle unhandled promise rejection</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">findPromiseRejectionHandler</span>(<span class="params">evtName</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> eventTasks = <span class="title function_">findEventTasks</span>(<span class="variable language_">global</span>, evtName);</span><br><span class="line">      eventTasks.<span class="title function_">forEach</span>(<span class="function"><span class="params">eventTask</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// windows has added unhandledrejection event listener</span></span><br><span class="line">        <span class="comment">// trigger the event listener</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title class_">PromiseRejectionEvent</span> = <span class="variable language_">global</span>[<span class="string">&#x27;PromiseRejectionEvent&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">PromiseRejectionEvent</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> evt = <span class="keyword">new</span> <span class="title class_">PromiseRejectionEvent</span>(evtName, &#123;</span><br><span class="line">            <span class="attr">promise</span>: e.<span class="property">promise</span>,</span><br><span class="line">            <span class="attr">reason</span>: e.<span class="property">rejection</span></span><br><span class="line">          &#125;);</span><br><span class="line">          eventTask.<span class="title function_">invoke</span>(evt);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">global</span>[<span class="string">&#x27;PromiseRejectionEvent&#x27;</span>]) &#123;</span><br><span class="line">    <span class="title class_">Zone</span>[<span class="title function_">zoneSymbol</span>(<span class="string">&#x27;unhandledPromiseRejectionHandler&#x27;</span>)] = <span class="title function_">findPromiseRejectionHandler</span>(<span class="string">&#x27;unhandledrejection&#x27;</span>);</span><br><span class="line">    <span class="title class_">Zone</span>[<span class="title function_">zoneSymbol</span>(<span class="string">&#x27;rejectionHandledHandler&#x27;</span>)] = <span class="title function_">findPromiseRejectionHandler</span>(<span class="string">&#x27;rejectionhandled&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/******/</span> <span class="function"><span class="params">__webpack_require__</span> =&gt;</span> &#123; <span class="comment">// webpackRuntimeModules</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> <span class="title function_">__webpack_exec__</span> = (<span class="params">moduleId</span>) =&gt; (<span class="title function_">__webpack_require__</span>(__webpack_require__.<span class="property">s</span> = moduleId))</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> __webpack_exports__ = (<span class="title function_">__webpack_exec__</span>(<span class="number">1211</span>), <span class="title function_">__webpack_exec__</span>(<span class="number">4946</span>));</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line">]);</span><br><span class="line"><span class="comment">//# sourceMappingURL=polyfills.js.map</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>polyfills</tag>
      </tags>
  </entry>
  <entry>
    <title>html-tag-label</title>
    <url>/2025/03/30/html-tag-label/</url>
    <content><![CDATA[<p>今天我们一起来学习一下html中的<code>label</code>标签。</p>
<h2 id="什么是label？"><a href="#什么是label？" class="headerlink" title="什么是label？"></a>什么是label？</h2><p>现实生活中，标签无处不在，比如我们在超市买东西时，商品上都会贴有标签，标签上会标明商品的名称、成分、型号、价格等信息。</p>
<p>Web世界中也有自己的标签，那就是<code>label</code>，它的作用是为控件提供一个说明。以如下登录界面为例，这里的<code>Username</code>和<code>Password</code>就是label，他们标明右侧的输入框分别要输入用户名和密码。<code>label</code>标签的作用就是为控件提供一个标题以说明这个控件的作用。</p>
<p><img src="/../images/html-tag-label-login.jpg" alt="html-tag-label-login"></p>
<p>当然label标签不仅可以用于输入框(input)，还可以用于下拉选择框(select)，单选框(radio)，复选框(checkbox)等控件。</p>
<h3 id="用于下拉选择框"><a href="#用于下拉选择框" class="headerlink" title="用于下拉选择框"></a>用于下拉选择框</h3><p>html中使用<code>select</code> + <code>option</code>来完成下拉框的功能。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 16px; border-radius: 4px; border: 1px solid #ccc;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;country&quot;</span>&gt;</span>Country:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;country&quot;</span> <span class="attr">name</span>=<span class="string">&quot;country&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span>&gt;</span>China<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;usa&quot;</span>&gt;</span>USA<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;uk&quot;</span>&gt;</span>UK<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>渲染结果如下：</p>
<div style="padding: 16px; border-radius: 4px; border: 1px solid #ccc;">
  <label for="country">Country:</label>
  <select id="country" name="country">
    <option value="china">China</option>
    <option value="usa">USA</option>
    <option value="uk">UK</option>
  </select>
</div>

<h3 id="用于单选框"><a href="#用于单选框" class="headerlink" title="用于单选框"></a>用于单选框</h3><p>对于单选框（radio button），如果要实现互斥效果（多个radio button只能选择其中一个），必须给这些radio button设置相同的name，比如下面两个radio button的name都设置为<code>gender</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 16px; border-radius: 4px; border: 1px solid #ccc;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Gender: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span> Male</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span> Female</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>渲染结果如下：</p>
<div style="padding: 16px; border-radius: 4px; border: 1px solid #ccc;">
  <span>Gender: </span>
  <label for="male">
    <input type="radio" id="male" name="gender" value="male"> Male
  </label>
  <label for="female">
    <input type="radio" id="female" name="gender" value="female"> Female
  </label>
</div>

<h3 id="用于复选框"><a href="#用于复选框" class="headerlink" title="用于复选框"></a>用于复选框</h3><p>html代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 16px; border-radius: 4px; border: 1px solid #ccc&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;subscribe&quot;</span>&gt;</span>Subscribe to newsletter:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;subscribe&quot;</span> <span class="attr">name</span>=<span class="string">&quot;subscribe&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>渲染结果如下：</p>
<div style="padding: 16px; border-radius: 4px; border: 1px solid #ccc;">
  <label for="subscribe">Subscribe to newsletter:</label>
  <input type="checkbox" id="subscribe" name="subscribe" />
</div>

<h2 id="如何使用label标签"><a href="#如何使用label标签" class="headerlink" title="如何使用label标签"></a>如何使用label标签</h2><p>为控件添加label标签主要有两种方式，一种是使用<code>for/id</code>的方式，另一种是使用嵌套的方式。</p>
<h3 id="使用for-id方式提供label标签"><a href="#使用for-id方式提供label标签" class="headerlink" title="使用for&#x2F;id方式提供label标签"></a>使用for&#x2F;id方式提供label标签</h3><ol>
<li>首先，定义控件时，为控件提供一个<code>id</code>属性。</li>
<li>然后，在label标签中添加<code>for</code>属性，指定其值为控件的<code>id</code>属性值。</li>
</ol>
<p>下面的代码中，我们定义了一个文本框控件，并给它设置了<code>id</code>属性，其值为<code>username</code>，并为它提供了一个<code>label</code>标签，并设置其<code>for</code>属性的值为<code>username</code>。这样，label和控件就关联起来了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用嵌套方式提供label标签"><a href="#使用嵌套方式提供label标签" class="headerlink" title="使用嵌套方式提供label标签"></a>使用嵌套方式提供label标签</h3><p>如果不想使用<code>for/id</code>的形式，那么可以直接用label标签包裹住对应的控件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Username:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>无论使用哪种形式，都可以调整label和控件的先后顺序，对于input输入框来说，一般label在前面，控件在后面。而对于checkbox来说，一般是控件在前而label在后，此时我们可以按如下方式书写html。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;subscribe&quot;</span> <span class="attr">name</span>=<span class="string">&quot;subscribe&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;subscribe&quot;</span>&gt;</span>Subscribe to newsletter:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;subscribe&quot;</span>&gt;</span> Subscribe to newsletter</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="哪些控件可以使用label标签"><a href="#哪些控件可以使用label标签" class="headerlink" title="哪些控件可以使用label标签"></a>哪些控件可以使用label标签</h2><p>大多数表单控件都可以使用label标签，包括但不限于：</p>
<ol>
<li>文本框 - text box <code>&lt;input type=&#39;text&#39;&gt;</code></li>
<li>单选框 - radio button<code>&lt;input type=&#39;radio&#39;&gt;</code></li>
<li>复选框 - checkbox<code>&lt;input type=&#39;checkbox&#39;&gt;</code></li>
<li>下拉列表 - <code>&lt;select&gt;</code></li>
<li>多行文本框 - <code>&lt;textarea&gt;</code></li>
</ol>
<h2 id="label标签的好处"><a href="#label标签的好处" class="headerlink" title="label标签的好处"></a>label标签的好处</h2><p>使用label标签有哪些好处呢？</p>
<ol>
<li>增强页面的可访问性，label标签不仅从视觉上为控件提供了标题，也为屏幕阅读器提供了可读的信息，这使得有视力障碍的用户也能更好的理解页面内容。</li>
<li>提供用户体验，label标签扩大了控件的可点击区域，即使用户点击label标签也能触发控件的操作。- 以上面第一个例子<code>username</code>控件为例，即使用户点击label标签<code>username</code>，input控件也能获取焦点。</li>
</ol>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>tag</tag>
        <tag>label</tag>
      </tags>
  </entry>
  <entry>
    <title>html5 drag and drop events</title>
    <url>/2023/07/04/html5-drag-and-drop-events/</url>
    <content><![CDATA[<h1 id="html5-drag-and-drop-events"><a href="#html5-drag-and-drop-events" class="headerlink" title="html5 drag and drop events"></a>html5 drag and drop events</h1><p>html5中的拖放事件有以下几个：</p>
<ul>
<li>dragstart</li>
<li>drag</li>
<li>dragleave</li>
<li>dragenter</li>
<li>dragover</li>
<li>drop</li>
<li>dragend</li>
</ul>
<p>我们将从以下几个方面依次讲解这些事件，包括事件的触发条件，事件的触发源头，事件的触发频率等</p>
<h2 id="dragstart"><a href="#dragstart" class="headerlink" title="dragstart"></a>dragstart</h2><p>触发条件：当用户开始拖动一个元素时，会触发<code>dragstart</code>事件。<br>触发源头：被拖动的元素。<br>触发频率：一次。</p>
<h2 id="drag"><a href="#drag" class="headerlink" title="drag"></a>drag</h2><p>触发条件：当用户拖动一个元素时，会触发<code>drag</code>事件。<br>触发源头：被拖动的元素。<br>触发频率：多次。  </p>
<h2 id="dragleave"><a href="#dragleave" class="headerlink" title="dragleave"></a>dragleave</h2><p>触发条件：当用户拖动一个元素，离开了一个可放置的目标元素时，会触发<code>dragleave</code>事件。<br>触发源头：目标区域（松开鼠标后，元素放置的区域）。<br>触发频率：一次。  </p>
<h2 id="dragenter"><a href="#dragenter" class="headerlink" title="dragenter"></a>dragenter</h2><p>触发条件：当用户拖动一个元素，进入了一个可放置的目标元素时，会触发<code>dragenter</code>事件。<br>触发源头：目标区域（松开鼠标后，元素放置的区域）。<br>触发频率：一次。  </p>
<h2 id="dragover"><a href="#dragover" class="headerlink" title="dragover"></a>dragover</h2><p>触发条件：当用户拖动一个元素，悬停在一个可放置的目标元素上时，会触发<code>dragover</code>事件。<br>触发源头：目标区域（松开鼠标后，元素放置的区域）。<br>触发频率：多次。  </p>
<h2 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h2><p>触发条件：当用户拖动一个元素，释放鼠标按钮时，会触发<code>drop</code>事件。<br>触发源头：目标区域（松开鼠标后，元素放置的区域）。<br>触发频率：一次。  </p>
<h2 id="dragend"><a href="#dragend" class="headerlink" title="dragend"></a>dragend</h2><p>触发条件：当用户拖动一个元素，释放鼠标按钮时，会触发<code>dragend</code>事件。<br>触发源头：被拖动的元素。<br>触发频率：一次。  </p>
<h2 id="实例讲解"><a href="#实例讲解" class="headerlink" title="实例讲解"></a>实例讲解</h2><p>下面以一个实际例子来讲解事件发生的顺序，如下图，页面上有两个容器，Container A和Container B，container A中有一个元素Child，container B中没有元素。我们将container A中的Child元素拖动到container B中，观察事件的触发顺序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+-------------------+</span><br><span class="line">|     Container A   |</span><br><span class="line">|                   |</span><br><span class="line">|                   |</span><br><span class="line">|      Child        |</span><br><span class="line">|        |          |</span><br><span class="line">|        |          |</span><br><span class="line">|        |          |</span><br><span class="line">+--------|----------+</span><br><span class="line">         |</span><br><span class="line">        \/</span><br><span class="line"></span><br><span class="line">+-------------------+</span><br><span class="line">|    Container B    |</span><br><span class="line">|                   |</span><br><span class="line">|                   |</span><br><span class="line">|                   |</span><br><span class="line">|                   |</span><br><span class="line">|                   |</span><br><span class="line">|                   |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure>

<ol>
<li>首先触发的事件是 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event">dragstart</a>，触发源头是被拖动的元素，触发频率是一次。我们可以通过打印<code>event.target</code>来验证这一点。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dragStart</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">stopPropagation</span>(); <span class="comment">// 阻止事件冒泡，也就是阻止事件向父元素传递。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;drag start...&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  e.<span class="property">dataTransfer</span>.<span class="title function_">setData</span>(<span class="string">&quot;text&quot;</span>, e.<span class="property">target</span>.<span class="property">id</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事件处理函数中的<code>e.target</code>是指触发该事件的元素，比如当用户点击某一个按钮时会触发<code>click</code>事件，那么按钮就是click事件的e.target。而<code>this</code>是指注册事件处理函数的元素，大部分情况下这二者是相同的，但是也有例外，详情请看<a href="https://zdd.github.io/2023/08/02/event-target-vs-event-currentTarget/">这里</a>。  </p>
<p><code>dragstart</code>不同于其他拖拽处理函数的地方是，它是唯一可以设置transfer data的地方。我们可以通过<code>e.dataTransfer.setData</code>方法来设置transfer data，该方法接受两个参数，第一个参数是transfer data的类型，第二个参数是transfer data的值。这里我们设置transfer data的类型为<code>text</code>，值为被拖动元素的id。</p>
<ol start="2">
<li><p>然后触发的事件是<code>drag</code>，触发源头是被拖动的元素，该事件会在拖动过程中一直触发。在实际应用中，一般不监听这个事件，因为它没啥用，而且触发太频繁。</p>
</li>
<li><p>接下来触发的事件是<code>dragenter</code>，当用户拖动一个元素到一个可放置的目标时，会触发该事件，只会触发一次。由于Container A也是一个可放置的区域，而刚开始拖动时Child就已经位于Container A中，所以会触发<code>dragenter</code>事件。</p>
</li>
<li><p>然后触发的事件是<code>dragover</code>，当用户拖动一个元素，悬停在一个可放置的目标元素上时，会触发该事件，会在拖动过程中一直触发。与其他事件处理函数不同，该函数有如下两个特点。</p>
<ol>
<li>该事件在放置目标区域上触发，而不是被拖拽的元素上触发。</li>
<li>这个事件是需要阻止默认行为的，否则会导致<code>drop</code>事件无法触发。我们可以通过<code>e.preventDefault()</code>来阻止默认行为。</li>
</ol>
</li>
<li><p>接下来，如果用户在目标区域释放了鼠标，那么会触发<code>drop</code>事件，该事件会在放置目标区域上触发，只会触发一次。我们可以通过<code>e.dataTransfer.getData</code>来获取transfer data，该方法接受一个参数，表示要获取的transfer data的类型，这里我们传入<code>text</code>，表示获取类型为<code>text</code>的transfer data。如果我们在<code>dragstart</code>事件处理函数中设置了transfer data，那么在<code>drop</code>事件处理函数中就可以获取到transfer data了。</p>
</li>
<li><p>如果用户在目标区没有释放鼠标，而是继续拖动，直到离开目标区域，那么会触发<code>dragleave</code>事件，该事件会在放置目标区域上触发，只会触发一次。反之，如果用户在目标区域释放了鼠标，那么该事件不会触发。也就是说，对于同一个目标区域而言，<code>dragleave</code>事件和<code>drop</code>事件是互斥的，只会触发其中一个。</p>
</li>
</ol>
<p>注意：<code>dragenter</code>, <code>dragleave</code>, <code>dragover</code> - 这里都是指鼠标的进入，离开，悬停，而不是指被拖动的元素的进入，离开，悬停。</p>
<h2 id="总结如下："><a href="#总结如下：" class="headerlink" title="总结如下："></a>总结如下：</h2><table>
<thead>
<tr>
<th>事件</th>
<th>触发条件</th>
<th>触发源头</th>
<th>触发频率</th>
</tr>
</thead>
<tbody><tr>
<td>dragstart</td>
<td>当用户开始拖动一个元素时</td>
<td>被拖动的元素</td>
<td>一次</td>
</tr>
<tr>
<td>drag</td>
<td>当用户拖动一个元素时</td>
<td>被拖动的元素</td>
<td>多次</td>
</tr>
<tr>
<td>dragleave</td>
<td>当用户拖动一个元素，离开了一个可放置的目标元素时</td>
<td>目标区域对应的元素</td>
<td>一次</td>
</tr>
<tr>
<td>dragenter</td>
<td>当用户拖动一个元素，进入了一个可放置的目标元素时</td>
<td>目标区域对应的元素</td>
<td>一次</td>
</tr>
<tr>
<td>dragover</td>
<td>当用户拖动一个元素，悬停在一个可放置的目标元素上时</td>
<td>目标区域对应的元素</td>
<td>多次</td>
</tr>
<tr>
<td>drop</td>
<td>当用户拖动一个元素，释放鼠标按钮时</td>
<td>目标区域对应的元素</td>
<td>一次</td>
</tr>
<tr>
<td>dragend</td>
<td>当用户拖动一个元素，释放鼠标按钮时</td>
<td>被拖动的元素</td>
<td>一次</td>
</tr>
</tbody></table>
<h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><ol>
<li><p><code>dragenter</code>, <code>dragleave</code>, <code>dragover</code> - 这里都是指鼠标的进入，离开，悬停，而不是指被拖动的元素的进入，离开，悬停。</p>
</li>
<li><p>在处理从一个区域拖拽到另一个区域的情况时比较简单，比如常见的左右两个列表，将一个元素从左侧列表拖拽到右侧列表。这时候被拖拽的元素和放置目标之间的界限比较明显，处理起来比较容易，也就是说被拖拽的元素响应以下事件即可：</p>
<ul>
<li>dragstart</li>
<li>drag</li>
<li>dragend</li>
</ul>
<p>而放置目标响应以下事件即可：</p>
<ul>
<li>dragenter</li>
<li>dragover</li>
<li>drop</li>
<li>dragleave</li>
</ul>
</li>
<li><p>但是如果处理一组元素之间的互相拖拽及排序，那就比较麻烦，比如一个相册列表，或者一个瀑布流布局，或者masonry布局，就是一个大容器，里面有如果子元素，我们可以拖拽任意一个元素到其他位置，在拖拽过程中要有placeholder，其他元素要给被拖拽的元素让路。这种情况下，每个元素都要响应所有事件，所以一个必要的操作就是判断被拖拽的元素和放置目标是否是同一个元素，如果是同一个元素，那么就不需要做任何处理，否则就需要做相应的处理。这里有一个技巧，可以使用<code>e.target</code>和<code>e.currentTarget</code>来判断被拖拽的元素和放置目标是否是同一个元素，常见的做法如下：</p>
</li>
</ol>
<ul>
<li>在<code>dragstart</code>函数中记录被拖拽的元素<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dragSrcEl = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleDragStart</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  dragSrcEl = <span class="variable language_">this</span>; <span class="comment">// record the dragged element</span></span><br><span class="line">  dragSrcEl.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;dragging&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在<code>dragenter</code>, <code>dragover</code>, <code>dragleave</code>, <code>drop</code>等方法中判断被拖拽元素是否等于this，如果是，那么说明是同一个元素，直接return，如果不是，再进行具体的处理工作。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleDragEnter</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// this event also triggered on the dragged item itself, we should ignore this case.</span></span><br><span class="line">  <span class="keyword">if</span> (dragSrcEl === <span class="variable language_">this</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="4">
<li><p>在<code>dragover</code>事件处理函数中，需要阻止默认行为，否则会导致<code>drop</code>事件无法触发。我们可以通过<code>e.preventDefault()</code>来阻止默认行为。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleDragOver</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>(); <span class="comment">// prevent default behavior</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>drop</code>事件处理函数中，需要阻止默认行为，否则会导致浏览器打开被拖拽的元素。我们可以通过<code>e.preventDefault()</code>来阻止默认行为。</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleDrop</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>(); <span class="comment">// prevent default behavior</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>html5</tag>
        <tag>drag and drop</tag>
        <tag>dnd</tag>
      </tags>
  </entry>
  <entry>
    <title>http-browser-cache</title>
    <url>/2024/11/14/http-browser-cache/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>缓存是前端开发中非常重要的概念，它可以提高网站的性能，减少服务器的负担。本文主要介绍Http和浏览器缓存的相关知识。</p>
<p>不知道各位读者是否有这样的体验：</p>
<ol>
<li>某个网站第一次打开的时候特别慢，再次打开的时候就快很多。</li>
<li>登录某个网站后，下次再访问的时候自动就是登录状态了。</li>
</ol>
<p>其实以上现象都是缓存的功劳。</p>
<h1 id="Http-Cache"><a href="#Http-Cache" class="headerlink" title="Http Cache"></a>Http Cache</h1><h1 id="缓存相关的头部字段"><a href="#缓存相关的头部字段" class="headerlink" title="缓存相关的头部字段"></a>缓存相关的头部字段</h1><h2 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h2><p><code>Expires</code>是一个HTTP响应头部字段，用于指定资源的过期时间。它的值是一个GMT格式的时间字符串。以下代码表示资源的过期时间是2024年11月16日14点10分23秒。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">expires:Sat, 16 Nov 2024 14:10:23 GMT</span><br></pre></td></tr></table></figure>
<p><code>Expires</code>是HTTP&#x2F;1.0的标准，它有一个问题，就是我们判断缓存过期时，浏览器会使用当前系统时间与<code>Expires</code>字段的时间进行比较。如果系统时间大于<code>Expires</code>字段的时间，那么缓存就会被认为过期了。但是当前系统时间是可以人为修改的，这就会导致缓存过期时间不准确。</p>
<h2 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h2><p><code>Cache-Control</code>字段的取值有如下几种：</p>
<h3 id="max-age"><a href="#max-age" class="headerlink" title="max-age"></a>max-age</h3><p><code>max-age</code>的值是一个整数，单位是秒，表示缓存会在xxx秒后过期。以下代码表示资源会在3600秒后过期。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cache-control:max-age=3600</span><br></pre></td></tr></table></figure>
<p>那么<code>max-age</code>中指定的3600秒参照的是什么时间呢？它参照的是服务器生成Response的时间，而不是浏览器收到Response的时间。那么服务器生成Response的时间在响应头中有吗？有的，就是<code>Date</code>字段。<code>Date</code>字段表示服务器生成Response的时间。所以缓存的的过期时间是<code>Date</code>字段的时间加上<code>max-age</code>的值。</p>
<p><strong>ExpireTime &#x3D; Date + max-age</strong></p>
<p>注意：如果<code>max-age</code>和<code>Expires</code>同时存在，那么<code>max-age</code>的优先级更高，<code>Expires</code>会被忽略。</p>
<h3 id="no-cache"><a href="#no-cache" class="headerlink" title="no-cache"></a>no-cache</h3><p>注意：这个字段的意思不是不使用缓存！<br>这个字段的意思是可以使用缓存，但是使用前需要向服务器验证缓存是否过期。也就是协商缓存。</p>
<h3 id="no-store"><a href="#no-store" class="headerlink" title="no-store"></a>no-store</h3><p>不使用缓存，每次都需要向服务器请求资源。</p>
<h3 id="must-revalidate"><a href="#must-revalidate" class="headerlink" title="must-revalidate"></a>must-revalidate</h3><p>在缓存过期前，直接使用缓存，但是过期后需要向服务器验证缓存是否过期。</p>
<h2 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h2><p><code>Last-Modified</code>是一个HTTP响应头部字段，用于指定资源的最后修改时间。它的值是一个GMT格式的时间字符串。以下代码表示资源的最后修改时间是2024年11月16日14点10分23秒。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">last-modified:Sat, 16 Nov 2024 14:10:23 GMT</span><br></pre></td></tr></table></figure>
<p>当客户端再次请求资源时，会将上次请求时服务器返回的<code>Last-Modified</code>值放在请求头中的<code>If-Modified-Since</code>字段中，服务器会根据这个值判断资源是否发生了变化。如果资源没有发生变化，服务器会返回<code>304 Not Modified</code>状态码，表示资源没有发生变化，客户端可以使用缓存。</p>
<h2 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h2><p><code>ETag</code>是一个HTTP响应头部字段，用于指定资源的唯一标识。它的值是一个字符串。服务器会根据资源的内容生成一个唯一的字符串（注意，生成算法因服务器而异），然后将这个字符串作为<code>ETag</code>的值。当客户端再次请求资源时，会将上次请求时服务器返回的<code>ETag</code>值放在请求头中的<code>If-None-Match</code>字段中，服务器会根据这个值判断资源是否发生了变化。如果资源没有发生变化，服务器会返回<code>304 Not Modified</code>状态码，表示资源没有发生变化，客户端可以使用缓存。</p>
<h3 id="ETag相比Last-Modified的优点"><a href="#ETag相比Last-Modified的优点" class="headerlink" title="ETag相比Last-Modified的优点"></a>ETag相比Last-Modified的优点</h3><h4 id="精确性："><a href="#精确性：" class="headerlink" title="精确性："></a>精确性：</h4><ul>
<li>ETag 可以提供比 Last-Modified 更精确的资源版本标识。Last-Modified 是基于时间戳的，而时间戳的精度通常是秒级，这意味着如果一个资源在一秒内发生变化多次，Last-Modified 就无法区分这些变化。</li>
<li>ETag 是一个可以由服务器自由定义的字符串，它可以唯一标识一个资源的特定版本，甚至可以包括内容的哈希值，从而确保即使是微小的变化也能被准确识别。</li>
</ul>
<h4 id="灵活性："><a href="#灵活性：" class="headerlink" title="灵活性："></a>灵活性：</h4><ul>
<li>ETag 允许更灵活的缓存控制策略。它可以是强验证器（保证内容完全一致）或弱验证器（允许一定程度上的差异，如压缩、格式转换等），这取决于服务器如何生成 ETag。</li>
<li>例如，当资源的内容没有变化，但是某些元数据发生了变化（比如编码方式），服务器可以选择更新 ETag 或者不更新，这取决于是否希望客户端重新获取资源。</li>
</ul>
<h4 id="避免时间戳问题："><a href="#避免时间戳问题：" class="headerlink" title="避免时间戳问题："></a>避免时间戳问题：</h4><ul>
<li>由于 Last-Modified 基于时间，它可能会遇到时钟不同步的问题。如果客户端和服务器之间的系统时钟存在较大偏差，那么基于 Last-Modified 的缓存验证可能会出错。</li>
<li>ETag 不依赖于时间戳，因此不受时钟同步问题的影响。</li>
</ul>
<h4 id="支持非文件资源："><a href="#支持非文件资源：" class="headerlink" title="支持非文件资源："></a>支持非文件资源：</h4><ul>
<li>对于动态生成的内容（例如数据库查询结果），可能没有明确的最后修改时间，此时使用 ETag 更为合适。服务器可以根据内容的状态生成一个唯一的 ETag。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><code>expires</code>和<code>max-age</code>控制的是强缓存。</li>
<li><code>Last-Modified</code>和<code>ETag</code>控制的是协商缓存。</li>
<li>浏览器请求时会先检查强缓存，然后再检查协商缓存。</li>
</ol>
<h2 id="一道面试题"><a href="#一道面试题" class="headerlink" title="一道面试题"></a>一道面试题</h2><p>如果一次Http请求返回的状态码是200，那么这个请求走缓存了吗？<br>答案：可能走，也可能没走。<br>解析：我们大多数人都知道状态码304表示资源没有改变，那么就使用本地缓存，这个属于协商缓存。还有一种是强缓存，就是直接使用本地缓存，不需要向服务器验证。这种情况下，状态码是200。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching">https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control</a></li>
<li><a href="https://juejin.cn/book/6994678547826606095/section/6997029635766616077?scrollMenuIndex=1">https://juejin.cn/book/6994678547826606095/section/6997029635766616077?scrollMenuIndex=1</a></li>
</ol>
]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>browser</tag>
        <tag>cache</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>html-tag-noscript</title>
    <url>/2024/07/14/html-tag-noscript/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>noscript</code> is used in following senarios:</p>
<ol>
<li>When the browser does not support JavaScript.</li>
<li>When the browser has disabled JavaScript.</li>
</ol>
<h1 id="How-to-disable-JavaScript-in-Chrome"><a href="#How-to-disable-JavaScript-in-Chrome" class="headerlink" title="How to disable JavaScript in Chrome"></a>How to disable JavaScript in Chrome</h1><ol>
<li>Open your page with Chrome.</li>
<li>Press <code>F12</code> to open the developer tools.</li>
<li>Click on the <code>three dots</code> on the top right corner.(Or press <code>Ctrl + Shift + P</code>)</li>
<li>Type <code>disable JavaScript</code> in the search bar.</li>
<li>Click on the <code>Disable JavaScript</code> option.</li>
</ol>
<p>When JavaScript was disabled, there will be a warning sign on <code>Source</code> tab. mouse hove on that warning sign, it will show the message <code>JavaScript is disabled</code>.</p>
<p><img src="/../images/chrome-disable-javascript.jpg" alt="disable-javascript"></p>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p>The following code will print <code>Hello, world!</code> in the console if JavaScript is enabled. If JavaScript is disabled, the message <code>This page requires JavaScript.</code> will be displayed.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, world!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span> This page requires JavaScript.<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>As I know, currently, <code>React</code> framework will generate a <code>noscript</code> tag in the <code>body</code> tag when you create your project with <code>create-react-app</code>.</p>
<p>But Angular does not have a <code>noscript</code> tag in the <code>body</code> tag. there is no browser does not support JavaScript or disable JavaScript, so it is not necessary to add a <code>noscript</code> tag in the <code>body</code> tag.</p>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>tag</tag>
        <tag>noscript</tag>
      </tags>
  </entry>
  <entry>
    <title>http_content-type</title>
    <url>/2024/02/28/http-content-type/</url>
    <content><![CDATA[<h1 id="HTTP-Content-Type"><a href="#HTTP-Content-Type" class="headerlink" title="HTTP Content-Type"></a>HTTP Content-Type</h1><h2 id="x-www-form-urlencoded"><a href="#x-www-form-urlencoded" class="headerlink" title="x-www-form-urlencoded"></a>x-www-form-urlencoded</h2><p>先看一个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span></span></span><br><span class="line"><span class="tag">  <span class="attr">action</span>=<span class="string">&quot;/urlencoded?firstname=philip&amp;lastname=zhang&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">enctype</span>=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;user1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;pwd1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里的 <code>enctype</code> 属性指定了表单数据的编码类型，<code>application/x-www-form-urlencoded</code> 是默认的编码类型，也是最常用的编码类型。当表单数据被编码为 <code>application/x-www-form-urlencoded</code> 时：</p>
<ul>
<li>表单数据会被编码为键值对，键值对之间用 <code>&amp;</code> 连接。</li>
<li>键和值之间用 <code>=</code> 连接。</li>
</ul>
<p>上面的例子中，表单数据被编码为 <code>username=user1&amp;password=pwd1</code>。（实际上和url中的参数格式一样，所以才叫<code>urlencoded</code>）</p>
<p>用浏览器打开这个页面，然后点击 <code>Submit</code> 按钮，按F12打开开发者工具，切换到 <code>Network</code> 选项卡，在<code>Headers</code>Tab可以看到请求的 <code>Content-Type</code> 是 <code>application/x-www-form-urlencoded</code>。<br><img src="/../images/content-type.png" alt="alt text"></p>
<p>在<code>Payload</code>Tab可以看到请求的详细信息：</p>
<ul>
<li><code>Query String</code>： <code>firstname=philip&amp;lastname=zhang</code> - 对应form <code>action</code>中的url参数</li>
<li><code>Form Data</code>：<code>username=user1&amp;password=pwd1</code>- 对应form体中的两个<code>input</code>。</li>
</ul>
<p><img src="/../images/x-www-form-url-encoded.png" alt="alt text"></p>
<p>但是，上面这个例子并没有展示出url-encoded的精髓，这里的encoded到底encoded了什么呢？我们来看一个更加直观的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span></span></span><br><span class="line"><span class="tag">  <span class="attr">action</span>=<span class="string">&quot;/urlencoded?firstname=philip&amp;lastname=zhang&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">enctype</span>=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;foo&amp;bar&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1=2?&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里的 <code>username</code> 和 <code>password</code> 的值中包含了 <code>&amp;</code> 和 <code>=</code>，这些字符在url中有特殊含义，如果直接放在url中，会导致url解析错误。但是，当表单数据被编码为 <code>application/x-www-form-urlencoded</code> 时，这些特殊字符会被转义，所以编码后的表单数据如下图所示。</p>
<ul>
<li>username: foo%26bar, 其中 <code>%26</code> 是 <code>&amp;</code> 的转义</li>
<li>password: 1%3D2%3F, 其中 <code>%3D</code> 是 <code>=</code> 的转义，<code>%3F</code> 是 <code>?</code> 的转义<br>如果不转义的话那么最终的结果就是<code>username=foo&amp;bar&amp;password=1=2?</code>，此时浏览器就懵逼了。导致数据解析出错。<br><img src="/../images/x-www-form-url-encoded2.png" alt="alt text"></li>
</ul>
<p>那么到底哪些字符需要编码呢？参考这里：<a href="http://www.blooberry.com/indexdot/html/topics/urlencoding.htm">http://www.blooberry.com/indexdot/html/topics/urlencoding.htm</a></p>
<h2 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart&#x2F;form-data"></a>multipart&#x2F;form-data</h2><h2 id="application-json"><a href="#application-json" class="headerlink" title="application&#x2F;json"></a>application&#x2F;json</h2><h2 id="text-plain"><a href="#text-plain" class="headerlink" title="text&#x2F;plain"></a>text&#x2F;plain</h2><h2 id="references"><a href="#references" class="headerlink" title="references"></a>references</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">MDN - HTTP Headers</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type">MDN - Content-Type</a></li>
</ul>
]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>http</tag>
        <tag>content-type</tag>
      </tags>
  </entry>
  <entry>
    <title>http-version-history</title>
    <url>/2024/11/16/http-version-history/</url>
    <content><![CDATA[<h1 id="The-version-history-of-HTTP"><a href="#The-version-history-of-HTTP" class="headerlink" title="The version history of HTTP"></a>The version history of HTTP</h1><table>
<thead>
<tr>
<th>Version</th>
<th>Year introduced</th>
<th>Current status</th>
<th>Usage in August 2024</th>
<th>Support in August 2024</th>
</tr>
</thead>
<tbody><tr>
<td>HTTP&#x2F;0.9</td>
<td>1991</td>
<td><span style="background-color:rgb(164, 12, 12);">Obsolete</span></td>
<td>0</td>
<td>100%</td>
</tr>
<tr>
<td>HTTP&#x2F;1.0</td>
<td>1996</td>
<td><span style="background-color:rgb(164, 12, 12);">Obsolete</span></td>
<td>0</td>
<td>100%</td>
</tr>
<tr>
<td>HTTP&#x2F;1.1</td>
<td>1997</td>
<td>Standard</td>
<td>33.8%</td>
<td>100%</td>
</tr>
<tr>
<td>HTTP&#x2F;2</td>
<td>2015</td>
<td>Standard</td>
<td>35.3%</td>
<td>66.2%</td>
</tr>
<tr>
<td>HTTP&#x2F;3</td>
<td>2022</td>
<td>Standard</td>
<td>30.9%</td>
<td>30.9%</td>
</tr>
</tbody></table>
<h2 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP&#x2F;0.9"></a>HTTP&#x2F;0.9</h2><p>HTTP&#x2F;0.9 is the first version of the HTTP protocol. It was a simple protocol that allowed clients to request a file from a server. The server would then send the file back to the client. The protocol did not support headers or status codes, and the client and server communicated using plain text.</p>
<h2 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP&#x2F;1.0"></a>HTTP&#x2F;1.0</h2><p>HTTP&#x2F;1.0 was released in 1996 and introduced several new features to the protocol. These features included support for headers, status codes, and the ability to send multiple files in a single request. HTTP&#x2F;1.0 also introduced the concept of persistent connections, which allowed clients to reuse a single connection to send multiple requests.</p>
<h2 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP&#x2F;1.1"></a>HTTP&#x2F;1.1</h2><p>HTTP&#x2F;1.1 was released in 1999 and is the most widely used version of the HTTP protocol today. It introduced several new features, including support for chunked transfer encoding, which allows servers to send data in chunks, and the ability to reuse connections for multiple requests. HTTP&#x2F;1.1 also introduced several new status codes, such as 100 Continue and 206 Partial Content.</p>
<p>Details about HTTP&#x2F;1.1:</p>
<ol>
<li>HTTP&#x2F;1.1 is a text-based protocol.</li>
</ol>
<h2 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP&#x2F;2"></a>HTTP&#x2F;2</h2><p>HTTP&#x2F;2 was released in 2015 and introduced several new features to the protocol. These features included support for multiplexing, which allows clients to send multiple requests over a single connection, and server push, which allows servers to send resources to clients before they are requested. HTTP&#x2F;2 also introduced several new status codes, such as 103 Early Hints and 421 Misdirected Request.</p>
<p>Details about HTTP&#x2F;2:</p>
<ol>
<li>HTTP&#x2F;2 Message is binary, instead of textual.</li>
</ol>
<h2 id="HTTP-3"><a href="#HTTP-3" class="headerlink" title="HTTP&#x2F;3"></a>HTTP&#x2F;3</h2><p>HTTP&#x2F;3 is the latest version of the HTTP protocol and is currently in development. It is based on the QUIC protocol, which is a new transport protocol that is designed to improve the performance of web applications. HTTP&#x2F;3 introduces several new features, including support for multiplexing, which allows clients to send multiple requests over a single connection, and server push, which allows servers to send resources to clients before they are requested. HTTP&#x2F;3 also introduces several new status codes, such as 103 Early Hints and 421 Misdirected Request.</p>
<table>
<thead>
<tr>
<th>Version</th>
<th>Release Date</th>
<th>Feature</th>
<th>Comments</th>
</tr>
</thead>
<tbody><tr>
<td>Http 0.9</td>
<td>1991</td>
<td>只支持Get请求，没有Head，没有Status Code</td>
<td>只支持Plain Text，不支持图片，视频，语音等</td>
</tr>
<tr>
<td>Http 1.0</td>
<td>1996</td>
<td>无状态、短连接，队头阻塞</td>
<td>每个请求都要建立一个TCP连接，请求处理完TCP就关闭。下一个请求必须在前一个请求完成时才能开始，可能导致队头阻塞问题</td>
</tr>
<tr>
<td>Http 1.1</td>
<td>1999</td>
<td><ul><li>持久连接(keep alive)</li><li>请求管道化（pipeling）</li><li>增加缓存处理（新增Cache-Control字段）</li><li>增加Host字段、支持断点续传</li></ul></td>
<td>TCP连接可以复用。客户端可同时发送多个请求，但是服务端仍是一个一个处理，仍然存在队头阻塞问题。</td>
</tr>
<tr>
<td>Http 2.0</td>
<td>2015</td>
<td><ul><li>二进制分帧</li><li>多路复用（或连接共享）</li><li>头部压缩</li><li>服务器推送</li></ul></td>
<td>仍然基于TCP，虽然没有Http队头阻塞，但是有TCP队头阻塞</td>
</tr>
<tr>
<td>Http 3.0</td>
<td>2020</td>
<td>不再基于TCP，而是基于UDP，采用由Google在UDP协议上进行封装而形成的QUIC协议，保证传输的可靠性，并且一路传输失败不影响其他路。</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>history</tag>
        <tag>version</tag>
      </tags>
  </entry>
  <entry>
    <title>http-message</title>
    <url>/2024/11/16/http-message/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>HTTP has two types of messages, request message and response message. Both messages consist of a start line, headers, and an optional body.</p>
<p>Note that, HTTP messages, as defined in HTTP&#x2F;1.1 and earlier, are human-readable. In HTTP&#x2F;2, these messages are embedded into a binary structure, a frame, allowing optimizations like compression of headers and multiplexing.</p>
<h1 id="Request-Message"><a href="#Request-Message" class="headerlink" title="Request Message"></a>Request Message</h1><p><img src="/../images/http-request-message.jpg" alt="http-request-message"><br>Http Request message consists of the following elements:</p>
<ol>
<li>An HTTP method.</li>
<li>The path of the resource to fetch.</li>
<li>The version of the HTTP protocol.</li>
<li>Optional headers.</li>
<li>An optional body.</li>
</ol>
<h1 id="Response-Message"><a href="#Response-Message" class="headerlink" title="Response Message"></a>Response Message</h1><p><img src="/../images/http-response-message.jpg" alt="http-response-message"><br>Http Response message consists of the following elements:</p>
<ol>
<li>The version of the HTTP protocol.</li>
<li>A status code indicating the success or failure of the request.</li>
<li>A status message.</li>
<li>Optional headers.</li>
<li>An optional body.</li>
</ol>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview#http_messages">MDN - HTTP Messages</a></li>
</ol>
]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>request</tag>
        <tag>response</tag>
      </tags>
  </entry>
  <entry>
    <title>interact with jira/confluence rest api with python</title>
    <url>/2023/11/12/interact-with-jira-confluence-rest-api-with-python/</url>
    <content><![CDATA[<h1 id="How-to-interact-Jira-Confluence-REST-API-with-Python"><a href="#How-to-interact-Jira-Confluence-REST-API-with-Python" class="headerlink" title="How to interact Jira&#x2F;Confluence REST API with Python"></a>How to interact Jira&#x2F;Confluence REST API with Python</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># Jira API endpoint and authentication</span></span><br><span class="line">jira_url = <span class="string">&quot;https://your-jira-instance/rest/api/2/search&quot;</span></span><br><span class="line">jira_token = <span class="string">&quot;your-jira-personal-access-token&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Confluence API endpoint and authentication</span></span><br><span class="line">confluence_url = <span class="string">&quot;https://your-confluence-instance/rest/api/content&quot;</span></span><br><span class="line">confluence_token = <span class="string">&quot;your-confluence-personal-access-token&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 1: Get stories from Jira</span></span><br><span class="line">jira_headers = &#123;</span><br><span class="line">    <span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;Bearer <span class="subst">&#123;jira_token&#125;</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jira_params = &#123;</span><br><span class="line">    <span class="string">&quot;jql&quot;</span>: <span class="string">&quot;labels = release&quot;</span>,</span><br><span class="line">    <span class="string">&quot;maxResults&quot;</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(jira_url, headers=jira_headers, params=jira_params)</span><br><span class="line">jira_stories = response.json()[<span class="string">&quot;issues&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 2: Create a new Confluence page</span></span><br><span class="line">confluence_headers = &#123;</span><br><span class="line">    <span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;Bearer <span class="subst">&#123;confluence_token&#125;</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">confluence_payload = &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;page&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Release Stories&quot;</span>,</span><br><span class="line">    <span class="string">&quot;space&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;key&quot;</span>: <span class="string">&quot;your-space-key&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;storage&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;value&quot;</span>: <span class="string">&quot;&lt;h2&gt;Release Stories&lt;/h2&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;representation&quot;</span>: <span class="string">&quot;storage&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(confluence_url, headers=confluence_headers, json=confluence_payload)</span><br><span class="line">confluence_page_id = response.json()[<span class="string">&quot;id&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 3: Add the stories to the Confluence page</span></span><br><span class="line"><span class="keyword">for</span> story <span class="keyword">in</span> jira_stories:</span><br><span class="line">    story_title = story[<span class="string">&quot;fields&quot;</span>][<span class="string">&quot;summary&quot;</span>]</span><br><span class="line">    story_description = story[<span class="string">&quot;fields&quot;</span>][<span class="string">&quot;description&quot;</span>]</span><br><span class="line"></span><br><span class="line">    confluence_payload[<span class="string">&quot;body&quot;</span>][<span class="string">&quot;storage&quot;</span>][<span class="string">&quot;value&quot;</span>] += <span class="string">f&quot;&lt;h3&gt;<span class="subst">&#123;story_title&#125;</span>&lt;/h3&gt;&lt;p&gt;<span class="subst">&#123;story_description&#125;</span>&lt;/p&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">response = requests.put(<span class="string">f&quot;<span class="subst">&#123;confluence_url&#125;</span>/<span class="subst">&#123;confluence_page_id&#125;</span>&quot;</span>, headers=confluence_headers, json=confluence_payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 4: Verify the response</span></span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Page created successfully!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Failed to create the page.&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>Here is another example with Excel export support</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Color, PatternFill, Font</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line">start_date = <span class="string">&#x27;2021-05-29&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_issue_list</span>():</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Basic YOUR_TOKEN&#x27;</span>&#125;</span><br><span class="line">    project = <span class="string">&#x27;YOUR_PROJECT&#x27;</span></span><br><span class="line">    issue_type = <span class="string">&#x27;Story&#x27;</span></span><br><span class="line">    sprint = <span class="string">&#x27;YOUR_SPRINT_ID&#x27;</span></span><br><span class="line">    order_by = <span class="string">&#x27;key&#x27;</span></span><br><span class="line">    order_by_type = <span class="string">&#x27;ASC&#x27;</span></span><br><span class="line">    jql = <span class="string">f&#x27;project = <span class="subst">&#123;project&#125;</span> AND issuetype = <span class="subst">&#123;issue_type&#125;</span> AND Sprint = <span class="subst">&#123;sprint&#125;</span> AND created &gt;= <span class="subst">&#123;start_date&#125;</span> ORDER BY <span class="subst">&#123;order_by&#125;</span> <span class="subst">&#123;order_by_type&#125;</span>&#x27;</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;jql&#x27;</span>: jql,</span><br><span class="line">        <span class="string">&#x27;fields&#x27;</span>: [<span class="string">&#x27;summary&#x27;</span>, <span class="string">&#x27;created&#x27;</span>, <span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;priority&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">f&#x27;https://jira.xxx.com/rest/agile/1.0/sprint/<span class="subst">&#123;sprint&#125;</span>/issue&#x27;</span></span><br><span class="line">    r = requests.get(url, headers=headers, params=params)</span><br><span class="line">    <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_response</span>(<span class="params">response</span>):</span><br><span class="line">    issue_list = []</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> issue <span class="keyword">in</span> response[<span class="string">&#x27;issues&#x27;</span>]:</span><br><span class="line">        created = <span class="built_in">str</span>(issue[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;created&#x27;</span>]).split(<span class="string">&#x27;T&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        due_date = datetime.date.fromisoformat(created) + timedelta(<span class="number">2</span>)</span><br><span class="line">        issue_item = &#123;<span class="string">&#x27;id&#x27;</span>: i, <span class="string">&#x27;issue key&#x27;</span>: issue[<span class="string">&#x27;key&#x27;</span>],</span><br><span class="line">                      <span class="string">&#x27;summary&#x27;</span>: issue[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;summary&#x27;</span>],</span><br><span class="line">                      <span class="string">&#x27;status&#x27;</span>: issue[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;status&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">                      <span class="string">&#x27;priority&#x27;</span>: issue[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;priority&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">                      <span class="string">&#x27;created&#x27;</span>: created,</span><br><span class="line">                      <span class="string">&#x27;due date&#x27;</span>: due_date&#125;</span><br><span class="line">        issue_list.append(issue_item)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> issue_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">issue_mapping</span>(<span class="params">issue_list</span>):</span><br><span class="line">    new_issue_list = []</span><br><span class="line"></span><br><span class="line">    priority_mapping = &#123;</span><br><span class="line">        <span class="string">&#x27;Low&#x27;</span>: <span class="string">&#x27;Minor&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Medium&#x27;</span>: <span class="string">&#x27;Minor&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;High&#x27;</span>: <span class="string">&#x27;Major&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    status_mapping = &#123;</span><br><span class="line">        <span class="string">&#x27;To Do&#x27;</span>: <span class="string">&#x27;Open&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> issue <span class="keyword">in</span> issue_list:</span><br><span class="line">        <span class="keyword">if</span> issue[<span class="string">&#x27;priority&#x27;</span>] <span class="keyword">in</span> priority_mapping:</span><br><span class="line">            issue[<span class="string">&#x27;priority&#x27;</span>] = priority_mapping[issue[<span class="string">&#x27;priority&#x27;</span>]]</span><br><span class="line">        <span class="keyword">if</span> issue[<span class="string">&#x27;status&#x27;</span>] <span class="keyword">in</span> status_mapping:</span><br><span class="line">            issue[<span class="string">&#x27;status&#x27;</span>] = status_mapping[issue[<span class="string">&#x27;status&#x27;</span>]]</span><br><span class="line">        new_issue_list.append(issue)</span><br><span class="line">    <span class="keyword">return</span> new_issue_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_to_excel</span>(<span class="params">issue_list</span>):</span><br><span class="line">    issue_list = issue_mapping(issue_list)</span><br><span class="line">    workbook = Workbook()</span><br><span class="line">    sheet = workbook.active</span><br><span class="line">    sheet.title = <span class="string">&#x27;jira issue&#x27;</span></span><br><span class="line">    sheet.append([<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;issue key&#x27;</span>, <span class="string">&#x27;summary&#x27;</span>, <span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;priority&#x27;</span>, <span class="string">&#x27;created&#x27;</span>, <span class="string">&#x27;due date&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set color for header</span></span><br><span class="line">    <span class="keyword">for</span> rows <span class="keyword">in</span> sheet.iter_rows(min_row=<span class="number">1</span>, max_row=<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> cell <span class="keyword">in</span> rows:</span><br><span class="line">            cell.fill = PatternFill(fgColor=<span class="string">&quot;002060&quot;</span>, fill_type=<span class="string">&quot;solid&quot;</span>)</span><br><span class="line">            cell.font = Font(color=<span class="string">&quot;FFFFFF&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> issue <span class="keyword">in</span> issue_list:</span><br><span class="line">        sheet.append(<span class="built_in">list</span>(issue.values()))</span><br><span class="line">    <span class="comment"># fill in color</span></span><br><span class="line">    my_red = Color(rgb=<span class="string">&#x27;00B050&#x27;</span>)</span><br><span class="line">    my_fill = PatternFill(patternType=<span class="string">&#x27;solid&#x27;</span>, fgColor=my_red)</span><br><span class="line">    <span class="keyword">for</span> row_cells <span class="keyword">in</span> sheet.iter_rows(min_row=<span class="number">1</span>, max_row=sheet.max_row):</span><br><span class="line">        <span class="keyword">if</span> row_cells[<span class="number">3</span>].value == <span class="string">&#x27;Done&#x27;</span>:</span><br><span class="line">            row_cells[<span class="number">3</span>].fill = my_fill</span><br><span class="line"></span><br><span class="line">    file_name = <span class="string">&#x27;report_issue_list_&#x27;</span> + start_date + <span class="string">&#x27;.xlsx&#x27;</span></span><br><span class="line">    workbook.save(file_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = get_issue_list()</span><br><span class="line">issue_list = parse_response(response)</span><br><span class="line">write_to_excel(issue_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Done&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><p><a href="https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/">https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/</a></p>
<p><a href="https://developer.atlassian.com/cloud/jira/software/rest/api-group-sprint/">The Jira Software Cloud REST API</a></p>
<p><a href="https://docs.atlassian.com/software/jira/docs/api/REST/7.12.0/#api/2/search-searchUsingSearchRequest">JIRA 7.12.0</a></p>
]]></content>
      <categories>
        <category>jira</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>jira</tag>
        <tag>confluence</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Array operations</title>
    <url>/2023/06/17/javaScrip-array-operations/</url>
    <content><![CDATA[<h1 id="Array-operations"><a href="#Array-operations" class="headerlink" title="Array operations"></a>Array operations</h1><h2 id="Create-array"><a href="#Create-array" class="headerlink" title="Create array"></a>Create array</h2><h3 id="Array-constructor"><a href="#Array-constructor" class="headerlink" title="Array constructor"></a>Array constructor</h3><p>ES5中Array的构造函数语法比较混乱，传入不同的值会得到不同的结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1); <span class="comment">// [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a3 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a3); <span class="comment">// [&#x27;2&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2); <span class="comment">// [undefined, undefined], why?</span></span><br></pre></td></tr></table></figure>
<p>通常情况下，Array的构造函数就是根据传入的参数初始化数组，只有一种情况例外：当且仅当传入一个number类型的参数时。此时，构造函数会创建一个指定长度的数组，而不是包含一个元素的数组。比如上面的数组<code>a2</code>，它的长度是2，且两个元素都是undefined，而不是一个包含数字2的数组。这种行为是不符合直觉的，</p>
<p>注意：在实际编程中，我们一般不使用Array构造函数来创建数组，而是使用数组字面量的方式<code>[]</code>来创建数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = [<span class="string">&#x27;2&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// [&#x27;2&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = [<span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// [2]</span></span><br></pre></td></tr></table></figure>

<p>为了解决Array constructor这种混乱，ES6引入了<code>Array.of</code>和<code>Array.from</code>方法。</p>
<h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a>Array.of</h3><p><code>Array.of</code>方法用于创建一个具有可变数量参数的数组实例，用户传入什么，就用什么创建数组，简单明了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1); <span class="comment">// [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a2 = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2); <span class="comment">// [&#x27;2&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a3 = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a3); <span class="comment">// [2]</span></span><br></pre></td></tr></table></figure>
<h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h3><p>既然有了<code>Array.of</code>，那么为啥还需要<code>Array.from</code>呢？<code>Array.from</code>主要是用于将其他类型转换为数组的。可以转换的类型有：</p>
<ul>
<li>Array-like objects (<code>arguments</code> in function or <code>NodeList</code> from DOM)</li>
<li>Iterable objects (Set, Map, String, etc.)</li>
</ul>
<h4 id="Array-like-objects"><a href="#Array-like-objects" class="headerlink" title="Array-like objects"></a>Array-like objects</h4><p>在ES6之前，把Array-like objects转换为数组大致有两种方式：</p>
<ol>
<li>逐个元素复制，因为Array-like objects有<code>length</code>属性且可用下标迭代。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(args[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用<code>Array.prototype.slice.call(arguments)</code>，这种方式更简洁。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br></pre></td></tr></table></figure>
<p>ES6之后，我们可以使用<code>Array.from</code>来转换Array-like objects为数组。<br>下面是一个求和函数，函数<code>sum</code>的参数是一个类数组对象，我们可以使用<code>Array.from</code>将其转换为数组，并累加求和。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Array-like objects</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<p>当然，更好的写法是使用扩展运算符<code>...</code>，这样更简洁。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<h4 id="Iterable-objects"><a href="#Iterable-objects" class="headerlink" title="Iterable objects"></a>Iterable objects</h4><p>下面是一个将字符串转换为数组的例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>将Set转换为数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(set);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<p>将Map转换为数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>], [<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>], [<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>]]);</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(map);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [[1, &#x27;one&#x27;], [2, &#x27;two&#x27;], [3, &#x27;three&#x27;]]</span></span><br></pre></td></tr></table></figure>

<p>注意：<code>Array.from</code>方法的第二个参数是一个map函数，可以对数组中的每个元素进行处理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 4, 9]</span></span><br></pre></td></tr></table></figure>

<h2 id="Search-in-array"><a href="#Search-in-array" class="headerlink" title="Search in array"></a>Search in array</h2><p>Please see this blog post: <a href="https://zdd.github.io/2024/12/13/javascript-search-in-array/">JavaScript Search in Array</a></p>
<h2 id="插入，删除，替换数组元素"><a href="#插入，删除，替换数组元素" class="headerlink" title="插入，删除，替换数组元素"></a>插入，删除，替换数组元素</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert 6 at index 2</span></span><br><span class="line">numbers.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers); <span class="comment">// [1, 2, 6, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// remove 2 elements starting from index 3</span></span><br><span class="line">numbers.<span class="title function_">splice</span>(<span class="number">3</span>, <span class="number">2</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers); <span class="comment">// [1, 2, 6, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// replace 1 element at index 2 with 7</span></span><br><span class="line">numbers.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers); <span class="comment">// [1, 2, 7, 5]</span></span><br></pre></td></tr></table></figure>

<h2 id="获取最后一个元素"><a href="#获取最后一个元素" class="headerlink" title="获取最后一个元素"></a>获取最后一个元素</h2><h3 id="使用length属性"><a href="#使用length属性" class="headerlink" title="使用length属性"></a>使用<code>length</code>属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers[numbers.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<h3 id="使用slice方法"><a href="#使用slice方法" class="headerlink" title="使用slice方法"></a>使用<code>slice</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers.<span class="title function_">slice</span>(-<span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<h3 id="使用at方法："><a href="#使用at方法：" class="headerlink" title="使用at方法："></a>使用<code>at</code>方法：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers.<span class="title function_">at</span>(-<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<p>原本JavaScript并不支持负值索引，但是有了<code>at</code>方法后，则可以使用负值索引。<br>注意<code>at</code>方法需要新版的浏览器和Node.js支持，详情看这里：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at</a></p>
<h3 id="截取数组的一部分"><a href="#截取数组的一部分" class="headerlink" title="截取数组的一部分"></a>截取数组的一部分</h3><h4 id="使用slice方法-1"><a href="#使用slice方法-1" class="headerlink" title="使用slice方法"></a>使用<code>slice</code>方法</h4><p><code>slice</code> return a shallow copy of a portion of an array into a new array object selected from <code>begin</code> to <code>end</code> (not included). The original array will not be modified.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure>

<h2 id="合并两个数组"><a href="#合并两个数组" class="headerlink" title="合并两个数组"></a>合并两个数组</h2><h3 id="使用concat方法"><a href="#使用concat方法" class="headerlink" title="使用concat方法"></a>使用<code>concat</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers1.<span class="title function_">concat</span>(numbers2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure>
<h3 id="使用扩展运算符"><a href="#使用扩展运算符" class="headerlink" title="使用扩展运算符"></a>使用扩展运算符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">const</span> result = [...numbers1, ...numbers2];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure>
<h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><h3 id="使用Set对象"><a href="#使用Set对象" class="headerlink" title="使用Set对象"></a>使用<code>Set</code>对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(numbers)];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<h3 id="使用filter方法"><a href="#使用filter方法" class="headerlink" title="使用filter方法"></a>使用<code>filter</code>方法</h3><p>这个方法比较巧妙，对于数组中的某个元素item，如果它在数组中的索引等于它第一次出现的索引，那么就保留它，否则就过滤掉。如果数组中有重复元素，在使用indexOf查找其下标时，会返回第一个出现的下标。这会导致indexOf(item) !&#x3D;&#x3D; index，所以重复元素会被过滤掉。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> numbers.<span class="title function_">indexOf</span>(item) === index);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<h3 id="使用reduce方法"><a href="#使用reduce方法" class="headerlink" title="使用reduce方法"></a>使用<code>reduce</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc.<span class="title function_">includes</span>(cur) ? acc : [...acc, cur], []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<h2 id="数组diff"><a href="#数组diff" class="headerlink" title="数组diff"></a>数组diff</h2><h3 id="使用filter方法-1"><a href="#使用filter方法-1" class="headerlink" title="使用filter方法"></a>使用<code>filter</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers1.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !numbers2.<span class="title function_">includes</span>(item));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure>
<h3 id="使用reduce方法-1"><a href="#使用reduce方法-1" class="headerlink" title="使用reduce方法"></a>使用<code>reduce</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers1.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> numbers2.<span class="title function_">includes</span>(cur) ? acc : [...acc, cur], []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure>
<h2 id="数组交集"><a href="#数组交集" class="headerlink" title="数组交集"></a>数组交集</h2><h3 id="使用filter方法-2"><a href="#使用filter方法-2" class="headerlink" title="使用filter方法"></a>使用<code>filter</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers1.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> numbers2.<span class="title function_">includes</span>(item));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<h3 id="使用reduce方法-2"><a href="#使用reduce方法-2" class="headerlink" title="使用reduce方法"></a>使用<code>reduce</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> result = numbers1.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> numbers2.<span class="title function_">includes</span>(cur) ? [...acc, cur] : acc, []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<h2 id="数组并集"><a href="#数组并集" class="headerlink" title="数组并集"></a>数组并集</h2><h3 id="使用Set对象-1"><a href="#使用Set对象-1" class="headerlink" title="使用Set对象"></a>使用<code>Set</code>对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>([...numbers1, ...numbers2])];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>
<h3 id="使用filter方法-3"><a href="#使用filter方法-3" class="headerlink" title="使用filter方法"></a>使用<code>filter</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> result = [...numbers1, ...numbers2].<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> arr.<span class="title function_">indexOf</span>(item) === index);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>
<h3 id="使用reduce方法-3"><a href="#使用reduce方法-3" class="headerlink" title="使用reduce方法"></a>使用<code>reduce</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> result = [...numbers1, ...numbers2].<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc.<span class="title function_">includes</span>(cur) ? acc : [...acc, cur], []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>
<h2 id="数组差集"><a href="#数组差集" class="headerlink" title="数组差集"></a>数组差集</h2><h3 id="使用filter方法-4"><a href="#使用filter方法-4" class="headerlink" title="使用filter方法"></a>使用<code>filter</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> result = [...numbers1, ...numbers2].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !numbers1.<span class="title function_">includes</span>(item) || !numbers2.<span class="title function_">includes</span>(item));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 6, 7]</span></span><br></pre></td></tr></table></figure>
<h3 id="使用reduce方法-4"><a href="#使用reduce方法-4" class="headerlink" title="使用reduce方法"></a>使用<code>reduce</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> numbers2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> result = [...numbers1, ...numbers2].<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> numbers1.<span class="title function_">includes</span>(cur) &amp;&amp; numbers2.<span class="title function_">includes</span>(cur) ? acc : [...acc, cur], []); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 6, 7]</span></span><br></pre></td></tr></table></figure>

<h2 id="打平数组"><a href="#打平数组" class="headerlink" title="打平数组"></a>打平数组</h2><h3 id="使用flat方法"><a href="#使用flat方法" class="headerlink" title="使用flat方法"></a>使用<code>flat</code>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>]]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result1 = numbers.<span class="title function_">flat</span>(); <span class="comment">// 默认只展开一层</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1); <span class="comment">// [ 1, 2, 3, 4, [ 5, 6, [ 7, 8 ] ] ]; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result2 = numbers.<span class="title function_">flat</span>(<span class="number">2</span>); <span class="comment">// 展开两层</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2); <span class="comment">// [1, 2, 3, 4, 5, 6, [7, 8]]; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = numbers.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>); <span class="comment">// Infinity 表示展开所有层级</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
        <category>array</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-always-use-arrow-function-in-setTimeout</title>
    <url>/2024/10/03/javascript-always-use-arrow-function-in-settimeout/</url>
    <content><![CDATA[<h2 id="A-question-from-stackoverflow"><a href="#A-question-from-stackoverflow" class="headerlink" title="A question from stackoverflow"></a>A question from stackoverflow</h2><p>The following code does not work, do you know why? When you run the code, you will got the error <code>TypeError: Cannot read properties of undefined (reading &#39;navigate&#39;)</code>.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, <span class="title class_">OnInit</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Router</span>, <span class="title class_">RouterOutlet</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">TestComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./test/test.component&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterOutlet</span>, <span class="title class_">TestComponent</span>],</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrl</span>: <span class="string">&#x27;./app.component.scss&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  title = <span class="string">&#x27;angular-18&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">router</span>: <span class="title class_">Router</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">gotoProduct</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([<span class="string">&#x27;product&#x27;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="variable language_">this</span>.<span class="property">gotoProduct</span>, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Reason:<br><code>Code executed by setTimeout() is called from an execution context separate from the function from which setTimeout was called. The usual rules for setting the this keyword for the called function apply, and if you have not set this in the call or with bind, it will default to the window (or global) object, even in strict mode. It will not be the same as the this value for the function that called setTimeout.</code> - From <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout#the_this_problem">MDN- The this problem for setTimeout</a></p>
<p>That means <code>router</code> is undefined in <code>gotoProduct</code> function. The reason is that <code>this</code> in <code>gotoProduct</code> function is not the instance of <code>AppComponent</code>. It is the instance of <code>Window</code> object. </p>
<p>How to fix it?</p>
<h2 id="Use-Arrow-function"><a href="#Use-Arrow-function" class="headerlink" title="Use Arrow function"></a>Use Arrow function</h2><p>Arrow function doesn’t have its own this binding, it will inherit the <code>this</code> from the parent scope. So, you can use arrow function in <code>setTimeout</code> function to keep the context of the parent scope.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">gotoProduct</span>();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Use-bind"><a href="#Use-bind" class="headerlink" title="Use bind"></a>Use <code>bind</code></h2><p>You can also use <code>bind</code> function to bind the <code>this</code> to the <code>gotoProduct</code> function.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="variable language_">this</span>.<span class="property">gotoProduct</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Becareful when using <code>setTimeout</code> function in <code>Angular</code>.<br>Always use arrow function in <code>setTimeout</code> function to keep the context of the parent scope.</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>angular</tag>
        <tag>arrow function</tag>
        <tag>settimeout</tag>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-arguments</title>
    <url>/2024/12/13/javascript-arguments/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>arguments</code>是一个类数组对象，包含了函数调用时传入的所有参数。<code>arguments</code>对象只有在函数内部才可以使用。</p>
<h2 id="访问arguments对象"><a href="#访问arguments对象" class="headerlink" title="访问arguments对象"></a>访问arguments对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>], <span class="variable language_">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// output: 1 2</span></span><br></pre></td></tr></table></figure>

<h2 id="通过arguments对象可以改变函数参数的值"><a href="#通过arguments对象可以改变函数参数的值" class="headerlink" title="通过arguments对象可以改变函数参数的值"></a>通过arguments对象可以改变函数参数的值</h2><ol>
<li>改变arguments时，函数参数的值也会改变。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">arguments</span>[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// output: 10</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>改变函数参数时，arguments对象的值也会改变。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  a = <span class="number">10</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// output: 10</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>argument</tag>
        <tag>arguments</tag>
        <tag>array-like</tag>
      </tags>
  </entry>
  <entry>
    <title>Array-like object</title>
    <url>/2023/07/01/javascript-array-like-object/</url>
    <content><![CDATA[<h2 id="What-is-array-like-object"><a href="#What-is-array-like-object" class="headerlink" title="What is array-like object?"></a>What is array-like object?</h2><p>Array-like object is an object that has a <code>length</code> property and indexed elements. For example, <code>arguments</code> is an array-like object.</p>
<p>Has indexed access to the elements and a non-negative length property to know the number of elements in it. These are the only similarities it has with an array.<br>Doesn’t have any of the Array methods like push, pop, join, map, etc.</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayLike = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayLike[<span class="number">1</span>]); <span class="comment">// &#x27;b&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayLike.<span class="property">length</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayLike.<span class="property">push</span>); <span class="comment">// Uncaught TypeError: arrayLike.push is not a function</span></span><br></pre></td></tr></table></figure>

<h2 id="What-is-the-difference-between-array-and-array-like-object"><a href="#What-is-the-difference-between-array-and-array-like-object" class="headerlink" title="What is the difference between array and array-like object?"></a>What is the difference between array and array-like object?</h2><table>
<thead>
<tr>
<th>类型</th>
<th>length属性</th>
<th>索引访问</th>
<th>有Array.prototype方法</th>
</tr>
</thead>
<tbody><tr>
<td>Array</td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>Array-like object</td>
<td>✔️</td>
<td>✔️</td>
<td>❌</td>
</tr>
</tbody></table>
<h2 id="Which-type-in-JavaScript-is-array-like-object"><a href="#Which-type-in-JavaScript-is-array-like-object" class="headerlink" title="Which type in JavaScript is array-like object?"></a>Which type in JavaScript is array-like object?</h2><p>There are many types in JavaScript are array-like object, including:</p>
<ol>
<li><code>arguments</code> in a function</li>
<li><code>NodeList</code>(and other DOM collections)</li>
<li><code>HTMLCollection</code></li>
</ol>
<h3 id="arguments-in-a-function"><a href="#arguments-in-a-function" class="headerlink" title="arguments in a function"></a>arguments in a function</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br></pre></td></tr></table></figure>

<h3 id="NodeList-and-other-DOM-collections"><a href="#NodeList-and-other-DOM-collections" class="headerlink" title="NodeList(and other DOM collections)"></a>NodeList(and other DOM collections)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nodeList = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nodeList); <span class="comment">// NodeList(3) [div, div, div]</span></span><br></pre></td></tr></table></figure>

<h3 id="HTMLCollection"><a href="#HTMLCollection" class="headerlink" title="HTMLCollection"></a>HTMLCollection</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> htmlCollection = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;container&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(htmlCollection); <span class="comment">// HTMLCollection(3) [div.container, div.container, div.container]</span></span><br></pre></td></tr></table></figure>

<h2 id="How-to-convert-array-like-object-to-array"><a href="#How-to-convert-array-like-object-to-array" class="headerlink" title="How to convert array-like object to array?"></a>How to convert array-like object to array?</h2><p>There are several ways to convert array-like object to array.</p>
<h3 id="Array-from-…"><a href="#Array-from-…" class="headerlink" title="Array.from(…)"></a>Array.from(…)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayLike = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> array = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="Use-ES6-spread-operator"><a href="#Use-ES6-spread-operator" class="headerlink" title="Use ES6 spread operator"></a>Use ES6 spread operator</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayLike = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> array = [...arrayLike];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="Array-prototype-slice-call-…"><a href="#Array-prototype-slice-call-…" class="headerlink" title="Array.prototype.slice.call(…)"></a>Array.prototype.slice.call(…)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayLike = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> array = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(arrayLike);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><ol>
<li>Array-like object is an object that has a <code>length</code> property</li>
<li>Array-like object has indexed access to the elements, you access the elements by using <code>arrayLike[n]</code></li>
<li>Array-like object doesn’t have any of the Array methods like push, pop, join, map, etc.</li>
<li>You can convert array-like object to array by using <code>Array.from(...)</code>, ES6 spread operator or <code>Array.prototype.slice.call(...)</code>.</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
        <category>array</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>array-like</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-array-reduce</title>
    <url>/2024/11/13/javascript-array-reduce/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>reduce()</code> is a very import method in JavaScript, it executes a reducer function (that you provide) on each element of the array, resulting in a single output value.</p>
<p>Here is the syntax of <code>reduce()</code> method:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">reduce</span>(callbackFn)</span><br><span class="line"><span class="title function_">reduce</span>(callbackFn, initialValue)</span><br></pre></td></tr></table></figure>

<p>Most of the time, <code>reduce()</code> is used to sum up the values in an array, but it can be used for many other things as well.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> sum = nums.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, c</span>) =&gt;</span> a + c);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br></pre></td></tr></table></figure>

<p>Why we use <code>a</code> and <code>c</code> for the parameters of the reducer function, because a &#x3D; accumulator, c &#x3D; currentValue.</p>
<p>Each call to the reducer produces a new value, and this value is passed to the next call of the reducer as the accumulator(first argument). Otherwise, a will become <code>undefined</code> in the next call.</p>
<p>Note that you <code>must return value from the callbackFn</code>, otherwise the result will be <code>undefined</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> sum = nums.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, c</span>) =&gt;</span> &#123;a + c&#125;); <span class="comment">// won&#x27;t work since we didn&#x27;t return the value</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// undefined.</span></span><br></pre></td></tr></table></figure>

<p>I found this when I working on the following work, group the following inventory by type property:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> inventory = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;asparagus&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;vegetables&#x27;</span>, <span class="attr">quantity</span>: <span class="number">5</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;bananas&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;fruit&#x27;</span>, <span class="attr">quantity</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;goat&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;meat&#x27;</span>, <span class="attr">quantity</span>: <span class="number">23</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;cherries&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;fruit&#x27;</span>, <span class="attr">quantity</span>: <span class="number">5</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;fish&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;meat&#x27;</span>, <span class="attr">quantity</span>: <span class="number">22</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>The output should look like this:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">vegetables</span>: [ &#123; <span class="attr">name</span>: <span class="string">&#x27;asparagus&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;vegetables&#x27;</span>, <span class="attr">quantity</span>: <span class="number">5</span> &#125; ],</span><br><span class="line">  <span class="attr">fruit</span>: [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;bananas&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;fruit&#x27;</span>, <span class="attr">quantity</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;cherries&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;fruit&#x27;</span>, <span class="attr">quantity</span>: <span class="number">5</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">meat</span>: [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;goat&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;meat&#x27;</span>, <span class="attr">quantity</span>: <span class="number">23</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;fish&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;meat&#x27;</span>, <span class="attr">quantity</span>: <span class="number">22</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>I write the following code, but got and error: <code>TypeError: Cannot read properties of undefined (reading &#39;fruit&#39;)</code>, do you know why?</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">groupByType</span>(<span class="params">inventory</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> inventory.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, c</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> type = c.<span class="property">type</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[type]) &#123;</span><br><span class="line">      a[type].<span class="title function_">push</span>(c);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      a[type] = [c];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">groupByType</span>(inventory);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure>

<p>I forgot the return a inside the callback function, so the <code>a</code> will be <code>undefined</code> in the next call, and <code>undefined</code> doesn’t have the property <code>fruit</code>.</p>
<p>To fix it, add <code>return a</code> at the end of the callback function.</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>array</tag>
        <tag>reduce</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-apply-call-bind</title>
    <url>/2024/04/14/javascript-apply-call-bind/</url>
    <content><![CDATA[<p>在JavaScript中,<code>apply</code>, <code>call</code>, <code>bind</code>是三个非常重要的方法，它们的一个重要作用是在调用函数时改变<code>this</code>的值。<strong>注意：箭头函数的this值无法修改。</strong></p>
<ol>
<li>Function.prototype.apply()</li>
<li>Function.prototype.call()</li>
<li>Function.prototype.bind()</li>
</ol>
<h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><p>假设我们有一个函数用来计算两数之和：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以正常调用这个函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>也可以使用<code>apply</code>方法来调用这个函数，第一个参数是<code>this</code>的值，第二个参数是一个数组，数组中的元素是函数的参数。这里我们不需要<code>this</code>，所以第一个参数传入<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">add.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><p><code>call</code>方法和<code>apply</code>方法类似，只是参数的传递方式不同，<code>call</code>方法的参数是一个个传递的，而不是通过数组传递。还是以上面的求和函数为例，使用<code>call</code>方法调用，第一个参数是<code>this</code>的值，后面的参数是函数的参数。这里我们不需要<code>this</code>，所以第一个参数传入<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">add.<span class="title function_">call</span>(<span class="literal">null</span>, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p><code>bind</code>的调用方式与<code>call</code>类似，参数也是一个一个传递的。但是与<code>call</code>和<code>apply</code>直接调用函数不同，<code>bind</code>会创建一个新的函数并返回该函数，所以在使用<code>bind</code>时，我们通常会用一个变量接收<code>bind</code>返回的函数，再通过这个变量调用函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fn.<span class="title function_">call</span>(thisValue, arg1, arg2, ...);</span><br><span class="line">fn.<span class="title function_">apply</span>(thisValue, [arg1, arg2, ...]);</span><br><span class="line">fn.<span class="title function_">bind</span>(thisValue)(arg1, arg2, ...);</span><br></pre></td></tr></table></figure>

<p>还记得前面的例子吗？将对象方法赋值给普通函数时，this指向了全局对象，而全局对象上没有<code>name</code>属性，所以输出<code>undefined</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Philip&#x27;</span>,</span><br><span class="line">  <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sayName = person.<span class="property">sayName</span>;</span><br><span class="line"><span class="title function_">sayName</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>我们只要用<code>bind</code>修改一下<code>this</code>，让它绑定到person对象，就可以输出<code>Philip</code>了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Philip&#x27;</span>,</span><br><span class="line">  <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过sayName接收bind返回的函数。</span></span><br><span class="line"><span class="keyword">const</span> sayName = person.<span class="property">sayName</span>.<span class="title function_">bind</span>(person);</span><br><span class="line"><span class="title function_">sayName</span>(); <span class="comment">// Philip</span></span><br></pre></td></tr></table></figure>

<h2 id="call-apply-bind的使用场景"><a href="#call-apply-bind的使用场景" class="headerlink" title="call, apply, bind的使用场景"></a><code>call</code>, <code>apply</code>, <code>bind</code>的使用场景</h2><p>我们知道，函数中有一个隐含对象<code>arguments</code>，包含了函数调用时传入的所有参数。它是一个类数组对象，我们无法对它使用数组的方法，比如<code>map</code>, <code>filter</code>, <code>reduce</code>等。但是我们可以通过<code>call</code>, <code>apply</code>, <code>bind</code>方法将数组的方法应用到<code>arguments</code>上。</p>
<p>比如下面这个求和函数，在函数体内部，我们可以使用<code>reduce</code>方法来计算所有参数的和。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">reduce</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，上面的例子仅作演示只用，一个更加规范的写法是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再看一个class中使用bind的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CountDown</span> &#123;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">  interval = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">count</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> = count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">decrement</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">count</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">count</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line">      <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">interval</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interval</span> = <span class="built_in">setInterval</span>(<span class="variable language_">this</span>.<span class="property">decrement</span>, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> <span class="title class_">CountDown</span>(<span class="number">10</span>);</span><br><span class="line">foo.<span class="title function_">start</span>();</span><br></pre></td></tr></table></figure>
<p>上面的代码中，<code>this.interval</code>是一个定时器，每隔1秒调用<code>this.decrement</code>方法，但是<code>setInterval</code>这个函数比较特殊，当我们将一个函数传递给<code>setInterval</code>时，这个函数的<code>this</code>值会指向全局对象，所以<code>this.count</code>会输出<code>undefined</code>。详情请参考<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval#the_this_problem">这里</a></p>
<p>解决方法有两种，一种是在<code>start</code>方法中使用<code>bind</code>方法，将<code>this</code>绑定到<code>CountDown</code>类。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">interval</span> = <span class="built_in">setInterval</span>(<span class="variable language_">this</span>.<span class="property">decrement</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另一种方法是将setInterval的回调函数改为箭头函数，因为箭头函数没有自己的<code>this binding</code>, 所以<code>this</code>指向其<code>parent scope</code>，也就是<code>CountDown</code>。个人推荐使用这种方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">interval</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">decrement</span>(), <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，也可以将<code>decrement</code>方法改为箭头函数，因为箭头函数没有自己的<code>this binding</code>, 所以<code>this</code>指向其<code>parent scope</code>，也就是<code>CountDown</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">decrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">count</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">count</span> -= <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">count</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">interval</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><ul>
<li><code>apply</code>和<code>call</code>的作用是改变函数的<code>this</code>值，<code>apply</code>的参数是一个数组，<code>call</code>的参数是一个个传递的。这里有一个小窍门，<code>apply</code>是<code>a</code>开头的，数组<code>array</code>也是<code>a</code>开头的，所以<code>apply</code>的参数是一个数组。</li>
<li><code>bind</code>传递参数的方法和<code>call</code>类似(这个经常被忽略)，但是<code>bind</code>会创建一个新的函数并返回该函数，所以在使用<code>bind</code>时，我们通常会用一个变量接收<code>bind</code>返回的函数，再通过这个变量调用函数。</li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>this</tag>
        <tag>apply</tag>
        <tag>call</tag>
        <tag>bind</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-arrow-function</title>
    <url>/2024/12/12/javascript-arrow-function/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="Arrow-function-couldn’t-be-a-constructor"><a href="#Arrow-function-couldn’t-be-a-constructor" class="headerlink" title="Arrow function couldn’t be a constructor"></a>Arrow function couldn’t be a <code>constructor</code></h2><h2 id="Arrow-function-doesn’t-have-its-own-this-binding"><a href="#Arrow-function-doesn’t-have-its-own-this-binding" class="headerlink" title="Arrow function doesn’t have its own this binding"></a>Arrow function doesn’t have its own <code>this</code> binding</h2><h2 id="Arrow-function-has-no-prototype-property"><a href="#Arrow-function-has-no-prototype-property" class="headerlink" title="Arrow function has no prototype property"></a>Arrow function has no <code>prototype</code> property</h2><h2 id="Arrow-function-has-no-arguments-object"><a href="#Arrow-function-has-no-arguments-object" class="headerlink" title="Arrow function has no arguments object"></a>Arrow function has no <code>arguments</code> object</h2><h2 id="Arrow-function-has-no-hoisting"><a href="#Arrow-function-has-no-hoisting" class="headerlink" title="Arrow function has no hoisting."></a>Arrow function has no <code>hoisting</code>.</h2><h2 id="Arrow-function-is-not-suitable-for-call-apply-bind-methods"><a href="#Arrow-function-is-not-suitable-for-call-apply-bind-methods" class="headerlink" title="Arrow function is not suitable for call, apply, bind methods"></a>Arrow function is not suitable for <code>call</code>, <code>apply</code>, <code>bind</code> methods</h2>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>arrow function</tag>
        <tag>function</tag>
        <tag>arrow</tag>
      </tags>
  </entry>
  <entry>
    <title>async vs defer</title>
    <url>/2024/01/09/javascript-async-vs-defer/</url>
    <content><![CDATA[<h1 id="async-defer-what’s-the-differences"><a href="#async-defer-what’s-the-differences" class="headerlink" title="async &amp; defer, what’s the differences?"></a>async &amp; defer, what’s the differences?</h1><h3 id="Html引入外部脚本"><a href="#Html引入外部脚本" class="headerlink" title="Html引入外部脚本"></a>Html引入外部脚本</h3><p>Html中引入外部脚本的方式有很多种，最常见的就是使用<code>&lt;script&gt;</code>标签，我们可以在<code>&lt;head&gt;</code>或者<code>&lt;body&gt;</code>中引入外部脚本。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./my_script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;./my_script1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;./my_script2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./my_script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;./my_script1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;./my_script2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>那么从<code>&lt;head&gt;</code>和<code>&lt;body&gt;</code>中引入外部脚本有什么区别呢？</p>
<ul>
<li>在<code>&lt;head&gt;</code>中引入外部脚本，会阻塞Dom的解析，直到脚本下载完毕并执行完毕。</li>
<li>在<code>&lt;body&gt;</code>末尾中引入外部脚本，不会阻塞Dom的解析，脚本下载和Dom解析并行进行。</li>
</ul>
<p>你一定听说过上面的说法，但是上面的说法有个前提，那就是同步引入脚本，也就是不加<code>async</code>或者<code>defer</code>.</p>
<p>如果使用<code>async</code>或者<code>defer</code>关键字，那么在<code>&lt;head&gt;</code>中引入外部脚本和在<code>&lt;body&gt;</code>末尾引入外部没有太大区别。(只是<code>&lt;head&gt;</code>中的脚本会先于<code>&lt;body&gt;</code>中的脚本下载)</p>
<h3 id="async-defer"><a href="#async-defer" class="headerlink" title="async &amp; defer"></a>async &amp; defer</h3><p>在Html引入外部脚本时，可以使用<code>async</code>或者<code>defer</code>，那么两者有和区别呢？我们通过一个表格来分析一下：</p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>下载时机</th>
<th>执行时机</th>
<th>是否阻断Dom解析</th>
<th>多个脚本的执行顺序</th>
</tr>
</thead>
<tbody><tr>
<td>无</td>
<td>遇到对应的<code>&lt;script&gt;</code>标签，立即下载</td>
<td>下载后立即执行</td>
<td>是，下载阶段和执行阶段都阻断DOM解析。</td>
<td>按顺序执行</td>
</tr>
<tr>
<td>async</td>
<td>遇到对应的<code>&lt;script&gt;</code>标签，立即下载</td>
<td>下载后立即执行，只能保证在window.load事件之前执行，但是可能在window.DomContentLoade之前或之后。</td>
<td>否</td>
<td>没有固定顺序，取决于哪个脚本先下载完成。</td>
</tr>
<tr>
<td>defer</td>
<td>遇到对应的<code>&lt;script&gt;</code>标签，立即下载</td>
<td>在页面解析完之后，且在DomContentLoaded事件触发之前执行。</td>
<td>否</td>
<td>按<code>&lt;script&gt;</code>标签出现的顺序执行</td>
</tr>
</tbody></table>
<p>注意事项：</p>
<ol>
<li>async脚本的执行无固定顺序，谁先下载完，谁先执行。</li>
<li>defer脚本按出现的先后顺序执行。</li>
</ol>
<p>以下代码中，我们使用defer加载两个脚本，其中short.js非常小，很快就下载完了，而long.js非常大，下载时间很长。因为defer脚本是按照书写顺序进行执行的，所以即使short.js先下载完了，也要等到long.js下载完毕才能开始执行。</p>
   <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script defer src=<span class="string">&#x27;https://xxx/yyy/long.js&#x27;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&#x27;https://xxx/yyy/short.js&#x27;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>用一张图来总结一下，图里中颜色含义如下：<br><span style="color: green">绿色线条</span> - 表示dom解析<br><span style="color: blue">蓝色线条</span> - 表示脚本的下载<br><span style="color: red">红色线条</span> - 表示脚本的执行。<br>script分为普通脚本和模块化脚本。</p>
<p><img src="https://html.spec.whatwg.org/images/asyncdefer.svg" alt="https:&#x2F;&#x2F;html.spec.whatwg.org&#x2F;images&#x2F;asyncdefer.svg"></p>
<p>解释一下上面这张图：</p>
<ol>
<li>第一行，普通脚本，没有指定async或者defer，下载和执行阶段会阻断dom解析。</li>
<li>第二行，普通脚本，有defer关键字，下载和执行阶段都不阻断dom解析。(下载和dom解析并行进行，执行在dom解析完成后开始）</li>
<li>第三行，普通脚本，有async关键字，下载阶段不阻断dom解析，但执行阶段有可能阻断dom解析（如果脚本已经下载完毕，但是dom解析尚未完成的情况下）</li>
<li>第四行，模块化脚本，默认包含defer属性，该脚本及其依赖的其他脚本的下载与dom解析平行进行，待dom解析完毕开始执行脚本。</li>
<li>第五行，模块化脚本，有async关键字，该脚本及其依赖的其他脚本的下载与dom解析平行进行，下载完毕后立即执行脚本。</li>
</ol>
<h3 id="async-defer-1"><a href="#async-defer-1" class="headerlink" title="async &amp; defer"></a>async &amp; defer</h3><ul>
<li>标记为async或defer的script，下载阶段都不会阻断Dom的解析，但是async是下载后立即执行，而defer是下载后且等待dom解析完毕才执行，所以两者唯一的区别就是：async脚本执行阶段可能会阻断dom解析（前提是脚本已经下载完毕，但dom解析尚未完成）。</li>
<li>module script默认包含defer属性</li>
<li>多个标记为async的脚本，无法保证执行顺序。</li>
<li>多个defer脚本按照script标签出现的顺序执行。</li>
<li>没有标记async或defer的脚本会阻断Dom的解析。</li>
</ul>
<h3 id="window-load和window-DomContentLoaded"><a href="#window-load和window-DomContentLoaded" class="headerlink" title="window.load和window.DomContentLoaded"></a>window.load和window.DomContentLoaded</h3><p>这是两个重要的事件，与async及defer的执行时机息息相关。</p>
<ul>
<li><code>window.load</code> - 标志整个页面全部加载完成，包括images，styles和JavaScript等所有外部资源。</li>
<li><code>window.DomContentLoaded</code> - Html文件解析和加载完成(parsed and loaded)，且所有标记为defer的js脚本全部下载并执行完成后触发，注意，该事件不会等待其他资源，比如images，subframes，或者标记为async的script下载完成。另外，该事件不会等待stylesheet完成，但是：因为defer脚本会等待stylesheet加载完才执行，而该事件又在defer脚本执行完才触发，所以如果有defer脚本存在的话，那么该事件一定会等待stylesheet加载完才触发。</li>
</ul>
<h3 id="问题来了"><a href="#问题来了" class="headerlink" title="问题来了"></a>问题来了</h3><p>看起来async和defer没有太大的区别，那么两者分别在什么场合使用呢？</p>
<ul>
<li>async一般用在与当前页面无关联的外部脚本，比如Google统计，计数脚本等。</li>
<li>defer一般用于需要操作当前页面的脚本，所以它需要等Dom解析完之后才执行。</li>
</ul>
<h3 id="一道小题"><a href="#一道小题" class="headerlink" title="一道小题"></a>一道小题</h3><p>下面代码的输出结果是什么？</p>
<p>index.html</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;DOMContentLoaded event triggered&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;load event triggered&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;./async_script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;./defer_script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>async_script.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async script loaded&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>defer_script.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;defer script loaded&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> script loaded</span><br><span class="line">defer script loaded</span><br><span class="line"><span class="title class_">DOMContentLoaded</span> event triggered</span><br><span class="line">load event triggered</span><br></pre></td></tr></table></figure>

<p>多执行几次，你会发现，有时候输出还会是下面这样的。这充分印证了上面的结论，defer script一定在DOMContentLoaded之前执行，但是async script可能在DOMContentLoaded之前，也可能在其之后。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">defer script loaded</span><br><span class="line"><span class="title class_">DOMContentLoaded</span> event triggered</span><br><span class="line"><span class="keyword">async</span> script loaded</span><br><span class="line">load event triggered</span><br></pre></td></tr></table></figure>

<h3 id="References："><a href="#References：" class="headerlink" title="References："></a>References：</h3><p><a href="https://javascript.info/script-async-defer">https://javascript.info/script-async-defer</a></p>
<p><a href="https://html.spec.whatwg.org/multipage/scripting.html#attr-script-defer">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-defer</a> V8引擎</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script">https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event">https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event">https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event</a></p>
<p><a href="https://javascript.info/onload-ondomcontentloaded">https://javascript.info/onload-ondomcontentloaded</a></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>defer</tag>
        <tag>async</tag>
        <tag>script</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-async-await</title>
    <url>/2024/06/16/javascript-async-await/</url>
    <content><![CDATA[<h2 id="await-works-with-promise-chain"><a href="#await-works-with-promise-chain" class="headerlink" title="await works with promise chain"></a>await works with promise chain</h2><p>In JavaScript, <code>await</code> can works with promise chain, it will get the resolved value of the last promise in the chain. For example:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getData = <span class="function">() =&gt;</span></span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="number">2</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getData</span>(); <span class="comment">// output: 3</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>();</span><br></pre></td></tr></table></figure>

<p>In above code, <code>getData()</code> returns a promise chain, the resolved value of the last promise in the chain is <code>3</code>, so the output of the code is <code>3</code>.</p>
<p>You can even append more promise chain when calling <code>getData()</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getData</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="number">4</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="number">5</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// output: 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>async</tag>
        <tag>await</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-cache-request</title>
    <url>/2024/07/25/javascript-cache-request/</url>
    <content><![CDATA[<p>最近项目中出现一个问题，后端监测系统发现，同样一个请求在短时间内一次性发起了四次，这是极大的浪费，于是考虑使用缓存策略来解决。</p>
<p>首先模拟一个获取后端数据的方法，这里使用<code>setTimeout</code>模拟一个异步请求。这个方法在延时一秒钟后返回一个结构化数据。<code>&#123;id: 1, name: &#39;Data 1&#39;&#125;</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Data 1&#x27;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来我们模拟短时间内的四次请求，可以使用for循环来依次发送四次请求。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">  <span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们使用<code>async/await</code>语法封装一下上面的for循环。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchDataFourTimes</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetchData</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，我们调用一下<code>fetchDataFourTimes</code>方法，查看控制台输出。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetchDataFourTimes</span>();</span><br></pre></td></tr></table></figure>

<p>控制台输出如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; id: 1, name: &#x27;Data 1&#x27; &#125;</span><br><span class="line">&#123; id: 1, name: &#x27;Data 1&#x27; &#125;</span><br><span class="line">&#123; id: 1, name: &#x27;Data 1&#x27; &#125;</span><br><span class="line">&#123; id: 1, name: &#x27;Data 1&#x27; &#125;</span><br></pre></td></tr></table></figure>
<p>注意，这里有一个问题，我们很难区分这四次请求是不是真的发送了四次，因为返回的数据都是一样的。为了验证后续的<code>cache</code>策略确实能工作，我们可以在<code>fetchData</code>方法中加入一个<code>console.log</code>来验证。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fetchData&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Data 1&#x27;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再次调用<code>fetchDataFourTimes</code>方法，查看控制台输出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetchData</span><br><span class="line">&#123; id: 1, name: &#x27;Data 1&#x27; &#125;</span><br><span class="line">fetchData</span><br><span class="line">&#123; id: 1, name: &#x27;Data 1&#x27; &#125;</span><br><span class="line">fetchData</span><br><span class="line">&#123; id: 1, name: &#x27;Data 1&#x27; &#125;</span><br><span class="line">fetchData</span><br><span class="line">&#123; id: 1, name: &#x27;Data 1&#x27; &#125;</span><br></pre></td></tr></table></figure>
<p>接下来，使用缓存策略来解决这个问题。</p>
<p>我们可以改造一下<code>fetchDataFourTimes</code>，使用一个全局变量来存储请求的数据，然后在下次请求时，先判断是否有缓存数据，如果有则直接返回缓存数据，否则发送请求。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cacheRequest = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchDataFourTimesWithCache</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!cacheRequest[<span class="string">&#x27;fetchData&#x27;</span>]) &#123;</span><br><span class="line">      cacheRequest[<span class="string">&#x27;fetchData&#x27;</span>] = <span class="keyword">await</span> <span class="title function_">fetchData</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hit cache&#x27;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(cacheRequest[<span class="string">&#x27;fetchData&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后运行<code>fetchDataFourTimesWithCache</code>方法，查看控制台输出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetchData</span><br><span class="line">&#123; id: 1, name: &#x27;Data 1&#x27; &#125;</span><br><span class="line">Hit cache</span><br><span class="line">&#123; id: 1, name: &#x27;Data 1&#x27; &#125;</span><br><span class="line">Hit cache</span><br><span class="line">&#123; id: 1, name: &#x27;Data 1&#x27; &#125;</span><br><span class="line">Hit cache</span><br><span class="line">&#123; id: 1, name: &#x27;Data 1&#x27; &#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，第一次请求了数据，后面三次都是直接从缓存中获取的，这样就避免了多次请求的问题。</p>
<p>这里有一点需要注意，那就是缓存用的<code>cacheRequest</code>必须是位于缓存函数外部，如果直接放在缓存函数内部，那么每次调用缓存函数都会重新初始化<code>cacheRequest</code>并将其设置为<code>&#123;&#125;</code>，导致缓存失效。</p>
<p>我们也可以使用闭包的特性，将<code>cacheRequest</code>封装到函数内部，这样的话，<code>cacheRequest</code>就成了<code>fetchDataFourTimesWithCache</code>函数的内部变量，可以避免全局变量的污染。在<code>fetchDataFourTimesWithCache</code>中，我们返回了一个匿名异步函数，而<code>cacheRequest</code>相对于这个匿名函数是一个外部变量，这样就形成了一个闭包。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchDataFourTimesWithCache</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> cacheRequest = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!cacheRequest[<span class="string">&#x27;fetchData&#x27;</span>]) &#123;</span><br><span class="line">        cacheRequest[<span class="string">&#x27;fetchData&#x27;</span>] = <span class="keyword">await</span> <span class="title function_">fetchData</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hit cache&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(cacheRequest[<span class="string">&#x27;fetchData&#x27;</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fetchDataFourTimesWithCacheFn = <span class="title function_">fetchDataFourTimesWithCache</span>();</span><br><span class="line"><span class="title function_">fetchDataFourTimesWithCacheFn</span>();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>cache</tag>
        <tag>promise</tag>
        <tag>high order function</tag>
        <tag>closure</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-avoid-comments-with-refactoring</title>
    <url>/2024/03/02/javascript-avoid-comments-with-refactoring/</url>
    <content><![CDATA[<h1 id="javascript-avoid-comments-with-refactoring"><a href="#javascript-avoid-comments-with-refactoring" class="headerlink" title="javascript-avoid-comments-with-refactoring"></a>javascript-avoid-comments-with-refactoring</h1><p>下面这段代码是今天在Youtube上看到的一个视频中的代码, 代码的功能是从一个字符串数组中找出所有最长的字符串：比如给定字符串数组：[“aba”, “aa”, “ad”, “vcd”, “aba”]，则要求返回[“aba”, “vcd”, “aba”]。</p>
<p>可以看到这段代码中有很多注释，我们的目的是优化这段代码，让代码可以<code>self explanation</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gets all longest strings</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">longestString</span>(<span class="params">inputArray</span>) &#123;</span><br><span class="line">  <span class="comment">// initialize the longest string to first value</span></span><br><span class="line">  <span class="keyword">let</span> &#123; length &#125; = inputArray[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; inputArray.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// checks if current string is longer than current longest</span></span><br><span class="line">    <span class="keyword">if</span> (length &lt; inputArray[i].<span class="property">length</span>) &#123;</span><br><span class="line">      length = inputArray[i].<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// filters out any values not equal to the longest string</span></span><br><span class="line">  <span class="keyword">const</span> strs = inputArray.<span class="title function_">filter</span>(<span class="function">(<span class="params">word</span>) =&gt;</span> word.<span class="property">length</span> === length);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// return the longest strings</span></span><br><span class="line">  <span class="keyword">return</span> strs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="命名优化"><a href="#命名优化" class="headerlink" title="命名优化"></a>命名优化</h2><p>可以从以下几个方面入手：</p>
<ol>
<li>函数名字不够清晰，<code>longestString</code>是单数形式，且没有动词，一般函数名字都应该加动词，可以改为<code>getLongestStrings</code> - 这样我们就知道，这个函数返回的是多个字符串。而且是从输入参数中<code>get</code>而来的。</li>
<li>函数的参数名字不够清晰，<code>inputArray</code>是一个数组，但是我们不知道这个数组的内容是什么，而且<code>input</code>这个单词有点多余，参数当然是<code>input</code>的，没必要再加上<code>input</code>这个单词。可以改为<code>stringArray</code>。</li>
</ol>
<p>此时，我们的代码变成了这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getLongestStrings</span>(<span class="params">stringArray</span>) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>原来的代码中有一个<code>length</code>变量，这个变量的名字不够清晰，并没有说明是什么长度，也无法表明是最大长度，可以改为<code>longestStringLength</code>。</li>
<li>原代码中使用的是经典的<code>for</code>循环，在Modern JavaScript中，我们更推荐函数式编程，所以可以改为<code>for...of</code>循环或者使用<code>Array.prototype.forEach</code>，这样代码更加简洁。</li>
</ol>
<p>此时代码变成下面的样子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getLongestStrings</span>(<span class="params">stringArray</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> longestStringLength = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  stringArray.<span class="title function_">forEach</span>(<span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (longestStringLength &lt; str.<span class="property">length</span>) &#123;</span><br><span class="line">      longestStringLength = str.<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> longestStrings = stringArray.<span class="title function_">filter</span>(</span><br><span class="line">    <span class="function">(<span class="params">word</span>) =&gt;</span> word.<span class="property">length</span> === longestStringLength</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> longestStrings;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>此时代码中有一个<code>forEach</code>，有一个<code>filter</code>，这两个函数都是遍历数组的，所以实际上我们遍历了两次数组，不够高效，将其改为一次遍历。此时代码变成下面的样子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getLongestStrings</span>(<span class="params">stringArray</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> longestStringLength = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> longestStrings = [];</span><br><span class="line"></span><br><span class="line">  stringArray.<span class="title function_">forEach</span>(<span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str.<span class="property">length</span> &gt; longestStringLength) &#123;</span><br><span class="line">      longestStringLength = str.<span class="property">length</span>;</span><br><span class="line">      longestStrings = [str];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.<span class="property">length</span> === longestStringLength) &#123;</span><br><span class="line">      longestStrings.<span class="title function_">push</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> longestStrings;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用reduce优化"><a href="#使用reduce优化" class="headerlink" title="使用reduce优化"></a>使用<code>reduce</code>优化</h2><p>多数数组的遍历方法都可以使用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce">reduce</a>来实现，所以我们可以将上面的代码改为使用<code>reduce</code>来实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getLongestStrings</span>(<span class="params">stringArray</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> stringArray.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, str</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str.<span class="property">length</span> &gt; acc.<span class="property">maxLength</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">maxLength</span>: str.<span class="property">length</span>, <span class="attr">longestStrings</span>: [str] &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.<span class="property">length</span> === acc.<span class="property">maxLength</span>) &#123;</span><br><span class="line">      acc.<span class="property">longestStrings</span>.<span class="title function_">push</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">  &#125;, &#123; <span class="attr">maxLength</span>: <span class="number">0</span>, <span class="attr">longestStrings</span>: [] &#125;).<span class="property">longestStrings</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>坦率的说，使用<code>reduce</code>这一版的可读性不如上一版，大家酌情使用。</p>
<p><code>reduce</code>通常用来处理比较简单的逻辑，比如累加一个数组中所有的数字。在这种情况下，<code>reduce</code>通常只接受一个参数，就是待处理的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<p>如果逻辑比较复杂，那么reduce就要使用多个参数，比如上面的例子，我们实际上传入了如下两个参数，只不过我们把这两个参数封装到了一个对象中。</p>
<ul>
<li>longesStringLength - 用来记录当前最长的字符串的长度</li>
<li>longestStrings - 用来记录当前最长的字符串</li>
</ul>
<p>处理的时候数组<code>longestStrings</code>是不断变化的，如果当前字符串的长度等于<code>longestStringLength</code>，那么就把当前字符串加入到<code>longestStrings</code>中。(此过程数组元素不断增多，原有的元素还在)，如果当前字符串的长度大于<code>longestStringLength</code>，那么就把<code>longestStrings</code>清空，然后把当前字符串加入到<code>longestStrings</code>中。(此过程原有数组元素被清空，只有当前元素)。</p>
<p>此外，我们还注意到，第一个if分支有return，而第二个没有，有点奇怪，其实原本可以这样写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (str.<span class="property">length</span> &gt; acc.<span class="property">maxLength</span>) &#123;</span><br><span class="line">  acc.<span class="property">maxLength</span> = str.<span class="property">length</span>;</span><br><span class="line">  acc.<span class="property">longestStrings</span> = [str];</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.<span class="property">length</span> === acc.<span class="property">maxLength</span>) &#123;</span><br><span class="line">  acc.<span class="property">longestStrings</span>.<span class="title function_">push</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> acc;</span><br></pre></td></tr></table></figure>
<p>但是，当<code>str.length &gt; acc.maxLength</code>时，直接返回一个新对象也可以，这个对象会作为reduce的下一次迭代的第一个参数。</p>
<p>其实再进一步，我们可以在if-else中也返回一个新对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (str.<span class="property">length</span> &gt; acc.<span class="property">maxLength</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">maxLength</span>: str.<span class="property">length</span>, <span class="attr">longestStrings</span>: [str] &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (str.<span class="property">length</span> === acc.<span class="property">maxLength</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">maxLength</span>: acc.<span class="property">maxLength</span>,</span><br><span class="line">    <span class="attr">longestStrings</span>: [...acc.<span class="property">longestStrings</span>, str],</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// str.length &lt; acc.maxLength</span></span><br><span class="line"><span class="keyword">return</span> acc;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>array</tag>
        <tag>reduce</tag>
        <tag>refactoring</tag>
        <tag>clean code</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-class-multiple-inheritance</title>
    <url>/2024/12/13/javascript-class-multiple-inheritance/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>ES6以后有了class关键字，可以方便地实现类的继承。但是JavaScript是一门单继承的语言，即一个类只能继承一个类。但是有时候我们需要多继承，这时候我们可以使用混入（mixin）来实现多继承。</p>
<h2 id="Mixin"><a href="#Mixin" class="headerlink" title="Mixin"></a>Mixin</h2><p>Mixin是一种实现多继承的方式，即将多个类的方法混入到一个类中。下面是一个简单的Mixin实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mix</span>(<span class="params">...mixins</span>) &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Mix</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> mixin <span class="keyword">of</span> mixins) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Mix</span>.<span class="property"><span class="keyword">prototype</span></span>, mixin);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Mix</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义两个mixin</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Flyable</span> = &#123;</span><br><span class="line">  <span class="title function_">fly</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I can fly!&quot;</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Swimmable</span> = &#123;</span><br><span class="line">  <span class="title function_">swim</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I can swim!&quot;</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个使用mixin的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Duck</span> <span class="keyword">extends</span> <span class="title class_ inherited__">mix</span>(<span class="title class_">Flyable</span>, <span class="title class_">Swimmable</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> duck = <span class="keyword">new</span> <span class="title class_">Duck</span>();</span><br><span class="line">duck.<span class="title function_">fly</span>(); <span class="comment">// 输出: I can fly!</span></span><br><span class="line">duck.<span class="title function_">swim</span>(); <span class="comment">// 输出: I can swim!</span></span><br></pre></td></tr></table></figure>

<h2 id="Composition"><a href="#Composition" class="headerlink" title="Composition"></a>Composition</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FlyBehavior</span> &#123;</span><br><span class="line">  <span class="title function_">fly</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Flying with wings!&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SwimBehavior</span> &#123;</span><br><span class="line">  <span class="title function_">swim</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Swimming!&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">flyBehavior</span> = <span class="keyword">new</span> <span class="title class_">FlyBehavior</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">swimBehavior</span> = <span class="keyword">new</span> <span class="title class_">SwimBehavior</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">performFly</span>(<span class="params"></span>) &#123; <span class="variable language_">this</span>.<span class="property">flyBehavior</span>.<span class="title function_">fly</span>(); &#125;</span><br><span class="line">  <span class="title function_">performSwim</span>(<span class="params"></span>) &#123; <span class="variable language_">this</span>.<span class="property">swimBehavior</span>.<span class="title function_">swim</span>(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> duck = <span class="keyword">new</span> <span class="title class_">Duck</span>();</span><br><span class="line">duck.<span class="title function_">performFly</span>(); <span class="comment">// 输出: Flying with wings!</span></span><br><span class="line">duck.<span class="title function_">performSwim</span>(); <span class="comment">// 输出: Swimming!</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>class</tag>
        <tag>inheritance</tag>
        <tag>multiple_inheritance</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-clean-code-if</title>
    <url>/2024/06/02/javascript-clean-code-if/</url>
    <content><![CDATA[<p>写好代码不是一件容易的事，代码能够按照预期效果工作只是最低要求，在这个基础上将代码写得简洁，可维护性高，可以说是一门艺术，今天读了一本书：《The art of readable code》，感触颇深，现摘取一例，与大家分享，为了便于阅读，我将代码简化并用JS重写了一下，先看原始代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reply</span>(<span class="params">userResult, permissionResult</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (userResult === <span class="string">&quot;SUCCESS&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (permissionResult !== <span class="string">&quot;SUCCESS&quot;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error reading permissions&quot;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(userResult);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很简单的一段代码，就是根据输入参数的不同取值，打印不同的log，但是代码里一个嵌套的<code>if</code>语句，导致可读性下降，即使经验再丰富的程序员，也要停留思考一下。罗马不是一天建成的，可读性差的代码也不是一天写成的，通常随着功能的增加，维护人员的增多，代码的可读性会越来越差，其实这段代码一开始逻辑很简单。就是根据<code>userResult</code>的值不同，做不同的处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reply</span>(<span class="params">userResult</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (userResult === <span class="string">&quot;SUCCESS&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(userResult);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后突然有一天增加了一个需求，需要根据<code>permissionResult</code>的值来做进一步的处理，于是该函数多了一个参数，处理逻辑也跟着复杂起来，这便有了文章开头那段代码.</p>
<p>那么如何优化这段代码呢？可以看到外层的<code>if</code>有点头重脚轻的感觉，我们可以采用优先处理<code>negative case</code>的方式，这样可以减少嵌套，提高代码的可读性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reply</span>(<span class="params">userResult, permissionResult</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (userResult !== <span class="string">&quot;SUCCESS&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(userResult);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (permissionResult !== <span class="string">&quot;SUCCESS&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error reading permissions&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此，我们就移出了嵌套的<code>if</code>，使这两个<code>if</code>变为平级结构，可读性好多了。需要注意的是，因为我们在两个<code>if</code>中都使用了<code>return</code>(<code>return early principle</code>)，所以需要将末尾的<code>console.log(&quot;done&quot;)</code>上提到每个<code>if</code>中，否则会导致逻辑丢失。</p>
<p>原书写到这里就结束了，但是我想再进一步，可以改进后的代码里仍然有多个重复的<code>console.log(&quot;done&quot;)</code>，我们可以将其提取出来，别忘了那句名言：<code>Don&#39;t repeat yourself</code>。</p>
<p>在改动之前，先讲一个原理。</p>
<h2 id="将-if-return-结构转换为if-else结构"><a href="#将-if-return-结构转换为if-else结构" class="headerlink" title="将 if{..., return}结构转换为if-else结构"></a>将 <code>if&#123;..., return&#125;</code>结构转换为<code>if-else</code>结构</h2><p>如果一个函数中有多个<code>if</code>，每个<code>if</code>中都有<code>return</code>，可以考虑将其转换为<code>if-else</code>结构。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (condition1) &#123; <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// code block</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (condition2) &#123; <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// code block</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// code block</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>等同于：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (condition1) &#123; <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// code block</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition2) &#123; <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// code block</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// code block</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以之前的代码可以继续优化为下面的形式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reply</span>(<span class="params">userResult, permissionResult</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (userResult !== <span class="string">&quot;SUCCESS&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(userResult);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (permissionResult !== <span class="string">&quot;SUCCESS&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error reading permissions&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后把重复的<code>console.log(&quot;done&quot;)</code>提取出来即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reply</span>(<span class="params">userResult, permissionResult</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (userResult !== <span class="string">&quot;SUCCESS&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(userResult);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (permissionResult !== <span class="string">&quot;SUCCESS&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error reading permissions&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后需要注意的是，这种逻辑性的改动，必须经过严密的单元测试才可以。因为只有两个参数，两两组合，所以测试用例有4个：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">userResult = <span class="string">&quot;SUCCESS&quot;</span>, permissionResult = <span class="string">&quot;SUCCESS&quot;</span>;</span><br><span class="line">userResult = <span class="string">&quot;SUCCESS&quot;</span>, permissionResult = <span class="string">&quot;ERROR&quot;</span>;</span><br><span class="line">userResult = <span class="string">&quot;ERROR&quot;</span>, permissionResult = <span class="string">&quot;SUCCESS&quot;</span>;</span><br><span class="line">userResult = <span class="string">&quot;ERROR&quot;</span>, permissionResult = <span class="string">&quot;ERROR&quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>refactoring</tag>
        <tag>clean code</tag>
        <tag>if</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-clean-code</title>
    <url>/2024/04/14/javascript-clean-code/</url>
    <content><![CDATA[<h2 id="Prefer-const-over-let-and-var"><a href="#Prefer-const-over-let-and-var" class="headerlink" title="Prefer const over let and var"></a>Prefer <code>const</code> over <code>let</code> and <code>var</code></h2><h3 id="Bad"><a href="#Bad" class="headerlink" title="Bad"></a>Bad</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> array) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Good"><a href="#Good" class="headerlink" title="Good"></a>Good</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> array) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Note</strong>, If you access array by index, you can’t use <code>const</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(array[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>clean code</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-closure</title>
    <url>/2024/11/09/javascript-closure/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>What is a closure in JavaScript? This is really a hard question, and I see lots of different answers on the internet. I list some of them below:</p>
<ol>
<li>A closure is a function that has access to the outer function’s variables.</li>
<li>A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives a function access to its outer scope. In JavaScript, closures are created every time a function is created, at function creation time. - from <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures">MDN</a></li>
</ol>
<h1 id="Lexical-scoping"><a href="#Lexical-scoping" class="headerlink" title="Lexical scoping"></a>Lexical scoping</h1><p>在JavaScript中，词法作用域（Lexical Scoping）是一种确定变量作用域的规则。词法作用域基于变量在代码中声明的位置来决定其可见性和生命周期。具体来说，词法作用域是在编写代码时就确定下来的，它取决于函数和块（如if语句或循环）的嵌套结构，而不是在运行时动态确定的。</p>
<p>词法作用域的特点<br>静态确定：词法作用域在代码编写阶段就已经确定。编译器在解析代码时会创建一个作用域链，这个链决定了在何处查找变量。<br>基于嵌套：作用域是根据函数和块的嵌套关系来定义的。内层作用域可以访问外层作用域中的变量，但外层作用域不能访问内层作用域中的变量。<br>函数优先：在JavaScript中，函数创建了自己的作用域，即使这个函数没有立即执行，它的作用域也是在定义时就确定的。<br>词法作用域的例子<br>下面是一个简单的例子来说明词法作用域：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outerFunction</span>(<span class="params">outerArg</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> outerVariable = <span class="string">&#x27;I am from the outer function&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">innerFunction</span>(<span class="params">innerArg</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(outerArg); <span class="comment">// 可以访问 outerFunction 的参数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(outerVariable); <span class="comment">// 可以访问 outerFunction 的变量</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(innerArg); <span class="comment">// 可以访问 innerFunction 的参数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">innerFunction</span>(<span class="string">&#x27;Hello from innerFunction&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">outerFunction</span>(<span class="string">&#x27;Hello from outerFunction&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>词法作用域是闭包的基础，因为闭包是在词法作用域的基础上实现的。</p>
<h1 id="闭包的特性"><a href="#闭包的特性" class="headerlink" title="闭包的特性"></a>闭包的特性</h1><ol>
<li>数据封装性 - 可以用来封装私有变量，模拟模块化。</li>
<li>保持状态 - 保持函数的状态，比如计数器。防抖和节流使用的都是这个特性。</li>
</ol>
<h1 id="Use-case"><a href="#Use-case" class="headerlink" title="Use case"></a>Use case</h1><h2 id="Data-encapsulation-private-variables"><a href="#Data-encapsulation-private-variables" class="headerlink" title="Data encapsulation(private variables)"></a>Data encapsulation(private variables)</h2><p>In the follow example, the inner function <code>increase</code> has access to the outer function’s variable <code>count</code>. The variable <code>count</code> is private and cannot be accessed from outside the function <code>createCounter</code>. But you can still change <code>count</code> by invoking the <code>increase</code> function.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">increase</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    increase,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">createCounter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">increase</span>()); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>Note that</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  increase,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>is shorthand for</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  <span class="attr">increase</span>: increase,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>We can also return the function <code>increase</code> directly.(This is not work when you have multiple functions to return, you must use the object literal in that case.)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>And you should also change the way to invoke the function since you return an anonymous function. so there is no <code>increase</code> property in the <code>counter</code> object.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> counter = <span class="title function_">createCounter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">counter</span>()); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h2 id="Simulate-module-Modernization"><a href="#Simulate-module-Modernization" class="headerlink" title="Simulate module(Modernization)"></a>Simulate module(Modernization)</h2><p>In the following example, we can simulate a module by using closure. The private variables and methods are defined inside the outer function <code>MyModule</code>. The public variables and methods are returned as an object literal. So the private variables and methods are encapsulated and cannot be accessed from outside the function. The public variables and methods can be accessed by invoking the returned object.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyModule</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> privateVariable = <span class="string">&#x27;private variable&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> publicVariable = <span class="string">&#x27;public variable&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">privateMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(privateVariable);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">publicMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(publicVariable);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If you want to expose the variables/methods, return them.</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    publicVariable,</span><br><span class="line">    publicMethod,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myModule = <span class="title class_">MyModule</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myModule.<span class="property">publicVariable</span>); <span class="comment">// public variable</span></span><br><span class="line">myModule.<span class="title function_">publicMethod</span>(); <span class="comment">// public method</span></span><br></pre></td></tr></table></figure>

<h2 id="Event-handler-or-callback"><a href="#Event-handler-or-callback" class="headerlink" title="Event handler(or callback)"></a>Event handler(or callback)</h2><p>Some event handler or callback functions use closure to access the outer function’s variables.<br>In the following example, the event handler for <code>click</code> event is an anymous function. The function has access to the outer function’s variable <code>count</code>. </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Click count: <span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> span = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;span&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        count++;</span></span><br><span class="line"><span class="language-javascript">        span.<span class="property">textContent</span> = count;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Design-patter-Singleton"><a href="#Design-patter-Singleton" class="headerlink" title="Design patter - Singleton"></a>Design patter - Singleton</h2><p>In the following code, we use a local variable <code>instance</code> to check whether the instance has been created or not. The <code>instance</code> variable must memorize its state during different calls to the <code>getInstance</code> function. So we use closure to achieve this.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Singleton</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">createInstance</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">name</span>: name &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getInstance</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = <span class="title function_">createInstance</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getInstance,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance1 = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;Philip&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> instance2 = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;zdd&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1); <span class="comment">// Philip</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2); <span class="comment">// Philip</span></span><br></pre></td></tr></table></figure>

<h2 id="Debounce"><a href="#Debounce" class="headerlink" title="Debounce"></a>Debounce</h2><p>防抖和节流都是为了解决在短段时间内大量触发某个函数执行而导致的性能问题。</p>
<p><strong>防抖的原理</strong><br>事件处理函数在事件触发一段时间后（比如500ms）再执行，如果在此时间内（比如500ms）事件再次触发，则重新计时。</p>
<p><strong>防抖的应用</strong>：<br>输入框实时搜索，如果不加防抖处理的话，用户每输入一个字符就会调用一次接口，极大的浪费带宽和后端服务器资源。加入防抖后，用户停止输入一段时间后，才调用接口。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#input&quot;</span>).<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;input&quot;</span>,</span><br><span class="line">  <span class="title function_">debounce</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#output&quot;</span>).<span class="property">innerHTML</span> =</span><br><span class="line">      <span class="string">&quot;You have input: &quot;</span> + e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="comment">// You can call and server side api here, and debounce make sure the api is not called very often.</span></span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>注意，这个实现比较简单，没有考虑到<code>immediate</code>参数，即是否立即执行函数。如果要实现<code>immediate</code>参数，可以参考下面的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait, immediate = <span class="literal">false</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">const</span> callNow = immediate &amp;&amp; !timeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (callNow) &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line"></span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!immediate) &#123;</span><br><span class="line">        func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">      &#125;</span><br><span class="line">      timeout = <span class="literal">null</span>;</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Throttle"><a href="#Throttle" class="headerlink" title="Throttle"></a>Throttle</h2><p>节流是控制某个事件在一段时间内只触发一次函数调用，经常用在处理用户频繁触发的事件中，比如resize、scroll、mousemove等。此类事件如果不加控制，每秒会触发上百次，极大浪费资源。</p>
<p>以下代码是一个节流函数的实现，它确保在每300ms响应一次resize事件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">const</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">        func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="title function_">throttle</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  count++;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#counter&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;resize triggered: &#x27;</span> + count;</span><br><span class="line">&#125;, <span class="number">300</span>));</span><br></pre></td></tr></table></figure>

<p>注意，节流函数的另一个实现方式是不是用<code>setTimeout</code>函数，如下：这个版本的好处是，当事件第一次发生时，立即执行处理函数，而上面使用<code>setTimeout</code>函数的版本则要等待<code>wait</code>时间后才执行处理函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> lastTime = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="keyword">const</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (now - lastTime &gt;= wait) &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">      lastTime = now;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Currying"><a href="#Currying" class="headerlink" title="Currying"></a>Currying</h2><p>在JavaScript中，柯里化（Currying）是一种将使用多个参数的函数转换成一系列使用单一参数的函数的技术。通过柯里化，我们可以将一个多参数的函数逐步转化为一系列单参数的函数。每个函数都返回一个新的函数，直到所有参数都被提供，最终返回结果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">add(a, b) ===&gt; curriedAdd(a)(b)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curry</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">curried</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (args.<span class="property">length</span> &gt;= func.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> curried.<span class="title function_">apply</span>(<span class="variable language_">this</span>, [...args, ...args2]);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> currySum = <span class="title function_">curry</span>(sum);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">currySum</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">currySum</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">currySum</span>(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">currySum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<p>实际应用<br>参数复用：通过柯里化，可以预先设置好某些参数，然后得到一个预设了部分参数的新函数。这对于创建特定配置的函数非常有用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add5 = <span class="title function_">curriedAdd</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add5</span>(<span class="number">2</span>)(<span class="number">3</span>)); <span class="comment">// 输出 10</span></span><br></pre></td></tr></table></figure>
<ul>
<li>延迟执行：柯里化允许你在需要的时候才完成函数的执行，这在处理异步操作或事件处理时特别有用。</li>
<li>简化高阶函数：在处理高阶函数时，柯里化可以帮助简化代码，使得函数更易于理解和测试。</li>
<li>函数组合：柯里化可以与其他函数式编程概念如函数组合结合使用，以构建复杂的逻辑链路，同时保持代码清晰简洁。</li>
<li>部分应用：柯里化有时也被称作部分应用的一种形式，尽管严格来说二者有所不同。部分应用是指固定一个或多个参数的值，而柯里化则是逐步接收参数的过程。<br>柯里化是一种强大的技术，尤其是在函数式编程范式中，它能够帮助开发者写出更加模块化和可重用的代码。</li>
</ul>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li><a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)">https://en.wikipedia.org/wiki/Closure_(computer_programming)</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures</a></li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>closure</tag>
        <tag>debounce</tag>
        <tag>throttle</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-cookie</title>
    <url>/2024/03/01/javascript-cookie/</url>
    <content><![CDATA[<h2 id="1-什么是cookie"><a href="#1-什么是cookie" class="headerlink" title="1. 什么是cookie"></a>1. 什么是cookie</h2><p>In Node.js, you can use the <code>response.setHeader</code> method to set cookies from the server side. Here’s an example using the Express.js framework:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;John Doe&#x27;</span>, &#123; <span class="attr">maxAge</span>: <span class="number">900000</span>, <span class="attr">httpOnly</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;Cookie has been set&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>In this example, <code>res.cookie(&#39;username&#39;, &#39;John Doe&#39;, &#123; maxAge: 900000, httpOnly: true &#125;);</code> sets a cookie named “username” with the value “John Doe”. The <code>maxAge</code> option sets the expiry time for the cookie in milliseconds. The <code>httpOnly</code> option is a security enhancement that restricts the cookie from being accessed by client-side scripts.</p>
<h2 id="Get-cookie-by-request-header"><a href="#Get-cookie-by-request-header" class="headerlink" title="Get cookie by request header"></a>Get cookie by request header</h2><p>In Node.js, you can use the <code>request.headers.cookie</code> property to get cookies from the client side. Here’s an example using the Express.js framework:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cookie = req.<span class="property">headers</span>.<span class="property">cookie</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(cookie);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;Cookie has been set&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>In this example, <code>const cookie = req.headers.cookie;</code> gets the cookie from the client side and logs it to the console.</p>
<p>You can also use <code>cookie-parser</code> middleware to parse the cookie from the request header. Here’s an example using the <code>cookie-parser</code> middleware:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; cookies &#125; = req;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(cookies);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="使用JavaScript操作cookie"><a href="#使用JavaScript操作cookie" class="headerlink" title="使用JavaScript操作cookie"></a>使用JavaScript操作cookie</h2><h3 id="Create-cookie"><a href="#Create-cookie" class="headerlink" title="Create cookie"></a>Create cookie</h3><p>Note that the cookie value cannot contain semicolons, commas, or whitespace. For a solution, use the encodeURIComponent() function to encode the value.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username=John Doe; expires=Thu, 18 Dec 2023 12:00:00 UTC; path=/&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>document.cookie will return all cookies in one string, each cookie is separated by a semicolon and a space.</p>
<h3 id="Read-a-cookie"><a href="#Read-a-cookie" class="headerlink" title="Read a cookie"></a>Read a cookie</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> allCookies = <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Delete-a-cookie"><a href="#Delete-a-cookie" class="headerlink" title="Delete a cookie"></a>Delete a cookie</h3><p>To delete a cookie, just set the expires parameter to a passed date.</p>
<pre><code class="language-javascript">document.cookie = &quot;username=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;&quot;;

# References
- [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies)
</code></pre>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-console</title>
    <url>/2024/03/02/javascript-console/</url>
    <content><![CDATA[<h1 id="JavaScript-Console"><a href="#JavaScript-Console" class="headerlink" title="JavaScript Console"></a>JavaScript Console</h1><p><code>console</code>对象是JavaScript的一个全局对象，它提供了控制台的操作方法和属性。控制台是浏览器提供的一个调试工具，它可以用来输出信息、查看变量的值、查看调用栈等。</p>
<h2 id="colored-log"><a href="#colored-log" class="headerlink" title="colored log"></a>colored log</h2><p>In JavaScript, you can output colored logs to the console using the %c directive in console.log(). Here’s an example:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;%cThis is a green text&quot;</span>, <span class="string">&quot;color:green; font-size: 18px&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>output:<br><img src="/../images/console-green-text.png" alt="console-green-text"><br>In this example, %c is used as a placeholder for the styles that are specified in the second argument. The text “This is a green text” will be displayed in green color in the console.</p>
<p>You can also specify multiple styles:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;%cThis is a blue text on yellow background&quot;</span>, <span class="string">&quot;color:blue; background-color:yellow&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>output:<br><img src="/../images/console-blue-text-yellow-background.png" alt="alt text"></p>
<p>In this example, the text will be blue and the background color will be yellow.</p>
<h2 id="console-dir"><a href="#console-dir" class="headerlink" title="console.dir()"></a>console.dir()</h2><p>To print a deeply nested object in a more readable way, you can use console.dir().</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Philip&#x27;</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">company</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;google&#x27;</span>,</span><br><span class="line">      <span class="attr">location</span>: &#123;</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;shanghai&#x27;</span>,</span><br><span class="line">        <span class="attr">country</span>: <span class="string">&#x27;china&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>
<p>output: Notice that the location object is printed as [Object] which is unreadable(unreadable in Node.js, it’s OK to run in Browser console).</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Philip&#x27;</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123; <span class="attr">company</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;google&#x27;</span>, <span class="attr">location</span>: [<span class="title class_">Object</span>] &#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Usually, we resolve this by using JSON.stringify() to convert the object to a string.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br></pre></td></tr></table></figure>
<p>but this method has a limitation: it only works for objects that are serializable to JSON. If the object contains circular references, it will throw an error.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(obj);</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Philip&#x27;</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">company</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;google&#x27;</span>,</span><br><span class="line">      <span class="attr">location</span>: &#123; <span class="attr">city</span>: <span class="string">&#x27;shanghai&#x27;</span>, <span class="attr">country</span>: <span class="string">&#x27;china&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>console</tag>
        <tag>webapi</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-currying</title>
    <url>/2024/11/21/javascript-currying/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>柯里化（Currying）是一种函数式编程的技术，它是将一个接受多个参数的函数转换为一系列只接受一个参数的函数的过程。这些只接受一个参数的函数被称为柯里化函数。</p>
<p>下面是一个Currying实现的例子，需要好生领悟。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用rest parameters</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">curry</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">curried</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (args.<span class="property">length</span> &gt;= func.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> curried.<span class="title function_">apply</span>(<span class="variable language_">this</span>, [...args, ...args2]);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用arguments，此方案仅供参考，优先使用上面的rest parameters方案。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">curry1</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">curried</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> &gt;= func.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> oldArguments = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> curried.<span class="title function_">apply</span>(<span class="variable language_">this</span>, [...oldArguments, ...<span class="variable language_">arguments</span>]);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> currySum = <span class="title function_">curry</span>(sum);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">currySum</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">currySum</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">currySum</span>(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">currySum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>currying</tag>
        <tag>functional programming</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript CORS</title>
    <url>/2023/07/13/javascript-cors/</url>
    <content><![CDATA[<h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><p>相信很多做前端开发的同学都在浏览器控制台遇到过如下错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access to XMLHttpRequest at &#x27;http://localhost:3000/api/xxx&#x27; from origin &#x27;http://localhost:4200&#x27; has been blocked by CORS policy: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br></pre></td></tr></table></figure>
<p>这个错误是由于浏览器的同源策略导致的，同源策略是浏览器的一种安全策略，它要求浏览器只能向同源网址发送请求，同源网址指的是协议、域名、端口号都相同的网址。</p>
<p>以下几种情况都不同源，都会导致跨域。</p>
<ol>
<li>域名不同<br><code>remotehost</code> vs <code>localhost</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:4200 和 http://remotehost:3000</span><br></pre></td></tr></table></figure></li>
<li>协议不同<br><code>http</code> vs <code>https</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:3000 和 https://localhost:3000</span><br></pre></td></tr></table></figure></li>
<li>端口不同<br><code>3000</code> vs <code>4200</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:3000 和 http://localhost:4200</span><br></pre></td></tr></table></figure></li>
</ol>
<p>文章开头的错误消息中，<code>http://localhost:4200</code>(4200是Angular项目常用端口)和<code>http://localhost:3000</code>（3000是Node.js项目常用端口）就不是同源网址，因为它们的端口号不同。</p>
<p>同源策略的目的是为了防止恶意的网站窃取数据，但是对于前端开发来说，这个策略有时候就显得有点过于严格了，比如我们在开发时，前端项目和后端项目往往是分开的，前端项目一般运行在<code>http://localhost:4200</code>，而后端项目一般运行在<code>http://localhost:3000</code>，这样就导致了前端项目无法向后端项目发送请求，从而导致了上面的错误。那么如何解决这个问题呢？我们可以在后端项目中启用CORS，从而解决这个问题。下面我们就来看看如何在Node和Express中启用CORS。</p>
<h2 id="什么是CORS"><a href="#什么是CORS" class="headerlink" title="什么是CORS"></a>什么是CORS</h2><p>CORS是Cross-Origin Resource Sharing的缩写，中文名是跨域资源共享，它是一种机制，它使用额外的HTTP头来告诉浏览器，允许运行在一个源上的Web应用访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，会发起一个跨域HTTP请求。</p>
<p>哪些请求会使用CORS呢？</p>
<ul>
<li>Fetch与XMLHttpRequest</li>
<li>Web Fonts，@font-face within CSS</li>
<li>WebGL textures</li>
</ul>
<h2 id="简单请求与非简单请求"><a href="#简单请求与非简单请求" class="headerlink" title="简单请求与非简单请求"></a>简单请求与非简单请求</h2><p>为什么要介绍简单请求和非简单请求呢？因为对于简单请求和非简单请求，浏览器的处理方式是不同的。</p>
<ul>
<li>简单请求， 浏览器会自动处理跨域请求，不需要额外的处理。</li>
<li>非简单请求，浏览器会先发送一个OPTIONS请求，询问服务器是否允许跨域请求，如果服务器允许，浏览器才会发送真正的请求。</li>
</ul>
<h3 id="简单请求："><a href="#简单请求：" class="headerlink" title="简单请求："></a>简单请求：</h3><p>满足以下条件的请求是简单请求。</p>
<ol>
<li>请求方法是以下三种方法之一：<ul>
<li>HEAD</li>
<li>GET</li>
<li>POST</li>
</ul>
</li>
<li>HTTP的头信息不超出以下几种字段：<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type：只限于三个值： <code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code>,  <code>text/plain</code></li>
</ul>
</li>
</ol>
<h3 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h3><p>除了简单请求，都是非简单请求。</p>
<h3 id="Preflight请求"><a href="#Preflight请求" class="headerlink" title="Preflight请求"></a>Preflight请求</h3><p>又称为预检请求，在非简单请求之前，浏览器会发送一个preflight请求，询问后端服务器是否支持跨域，preflight请求都是Option请求，下面是一个列子。</p>
<ol>
<li>General块中可以看到，预检请求用的是 <code>OPTIONS</code>请求，而且返回值是200，说明请求成功了。</li>
</ol>
<p><strong>General</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Request</span> <span class="attr">URL</span>: <span class="attr">http</span>:<span class="comment">//10.10.143.144:9898/bff/api/v1/application/sysVariable/list?_t=1641265683731</span></span><br><span class="line">**<span class="title class_">Request</span> <span class="title class_">Method</span>**: <span class="variable constant_">OPTIONS</span></span><br><span class="line"><span class="title class_">Status</span> <span class="title class_">Code</span>: <span class="number">200</span> <span class="variable constant_">OK</span></span><br><span class="line"><span class="title class_">Remote</span> <span class="title class_">Address</span>: <span class="number">10.10</span><span class="number">.143</span><span class="number">.144</span>:<span class="number">9898</span></span><br><span class="line"><span class="title class_">Referrer</span> <span class="title class_">Policy</span>: strict-origin-when-cross-origin</span><br></pre></td></tr></table></figure>

<ol>
<li>Request Header区块中<strong>Access-Control-Request-Headers</strong>指定的是GET请求，说明接下来要进行的跨域请求是GET请求，而且有自定义请求头，放在<strong>Access-Control-Request-Headers</strong>字段中，请求的来源是<strong>Origin</strong>字段标明的，是<code>http://localhost:3001</code>，表示当前正在本机进行调试。</li>
</ol>
<p><strong>Request Header</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Accept: */*</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en,zh-CN;q=0.9,zh;q=0.8,zh-TW;q=0.7</span><br><span class="line">**Access-Control-Request-Headers**: app,cache-control,dcid,nounce,timestamp,userid,uuid</span><br><span class="line">**Access-Control-Request-Method**: GET</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Host: 10.10.143.144:9898</span><br><span class="line">**Origin**: http://localhost:3001</span><br><span class="line">Referer: http://localhost:3001/</span><br><span class="line">Sec-Fetch-Mode: cors</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Response Header区块中反应的是OPTIONS请求后的结果，图中四个标红加粗的字段表示服务器的跨域请求设置<ul>
<li><strong>Access-Control-Allow-Headers</strong>表示允许的自定义请求头。</li>
<li><strong>Access-Control-Allow-Methods</strong>表示允许的请求方法</li>
<li><strong>Access-Control-Allow-Origin</strong>表示允许的跨域请求的来源</li>
<li><strong>Access-Control-Max-Age</strong>表示预检请求的缓存时间，在这个时间内，如果再发生跨域请求，则无需发送预检请求。</li>
</ul>
</li>
</ol>
<p><strong>Response Header</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Headers</span>: app, cache-control, dcid, nounce, timestamp, userid, uuid</span><br><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Methods</span>: <span class="variable constant_">PUT</span>,<span class="variable constant_">DELETE</span>,<span class="variable constant_">GET</span>,<span class="variable constant_">POST</span>,<span class="variable constant_">OPTIONS</span></span><br><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span>: <span class="attr">http</span>:<span class="comment">//localhost:3001</span></span><br><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Expose</span>-<span class="title class_">Headers</span>: access-control-allow-headers, access-control-allow-methods, access-control-allow-origin, access-control-max-age, X-<span class="title class_">Frame</span>-<span class="title class_">Options</span></span><br><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Max</span>-<span class="title class_">Age</span>: <span class="number">3600</span></span><br><span class="line"><span class="title class_">Allow</span>: <span class="variable constant_">GET</span>, <span class="variable constant_">HEAD</span>, <span class="variable constant_">POST</span>, <span class="variable constant_">PUT</span>, <span class="variable constant_">DELETE</span>, <span class="variable constant_">TRACE</span>, <span class="variable constant_">OPTIONS</span>, <span class="variable constant_">PATCH</span></span><br><span class="line"><span class="title class_">Cache</span>-<span class="title class_">Control</span>: no-store</span><br><span class="line"><span class="title class_">Connection</span>: keep-alive</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Length</span>: <span class="number">0</span></span><br><span class="line"><span class="title class_">Date</span>: <span class="title class_">Tue</span>, <span class="number">04</span> <span class="title class_">Jan</span> <span class="number">2022</span> <span class="number">03</span>:<span class="number">08</span>:<span class="number">03</span> <span class="variable constant_">GMT</span></span><br><span class="line"><span class="title class_">Pragma</span>: no-cache</span><br><span class="line"><span class="title class_">Server</span>: nginx/<span class="number">1.17</span><span class="number">.5</span></span><br><span class="line"><span class="title class_">Strict</span>-<span class="title class_">Transport</span>-<span class="title class_">Security</span>: max-age=<span class="number">8995000</span>; includeSubdomains</span><br><span class="line"><span class="title class_">Vary</span>: <span class="title class_">Origin</span></span><br><span class="line"><span class="title class_">Vary</span>: <span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Request</span>-<span class="title class_">Method</span></span><br><span class="line"><span class="title class_">Vary</span>: <span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Request</span>-<span class="title class_">Headers</span></span><br><span class="line">X-<span class="title class_">Content</span>-<span class="title class_">Type</span>-<span class="title class_">Options</span>: nosniff</span><br><span class="line">X-<span class="title class_">Frame</span>-<span class="title class_">Options</span>: <span class="variable constant_">SAMEORIGIN</span></span><br><span class="line">X-<span class="variable constant_">XSS</span>-<span class="title class_">Protection</span>: <span class="number">1</span>; mode=block</span><br></pre></td></tr></table></figure>

<h2 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h2><p>解决跨域的方法很多，常用的有以下几种：</p>
<h3 id="后端开启CORS"><a href="#后端开启CORS" class="headerlink" title="后端开启CORS"></a>后端开启CORS</h3><p>根据同源策略，我们可以在后端设置<code>Access-Control-Allow-Origin</code>这个响应头，来允许指定的域名访问该资源。下面我们来看看如何在Node和Express中启用CORS。</p>
<ol>
<li>创建一个Express项目并安装cors<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm install express --save</span><br><span class="line">npm install cors --save</span><br></pre></td></tr></table></figure></li>
<li>在项目根目录下创建<code>server.js</code>文件，添加如下内容，这个服务器提供两个接口，一个是<code>/</code>，一个是<code>/users</code>，其中<code>/users</code>接口返回一个用户列表。而且在<code>server.js</code>中启用了CORS，允许<code>http://localhost:4200</code>这个地址访问该服务提供的接口。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Enable CORS</span></span><br><span class="line"><span class="keyword">let</span> corsOptions = &#123;</span><br><span class="line"> origin : [<span class="string">&#x27;http://localhost:4200&#x27;</span>], <span class="comment">// 前端项目地址</span></span><br><span class="line">&#125;;</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>(corsOptions));</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"> res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/users&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">const</span> users = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;Jane&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;,</span><br><span class="line"> ];</span><br><span class="line"></span><br><span class="line"> res.<span class="title function_">json</span>(users);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li>启动项目<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure></li>
<li>新建一个前端项目（Angular），启动项目后运行在localhost:4200,通过前端访问这个api时就不会有跨域问题了。<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HttpClient</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, <span class="title class_">OnInit</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">UsersModel</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./users.model&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HttpClient</span>&#125; <span class="keyword">from</span> <span class="string">&quot;@angular/common/http&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-users&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./users.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./users.component.less&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="attr">users</span>: <span class="title class_">UsersModel</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">http</span>: <span class="title class_">HttpClient</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">http</span>.<span class="property">get</span>&lt;<span class="title class_">UsersModel</span>[]&gt;(<span class="string">&#x27;http://localhost:3000/users&#x27;</span>)</span><br><span class="line">      .<span class="title function_">subscribe</span>(<span class="function">(<span class="params"><span class="attr">users</span>: <span class="title class_">UsersModel</span>[]</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">users</span> = users;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>记得在app.module.ts中启用HttpClientModule<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HttpClientModule</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">   <span class="attr">declarations</span>: [</span><br><span class="line">   <span class="title class_">AppComponent</span>,</span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">imports</span>: [</span><br><span class="line">     <span class="title class_">HttpClientModule</span>,</span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">providers</span>: [],</span><br><span class="line">   <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="使用JsonP"><a href="#使用JsonP" class="headerlink" title="使用JsonP"></a>使用JsonP</h3><p>JSONP (JSON with Padding) 是一种跨域数据交互协议，它允许页面从不同的域名下获取数据。其实现跨域的原理主要基于浏览器对<code>&lt;script&gt;</code>标签的宽松政策，即浏览器允许页面通过<code>&lt;script&gt;</code>标签加载并执行来自任何来源（即任何域名）的JavaScript代码。</p>
<p>浏览器对一些html标签允许跨域访问，比如<code>&lt;img&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;script&gt;</code>等，详情参考<a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#cross-origin_network_access">这里</a></p>
<p>以下是JSONP实现跨域的基本步骤：</p>
<ol>
<li><p><strong>创建<code>&lt;script&gt;</code>标签</strong>：在需要请求数据的网页中动态创建一个<code>&lt;script&gt;</code>标签，并设置其<code>src</code>属性为要请求的数据接口地址。这个地址通常会包含一个回调函数名作为参数。</p>
</li>
<li><p><strong>定义回调函数</strong>：在网页中定义一个JavaScript函数，该函数的名字就是之前在<code>src</code>属性中指定的回调函数名。当服务器响应返回时，这个函数会被调用，且响应的数据会作为参数传递给这个函数。</p>
</li>
<li><p><strong>服务器端响应</strong>：服务器接收到请求后，会将数据包装在一个函数调用中返回。这个函数名就是客户端请求中指定的那个回调函数名。例如，如果回调函数名为<code>handleResponse</code>，而返回的数据是<code>&#123;&quot;name&quot;: &quot;John&quot;&#125;</code>，那么服务器可能会返回如下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleResponse</span>(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>执行回调函数</strong>：由于<code>&lt;script&gt;</code>标签加载的是一个有效的JavaScript脚本，所以浏览器会执行这个脚本，即执行<code>handleResponse</code>函数，并将数据作为参数传入。这样，客户端就可以处理从服务器接收到的数据了。</p>
</li>
</ol>
<p>JsonP实现示意图。<br><img src="/../images/jsonp.png" alt="JSONP"></p>
<p>JSONP的主要优点是简单易用，不需要特殊的服务器配置，且几乎所有的浏览器都支持。然而，它也存在一些限制和安全风险：</p>
<ul>
<li><strong>仅支持GET请求</strong>：JSONP只能发起GET请求，无法使用POST等其他HTTP方法。</li>
<li><strong>安全性问题</strong>：因为JSONP本质上是在执行来自外部源的任意JavaScript代码，所以存在注入攻击的风险。必须确保数据来源可靠。</li>
<li><strong>错误处理困难</strong>：JSONP没有标准的错误处理机制，一旦请求失败，很难确定失败的原因。</li>
</ul>
<p>因此，在选择是否使用JSONP时，开发者需要权衡其带来的便利性和潜在的安全风险。随着CORS（跨源资源共享）等更现代的解决方案的出现，JSONP的使用正在逐渐减少。</p>
<p>Angular中HttpClient模块也提供了JSONP的支持，使用方法如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HttpClient</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-jsonp&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./jsonp.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./jsonp.component.less&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">JsonpComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="built_in">any</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">http</span>: <span class="title class_">HttpClient</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">jsonp</span>(<span class="string">&#x27;http://localhost:3000/users&#x27;</span>, <span class="string">&#x27;callback&#x27;</span>)</span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function">(<span class="params"><span class="attr">data</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">data</span> = data;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="前端使用反向代理"><a href="#前端使用反向代理" class="headerlink" title="前端使用反向代理"></a>前端使用反向代理</h3><p>这种方法一般是开发阶段使用的，因为本质上，前端是无法解决跨域问题的，只能通过后端来解决。</p>
<h4 id="Angular项目"><a href="#Angular项目" class="headerlink" title="Angular项目"></a>Angular项目</h4><p>Angular项目中可以使用<code>proxy.conf.json</code>文件配置反向代理，然后在<code>angular.json</code>或者<code>project.json</code>(基于Nx的Mono repo)中配置<code>proxyConfig</code>指向该文件即可。</p>
<p><code>proxy.conf.json</code>文件内容如下：<br>   <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;/api&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:3000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;secure&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><code>angular.json</code>或<code>project.json</code>文件内容如下：<br>   <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@angular-devkit/build-angular:dev-server&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;proxyConfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;proxy.conf.json&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="使用浏览器插件"><a href="#使用浏览器插件" class="headerlink" title="使用浏览器插件"></a>使用浏览器插件</h3><p>这个不做过多介绍，大家自行探索</p>
<h3 id="使用非安全模式启动浏览器"><a href="#使用非安全模式启动浏览器" class="headerlink" title="使用非安全模式启动浏览器"></a>使用非安全模式启动浏览器</h3><p>在Windows系统上，可以通过以下命令启动Chrome浏览器，这样就可以绕过浏览器的同源策略。这种方式也不推荐。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chrome.exe --user-data-dir=&quot;C://Chrome dev session&quot; --disable-web-security</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>express</tag>
        <tag>cors</tag>
        <tag>jsonp</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-debugging</title>
    <url>/2024/02/18/javascript-debugging/</url>
    <content><![CDATA[<h1 id="Debug-JavaScript-Applications"><a href="#Debug-JavaScript-Applications" class="headerlink" title="Debug JavaScript Applications"></a>Debug JavaScript Applications</h1><p>我平时调试的时候，基本都是以打log的方式实现的，也就是用<code>console.log</code>一顿输出，这种方式简单粗暴，但是确实比较费时，还是要掌握正统的调试方法。现在步骤记录如下。</p>
<ol>
<li>启动项目</li>
<li>来到项目所在的网页，按下F12打开开发者工具。</li>
<li>找到<code>source</code> tab, 然后找到以<code>webpack://</code>开头的源码。</li>
<li>依次展开目录，找到自己的代码，单击代码行左边的行号，就可以添加断点，然后按下F5，刷新页面，这时如果触发到断点，就会停下来。</li>
</ol>
<p><img src="/../images/js-debug.png" alt="js-debug"></p>
<p>如果你的项目比较新，使用的是ESBuild + Vite来构建的，那么源文件如下图所示：<br><img src="/../images/js-debug-esbuild+vite.png" alt="js-debug-esbuild"></p>
<h1 id="Set-breakpoint-in-code"><a href="#Set-breakpoint-in-code" class="headerlink" title="Set breakpoint in code"></a>Set breakpoint in code</h1><p>如果觉得以上办法设置断点太麻烦，也可以在代码里面设置，找到对应的代码行数，在前面加一行叫做 <code>debugger</code>,待项目热更新完毕，页面就会停在断点处。十分的方便。</p>
<p><img src="/../images/set-breakpoint.png" alt="set breakpoint"></p>
<p>是不是很方便呢？</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>debug</tag>
        <tag>debugging</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript data types</title>
    <url>/2024/02/18/javascript-data-types/</url>
    <content><![CDATA[<h1 id="JavaScript-Data-Types"><a href="#JavaScript-Data-Types" class="headerlink" title="JavaScript Data Types"></a>JavaScript Data Types</h1><p>JavaScript是一种弱类型语言，它有八种数据类型，分别是：</p>
<ul>
<li>String</li>
<li>Number</li>
<li>BigInt</li>
<li>Boolean</li>
<li>Null</li>
<li>Undefined</li>
<li>Symbol</li>
<li>Object</li>
</ul>
<p>除了Object之外，其他的数据类型都是原始类型（Primitive types）。<br>注意：<code>JavaScript中的Array、Function、Set、Map、RegExp等等都是Object类型。</code></p>
<h2 id="如何判断一个变量的类型"><a href="#如何判断一个变量的类型" class="headerlink" title="如何判断一个变量的类型"></a>如何判断一个变量的类型</h2><p>在JavaScript中，我们可以使用<code>typeof</code>操作符来判断一个变量的类型。<code>typeof</code>操作符返回一个字符串，表示变量的类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;Hello&#x27;</span>; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">123</span>; <span class="comment">// number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>; <span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>; <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Symbol</span>(<span class="string">&#x27;Hello&#x27;</span>); <span class="comment">// symbol</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;; <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> []; <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;; <span class="comment">// function</span></span><br></pre></td></tr></table></figure>

<p>注意：虽然Function类型是Object的子类型，但是<code>typeof</code>操作符返回的是<code>function</code>。</p>
<h2 id="如何精准的判断一个变量的类型"><a href="#如何精准的判断一个变量的类型" class="headerlink" title="如何精准的判断一个变量的类型"></a>如何精准的判断一个变量的类型</h2><p>在JavaScript中，我们可以使用<code>Object.prototype.toString</code>方法来精准的判断一个变量的类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;Hello&#x27;</span>); <span class="comment">// [object String]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">123</span>); <span class="comment">// [object Number]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>); <span class="comment">// [object Boolean]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>); <span class="comment">// [object Null]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]); <span class="comment">// [object Array]</span></span><br></pre></td></tr></table></figure>

<p>注意：<code>Object.prototype.toString</code>方法返回的是一个字符串，表示变量的类型。所以我们可以封装一个函数来判断一个变量的类型。（注意：判断数组可以用更好的方法 - <code>Array.isArray</code>方法）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getType</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(value).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下几个需要注意：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="keyword">typeof</span> <span class="number">1</span>; <span class="comment">// string, typeof 永远返回字符串。</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">// object, 这是一个历史遗留问题。看这里：https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">NaN</span>; <span class="comment">// number, NaN是一个特殊的number类型。</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">class</span> <span class="title class_">C</span> &#123;&#125;; <span class="comment">// function, class是一个语法糖，本质上还是function。</span></span><br><span class="line"><span class="keyword">typeof</span> something; <span class="comment">// undefined, 如果变量没有声明，那么typeof返回undefined。不会报错。</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="variable language_">document</span>.<span class="property">all</span>; <span class="comment">// undefined, All current browsers expose a non-standard host object document.all with type undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="instanceof-操作符"><a href="#instanceof-操作符" class="headerlink" title="instanceof 操作符"></a>instanceof 操作符</h2><p><code>instanceof</code>操作符用来判断一个对象是否是某个构造函数的实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>; <span class="comment">// true</span></span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="title class_">Object</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof">MDN: typeof</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString">MDN: Object.prototype.toString</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures">MDN: Data types</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof">instanceof</a></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>data types</tag>
        <tag>type</tag>
        <tag>typeof</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-design-pattern-adapter</title>
    <url>/2024/04/09/javascript-design-pattern-adapter/</url>
    <content><![CDATA[<h1 id="现实的例子"><a href="#现实的例子" class="headerlink" title="现实的例子"></a>现实的例子</h1><p>现实生活中适配器的例子，比如笔记本电脑的电源适配器，可以将 220V 电压转换为笔记本电脑需要的 12V 电压。在软件设计模式中，适配器模式也是类似的，它可以将一个类的接口转换为另一个类的接口，让原本由于接口不兼容而不能一起工作的类可以一起工作。</p>
<h1 id="适配器模式解决什么问题"><a href="#适配器模式解决什么问题" class="headerlink" title="适配器模式解决什么问题"></a>适配器模式解决什么问题</h1><p>接口不兼容问题：当一个类的接口与另一个类的接口不兼容时，可以使用适配器模式将一个类的接口转换为另一个类的接口。比如新开发的系统要接入旧系统的某些功能时，就可以使用适配器模式。</p>
<h1 id="示例讲解"><a href="#示例讲解" class="headerlink" title="示例讲解"></a>示例讲解</h1><p>有一个类<code>Target</code>，它有一个<code>operation</code>方法，但是现在需要将使用一个类<code>Adaptee</code>的<code>specificOperation</code>方法。此时可以借助<code>Adapter</code>模式，我们创建一个类<code>Adapter</code>，继承<code>Target</code>类，并持有一个<code>Adaptee</code>类的实例。在<code>Adapter</code>类的<code>operation</code>方法中，调用<code>Adaptee</code>的<code>specificOperation</code>方法。</p>
<p><img src="/../images/js-design-pattern-adapter.png" alt="UML"></p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">operation</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Target: The default operation.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adaptee</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">specificOperation</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Adaptee: Specific operation.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Target</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">adaptee</span>: <span class="title class_">Adaptee</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">adaptee</span>: <span class="title class_">Adaptee</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">adaptee</span> = adaptee;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">operation</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">adaptee</span>.<span class="title function_">specificOperation</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test code</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clientCode</span>(<span class="params"><span class="attr">target</span>: <span class="title class_">Target</span></span>) &#123;</span><br><span class="line">  target.<span class="title function_">operation</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> target = <span class="keyword">new</span> <span class="title class_">Target</span>();</span><br><span class="line"><span class="title function_">clientCode</span>(target);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> adaptee = <span class="keyword">new</span> <span class="title class_">Adaptee</span>();</span><br><span class="line"><span class="keyword">const</span> adapter = <span class="keyword">new</span> <span class="title class_">Adapter</span>(adaptee);</span><br><span class="line"><span class="title function_">clientCode</span>(adapter);</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>design pattern</tag>
        <tag>adapter</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-observer-mode</title>
    <url>/2023/11/18/javascript-design-pattern-observer/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>观察者模式是设计模式中非常重要的一个模式，它属于行为模式的一种。下面是wikipedia中对观察者模式的定义。</p>
<blockquote>
  In software design and engineering, the observer pattern is a software design pattern in which an object, named the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.  
</blockquote>

<p>是不是看得一头雾水？我们先以一个现实中的例子来解释观察者模式。假设你现在正在看一场球赛，那么这时候你是观察者(Observer)，而比赛是被观察者(Observable)，或者叫主题(Subject)。比赛中如果你支持的球队进球了，你会欢呼跳跃，而如果对方进球，你会沮丧失望。你的状态会根据比赛的状态而改变，这就是观察者模式的一个例子。</p>
<p>观察者模式有以下特征：</p>
<ol>
<li>Subject和观察者之间是一对多的关系。</li>
<li>每个观察者有一个<code>update</code>方法。</li>
<li>Subject(被观察者)维护一个观察者列表。</li>
<li>当Subject状态发生变化时，对于列表中每个观察者，都会调用它们的<code>update</code>方法通知他们。</li>
</ol>
<h2 id="Define-Observer"><a href="#Define-Observer" class="headerlink" title="Define Observer"></a>Define Observer</h2><p>下面的代码为每个观察者指定一个名字，当Subject发生变化时，<code>Observer</code>的<code>update</code>方法会被调用，打印出观察者的名字。<code>update</code>方法就是被观察者和观察者联系的纽带。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> updated`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Define-Subject"><a href="#Define-Subject" class="headerlink" title="Define Subject"></a>Define Subject</h2><p>Subject中文翻译为主题，它是一个对象，拥有注册观察者、删除观察者、通知观察者的方法。当某个特定事件发生时，Subject会通知所有观察者，让它们做出相应的反应。所以Subject实际上就是被观察者。</p>
<p>下面的代码为Subject添加了一个观察者数组，当Subject发生变化时，会遍历观察者数组，调用每个观察者的<code>update</code>方法。<code>subscribe</code>方法实际上就是<code>addObserver</code>方法，<code>unsubscribe</code>方法实际上就是<code>removeObserver</code>方法。这两个方法用来将观察者加入或者移除观察者数组。被移除数组的观察者无法再收到<code>Subject</code>的通知。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Observer</span> <span class="keyword">from</span> <span class="string">&#x27;./Observer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">observers</span>: <span class="title class_">Observer</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">subscribe</span>(<span class="params"><span class="attr">observer</span>: <span class="title class_">Observer</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">push</span>(observer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">unsubscribe</span>(<span class="params"><span class="attr">observer</span>: <span class="title class_">Observer</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span> = <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">o</span>) =&gt;</span> o !== observer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">o</span>) =&gt;</span> o.<span class="title function_">update</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Use-Observer"><a href="#Use-Observer" class="headerlink" title="Use Observer"></a>Use Observer</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Observer</span> <span class="keyword">from</span> <span class="string">&#x27;./Observer&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Subject</span> <span class="keyword">from</span> <span class="string">&#x27;./Subject&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"><span class="keyword">const</span> observer1 = <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="string">&#x27;Observer 1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> observer2 = <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="string">&#x27;Observer 2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> observer3 = <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="string">&#x27;Observer 3&#x27;</span>);</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">subscribe</span>(observer1);</span><br><span class="line">subject.<span class="title function_">subscribe</span>(observer2);</span><br><span class="line">subject.<span class="title function_">subscribe</span>(observer3);</span><br><span class="line">subject.<span class="title function_">notify</span>(); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">unsubscribe</span>(observer1);</span><br><span class="line">subject.<span class="title function_">notify</span>(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>在 &#x2F;&#x2F; 1 处，输入如下内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Observer 1 updated</span><br><span class="line">Observer 2 updated</span><br><span class="line">Observer 3 updated</span><br></pre></td></tr></table></figure>

<p>在 &#x2F;&#x2F; 2 处，输入如下内容，因为Observer 1被移除了，所以只有Observer 2和Observer 3收到了通知。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Observer 2 updated</span><br><span class="line">Observer 3 updated</span><br></pre></td></tr></table></figure>

<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ol>
<li>Subject(被观察者，也叫Observable)：拥有注册观察者、删除观察者、通知观察者的方法。</li>
<li>Observer(观察者)：拥有update方法，当Subject发生变化时，Observer的update方法会被调用。</li>
<li>观察者和被观察者之间是松耦合的，被观察者只知道观察者的接口，而不知道观察者的具体实现。</li>
</ol>
<p>网上常见的EventBus就是基于观察者模式实现的，当一个组件发生变化时，EventBus会通知所有订阅了这个事件的组件。下面是一个简单的EventBus实现。之所以将EventBus挂在到Window对象上，是因为这样可以在全局范围内使用EventBus。比如在不同的模块中，可以通过EventBus来通信。Module Federation中Remote模块和Host模块之间的通信也可以通过EventBus实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// eventBus.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventBus</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">listeners</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">on</span>(<span class="params">eventName, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">listeners</span>[eventName]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">listeners</span>[eventName] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">listeners</span>[eventName].<span class="title function_">push</span>(callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">eventName, data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">listeners</span>[eventName]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">listeners</span>[eventName].<span class="title function_">forEach</span>(<span class="function"><span class="params">callback</span> =&gt;</span> <span class="title function_">callback</span>(data));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> eventBus = <span class="keyword">new</span> <span class="title class_">EventBus</span>();</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">eventBus</span> = eventBus;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Emit an event from Remote module.</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">eventBus</span>.<span class="title function_">emit</span>(<span class="string">&#x27;someEvent&#x27;</span>, &#123; <span class="attr">message</span>: <span class="string">&#x27;Hello from Remote&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Listen for an event from Host module.</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">eventBus</span>.<span class="title function_">on</span>(<span class="string">&#x27;someEvent&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">message</span>); <span class="comment">// 输出: Hello from Remote</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>注意上面这个写法并不支持粘性事件，如果要支持粘性事件，该如何改进呢？</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>design pattern</tag>
        <tag>observer</tag>
        <tag>subscribe</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-design-pattern-strategy</title>
    <url>/2024/04/15/javascript-design-pattern-strategy/</url>
    <content><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>策略模式是一种行为设计模式，它定义了一系列算法，将每个算法封装到一个类中，并使它们可以相互替换。策略模式让算法独立于使用它的客户端。</p>
<h1 id="现实中的例子"><a href="#现实中的例子" class="headerlink" title="现实中的例子"></a>现实中的例子</h1><p>假设我们经营一家电影院，目前是销售淡季，我们推出了各种折扣，学生票八折，儿童票九折，VIP会员半价。我们要设计一个系统，根据不同的折扣算法计算电影票的价格。</p>
<p>不假思索的你可能写下了如下代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">UserType</span> &#123;</span><br><span class="line">  <span class="title class_">Regular</span>,</span><br><span class="line">  <span class="title class_">Student</span>,</span><br><span class="line">  <span class="title class_">Child</span>,</span><br><span class="line">  <span class="variable constant_">VIP</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MovieTicket</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> ticketPrice = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">userType</span>?: <span class="title class_">UserType</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setUserType</span>(<span class="params"><span class="attr">userType</span>: <span class="title class_">UserType</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">userType</span> = userType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getPrice</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable language_">this</span>.<span class="property">userType</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="title class_">UserType</span>.<span class="property">Student</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">ticketPrice</span> * <span class="number">0.8</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="title class_">UserType</span>.<span class="property">Child</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">ticketPrice</span> * <span class="number">0.9</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="title class_">UserType</span>.<span class="property">VIP</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">ticketPrice</span> * <span class="number">0.5</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">ticketPrice</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ticket = <span class="keyword">new</span> <span class="title class_">MovieTicket</span>();</span><br><span class="line">ticket.<span class="title function_">setUserType</span>(<span class="title class_">UserType</span>.<span class="property">Student</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ticket.<span class="title function_">getPrice</span>());</span><br></pre></td></tr></table></figure>

<p>我们来看看这段代码有什么问题：</p>
<ol>
<li>违反了开闭原则。如果我们要添加新的折扣类型，比如老年人票，就需要修改<code>MovieTicket</code>类，违反了开闭原则。</li>
<li>违反了单一职责原则。<code>MovieTicket</code>类不仅负责计算价格，还负责判断折扣类型，违反了单一职责原则。</li>
<li>耦合性太高，不易维护。如果折扣算法发生变化，需要修改<code>MovieTicket</code>类，不易维护。</li>
<li>其他类如果想要使用折扣算法的话，只能复制粘贴一份，导致代码重复。</li>
</ol>
<p>下面我们通过策略模式来重构这段代码，策略模式的精髓就是将算法和使用算法的类解耦，使得算法可以独立于使用它的类进行变化。</p>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Discount</span> &#123;</span><br><span class="line">  <span class="title function_">getDiscount</span>(): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentDiscount</span> <span class="keyword">implements</span> <span class="title class_">Discount</span> &#123;</span><br><span class="line">  <span class="title function_">getDiscount</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildrenDiscount</span> <span class="keyword">implements</span> <span class="title class_">Discount</span> &#123;</span><br><span class="line">  <span class="title function_">getDiscount</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.9</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIPDiscount</span> <span class="keyword">implements</span> <span class="title class_">Discount</span> &#123;</span><br><span class="line">  <span class="title function_">getDiscount</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MovieTicket</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> ticketPrice = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">discount</span>?: <span class="title class_">Discount</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setDiscount</span>(<span class="params"><span class="attr">discount</span>: <span class="title class_">Discount</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">discount</span> = discount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getPrice</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">discount</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">ticketPrice</span> * <span class="variable language_">this</span>.<span class="property">discount</span>.<span class="title function_">getDiscount</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;No discount set&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ticket = <span class="keyword">new</span> <span class="title class_">MovieTicket</span>();</span><br><span class="line">ticket.<span class="title function_">setDiscount</span>(<span class="keyword">new</span> <span class="title class_">StudentDiscount</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ticket.<span class="title function_">getPrice</span>());</span><br></pre></td></tr></table></figure>

<p>代码解析：</p>
<ol>
<li>首先定义一个接口<code>Discount</code>，它有一个<code>getDiscount</code>方法，返回折扣值。所有具体的折扣类都要实现这个接口。</li>
<li>然后定义三个具体的折扣类：<code>StudentDiscount</code>、<code>ChildrenDiscount</code>和<code>VIPDiscount</code>。在每个折扣类中，我们实现了<code>getDiscount</code>方法，返回不同的折扣值。</li>
<li>最后定义一个<code>MovieTicket</code>类，它有一个<code>ticketPrice</code>属性，表示电影票的价格，还有一个<code>discount</code>属性，表示折扣。我们定义了一个<code>setDiscount</code>方法，用来设置折扣。<code>getPrice</code>方法用来计算折扣后的价格。</li>
</ol>
<p>这种实现使得折扣算法和使用折扣的类解耦，使得折扣算法可以独立于使用它的类进行变化。好处如下：</p>
<ol>
<li>便于扩展，可以很容易地添加新的折扣类。只要这个类实现了<code>Discount</code>接口，就可以被<code>MovieTicket</code>类使用。</li>
<li>由于折扣算法和使用折扣的类解耦，所以折扣算法可以独立于使用它的类进行变化。如果折扣算法发生变化，只需要修改折扣类即可，不需要修改使用折扣的类, 比如儿童票从9折改成8折，只需要修改<code>ChildrenDiscount</code>类使其返回0.8即可。</li>
<li>如果有其他类想使用折扣算法的话，也可以直接使用。</li>
</ol>
<p>以上代码其实使用了依赖注入的方式，<code>MovieTicket</code>类依赖于<code>Discount</code>接口，我们通过Setter的方式将具体的折扣类注入到<code>MovieTicket</code>类中。</p>
<p>注意这里<code>discount</code>属性是可选的，因为我们在<code>getPrice</code>方法中判断了<code>discount</code>是否存在，如果不存在就抛出异常。这样做是为了防止忘记设置折扣而导致的错误。如果不设置为可选的话会报错：<code>Property &#39;discount&#39; has no initializer and is not definitely assigned in the constructor.</code> 由于TypeScript配置文件默认开启了<code>strictPropertyInitialization</code>选项导致的。</p>
<h1 id="策略模式UML图"><a href="#策略模式UML图" class="headerlink" title="策略模式UML图"></a>策略模式UML图</h1><p><img src="/../images/js-design-pattern-strategy.png" alt="image"></p>
<ul>
<li><code>Context</code>：消费策略的类相当于上例中的<code>MovieTicket</code>类，内涵一个抽象策略类，相当于上例中的<code>Discount</code>接口。</li>
<li><code>Strategy</code>：抽象策略类，相当于上例中的<code>Discount</code>接口。</li>
<li><code>ConcreteStrategy</code>：具体策略类，相当于上例中的<code>StudentDiscount</code>、<code>ChildrenDiscount</code>和<code>VIPDiscount</code>类。</li>
<li><code>execute</code>：执行策略的方法，相当于上例中的<code>getDiscount</code>方法。</li>
</ul>
<h1 id="策略模式的应用场景"><a href="#策略模式的应用场景" class="headerlink" title="策略模式的应用场景"></a>策略模式的应用场景</h1><ol>
<li>Sorting Algorithms: If you have a collection of data that can be sorted in several ways, you can use the Strategy pattern to switch between sorting algorithms (like quicksort, merge sort, heap sort) at runtime.  </li>
<li>Payment Methods: In an e-commerce application, you can use the Strategy pattern to switch between different payment methods (like credit card, PayPal, Bitcoin) at runtime.  </li>
<li>Compression Algorithms: If you have a file that can be compressed using different algorithms (like zip, rar, 7z), you can use the Strategy pattern to choose the compression algorithm at runtime.  </li>
<li>Travel Planning: If you have a travel planning application, you can use the Strategy pattern to switch between different travel strategies (like by car, by train, by plane) at runtime.</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>design pattern</tag>
        <tag>strategy</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript singleton mode</title>
    <url>/2023/11/18/javascript-design-pattern-singleton/</url>
    <content><![CDATA[<h1 id="A-simple-singleton-with-global-variable"><a href="#A-simple-singleton-with-global-variable" class="headerlink" title="A simple singleton with global variable"></a>A simple singleton with global variable</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Singleton</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Singleton</span>.<span class="property">getInstance</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;zdd&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> b = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;ddz&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>这是一个最简单的单例模式，但是这种方式有一个问题，就是instance是一个全局变量，会污染全局空间。稍微改进一下，将instance挂载到Singleton上。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Singleton</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Singleton</span>.<span class="property">getInstance</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">Singleton</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;zdd&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> b = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;ddz&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b);</span><br></pre></td></tr></table></figure>
<p>这样就不会污染全局空间了，但是这种方式还有一个问题，无法阻止使用者通过new Singleton()来创建实例。这无形中增加了使用者的心智负担，使用者必须提前知道Singleton是一个单例，也必须调用getInstance方法来获取实例。假设使用者用new Singleton()来创建实例，那么就会创建出多个实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title class_">Singleton</span>(<span class="string">&#x27;zdd&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Singleton</span>(<span class="string">&#x27;ddz&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c === d); <span class="comment">// false, not a singleton !!!</span></span><br></pre></td></tr></table></figure>

<p>为了避免用户通过<code>new</code>来创建实例，可以使用闭包来实现，将Singleton变成一个IIFE（Immediately Invoked Function Expression）。</p>
<h2 id="Use-IIFE"><a href="#Use-IIFE" class="headerlink" title="Use IIFE"></a>Use IIFE</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Singleton</span> = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里的init函数返回的是一个对象，而不是一个类的实例。</span></span><br><span class="line">  <span class="comment">// 这里init是箭头函数，最好不要使用this, 因为this指向global对象。</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params">name</span>) =&gt; (&#123;</span><br><span class="line">    name,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">getInstance</span>: <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">        instance = <span class="title function_">init</span>(name);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;zdd&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> b = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;ddz&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时，使用者就无法通过<code>new</code>来创建实例了，只能通过<code>getInstance</code>来获取实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title class_">Singleton</span>(); <span class="comment">// error， Singleton is not a constructor</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c === d);</span><br></pre></td></tr></table></figure>

<p>这里使用IIFE的好处是：</p>
<ol>
<li>不会污染全局空间，所有变量及方法都是私有的。</li>
<li>用户无法使用<code>new</code>来创建实例，只能通过<code>getInstance</code>来获取实例。</li>
</ol>
<p>为了区分私有方法和变量，以及公有方法和变量，可以使用下面的代码，更好的区分私有和公有。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Singleton</span> = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// Private methods and variables</span></span><br><span class="line">    <span class="keyword">const</span> privateVariable = <span class="string">&#x27;I am private variable&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">privateMethod</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Private method&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This object is the return value of init will be assigned to instance.</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// Public methods and variables</span></span><br><span class="line">      <span class="attr">publicVariable</span>: <span class="string">&#x27;I am public variable&#x27;</span>,</span><br><span class="line">      <span class="attr">publicMethod</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Public method&#x27;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Public method to get the singleton instance</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getInstance</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = <span class="title function_">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Expose the public method</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getInstance,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="keyword">const</span> singletonInstance1 = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"><span class="keyword">const</span> singletonInstance2 = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(singletonInstance1 === singletonInstance2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>前面说过，使用.getInstance()来获取实例，增加了用户的心智负担，如果想要用户通过new来创建实例，可以使用下面的代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Singleton</span> = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">createInstance</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      <span class="comment">// Init code goes here, If you want to exact init to a function, you must use createInstance.prototype.init = function(name)&#123;this.name = name&#125;. This will make init public to every instance, it&#x27;s bad idea！</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">      instance = <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> createInstance;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Singleton</span>(<span class="string">&#x27;zdd&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title class_">Singleton</span>(<span class="string">&#x27;ddz&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面是使用ES6的class来实现单例模式。代码更加简洁优雅。</p>
<h2 id="Use-class"><a href="#Use-class" class="headerlink" title="Use class"></a>Use class</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Singleton</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">      <span class="title class_">Singleton</span>.<span class="property">instance</span> = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="comment">// Your initialization code here</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Singleton</span>.<span class="property">instance</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Additional properties and methods can be added here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance1 = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"><span class="keyword">const</span> instance2 = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1 === instance2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>虽然这种方式代码简洁，但是这种方式有一个问题，就是用户可以通过<code>new Singleton()</code>来创建实例，虽然创建的实例都是同一个，但是还是很别扭，我们可以换一个思路，指导出一个实例，而不是导出整个类。</p>
<h2 id="Use-Proxy"><a href="#Use-Proxy" class="headerlink" title="Use Proxy"></a>Use Proxy</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Singleton</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">      <span class="title class_">Singleton</span>.<span class="property">instance</span> = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="comment">// Your initialization code here</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Singleton</span>.<span class="property">instance</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Additional properties and methods can be added here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> singletonInstance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Object</span>.<span class="title function_">freeze</span>(singletonInstance);</span><br></pre></td></tr></table></figure>

<p>这样用户只需使用我们导出的实例就行了，不用自己去创建实例。但是这种方式还是有一个问题，就是用户可以通过<code>singletonInstance.instance</code>来获取到实例，这样就破坏了单例模式的封装性。我们可以使用ES2022中新增的private field来解决这个问题。</p>
<h2 id="Use-private-field"><a href="#Use-private-field" class="headerlink" title="Use private field"></a>Use private field</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> #instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Singleton</span>.#instance) &#123;</span><br><span class="line">      <span class="title class_">Singleton</span>.#instance = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="comment">// Your initialization code here</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Singleton</span>.#instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Additional properties and methods can be added here</span></span><br><span class="line">  <span class="title function_">logInstance</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Singleton</span>.#instance);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Object</span>.<span class="title function_">freeze</span>(singleton);</span><br></pre></td></tr></table></figure>

<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="attr">instance</span>: <span class="title class_">Singleton</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">getInstance</span>(): <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Singleton</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">      <span class="title class_">Singleton</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Singleton</span>.<span class="property">instance</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="Use-Proxy-1"><a href="#Use-Proxy-1" class="headerlink" title="Use Proxy"></a>Use Proxy</h2><p>待补充。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>design pattern</tag>
        <tag>singleton</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-destruction</title>
    <url>/2024/03/17/javascript-destruction/</url>
    <content><![CDATA[<h1 id="javascript-destruction"><a href="#javascript-destruction" class="headerlink" title="javascript destruction"></a>javascript destruction</h1><h2 id="1-Object-destruction"><a href="#1-Object-destruction" class="headerlink" title="1. Object destruction"></a>1. Object destruction</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> response = &#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; code, status, <span class="attr">data</span>: &#123; name, age &#125; &#125; = response;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(code); <span class="comment">// 200</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(status); <span class="comment">// &quot;success&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// &quot;zdd&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure>

<h2 id="2-String-destruction"><a href="#2-String-destruction" class="headerlink" title="2. String destruction"></a>2. String destruction</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// &quot;h&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// &quot;e&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-rename-on-destruction"><a href="#3-rename-on-destruction" class="headerlink" title="3. rename on destruction"></a>3. rename on destruction</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>: myName &#125; = person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName); <span class="comment">// &quot;zdd&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-default-value-on-destruction"><a href="#4-default-value-on-destruction" class="headerlink" title="4. default value on destruction"></a>4. default value on destruction</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; name, age = <span class="number">20</span>, gender = <span class="string">&#x27;male&#x27;</span> &#125; = person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// &#x27;zdd&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gender); <span class="comment">// &#x27;male&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>Note</strong>: Each destructed property can have a default value if and only if the property is not present or its value is <code>undefined</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">address</span>: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; name, address = <span class="string">&#x27;Dalian&#x27;</span>, gender = <span class="string">&#x27;male&#x27;</span> &#125; = person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// zdd</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(address); <span class="comment">// null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gender); <span class="comment">// male</span></span><br></pre></td></tr></table></figure>

<p>In the above code, <code>address</code> is present in the <code>person</code> object, but its value is <code>null</code>, so the default value <code>Dalian</code> is not used.</p>
<p>如果解构中的属性值为<code>null</code>，则无法进行嵌套解构，会报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>,</span><br><span class="line">  <span class="attr">address</span>: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; name, <span class="attr">address</span>: &#123; city = <span class="string">&#x27;Dalian&#x27;</span>, street = <span class="string">&#x27;Jiefang Road&#x27;</span> &#125; = &#123;&#125; &#125; = person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// zdd</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(city); <span class="comment">// Cannot read properties of null (reading &#x27;city&#x27;)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(street); <span class="comment">// Cannot read properties of null (reading &#x27;street&#x27;)</span></span><br></pre></td></tr></table></figure>
<p>注意，以上代码会报错，虽然我们给了<code>address</code>一个默认值<code>&#123;&#125;</code>，但是<code>address</code>的原始值是<code>null</code>，所以默认值无法生效，这导致了<code>city</code>和<code>street</code>的解构报错。（相当于在<code>null</code>值中读取<code>city</code>和<code>street</code>）</p>
<p>要想解决这个问题，只能将嵌套解构变为二次解构。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>,</span><br><span class="line">  <span class="attr">address</span>: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; name, address = &#123;&#125; &#125; = person;</span><br><span class="line"><span class="keyword">const</span> &#123; city = <span class="string">&#x27;Dalian&#x27;</span>, street = <span class="string">&#x27;Jiefang Road&#x27;</span> &#125; = address || &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// zdd</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(city); <span class="comment">// Dalian</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(street); <span class="comment">// Jiefang Road</span></span><br></pre></td></tr></table></figure>
<p>第一次解构后，<code>address</code>的值为<code>null</code>，所以我们给<code>address</code>一个默认值<code>&#123;&#125;</code>，然后再次解构<code>city</code>和<code>street</code>，这样就不会报错了。</p>
<h2 id="5-rename-and-default-value-at-the-same-time"><a href="#5-rename-and-default-value-at-the-same-time" class="headerlink" title="5. rename and default value at the same time"></a>5. rename and default value at the same time</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>: myName, <span class="attr">age</span>: myAge = <span class="number">20</span>, <span class="attr">gender</span>: myGender = <span class="string">&#x27;male&#x27;</span>&#125; = person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName); <span class="comment">// &#x27;zdd&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myAge); <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myGender); <span class="comment">// &#x27;male&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-Array-destruction"><a href="#6-Array-destruction" class="headerlink" title="6. Array destruction"></a>6. Array destruction</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> [a, b, c] = nums;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>数组解构与对象解构不同，不需要指定属性名，只需要按照顺序解构即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> [firstColor, secondColor] = colors;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstColor); <span class="comment">// &#x27;red&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(secondColor); <span class="comment">// &#x27;green&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="7-get-element-at-specific-position"><a href="#7-get-element-at-specific-position" class="headerlink" title="7. get element at specific position"></a>7. get element at specific position</h2><p>The following code get the color at the third position, ignore the first two colors.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> [, , thirdColor] = colors;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(thirdColor); <span class="comment">// &#x27;blue&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="8-ignore-some-elements"><a href="#8-ignore-some-elements" class="headerlink" title="8. ignore some elements"></a>8. ignore some elements</h2><p>Get all elements in array except the first two.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> [, , ...restColors] = colors;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(restColors); <span class="comment">// [&#x27;blue&#x27;, &#x27;yellow&#x27;]</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：数组解构中，不定元素必须放在最后，如果不定元素后面还有其他元素，会报错。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> [...restColors, lastColor] = colors; <span class="comment">// SyntaxError: Rest element must be last element</span></span><br></pre></td></tr></table></figure>

<h2 id="9-Copy-array"><a href="#9-Copy-array" class="headerlink" title="9. Copy array"></a>9. Copy array</h2><p>ES5</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> newColors = colors.<span class="title function_">slice</span>(); <span class="comment">// or colors.concat();</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newColors); <span class="comment">// [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>ES6</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> [...newColors] = colors;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newColors); <span class="comment">// [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="9-swap-two-variables"><a href="#9-swap-two-variables" class="headerlink" title="9. swap two variables"></a>9. swap two variables</h2><p>Before ES6, we must introduce a temporary variable to swap two variables. But with destruction, we can swap two variables easily.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">[a, b] = [b, a];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h2 id="10-Nested-array-destruction"><a href="#10-Nested-array-destruction" class="headerlink" title="10. Nested array destruction"></a>10. Nested array destruction</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> [a, [b, c], d] = nums;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>destruction</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-design-pattern</title>
    <url>/2024/04/07/javascript-design-pattern/</url>
    <content><![CDATA[<h1 id="Creational-Design-Patterns"><a href="#Creational-Design-Patterns" class="headerlink" title="Creational Design Patterns"></a>Creational Design Patterns</h1><h2 id="Factory-Method"><a href="#Factory-Method" class="headerlink" title="Factory Method"></a>Factory Method</h2><p>Define an interface for creating an object, but let subclasses decide which class to instantiate. Lets a class defer instantiation to subclasses.</p>
<h2 id="Abstract-Factory"><a href="#Abstract-Factory" class="headerlink" title="Abstract Factory"></a>Abstract Factory</h2><p>Provides an interface for creating families of related or dependent objects without specifying their concrete class.</p>
<h2 id="Builder"><a href="#Builder" class="headerlink" title="Builder"></a>Builder</h2><p>Separate the construction of a complex object from its representing so that the same construction process can create different representations.</p>
<h2 id="Prototype"><a href="#Prototype" class="headerlink" title="Prototype"></a>Prototype</h2><p>Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.</p>
<h2 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h2><p>Ensure a class only has one instance and provide a global point of access to it. <a href="https://zdd.github.io/2023/11/18/javascript-singleton-mode/">implementation</a></p>
<h3 id="Application-scenarios"><a href="#Application-scenarios" class="headerlink" title="Application scenarios:"></a>Application scenarios:</h3><ol>
<li><p>Logging: Singleton can be used to create a single log object that writes to a log file. This object can be used across the application without creating additional instances. </p>
</li>
<li><p>Database Connections: Singleton can be used to create a single database connection that is shared across the application. This can help to prevent an over-allocation of resources. </p>
</li>
<li><p>Configuration Settings: If your application has a set of configuration settings that need to be accessed in multiple places, a Singleton can be used to store these settings in one location. </p>
</li>
<li><p>Caching: Singleton can be used to create a cache that is accessible throughout the application. This can be useful for storing data that is expensive or time-consuming to fetch.  </p>
</li>
<li><p>Shared Resource Access: If your application needs to control access to a shared resource, such as a printer or a file, you can use a Singleton to ensure that only one object is able to access the resource at a time.</p>
</li>
</ol>
<h1 id="Structural-Design-Patterns"><a href="#Structural-Design-Patterns" class="headerlink" title="Structural Design Patterns"></a>Structural Design Patterns</h1><h2 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h2><p>Convert the interface of a class into another interface clients expect. Lets classes work together that couldn’t otherwise because of incompatible interfaces. <a href="https://zdd.github.io/2024/04/09/javascript-design-pattern-adapter/">implementation</a></p>
<h2 id="Bridge"><a href="#Bridge" class="headerlink" title="Bridge"></a>Bridge</h2><p>Decouple an abstraction from its implementation so that the two can vary independently.</p>
<h2 id="Composite"><a href="#Composite" class="headerlink" title="Composite"></a>Composite</h2><p>Compose objects into tree structures to represent part-whole hierarchies. Lets clients treat individual objects and compositions of objects uniformly.</p>
<h2 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h2><p>Attach additional responsibilities to an object dynamically. Provide a flexible alternative to extending functionality.</p>
<h2 id="Facade"><a href="#Facade" class="headerlink" title="Facade"></a>Facade</h2><p>Provide unified interface to a set of interfaces in a subsystem. Defines a high-level interface that makes the subsystem easier to use.</p>
<h2 id="Flyweight"><a href="#Flyweight" class="headerlink" title="Flyweight"></a>Flyweight</h2><p>Using sharing to support large numbers of fine grained objects efficiently.</p>
<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>Provide a surrogate or placeholder for another object to control access to it.</p>
<h1 id="Behavioral-Design-Patterns"><a href="#Behavioral-Design-Patterns" class="headerlink" title="Behavioral Design Patterns"></a>Behavioral Design Patterns</h1><h2 id="Chain-of-Responsibility"><a href="#Chain-of-Responsibility" class="headerlink" title="Chain of Responsibility"></a>Chain of Responsibility</h2><p>Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chian the receiving objects and pass the request along the chain until an object handles it.</p>
<h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><p>Encapsulate a request as an object, thereby letting you parameterize clients with queues, queue or log requests, ans support undoable operations.</p>
<h2 id="Interpreter"><a href="#Interpreter" class="headerlink" title="Interpreter"></a>Interpreter</h2><p>Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.</p>
<h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><p>Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.</p>
<h2 id="Mediator"><a href="#Mediator" class="headerlink" title="Mediator"></a>Mediator</h2><p>Define an object that encapsulates how a set of objects interact. Promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.</p>
<h2 id="Memento"><a href="#Memento" class="headerlink" title="Memento"></a>Memento</h2><p>Without violating encapsulation, capture and externalize an object’s internal state so that the object can be restored to this state later.</p>
<h2 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h2><p>Define a one-to-many dependency between objects so that when on object changes state, all its dependents are notified and updated automatically.(<strong>Also known as Publish&#x2F;Subscribe or Event-Subscriber pattern</strong>)<br><a href="https://zdd.github.io/2023/11/18/javascript-design-pattern-observer/">implementation</a></p>
<h3 id="Application-scenarios-1"><a href="#Application-scenarios-1" class="headerlink" title="Application scenarios"></a>Application scenarios</h3><ol>
<li><p>Event Handling: This is the most common use case in JavaScript. DOM events like clicks, key presses, form submissions etc., are handled using the Observer pattern.  </p>
</li>
<li><p>Model-View-Controller (MVC) Architecture: In MVC architecture, the model notifies the view and the controller about changes in the data. This is done using the Observer pattern.  </p>
</li>
<li><p>Web Sockets: Web sockets use the Observer pattern to listen for new messages from the server and update the UI accordingly.  </p>
</li>
<li><p>React&#x2F;Redux: In Redux, the store is the subject and the React components are the observers. When the state in the store changes, the components are notified to re-render.  </p>
</li>
<li><p>Angular: Angular uses the Observer pattern in its event system and its HTTP module.</p>
</li>
</ol>
<h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.</p>
<h2 id="Strategy"><a href="#Strategy" class="headerlink" title="Strategy"></a>Strategy</h2><p>Define a family of algorithms, encapsulate each one, and make them interchangeable. Lets the algorithm vary independently from clients that use it. <a href="https://zdd.github.io/2024/04/15/javascript-design-pattern-strategy/">implementation</a></p>
<h2 id="Template-Method"><a href="#Template-Method" class="headerlink" title="Template Method"></a>Template Method</h2><p>Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure.</p>
<h2 id="Visitor"><a href="#Visitor" class="headerlink" title="Visitor"></a>Visitor</h2><p>Represent an operation to be performed on the elements of an object structure. Lets ou define a new operation without changing the classes of the elements on which it operates.</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>design pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-errors</title>
    <url>/2024/11/12/javascript-errors/</url>
    <content><![CDATA[<h2 id="TypeError-Cannot-read-properties-of-undefined-reading-‘xxx’"><a href="#TypeError-Cannot-read-properties-of-undefined-reading-‘xxx’" class="headerlink" title="TypeError: Cannot read properties of undefined (reading ‘xxx’)"></a>TypeError: Cannot read properties of undefined (reading ‘xxx’)</h2><p>This error occurs when you try to access a property of an object that is undefined.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>); <span class="comment">// Uncaught TypeError: Cannot read properties of undefined (reading &#x27;age&#x27;)</span></span><br></pre></td></tr></table></figure>

<h2 id="ReferenceError-a-is-not-defined"><a href="#ReferenceError-a-is-not-defined" class="headerlink" title="ReferenceError: a is not defined"></a>ReferenceError: a is not defined</h2><p>This is the most common error in JavaScript. It means that you are trying to use a variable that has not been declared.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure>

<h2 id="ReferenceError-Cannot-access-‘a’-before-initialization"><a href="#ReferenceError-Cannot-access-‘a’-before-initialization" class="headerlink" title="ReferenceError: Cannot access ‘a’ before initialization"></a>ReferenceError: Cannot access ‘a’ before initialization</h2><p>This error occurs when you try to access a variable before it is declared. After ES6, this means you touch the (TDZ)temporal dead zone. temporal dead zone is the zone between the start of the block scope and the actual declaration of the variable.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// Uncaught ReferenceError: Cannot access &#x27;a&#x27; before initialization</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="TypeError-Assignment-to-constant-variable"><a href="#TypeError-Assignment-to-constant-variable" class="headerlink" title="TypeError: Assignment to constant variable."></a>TypeError: Assignment to constant variable.</h2><p>This error occurs when you try to reassign a value to a constant variable.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="number">2</span>; <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>

<h2 id="RangeError-Maximum-call-stack-size-exceeded"><a href="#RangeError-Maximum-call-stack-size-exceeded" class="headerlink" title="RangeError: Maximum call stack size exceeded"></a>RangeError: Maximum call stack size exceeded</h2><p>See the following code, why it cause the <code>RangeError: Maximum call stack size exceeded</code> error?</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Philip&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>The error is caused by the recursive call to the setter of name.</p>
<ol>
<li><code>person.name = &#39;Philip&#39;;</code> will call the setter <code>set name(value)</code>.</li>
<li>Inside the setter, <code>this.name = value;</code> will call the setter again. that’s an infinite loop.</li>
</ol>
<p>How to fix it?<br>We can just use another name for the property, like <code>_name</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zdd&#x27;</span>);</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Philip&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>In this way, </p>
<ol>
<li><code>person.name = &#39;Philip&#39;;</code> will call the setter <code>set name(value)</code></li>
<li>Inside the setter function, we set the value to <code>_name</code> property, not the <code>name</code> property. So it will not cause the infinite loop.</li>
</ol>
<p>You can find the details of <code>getter</code> and <code>setter</code> from <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get">here</a>.</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>error</tag>
        <tag>setter</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-event-loop</title>
    <url>/2024/02/19/javascript-event-loop/</url>
    <content><![CDATA[<h1 id="JavaScript-Event-Loop"><a href="#JavaScript-Event-Loop" class="headerlink" title="JavaScript Event Loop"></a>JavaScript Event Loop</h1><p>Event loop是JavaScript中一个非常重要的知识点，也是面试中常考的内容，今天我们来详细了解一下。其实Event loop的过程非常简单，它是一个无限循环，Javascript引擎等待任务，执行任务，sleep，等待下一个任务，继续执行任务，如此循环往复。虽说简单，但是也有如下特点：</p>
<ol>
<li>浏览器渲染只有在JS执行完才进行，这二者是互斥的。</li>
<li>所以如果一个任务执行时间过长，会导致页面卡顿，也会导致用户交互不流畅，比如点击按钮没反应。</li>
</ol>
<p>比如下面这段代码：运行时你会发现，浏览器一直在执行<code>count</code>函数，而这函数需要运行很久，在它执行完之前，浏览器不会渲染页面，用户也无法进行交互。也就是你看不到progress进度，也看不到按钮，更别说点击这个按钮了。这就印证了上面第一点，执行JS和渲染页面是互斥的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;progress&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&#x27;alert(&quot;Hello, world!&quot;)&#x27;</span>&gt;</span>show alert<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">count</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1e7</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        i++;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        progress.<span class="property">innerHTML</span> = i;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">count</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p>那么问题来了，如何修复上面这个问题呢？答案是将1e7这么多的数字分批处理，比如每次处理1000个数字，然后让浏览器渲染一次，这样就可以看到进度条了，也可以点击按钮了。</p>
<p>那么如何分批呢？其实分批不是目的，目的是给浏览器一个渲染的机会，这时我们就可以使用setTimeout来实现，因为setTimeout中的回调函数是异步执行的，在执行完同步代码后，浏览器会渲染一次，然后再执行setTimeout中的回调函数。如此往复。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;progress&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&#x27;alert(&quot;Hello, world!&quot;)&#x27;</span>&gt;</span>show alert<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> i = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">count</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// do a piece of the heavy job (*)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">do</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        i++;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        progress.<span class="property">innerHTML</span> = i;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125; <span class="keyword">while</span> (i % <span class="number">1e3</span> != <span class="number">0</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (i &lt; <span class="number">1e7</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">setTimeout</span>(count);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">count</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>上面代码的执行顺序是这样的：</p>
<ol>
<li>执行同步代码，先处理1000个数字。</li>
<li>i &lt; 1e7, 表示还有数字需要处理，所以调用setTimeout，将count函数放到宏任务队列中。</li>
<li>同步代码执行完毕，浏览器渲染一次，用户可以看到进度条。</li>
<li>从宏任务队列中取出count函数，继续处理1000个数字。</li>
<li>重复2-4步骤，直到i &gt;&#x3D; 1e7。</li>
</ol>
<p>如此这般，既不影响浏览器更新dom，也不影响渲染，也不耽误用户交互。岂不美哉？</p>
<h2 id="浏览器如何执行一段JavaScript代码？"><a href="#浏览器如何执行一段JavaScript代码？" class="headerlink" title="浏览器如何执行一段JavaScript代码？"></a>浏览器如何执行一段JavaScript代码？</h2><p>当浏览器加载一个页面时，它会创建一个主线程来执行JavaScript代码。主线程是单线程的，意味着它一次只能执行一个任务。当主线程执行JavaScript代码时，它会遵循以下步骤：</p>
<ol>
<li>先执行同步代码。</li>
<li>遇到异步代码时，做如下处理<ol>
<li>如果是宏任务代码，将其回调函数放到宏任务队列中。</li>
<li>如果是微任务代码，将其回调函数放到微任务队列中。</li>
</ol>
</li>
<li>同步代码执行完毕后，开始依次执行微任务队列中的微任务（即回调函数）。</li>
<li><code>浏览器渲染</code></li>
<li>微任务队列清空后，从宏任务队列取出一个任务（即回调函数）执行，然后回到步骤1</li>
</ol>
<p>注意：步骤3，5的执行也遵循第1， 2两点规则。这么做是为了处理微任务和宏任务的嵌套关系。微任务队列执行每次都会清空微任务队列，而宏任务队列每次只执行一个任务。</p>
<h3 id="什么异步代码？"><a href="#什么异步代码？" class="headerlink" title="什么异步代码？"></a>什么异步代码？</h3><p>异步代码是指不会立即执行的代码，而是在将来某个时间点执行的代码。常见的异步代码有：</p>
<ol>
<li><code>setTimeout</code> 和 <code>setInterval</code>。</li>
<li><code>Promise</code>，<code>async/await</code>。</li>
<li><code>MutationObserver</code>等等。</li>
</ol>
<p>除了异步代码，剩下的就是同步代码。</p>
<h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><ul>
<li><code>setTimeout</code></li>
<li><code>setInterval</code></li>
</ul>
<h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><ul>
<li><code>Promise</code>，<code>async/await</code></li>
<li><code>queueMicrotask</code></li>
<li><code>MutationObserver</code></li>
<li><code>process.nextTick</code>（Node.js）</li>
</ul>
<p>对于Promise需要特别注意：Promise本身是同步代码，但是其<code>.then</code>, <code>.catch</code>, <code>.finally</code>对应的回调函数是异步代码。对于<code>queueMicrotask</code>，它是一个新的API，用于将一个微任务添加到微任务队列中。(If we’d like to execute a function asynchronously (after the current code), but before changes are rendered or new events handled, we can schedule it with queueMicrotask.)</p>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="1-以下代码输出什么？"><a href="#1-以下代码输出什么？" class="headerlink" title="1. 以下代码输出什么？"></a>1. 以下代码输出什么？</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;resolve&#x27;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>输出结果是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Start</span><br><span class="line">resolve</span><br><span class="line">End</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>这个题考察的点就是Promise的构造函数体是同步代码，所以输出<code>Start</code>后紧接着会先输出<code>resolve</code>，然后是<code>End</code>。而<code>.then</code>方法中的回调函数是异步代码，所以会在同步代码执行完毕后执行，所以最后输出1.</p>
<h3 id="1-以下代码输出什么？-1"><a href="#1-以下代码输出什么？-1" class="headerlink" title="1. 以下代码输出什么？"></a>1. 以下代码输出什么？</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span> = <span class="string">&#x27;background:blue&#x27;</span>;</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span> = <span class="string">&#x27;background:black&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>答：用户会直接看到一个黑色的页面，蓝色页面根本不会出现，连闪现的过程也没有。根据Event Loop模型，代码执行过程如下：</p>
<ol>
<li>执行同步代码，<code>document.body.style = &#39;background:blue&#39;;</code>，将页面背景色设置为蓝色。</li>
<li>遇到微任务<code>Promise.resolve().then()</code>，将其回调函数放到微任务队列中。</li>
<li>同步代码执行完毕，开始执行微任务队列中的微任务，即将页面背景色设置为黑色。</li>
<li>浏览器开始渲染页面，用户看到的是黑色的页面。</li>
</ol>
<p>也就是说，在页面渲染之前，<code>document.body.style</code>早已经在 Promise 的回调函数中被赋值为<code>black</code> 了。<br>注意，浏览器会在每次微任务队列清空时渲染一次，如下图所示。<br><img src="/../images/event-loop-render.png" alt="event-loop"></p>
<h3 id="以下代码输出什么？"><a href="#以下代码输出什么？" class="headerlink" title="以下代码输出什么？"></a>以下代码输出什么？</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)));</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>);</span><br></pre></td></tr></table></figure>
<p>答案：1 7 3 5 2 6 4.<br>首先执行同步代码，输出如下：</p>
<ul>
<li>控制台：1 7</li>
<li>微任务队列：<code>[() =&gt; console.log(3), () =&gt; setTimeout(() =&gt; console.log(4)), () =&gt; console.log(5)]</code></li>
<li>宏任务队列：<code>[()=&gt;console.log(2)</code>, <code>()=&gt;console.log(6)]</code></li>
</ul>
<p>然后执行微任务队列中的微任务，输出如下：</p>
<ul>
<li>控制台：1 7 3 5</li>
<li>微任务队列：[]  &#x2F;&#x2F; 微任务队列清空</li>
<li>宏任务队列：<code>[()=&gt;console.log(2), ()=&gt;console.log(6), () =&gt; console.log(4)]</code></li>
</ul>
<p>最后执行宏任务队列中的宏任务，输出如下：</p>
<ul>
<li>控制台：1 7 3 5 2 6 4</li>
<li>微任务队列：[]  &#x2F;&#x2F; 微任务队列清空</li>
<li>宏任务队列：[]  &#x2F;&#x2F; 宏任务队列清空</li>
</ul>
<h3 id="2-以下代码输出什么？"><a href="#2-以下代码输出什么？" class="headerlink" title="2. 以下代码输出什么？"></a>2. 以下代码输出什么？</h3><p>注意以下代码需要在Node.js环境下运行。因为<code>process.nextTick</code>是Node.js的API。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Timeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Promise then&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">asyncFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Async/Await&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">asyncFunction</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Node.js</span></span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Next tick&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Start</span><br><span class="line">End</span><br><span class="line">Promise <span class="keyword">then</span></span><br><span class="line">Async/Await</span><br><span class="line">Next tick</span><br><span class="line">Timeout</span><br></pre></td></tr></table></figure>
<p>还是按照以下执行顺序来分析：</p>
<ol>
<li><p>先执行同步代码，输出<code>Start</code>和<code>End</code>。</p>
</li>
<li><p>在执行微任务队列代码，输出<code>Promise then</code>和<code>Async/Await</code>和<code>Next tick</code>。</p>
</li>
<li><p>最后执行宏任务队列代码，输出<code>Timeout</code>。注意每次只执行一个宏任务，然后再执行微任务队列中的微任务，如此往复。</p>
</li>
<li><p>微任务队列每次执行都清空。</p>
</li>
<li><p>宏任务队列每次只取一个任务执行。</p>
</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h2><ul>
<li><a href="https://javascript.info/event-loop">https://javascript.info/event-loop</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop">MDN: Event Loop</a></li>
<li><a href="https://youtu.be/8aGhZQkoFbQ">https://youtu.be/8aGhZQkoFbQ</a></li>
<li><a href="https://www.youtube.com/watch?v=SrNQS8J67zc">https://www.youtube.com/watch?v=SrNQS8J67zc</a></li>
<li><a href="https://www.youtube.com/watch?v=u1kqx6AenYw">https://www.youtube.com/watch?v=u1kqx6AenYw</a></li>
<li><a href="https://javascript.info/event-loop#:~:text=Rendering%20never%20happens%20while%20the,such%20as%20processing%20user%20events">https://javascript.info/event-loop#:~:text=Rendering%20never%20happens%20while%20the,such%20as%20processing%20user%20events</a>.</li>
<li><a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model">https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model</a></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>event</tag>
        <tag>event loop</tag>
        <tag>macrotask</tag>
        <tag>microtask</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-export</title>
    <url>/2024/07/25/javascript-export/</url>
    <content><![CDATA[<h2 id="Export-from-…"><a href="#Export-from-…" class="headerlink" title="Export * from …"></a>Export * from …</h2><p>This syntax is used to re-export all <code>named exports</code> from another module. It does not work for default exports.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// math.mjs</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">subtract</span> = (<span class="params">a, b</span>) =&gt; a - b;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">a, b</span>) =&gt; a * b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; add, subtract &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> multiply; <span class="comment">// default export</span></span><br></pre></td></tr></table></figure>

<p>File <code>index.mj</code> re-exports all named exports from <code>math.mjs</code>, in this case, <code>add</code> and <code>subtract</code>, but not <code>multiply</code>, since it is a default export.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.mjs</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./math.mjs&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>Now you can import all named exports from <code>index.mjs</code> using the following syntax:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.mjs</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> mathfunc <span class="keyword">from</span> <span class="string">&#x27;./index.mjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mathfunc.<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mathfunc.<span class="title function_">subtract</span>(<span class="number">2</span>, <span class="number">1</span>)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This one does not work, will cause an error: </span></span><br><span class="line"><span class="comment">/// mathfunc.multiply is not a function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mathfunc.<span class="title function_">multiply</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>module</tag>
        <tag>import</tag>
        <tag>export</tag>
      </tags>
  </entry>
  <entry>
    <title>Event-delegate</title>
    <url>/2023/07/19/javascript-event-delegate/</url>
    <content><![CDATA[<h2 id="什么是事件代理（也叫事件委托）"><a href="#什么是事件代理（也叫事件委托）" class="headerlink" title="什么是事件代理（也叫事件委托）"></a>什么是事件代理（也叫事件委托）</h2><p>事件代理是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。比如，我们有一个<code>ul</code>元素，里面有很多<code>li</code>元素，我们想要给每个<code>li</code>元素添加点击事件。有两种方法可以完成这件事：</p>
<ol>
<li>给每个<code>li</code>元素都添加一个点击事件，弊端是如果<code>li</code>元素很多的话，就会导致代码很冗余，如果后面还有新的<code>li</code>元素添加进来，还需要给新的<code>li</code>元素添加点击事件，导致代码很难维护。</li>
<li>给<code>ul</code>元素添加一个点击事件，然后在事件处理程序中判断点击的是哪个<code>li</code>元素，然后执行对应的操作即可，简洁高效。<code>这种方法就是事件代理</code>。</li>
</ol>
<h2 id="事件代理的原理"><a href="#事件代理的原理" class="headerlink" title="事件代理的原理"></a>事件代理的原理</h2><p>事件代理的原理是利用事件冒泡，将本应由被点击元素处理了的事件委托给其父元素来处理，这样就可以在事件处理程序中判断点击的是哪个元素，然后执行对应的操作。<br>不支持事冒泡的事件无法使用事件代理，比如<code>blur</code>、<code>focus</code>、<code>load</code>、<code>unload</code>等事件。</p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>下面代码为<code>ul</code>元素添加了一个点击事件，然后在事件处理程序中判断点击的是哪个<code>li</code>元素，然后执行对应的操作。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>);</span><br><span class="line">list.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">target</span> &amp;&amp; e.<span class="property">target</span>.<span class="property">nodeName</span> === <span class="string">&#x27;LI&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">innerHTML</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>而下面的代码为table元素添加了点击事件，然后在事件处理程序中判断点击的是哪个<code>td</code>元素，然后执行对应的操作。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;my-table&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> table = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;my-table&quot;</span>);</span><br><span class="line">table.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Only handle click on td element.</span></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>() === <span class="string">&quot;td&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">`You clicked on td element with value <span class="subst">$&#123;e.target.innerHTML&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="为啥突然想到这个呢？"><a href="#为啥突然想到这个呢？" class="headerlink" title="为啥突然想到这个呢？"></a>为啥突然想到这个呢？</h2><p>因为最近在做一个drag and drop的app，需要在拖拽的时候显示preview（被拖拽元素跟着鼠标走），需要一个操作就是克隆被拖拽的元素，而cloneNode这个方法是无法克隆事件的（只能克隆inline事件，无法克隆通过属性或者event listener添加的事件），而如果使用的是事件代理模式，则不存在这个问题。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>event</tag>
        <tag>delegate</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-falsy-values</title>
    <url>/2025/02/06/javascript-falsy-values/</url>
    <content><![CDATA[<h1 id="Falsy-values-in-JavaScript"><a href="#Falsy-values-in-JavaScript" class="headerlink" title="Falsy values in JavaScript"></a>Falsy values in JavaScript</h1><p>JavaScript has the following falsy values. When used in a boolean context, they will be coerced to <code>false</code>.</p>
<table>
<thead>
<tr>
<th>Value</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Glossary/Null">null</a></td>
<td>Null</td>
<td>The keyword null — the absence of any value.</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Glossary/Undefined">undefined</a></td>
<td>Undefined</td>
<td>undefined — the primitive value.</td>
</tr>
<tr>
<td>false</td>
<td>Boolean</td>
<td>The keyword false.</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Glossary/NaN">NaN</a></td>
<td>Number</td>
<td>NaN — not a number.</td>
</tr>
<tr>
<td>0</td>
<td>Number</td>
<td>The Number zero, also including 0.0, 0x0, etc.</td>
</tr>
<tr>
<td>-0</td>
<td>Number</td>
<td>The Number negative zero, also including -0.0, -0x0, etc.</td>
</tr>
<tr>
<td>0n</td>
<td>BigInt</td>
<td>The BigInt zero, also including 0x0n, etc. Note that there is no BigInt negative zero — the negation of 0n is 0n.</td>
</tr>
<tr>
<td>“”</td>
<td>String</td>
<td>Empty string value, also including <code>&#39;&#39;</code> and &#96;&#96;.</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/all">document.all</a></td>
<td>Object</td>
<td>The only falsy object in JavaScript is the built-in document.all.</td>
</tr>
</tbody></table>
<p>注意：<code>falsy</code>value在<code>if(...)</code>中返回false。</p>
<h1 id="Truthy-values"><a href="#Truthy-values" class="headerlink" title="Truthy values"></a>Truthy values</h1><p>除了上面的<code>Falsy values</code>，剩下的都是<code>truthy values</code>.</p>
<h1 id="Truthy-values-actually-false"><a href="#Truthy-values-actually-false" class="headerlink" title="Truthy values actually &#x3D;&#x3D;false"></a>Truthy values actually &#x3D;&#x3D;false</h1><p>注意，有些值虽然是truthy values，但是它们竟然<code>==fasle</code>，所以，永远不要在JS中使用<code>==</code>!.<br>以下这些比较结果都是true。至于原因嘛，请看<a href="https://zdd.github.io/2024/11/18/javascript-operator-equal/">这篇</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;0&#x27;</span> == <span class="literal">false</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">0</span>) == <span class="literal">false</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>) == <span class="literal">false</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;0&#x27;</span>) == <span class="literal">false</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] == <span class="literal">false</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([[]] == <span class="literal">false</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">0</span>] == <span class="literal">false</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>Reference: <a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy">https://developer.mozilla.org/en-US/docs/Glossary/Falsy</a></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>falsy</tag>
        <tag>boolean</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-functional-programming</title>
    <url>/2024/04/14/javascript-functional-programming/</url>
    <content><![CDATA[<h1 id="What-is-functional-programming"><a href="#What-is-functional-programming" class="headerlink" title="What is functional programming?"></a>What is functional programming?</h1><p>Functional programming is a programming paradigm that treats computation as the evaluation of mathematical functions and avoids changing state and mutable data.</p>
<h1 id="Functional-programming-concepts"><a href="#Functional-programming-concepts" class="headerlink" title="Functional programming concepts"></a>Functional programming concepts</h1><h2 id="Pure-functions"><a href="#Pure-functions" class="headerlink" title="Pure functions"></a>Pure functions</h2><p>A function is called pure function if it returns the same result for the same arguments and has no side effects.</p>
<p>And here is the full definition of a pure function from <a href="https://en.wikipedia.org/wiki/Pure_function#cite_note-1">WikiPedia</a></p>
<blockquote>
<p>In computer programming, a pure function is a function that has the following properties</p>
</blockquote>
<blockquote>
<p>the function return values are identical for identical arguments (no variation with local static variables, non-local variables, mutable reference arguments or input streams, i.e., referential transparency), and<br>the function has no side effects (no mutation of local static variables, non-local variables, mutable reference arguments or input&#x2F;output streams).</p>
</blockquote>
<h3 id="pure-function"><a href="#pure-function" class="headerlink" title="pure function"></a>pure function</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="non-pure-function"><a href="#non-pure-function" class="headerlink" title="non-pure function"></a>non-pure function</h3><p>In the following example, the <code>calculateTax</code> function depends on the external variable <code>taxRate</code>. This means that if <code>taxRate</code> changes, the output of <code>calculateTax</code> changes even if the input remains the same. Therefore, <code>calculateTax</code> is not a pure function. </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> taxRate = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateTax</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> amount * taxRate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Is the following function pure?</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergeArray</span>(<span class="params">arr1, arr2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr1.<span class="title function_">push</span>(...arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>No, the function <code>mergeArray</code> is not pure because it modifies the <code>arr1</code> array in place using the <code>push</code> method.</p>
<p>How to make the <code>mergeArray</code> function pure?</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergeArray</span>(<span class="params">arr1, arr2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [...arr1, ...arr2];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Immutable-data"><a href="#Immutable-data" class="headerlink" title="Immutable data"></a>Immutable data</h2><p>In functional programming, data is immutable, which means it cannot be changed once it’s created. Instead of modifying existing data, we create new data with the desired changes.</p>
<h2 id="Side-effects"><a href="#Side-effects" class="headerlink" title="Side effects"></a>Side effects</h2><p>A function is said to have a side effect if it modifies some state or variable outside its scope.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">incrementCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">incrementCount</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">// Outputs: 1</span></span><br></pre></td></tr></table></figure>
<p>In this example, the function <code>incrementCount</code> has a side effect because it modifies the global variable <code>count</code>. This is a side effect because it’s changing state outside of its own scope.</p>
<h2 id="Referential-transparency"><a href="#Referential-transparency" class="headerlink" title="Referential transparency"></a>Referential transparency</h2><p>A function is called referentially transparent if it can be replaced with its value without changing the program’s behavior.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// Outputs: 5</span></span><br></pre></td></tr></table></figure>

<p>In this example, the function <code>add</code> is referentially transparent because we can replace <code>add(2, 3)</code> with <code>5</code> without changing the program’s behavior.</p>
<h2 id="First-class-functions"><a href="#First-class-functions" class="headerlink" title="First-class functions"></a>First-class functions</h2><p>In JavaScript, functions are first-class citizens. It means we can assign functions to variables, pass functions as arguments to other functions, and return functions from other functions.</p>
<h3 id="function-as-variable"><a href="#function-as-variable" class="headerlink" title="function as variable"></a>function as variable</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// Outputs: 5</span></span><br></pre></td></tr></table></figure>

<h3 id="function-as-argument"><a href="#function-as-argument" class="headerlink" title="function as argument"></a>function as argument</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isEven</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> evens = nums.<span class="title function_">filter</span>(isEven);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(evens);</span><br></pre></td></tr></table></figure>

<h3 id="function-as-return-value"><a href="#function-as-return-value" class="headerlink" title="function as return value"></a>function as return value</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createGreeter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> greet = <span class="title function_">createGreeter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>(<span class="string">&#x27;John&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="Higher-order-functions"><a href="#Higher-order-functions" class="headerlink" title="Higher-order functions"></a>Higher-order functions</h2><p>A function that takes one or more functions as arguments or returns a function is called a higher-order function.<br>There are many functions in javascript that are higher-order functions, such as <code>map</code>, <code>filter</code>, <code>reduce</code>, <code>forEach</code>, <code>sort</code>, etc.</p>
<h2 id="declarative-vs-imperative"><a href="#declarative-vs-imperative" class="headerlink" title="declarative vs imperative"></a>declarative vs imperative</h2><p>Declarative programming is a programming paradigm that expresses the logic of a computation without describing its control flow. In contrast, imperative programming is a programming paradigm that uses statements that change a program’s state.</p>
<p>Example:<br>Given an array of numbers, multiply all even numbers by 10 and return the sum of them.</p>
<h3 id="Imperative-way"><a href="#Imperative-way" class="headerlink" title="Imperative way:"></a>Imperative way:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numbers.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (numbers[i] % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    sum += numbers[i] * <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 60</span></span><br></pre></td></tr></table></figure>

<h3 id="Declarative-way"><a href="#Declarative-way" class="headerlink" title="Declarative way:"></a>Declarative way:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = numbers</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function"><span class="params">num</span> =&gt;</span> num * <span class="number">10</span>)</span><br><span class="line">  .<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, num</span>) =&gt;</span> acc + num, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 60</span></span><br></pre></td></tr></table></figure>

<h1 id="Benefits-of-functional-programming"><a href="#Benefits-of-functional-programming" class="headerlink" title="Benefits of functional programming"></a>Benefits of functional programming</h1><ul>
<li>Easy to test</li>
<li>Easy to run in parallel(concurrency)</li>
<li>Easy to cache</li>
</ul>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://en.wikipedia.org/wiki/Functional_programming">Wikipedia</a></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>function</tag>
        <tag>functional programming</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-flatmap</title>
    <url>/2024/03/02/javascript-flatmap/</url>
    <content><![CDATA[<h1 id="JavaScript-flatMap"><a href="#JavaScript-flatMap" class="headerlink" title="JavaScript flatMap"></a>JavaScript flatMap</h1><p>flatMap is the combination of map and flat, It first maps each element using a mapping function, then flattens(only one level) the result into a new array. It’s the same as map followed by flat.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">flatMap</span>(f); <span class="comment">// is equal to arr.map(f).flat();</span></span><br></pre></td></tr></table></figure>

<p><strong>Note that flatMap only flattening one level</strong></p>
<p>所以，<code>flatMap</code>最多只对二维数组有效，对于多维数组，可以使用<code>arr.map(f).flat(Infinity)</code>。</p>
<p>以下代码的作用是，给定一个数组，将数组中每个元素和它的2倍放到一个新数组中，并将所有结果放到一个新数组中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">flatMap</span>(<span class="function"><span class="params">x</span> =&gt;</span> [x, x * <span class="number">2</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 2, 4, 3, 6, 4, 8, 5, 10]</span></span><br></pre></td></tr></table></figure>
<p>is equal to</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> [x, x * <span class="number">2</span>]).<span class="title function_">flat</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [1, 2, 2, 4, 3, 6, 4, 8, 5, 10]</span></span><br></pre></td></tr></table></figure>

<p>看下面的例子，给定一个字符串数组，其中每个元素是一句话，我们需要将每个句子拆分成单词，并将所有单词放到一个新数组中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  <span class="string">&#x27;It is sunny today&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;I am happy&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;I am learning JavaScript&#x27;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">flatMap</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [&quot;It&quot;, &quot;is&quot;, &quot;sunny&quot;, &quot;today&quot;, &quot;I&quot;, &quot;am&quot;, &quot;happy&quot;, &quot;I&quot;, &quot;am&quot;, &quot;learning&quot;, &quot;JavaScript&quot;]</span></span><br></pre></td></tr></table></figure>
<p>is equal to</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  <span class="string">&#x27;It is sunny today&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;I am happy&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;I am learning JavaScript&#x27;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)).<span class="title function_">flat</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [&quot;It&quot;, &quot;is&quot;, &quot;sunny&quot;, &quot;today&quot;, &quot;I&quot;, &quot;am&quot;, &quot;happy&quot;, &quot;I&quot;, &quot;am&quot;, &quot;learning&quot;, &quot;JavaScript&quot;]</span></span><br></pre></td></tr></table></figure>

<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So, When to use <code>flatMap</code>? When using <code>Array.prototype.map</code> the callback function usually return an element, but sometimes it returns an array, and you want to flatten the result. Then you can use <code>flatMap</code> to make the code more concise and readable.</p>
<p>当使用<code>Array.prototype.map</code>的回调函数返回数组时，你通常都要使用<code>flatMap</code>.</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>array</tag>
        <tag>flatmap</tag>
        <tag>flat</tag>
        <tag>map</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-garbage-collection</title>
    <url>/2025/02/26/javascript-garbage-collection/</url>
    <content><![CDATA[<p>JavaScript的垃圾收集机制主要是为了自动管理内存，使得开发者不需要手动去分配和释放内存。这种机制主要依赖于一些算法来追踪和标记不再使用的对象，然后回收它们所占用的内存空间。以下是简述的两个主要机制：</p>
<ol>
<li><p><strong>引用计数（Reference Counting）</strong>：</p>
<ul>
<li>在引用计数机制中，每个对象都维护着一个记录它被引用次数的计数器。每当有新的引用指向该对象时，计数器加一；当某个引用失效或被移除时，计数器减一。一旦某个对象的引用计数降为0，就说明这个对象不再被使用，可以安全地将其从内存中删除。</li>
<li>但是，引用计数有一个显著的问题是它无法处理循环引用的情况，即两个或多个对象互相引用，但实际上这些对象已经不可达（无法从根对象访问到）。这会导致这些对象永远不会被回收，从而造成内存泄漏。</li>
</ul>
</li>
<li><p><strong>标记-清除（Mark-and-Sweep）</strong>：</p>
<ul>
<li>标记-清除是现代JavaScript引擎中最常用的垃圾收集算法。在这个机制下，垃圾收集器会定期从根对象（如全局变量、当前调用栈中的局部变量等）开始遍历所有可达的对象，并给这些对象做上标记。完成标记阶段后，任何没有被标记的对象就被认为是不可达的，因此可以从内存中清除。</li>
<li>这种方法解决了引用计数中的循环引用问题，因为它不关心对象之间的相互引用，只关注对象是否能通过根对象访问到。</li>
</ul>
</li>
</ol>
<p>除了上述两种基本的垃圾收集机制外，现代JavaScript引擎还可能采用其他优化技术，比如分代收集（Generational GC），它基于大多数对象很快变得不可用的假设，将对象分为不同的“代”，并更频繁地检查较新的对象以提高效率。</p>
<p>总的来说，JavaScript的垃圾收集机制旨在让开发者不必担心内存管理的问题，尽管如此，了解这些机制有助于编写更高效的代码，避免潜在的内存泄漏问题。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>garbage collection</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-file-collecting</title>
    <url>/2024/02/27/javascript-file-collecting/</url>
    <content><![CDATA[<h1 id="JavaScript-File-Collecting"><a href="#JavaScript-File-Collecting" class="headerlink" title="JavaScript File Collecting"></a>JavaScript File Collecting</h1><p>今天收到老婆的一个需求，她有一个文件夹，里面包含若干文件和子文件夹，子文件夹又包含文件及子文件夹，她需要将这些文件全部收集到一个文件夹中。收集后的文件要从1开始命名，依次递增。我想到了 Node.js，可以使用 Node.js 来实现这个需求。</p>
<h2 id="代码实现-百度文心一言版"><a href="#代码实现-百度文心一言版" class="headerlink" title="代码实现 - 百度文心一言版"></a>代码实现 - 百度文心一言版</h2><p>这个版本一开始错误百出，经过我修改后才能使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="property">promises</span>;</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fileIndex = <span class="number">3001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">copyAndRenameFiles</span>(<span class="params">srcDir, destDir</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 确保目标目录存在</span></span><br><span class="line">    <span class="keyword">await</span> fs.<span class="title function_">access</span>(destDir);</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="comment">// 如果不存在，则创建目标目录</span></span><br><span class="line">    <span class="keyword">await</span> fs.<span class="title function_">mkdir</span>(destDir, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 读取srcDir中的所有文件和文件夹</span></span><br><span class="line">  <span class="keyword">const</span> entries = <span class="keyword">await</span> fs.<span class="title function_">readdir</span>(srcDir, &#123; <span class="attr">withFileTypes</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> entries) &#123;</span><br><span class="line">    <span class="keyword">const</span> srcPath = path.<span class="title function_">join</span>(srcDir, entry.<span class="property">name</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(srcPath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (entry.<span class="title function_">isDirectory</span>()) &#123;</span><br><span class="line">      <span class="comment">// 如果是文件夹，则递归调用</span></span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">copyAndRenameFiles</span>(srcPath, destDir);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (entry.<span class="title function_">isFile</span>()) &#123;</span><br><span class="line">      <span class="keyword">const</span> destBaseName = <span class="string">`<span class="subst">$&#123;fileIndex&#125;</span>`</span>; <span class="comment">// 新文件的基本名称</span></span><br><span class="line">      <span class="keyword">const</span> destExtname = path.<span class="title function_">extname</span>(entry.<span class="property">name</span>); <span class="comment">// 获取原文件的扩展名</span></span><br><span class="line">      <span class="keyword">const</span> destPath = path.<span class="title function_">join</span>(destDir, <span class="string">`<span class="subst">$&#123;destBaseName&#125;</span><span class="subst">$&#123;destExtname&#125;</span>`</span>); <span class="comment">// 目标文件完整路径</span></span><br><span class="line">      <span class="comment">// 如果是文件，则复制到目标文件夹并重命名</span></span><br><span class="line">      <span class="keyword">await</span> fs.<span class="title function_">copyFile</span>(srcPath, destPath);</span><br><span class="line">      fileIndex++; <span class="comment">// 更新文件索引</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fileIndex; <span class="comment">// 返回下一个可用的文件索引</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> sourceFolder = <span class="string">&#x27;xxx&#x27;</span>; <span class="comment">// 顶层文件夹路径</span></span><br><span class="line"><span class="keyword">const</span> destinationFolder = <span class="string">&#x27;xxx&#x27;</span>; <span class="comment">// 目标文件夹路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从1开始编号</span></span><br><span class="line"><span class="title function_">copyAndRenameFiles</span>(sourceFolder, destinationFolder)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">finalFileIndex</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">`所有文件已成功复制到目标文件夹，并从1开始重新编号到<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">        finalFileIndex - <span class="number">1</span></span></span></span><br><span class="line"><span class="subst"><span class="string">      &#125;</span>。`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;在复制过程中发生错误:&#x27;</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="代码实现-ChatGPT4"><a href="#代码实现-ChatGPT4" class="headerlink" title="代码实现-ChatGPT4"></a>代码实现-ChatGPT4</h2><p>这个版本一次通过，一行未改。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="property">promises</span>;</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里使用参数arrayOfFiles递归收集所有文件，思路很巧妙。</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getAllFiles</span>(<span class="params">dirPath, arrayOfFiles</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> files = <span class="keyword">await</span> fs.<span class="title function_">readdir</span>(dirPath);</span><br><span class="line"></span><br><span class="line">  arrayOfFiles = arrayOfFiles || [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> file <span class="keyword">of</span> files) &#123;</span><br><span class="line">    <span class="keyword">const</span> filepath = path.<span class="title function_">join</span>(dirPath, file);</span><br><span class="line">    <span class="keyword">const</span> stat = <span class="keyword">await</span> fs.<span class="title function_">stat</span>(filepath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stat.<span class="title function_">isDirectory</span>()) &#123;</span><br><span class="line">      arrayOfFiles = <span class="keyword">await</span> <span class="title function_">getAllFiles</span>(filepath, arrayOfFiles);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      arrayOfFiles.<span class="title function_">push</span>(filepath);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arrayOfFiles;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">copyFilesWithNumberedNames</span>(<span class="params">sourceDir, targetDir</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Create target directory if it does not exist</span></span><br><span class="line">    <span class="keyword">await</span> fs.<span class="title function_">mkdir</span>(targetDir, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get all files from the source directory</span></span><br><span class="line">    <span class="keyword">const</span> filesToCopy = <span class="keyword">await</span> <span class="title function_">getAllFiles</span>(sourceDir);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copy each file with a new numbered name</span></span><br><span class="line">    <span class="keyword">let</span> fileNumber = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> file <span class="keyword">of</span> filesToCopy) &#123;</span><br><span class="line">      <span class="keyword">const</span> newFilename = <span class="string">`<span class="subst">$&#123;fileNumber&#125;</span><span class="subst">$&#123;path.extname(file)&#125;</span>`</span>;</span><br><span class="line">      <span class="keyword">const</span> targetPath = path.<span class="title function_">join</span>(targetDir, newFilename);</span><br><span class="line">      <span class="keyword">await</span> fs.<span class="title function_">copyFile</span>(file, targetPath);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Copied <span class="subst">$&#123;file&#125;</span> to <span class="subst">$&#123;targetPath&#125;</span>`</span>);</span><br><span class="line">      fileNumber++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;All files have been copied successfully.&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;An error occurred:&#x27;</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sourceDirectory = <span class="string">&#x27;xxx&#x27;</span>; <span class="comment">// Replace with your source directory path</span></span><br><span class="line"><span class="keyword">const</span> targetDirectory = <span class="string">&#x27;xxx&#x27;</span>; <span class="comment">// Replace with your target directory path</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">copyFilesWithNumberedNames</span>(sourceDirectory, targetDirectory);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>node</tag>
        <tag>file</tag>
        <tag>example</tag>
      </tags>
  </entry>
  <entry>
    <title>hoisting</title>
    <url>/2024/02/20/javascript-hoisting/</url>
    <content><![CDATA[<h1 id="Hoisting-in-JavaScript"><a href="#Hoisting-in-JavaScript" class="headerlink" title="Hoisting in JavaScript"></a>Hoisting in JavaScript</h1><p>JavaScript Hoisting refers to the process whereby the interpreter appears to move the declaration of functions, variables, classes, or imports to the top of their scope, prior to execution of the code.</p>
<h2 id="Variable-Hoisting"><a href="#Variable-Hoisting" class="headerlink" title="Variable Hoisting"></a>Variable Hoisting</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>The above code is equivalent to:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line">a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>注意变量提示只提升到它所在的作用域的顶部，而不是全局作用域的顶部。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// ReferenceError: a is not defined</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">inner</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">outer</span>();</span><br></pre></td></tr></table></figure>

<p>The above code is equivalent to:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// ReferenceError: a is not defined</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a; <span class="comment">// a is hoisted to the top of its enclosing function `inner`.</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">inner</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">outer</span>();</span><br></pre></td></tr></table></figure>

<h2 id="Function-Hoisting"><a href="#Function-Hoisting" class="headerlink" title="Function Hoisting"></a>Function Hoisting</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">foo</span>(); <span class="comment">// hello</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The above code is equivalent to:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// [Function: foo]</span></span><br></pre></td></tr></table></figure>

<p>注意函数提升和变量提升一样，只提升到它所在的作用域的顶部，而不是全局作用域的顶部。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">inner</span>(); <span class="comment">// ReferenceError: inner is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">inner</span>(); <span class="comment">// &#x27;Hello&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">outer</span>();</span><br></pre></td></tr></table></figure>

<h2 id="Hoisting-in-ES6"><a href="#Hoisting-in-ES6" class="headerlink" title="Hoisting in ES6"></a>Hoisting in ES6</h2><p>ES6中的<code>let</code>和<code>const</code>不会被提升，所以在使用之前必须先声明。<code>let</code>和<code>const</code>会产生暂时性死区（Temporal Dead Zone）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// ReferenceError: Cannot access &#x27;a&#x27; before initialization</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>关于这一点实际上是有争议的，有些观点认为，<code>let</code>和<code>const</code>是被提升的，只是在TDZ中，不能访问。看下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// ReferenceError: Cannot access &#x27;x&#x27; before initialization</span></span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们把<code>const x = 2;</code>注释掉，那么代码就可以正常运行，此时x使用的是外层的x。这说明<code>const x = 2;</code>是被提升的（进而掩盖了外层的x），只是在TDZ中不能访问。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 1</span></span><br><span class="line">  <span class="comment">// const x = 2;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Temporal-dead-zone-TDZ"><a href="#Temporal-dead-zone-TDZ" class="headerlink" title="Temporal dead zone (TDZ)"></a>Temporal dead zone (TDZ)</h2><p>A variable declared with <code>let</code>, <code>const</code>, or <code>class</code> is said to be in a <code>&quot;temporal dead zone&quot; (TDZ)</code> from the start of the block until code execution reaches the place where the variable is declared and initialized.<br>下面的代码中,</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Temporal dead zone (TDZ), TDZ 从block开始的地方开始，到其定义的地方结束。</span></span><br><span class="line"><span class="comment">// 在TDZ中访问let定义的变量会产生ReferenceError。</span></span><br><span class="line"><span class="comment">// 而var定义的变量则不存在此问题，因为var有hoisting(变量提升)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// TDZ starts at beginning of scope</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(bar); <span class="comment">// undefined</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="keyword">var</span> bar = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> foo = <span class="number">2</span>; <span class="comment">// End of TDZ (for foo)</span></span><br><span class="line">  <span class="keyword">const</span> xxx = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Arrow function is not hoisted.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">foo</span>(); <span class="comment">// ReferenceError: Cannot access &#x27;foo&#x27; before initialization</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Function expression is not hoisted.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">foo</span>(); <span class="comment">// ReferenceError: Cannot access &#x27;foo&#x27; before initialization</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="difference-between-variable-hoisting-and-function-hoisting"><a href="#difference-between-variable-hoisting-and-function-hoisting" class="headerlink" title="difference between variable hoisting and function hoisting"></a>difference between variable hoisting and function hoisting</h2><p>变量提升只提升变量的声明，不提升赋值，所以变量提升后的值是 undefined。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>函数提升是整体提升，所以可以放心的调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">foo</span>(); <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Modern JavaScript中，应避免使用变量提升和函数提升，遵循以下三点可以保证：</p>
<ol>
<li>Use <code>let</code> and <code>const</code> instead of <code>var</code>。</li>
<li>Use strict mode.</li>
<li>Always declare variables and functions before using them.</li>
</ol>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>以下代码输出什么？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">bar</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>()); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>
<p>答案：输出8。</p>
<p>提升后的代码如下，注意：JavaScript中允许同名函数存在，后面的函数会覆盖前面的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">bar</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>以下代码输出什么？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">b</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<p>答案：1</p>
<p>提升后的代码如下，<code>function a()</code>的声明提升至<code>function b()</code>的顶部，而<code>a = 10;</code>是对<code>function a()</code>的再赋值，不会影响外部的变量<code>a</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">b</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果我们把<code>function a() &#123;&#125;</code>注释掉，那么代码就会输出<code>10</code>，因为此时<code>a = 10;</code>是对外部变量<code>a</code>的赋值。</p>
<h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><p>以下代码输出什么？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 第四题</span></span><br><span class="line"><span class="string">以下代码输出什么？</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br></pre></td></tr></table></figure>


<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h2><p>MDN: <a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting">Hoisting</a></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>function</tag>
        <tag>hoisting</tag>
        <tag>variable</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript identifiers</title>
    <url>/2024/02/18/javascript-identifiers/</url>
    <content><![CDATA[<h1 id="JavaScript-identifiers"><a href="#JavaScript-identifiers" class="headerlink" title="JavaScript identifiers"></a>JavaScript identifiers</h1><h2 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h2><p>JavaScript标识符可以使用如下字符：</p>
<ul>
<li>Unicode字母（包括中文）</li>
<li>字母（A-Z，a-z）</li>
<li>数字（0-9）</li>
<li>下划线（_）- 通常用于变量的前缀或者后缀，用来表示私有变量</li>
<li>美元符号（$）- 通常用于一些library，比如jQuery。</li>
</ul>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>标识符不能以数字开头</li>
<li>标识符不能包含空格</li>
<li>标识符不能是保留字</li>
</ul>
<h2 id="JavaScript-保留字"><a href="#JavaScript-保留字" class="headerlink" title="JavaScript 保留字"></a>JavaScript 保留字</h2><p>JavaScript 保留字是一些特殊的关键字，它们有特殊的用途，不能用作标识符。下面是一些JavaScript保留字：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span> <span class="keyword">case</span> <span class="keyword">catch</span> <span class="keyword">class</span> <span class="title class_">const</span> <span class="keyword">continue</span> <span class="keyword">debugger</span> <span class="keyword">default</span> <span class="keyword">delete</span> <span class="keyword">do</span></span><br><span class="line"><span class="keyword">else</span> enum <span class="keyword">export</span> <span class="keyword">extends</span> <span class="literal">false</span> <span class="keyword">finally</span> <span class="keyword">for</span> <span class="keyword">function</span> <span class="keyword">if</span> <span class="keyword">import</span> <span class="keyword">in</span> <span class="keyword">instanceof</span></span><br><span class="line"><span class="keyword">new</span> <span class="literal">null</span> <span class="keyword">return</span> <span class="variable language_">super</span> <span class="keyword">switch</span> <span class="variable language_">this</span> <span class="keyword">throw</span> <span class="literal">true</span> <span class="keyword">try</span> <span class="keyword">typeof</span> <span class="keyword">var</span> <span class="keyword">void</span> <span class="keyword">while</span> <span class="keyword">with</span></span><br><span class="line"><span class="keyword">yield</span></span><br></pre></td></tr></table></figure>

<p>在strict mode下，还有一些额外的保留字：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">implements interface <span class="keyword">let</span> package private protected public <span class="keyword">static</span></span><br></pre></td></tr></table></figure>

<h2 id="冷知识"><a href="#冷知识" class="headerlink" title="冷知识"></a>冷知识</h2><ul>
<li><p><code>undefined/NaN/Infinity</code>等等都属于全局变量，而不是一个关键字，所以你可以使用他们作为变量名，但是不建议这样做。比如下面的代码在Node环境是合法的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="literal">undefined</span> = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>); <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以使用中文作为变量名，但是不建议这样做。比如下面代码是合法的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> 你好 = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(你好); <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>identifiers</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-import</title>
    <url>/2024/07/14/javascript-import/</url>
    <content><![CDATA[<h1 id="Static-import"><a href="#Static-import" class="headerlink" title="Static import"></a>Static import</h1><p>The static <code>import</code> declaration is used to import read-only live bindings which are exported by another module.</p>
<p>Static import is syntactic.</p>
<h2 id="Named-imports"><a href="#Named-imports" class="headerlink" title="Named imports"></a>Named imports</h2><p>Each import has a name, which must be the same as the corresponding export name in the imported module.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// math.mjs</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.mjs</span></span><br><span class="line"><span class="keyword">import</span> &#123; add, subtract &#125; <span class="keyword">from</span> <span class="string">&#x27;./math.mjs&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Default-imports"><a href="#Default-imports" class="headerlink" title="Default imports"></a>Default imports</h2><p>You can import the default export of a module using the following syntax:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// math.mjs</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can use any name here, not limited to <code>add</code>. But you can only have one default export per module.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.mjs</span></span><br><span class="line"><span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">&#x27;./math.mjs&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Namespace-imports"><a href="#Namespace-imports" class="headerlink" title="Namespace imports"></a>Namespace imports</h2><p>You can also import all exports from a module using the following syntax:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// math.mjs</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.mjs</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">&#x27;./math.mjs&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Side-effects-imports"><a href="#Side-effects-imports" class="headerlink" title="Side effects imports"></a>Side effects imports</h2><p>You can also import a module for its side effects only, without importing any bindings. This is useful when you just want to run the code in the module, but don’t need to import any of its bindings.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./math.mjs&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>This is very common in Angular code, especially with Module Federation, where you import a module for its side effects only.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bootstrap.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; bootstrapApplication &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; appConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.config&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">AppComponent</span>, appConfig)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br></pre></td></tr></table></figure>

<p><code>main.ts</code> use side effect import here which will run all global code in <code>bootstrap.ts</code> but not import any bindings. (Note, the following code is dynamic import, not static import)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;./bootstrap&#x27;</span>)</span><br><span class="line">	.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br></pre></td></tr></table></figure>

<h2 id="Static-import-only-execute-once"><a href="#Static-import-only-execute-once" class="headerlink" title="Static import only execute once"></a>Static import only execute once</h2><p>No matter how many times you import a module, it will only be executed once. Suppose you have a <code>math</code> module with the following code:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// math.mjs</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">addFunc</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">subtractFunc</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print a random number to identify different instances</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br></pre></td></tr></table></figure>

<p>And another two module <code>add</code> and <code>subtract</code> with the following code:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add.mjs</span></span><br><span class="line"><span class="keyword">import</span> &#123; addFunc &#125; <span class="keyword">from</span> <span class="string">&#x27;./math.mjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">addFunc</span>(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// subtract.mjs</span></span><br><span class="line"><span class="keyword">import</span> &#123; subtractFunc &#125; <span class="keyword">from</span> <span class="string">&#x27;./math.mjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">subtractFunc</span>(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>and finlay, you import <code>add</code> and <code>subtract</code> in your main module:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.mjs</span></span><br><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">&#x27;./add.mjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; subtract &#125; <span class="keyword">from</span> <span class="string">&#x27;./subtract.mjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">subtract</span>(<span class="number">2</span>, <span class="number">1</span>)); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>When you run <code>main.mjs</code>, you will see only one random number printed in the console, which means the <code>math</code> module is only executed once.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0.2534933886729216</span><br><span class="line">3</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h1 id="Dynamic-import"><a href="#Dynamic-import" class="headerlink" title="Dynamic import"></a>Dynamic import</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><code>import()</code> is dynamic import, it returns a promise. The import() syntax, commonly called dynamic import, is a function-like expression that allows loading an ECMAScript module <strong>asynchronously</strong> and dynamically into a potentially <strong>non-module</strong> environment.</p>
<h2 id="Basic-example"><a href="#Basic-example" class="headerlink" title="Basic example"></a>Basic example</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">&quot;ramda&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> moduleDefault = <span class="variable language_">module</span>.<span class="property">default</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(moduleDefault);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(<span class="string">&quot;./utility.js&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">DefaultFunction</span> = <span class="variable language_">module</span>.<span class="property">default</span>;</span><br><span class="line">  <span class="keyword">const</span> exportFunction = <span class="variable language_">module</span>.<span class="property">exportFunction</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">DefaultFunction</span>, exportFunction);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>With dynamic import, you can import modules conditionally. The following code load the chat-box when user click on the contact button.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> contactBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#button&quot;</span>);</span><br><span class="line">contactBtn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">import</span>(<span class="string">&quot;chat-box&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">module</span>.<span class="title function_">load</span>(); <span class="comment">// or perform any desired action</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async&#x2F;Await"></a>Async&#x2F;Await</h2><p>Since <code>import()</code> returns a promise, you can use <code>async/await</code> to import modules.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> contactBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#button&quot;</span>);</span><br><span class="line">contactBtn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable language_">module</span> = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&quot;chat-box&quot;</span>);</span><br><span class="line">    <span class="variable language_">module</span>.<span class="title function_">load</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Destruction"><a href="#Destruction" class="headerlink" title="Destruction"></a>Destruction</h2><p>You can also use object destruction to import modules.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> contactBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#button&quot;</span>);</span><br><span class="line">contactBtn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; load &#125; = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&quot;chat-box&quot;</span>);</span><br><span class="line">    <span class="title function_">load</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Error-handling"><a href="#Error-handling" class="headerlink" title="Error handling"></a>Error handling</h2><p>And last, don’t forget to handle error when importing modules.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable language_">module</span> = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&quot;chat-box&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Use-import-in-non-module-environment"><a href="#Use-import-in-non-module-environment" class="headerlink" title="Use import() in non-module environment"></a>Use <code>import()</code> in non-module environment</h2><p><code>import()</code> can be used in non-module environment, such as in a <code>.js</code> file or script tag without <code>type=&quot;module&quot;</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test.js, you don&#x27;t need test.mjs here.</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">&quot;chat-box&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">module</span>.<span class="title function_">load</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- You don&#x27;t need type=&quot;module&quot; in script tag--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span>(<span class="string">&quot;chat-box&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">module</span>.<span class="title function_">load</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>But static import can’t be used in non-module environment, you will got Error: <code>SyntaxError: Cannot use import statement outside a module</code>, to make static import work, you must use file end with <code>.mjs</code> or add <code>type=&quot;module&quot;</code> in script tag.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;load&#125; <span class="keyword">from</span> <span class="string">&quot;./chat-box.mjs&quot;</span>;</span><br><span class="line"><span class="title function_">load</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- You need type=&quot;module&quot; in script tag--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;load&#125; <span class="keyword">from</span> <span class="string">&quot;./chat-box.mjs&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">load</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="pass-by-reference"><a href="#pass-by-reference" class="headerlink" title="pass by reference"></a>pass by reference</h2><p>There is no <code>real</code> pass by reference in JavaScript like in C&#x2F;C++ language, but you can use <code>import</code> to achieve similar effect.</p>
<p>First, create a module <code>module.mjs</code>, in this file, we export an object <code>person</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module.mjs</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Create another module <code>module1.mjs</code>, in this file, we import <code>person</code> from <code>module.mjs</code> and change the <code>age</code> to 40.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module1.mjs</span></span><br><span class="line"><span class="keyword">import</span> &#123; person &#125; <span class="keyword">from</span> <span class="string">&#x27;./module.mjs&#x27;</span>;</span><br><span class="line">person.<span class="property">age</span> = <span class="number">40</span>;</span><br></pre></td></tr></table></figure>

<p>Finally, import <code>module1.mjs</code> and <code>module.mjs</code> in <code>main.mjs</code>, and print the <code>person</code> object, you will found the <code>age</code> is 40 now.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.mjs</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./module1.mjs&#x27;</span>; <span class="comment">// This will execute the code in module1.mjs</span></span><br><span class="line"><span class="keyword">import</span> &#123; person &#125; <span class="keyword">from</span> <span class="string">&#x27;./module.mjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>, <span class="attr">age</span>: <span class="number">40</span> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="import-meta-url"><a href="#import-meta-url" class="headerlink" title="import.meta.url"></a>import.meta.url</h1><p><code>import.meta.url</code> The full URL to the module, includes query parameters and&#x2F;or hash (following the ? or #). In browsers, this is either the URL from which the script was obtained (for external scripts), or the URL of the containing document (for inline scripts). In Node.js, this is the file path (including the file:&#x2F;&#x2F; protocol).</p>
<p>In Node.js, <code>import.meta.url</code> is the file path of the current module. It is similar to <code>__filename</code> in CommonJS modules.</p>
<p>This is <code>server.ts</code> file generated by angular SSR, you can see <code>import.meta.url</code> is used to get the current file path.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; dirname, join, resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;node:path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The Express app is exported so that it can be used by serverless Functions.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">app</span>(<span class="params"></span>): express.<span class="property">Express</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> server = <span class="title function_">express</span>();</span><br><span class="line">  <span class="keyword">const</span> serverDistFolder = <span class="title function_">dirname</span>(<span class="title function_">fileURLToPath</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>));</span><br><span class="line">  <span class="keyword">const</span> browserDistFolder = <span class="title function_">resolve</span>(serverDistFolder, <span class="string">&#x27;../browser&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> indexHtml = <span class="title function_">join</span>(serverDistFolder, <span class="string">&#x27;index.server.html&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li>Static imports: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#import_a_module_for_its_side_effects_only">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#import_a_module_for_its_side_effects_only</a></li>
<li>Dynamic imports: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta</a></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>import</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-interview-questions-03</title>
    <url>/2024/11/16/javascript-interview-questions-03/</url>
    <content><![CDATA[<h2 id="Primitive-wrapper-objects"><a href="#Primitive-wrapper-objects" class="headerlink" title="Primitive wrapper objects"></a>Primitive wrapper objects</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s3 = <span class="title class_">String</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> s4 = <span class="title class_">String</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 == s2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s3 == s4);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 == s3);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s3);</span><br></pre></td></tr></table></figure>

<p>Answer:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>
<ul>
<li>s1和s2都是object类型，所以它们的引用地址不同，所以<code>s1 == s2</code>返回<code>false</code>。</li>
<li>s3和s4都是string类型，所以它们的值相同，所以<code>s3 == s4</code>返回<code>true</code>。</li>
<li>s1是object类型，s3是string类型，比较时先将s1转换为primitive类型，也就是字符串类型，所以<code>s1 == s3</code>返回<code>true</code>。</li>
<li>s1是object类型，s3是string类型，所以<code>s1 === s3</code>返回<code>false</code>。<br>关于JavaScript中<code>==</code>的详细规则，请看<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality">这里</a></li>
</ul>
<h2 id="输出结果是什么？"><a href="#输出结果是什么？" class="headerlink" title="输出结果是什么？"></a>输出结果是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(data));</span><br></pre></td></tr></table></figure>
<p>Answer: <code>false</code><br><code>Uint8Array</code> 是 <code>ArrayBuffer</code> 对象的一个视图，它表示一个8位无符号整数的数组。<code>Uint8Array</code> 实例不是一个数组，所以 <code>Array.isArray(data)</code> 返回 <code>false</code>。</p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>interview</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>interview</tag>
        <tag>data_type</tag>
        <tag>conversion</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-interview-questions-01</title>
    <url>/2024/11/16/javascript-interview-questions-01/</url>
    <content><![CDATA[<h2 id="JS中的箭头函数有哪些特点？"><a href="#JS中的箭头函数有哪些特点？" class="headerlink" title="JS中的箭头函数有哪些特点？"></a>JS中的箭头函数有哪些特点？</h2><table>
<thead>
<tr>
<th>特性</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td><strong>语法简洁</strong></td>
<td>箭头函数语法更短、更简洁，适合简单的回调函数或匿名函数。</td>
<td>复杂逻辑中使用隐式返回或多层嵌套时，可能降低代码可读性和可维护性。</td>
</tr>
<tr>
<td><strong>词法作用域绑定 <code>this</code></strong></td>
<td>箭头函数继承定义时的 <code>this</code>，避免了传统函数中 <code>this</code> 动态绑定的问题。</td>
<td>无法动态绑定 <code>this</code>，在需要动态绑定 <code>this</code> 的场景（如对象方法）中不适合使用。</td>
</tr>
<tr>
<td><strong>没有 <code>arguments</code> 对象</strong></td>
<td>避免与普通函数中的 <code>arguments</code> 冲突，可以使用剩余参数（<code>...args</code>）代替。</td>
<td>缺乏 <code>arguments</code> 对象，在需要访问动态参数列表的场景下可能带来不便。</td>
</tr>
<tr>
<td><strong>不能用作构造函数</strong></td>
<td>避免误用为构造函数的风险（箭头函数不能通过 <code>new</code> 调用）。</td>
<td>在需要定义构造函数的场景中无法使用箭头函数。</td>
</tr>
<tr>
<td><strong>隐式返回</strong></td>
<td>单行箭头函数支持隐式返回，无需使用 <code>return</code> 关键字。</td>
<td>隐式返回在复杂逻辑中可能导致代码难以理解。</td>
</tr>
<tr>
<td><strong>调试困难</strong></td>
<td>-</td>
<td>箭头函数的简洁性可能导致代码可读性下降，调试和维护可能会变得困难。</td>
</tr>
<tr>
<td><strong>不能用作生成器函数</strong></td>
<td>-</td>
<td>箭头函数不能用作生成器函数（无法与 <code>function*</code> 结合使用）。</td>
</tr>
<tr>
<td><strong>适用场景</strong></td>
<td>回调函数、不需要动态绑定 <code>this</code> 的场景、简短的函数逻辑。</td>
<td>需要动态绑定 <code>this</code> 的场景、需要访问 <code>arguments</code> 对象的场景、复杂的逻辑、生成器函数场景。</td>
</tr>
</tbody></table>
<h2 id="JS中apply-call-bind的作用和区别是什么？"><a href="#JS中apply-call-bind的作用和区别是什么？" class="headerlink" title="JS中apply, call, bind的作用和区别是什么？"></a>JS中<code>apply</code>, <code>call</code>, <code>bind</code>的作用和区别是什么？</h2><table>
<thead>
<tr>
<th>特性</th>
<th><code>apply</code></th>
<th><code>call</code></th>
<th><code>bind</code></th>
</tr>
</thead>
<tbody><tr>
<td><strong>调用方式</strong></td>
<td>立即调用函数</td>
<td>立即调用函数</td>
<td>返回一个新函数</td>
</tr>
<tr>
<td><strong>参数传递</strong></td>
<td>参数以数组或类数组形式传递</td>
<td>参数逐个传递</td>
<td>参数逐个传递，可预填部分参数</td>
</tr>
<tr>
<td><strong>适用场景</strong></td>
<td>参数数量不确定时（如动态参数）</td>
<td>参数数量固定时</td>
<td>需要延迟调用或复用绑定函数时</td>
</tr>
<tr>
<td><strong>是否修改原函数</strong></td>
<td>否</td>
<td>否</td>
<td>否（返回新函数，不修改原函数）</td>
</tr>
</tbody></table>
<h2 id="JS中map和weakMap的区别是什么？"><a href="#JS中map和weakMap的区别是什么？" class="headerlink" title="JS中map和weakMap的区别是什么？"></a>JS中<code>map</code>和<code>weakMap</code>的区别是什么？</h2><table>
<thead>
<tr>
<th>特性</th>
<th><code>Map</code></th>
<th><code>WeakMap</code></th>
</tr>
</thead>
<tbody><tr>
<td><strong>键的类型</strong></td>
<td>可以是任何类型（包括对象、原始值）</td>
<td>只能是对象或者<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry">non-registered symbols</a></td>
</tr>
<tr>
<td><strong>值的类型</strong></td>
<td>可以是任何类型</td>
<td>可以是任何类型</td>
</tr>
<tr>
<td><strong>键的引用方式</strong></td>
<td>强引用</td>
<td>弱引用</td>
</tr>
<tr>
<td><strong>垃圾回收</strong></td>
<td>键对象不会被垃圾回收</td>
<td>如果键对象没有其他引用，则会被回收</td>
</tr>
<tr>
<td><strong>可迭代性</strong></td>
<td>支持（可通过 <code>keys()</code>、<code>values()</code> 等方法遍历）</td>
<td>不支持（无法直接遍历或获取大小）</td>
</tr>
<tr>
<td><strong>获取大小</strong></td>
<td>支持（通过 <code>size</code> 属性）</td>
<td>不支持</td>
</tr>
<tr>
<td><strong>典型应用场景</strong></td>
<td>通用键值对存储</td>
<td>私有数据存储、避免内存泄漏</td>
</tr>
</tbody></table>
<h2 id="简单描述一下JS中的事件循环机制？"><a href="#简单描述一下JS中的事件循环机制？" class="headerlink" title="简单描述一下JS中的事件循环机制？"></a>简单描述一下JS中的事件循环机制？</h2><h2 id="简单描述一下JS中的Promise"><a href="#简单描述一下JS中的Promise" class="headerlink" title="简单描述一下JS中的Promise"></a>简单描述一下JS中的<code>Promise</code></h2><h2 id="以下代码输出什么？"><a href="#以下代码输出什么？" class="headerlink" title="以下代码输出什么？"></a>以下代码输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="built_in">parseInt</span>);</span><br></pre></td></tr></table></figure>
<p>答案：<code>[1, NaN, NaN]</code></p>
<p>解析：先看一下<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map">MDN</a>上关于<code>Array.prototype.map</code>的定义，这里我们没有传递第二个参数，所以使用的是下面第一种调用方式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">map(callbackFn)</span><br><span class="line">map(callbackFn, thisArg)</span><br></pre></td></tr></table></figure>
<p>而<code>callbackFn</code>接受三个参数</p>
<ul>
<li>element：当前正在处理的元素</li>
<li>index：当前正在处理的元素的索引</li>
<li>array：调用<code>map</code>方法的数组</li>
</ul>
<p>而<code>parseInt</code>函数有如下两种形式，由于map传递过来的参数有三个，所以这里会调用第二种形式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">parseInt(string)</span><br><span class="line">parseInt(string, radix)</span><br></pre></td></tr></table></figure>
<p>所以上面的代码就变成了如下形式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> <span class="built_in">parseInt</span>(element, index));</span><br></pre></td></tr></table></figure>
<p>展开之后相当于三次<code>parseInt</code>调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="number">1</span>, <span class="number">0</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">2</span>, <span class="number">1</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">3</span>, <span class="number">2</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>
<p>注意：<code>parseInt</code>函数的第二个参数是进制，这个参数有如下限制</p>
<ul>
<li>如果传递的进制不在2-36之间，那么<code>parseInt</code>返回<code>NaN</code>。</li>
<li>如果不传递该参数，或者传递0，那么<code>parseInt</code>会根据第一个参数推断：<ul>
<li>如果第一个参数以<code>0x</code>或者<code>0X</code>开头，那么会被解析为十六进制。</li>
<li>否则会被解析为十进制。</li>
</ul>
</li>
</ul>
<p>所以:  </p>
<ul>
<li><code>parseInt(1, 0);</code> radix为0，根据第一个参数判断，而第一个参数1并非以<code>0x</code>或<code>0X</code>开头，所以会被解析为十进制，返回1。 </li>
<li><code>parseInt(2, 1);</code> radix为1，不在2-36之间，返回<code>NaN</code>。</li>
<li><code>parseInt(3, 2);</code> radix为2，但是3不是二进制数，返回<code>NaN</code>。</li>
</ul>
<p>需要注意的是：<code>parseInt</code>会将第一个参数转换为字符串，然后再解析。所以<code>parseInt(3, 2);</code>等价于<code>parseInt(&#39;3&#39;, 2);</code>。可是二进制数中不可能有3这个数字，所以返回<code>NaN</code>。一个合法的例子是<code>parseInt(&#39;11&#39;, 2);</code>，这个会返回3。</p>
<h2 id="大数相加"><a href="#大数相加" class="headerlink" title="大数相加"></a>大数相加</h2><p>实现一个函数，输入两个字符串，返回它们的和。这两个字符串表示的数字不会以0开头，且不会以空格开头。返回的结果也不会以0开头。<br>这个题考察的点有以下几个</p>
<ol>
<li>字符串如何转换为整数？</li>
<li>进位处理</li>
<li>字符串对齐处理，如何填充前导0？</li>
<li>如何取整。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bigNumberAdd</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> maxLength = <span class="title class_">Math</span>.<span class="title function_">max</span>(a.<span class="property">length</span>, b.<span class="property">length</span>);</span><br><span class="line">  a = a.<span class="title function_">padStart</span>(maxLength, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">  b = b.<span class="title function_">padStart</span>(maxLength, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> carry = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = maxLength - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> sum = <span class="title class_">Number</span>(a[i]) + <span class="title class_">Number</span>(b[i]) + carry;</span><br><span class="line">    <span class="comment">// This is string concatenation, not numeric addition.</span></span><br><span class="line">    result = (sum % <span class="number">10</span>) + result; <span class="comment">// if sum &gt; 10, we only need the last digit.</span></span><br><span class="line">    carry = <span class="title class_">Math</span>.<span class="title function_">floor</span>(sum / <span class="number">10</span>); <span class="comment">// the carry is the first digit when sum &gt; 10.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Don&#x27;t forget the last carry.</span></span><br><span class="line">  <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    result = carry + result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bigNumberAdd</span>(<span class="string">&#x27;999&#x27;</span>, <span class="string">&#x27;999&#x27;</span>)); <span class="comment">// 1998</span></span><br></pre></td></tr></table></figure>

<h2 id="JS中如何判断Primitive类型？"><a href="#JS中如何判断Primitive类型？" class="headerlink" title="JS中如何判断Primitive类型？"></a>JS中如何判断Primitive类型？</h2><p>可以使用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object"><code>Object()</code></a>函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPrimitive</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value !== <span class="title class_">Object</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isPrimitive</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value === <span class="literal">null</span> || (<span class="keyword">typeof</span> value !== <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> value !== <span class="string">&#x27;function&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JS中有哪些方法可以判断数组类型？"><a href="#JS中有哪些方法可以判断数组类型？" class="headerlink" title="JS中有哪些方法可以判断数组类型？"></a>JS中有哪些方法可以判断数组类型？</h2><ol>
<li><code>Array.isArray([])</code></li>
<li><code>[] instanceof Array</code></li>
<li><code>Object.prototype.toString.call([]) === &#39;[object Array]&#39;</code></li>
<li><code>Array.prototype.isPrototypeOf([])</code></li>
<li><code>[].__proto__ === Array.prototype</code></li>
<li><code>[].constructor === Array</code></li>
</ol>
<h2 id="深拷贝要注意哪些问题？"><a href="#深拷贝要注意哪些问题？" class="headerlink" title="深拷贝要注意哪些问题？"></a>深拷贝要注意哪些问题？</h2><ol>
<li>循环引用</li>
<li>特殊对象，比如<code>Date</code>, <code>RegExp</code>, <code>Map</code>, <code>Set</code>, <code>Function</code>等。</li>
</ol>
<p>以下是一个简单的实现。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">obj, hash = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> obj; <span class="comment">// primitives or function</span></span><br><span class="line">  <span class="keyword">if</span> (hash.<span class="title function_">has</span>(obj)) <span class="keyword">return</span> hash.<span class="title function_">get</span>(obj); <span class="comment">// circular reference</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> newObj = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;;</span><br><span class="line">  hash.<span class="title function_">set</span>(obj, newObj);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      newObj[key] = <span class="title function_">deepCopy</span>(obj[key], hash);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例对象</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  <span class="attr">c</span>: &#123; <span class="attr">d</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  <span class="attr">e</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">  <span class="attr">f</span>: <span class="regexp">/abc/</span>,</span><br><span class="line">  <span class="title function_">g</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;g&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="keyword">const</span> copy = <span class="title function_">deepCopy</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copy);</span><br><span class="line">copy.<span class="title function_">g</span>(); <span class="comment">// g</span></span><br></pre></td></tr></table></figure>

<h2 id="类型转换，以下代码输出什么？"><a href="#类型转换，以下代码输出什么？" class="headerlink" title="类型转换，以下代码输出什么？"></a>类型转换，以下代码输出什么？</h2><p>详情请参考<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition"><code>+</code></a>的运算规则：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] + []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] + &#123;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; + []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; + &#123;&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="输出结果是什么？"><a href="#输出结果是什么？" class="headerlink" title="输出结果是什么？"></a>输出结果是什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">numbers[<span class="number">4</span>] = <span class="number">4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers); <span class="comment">// 1, 2, 3, &lt;1 empty item&gt;, 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers[<span class="number">3</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="以下代码输出什么？-1"><a href="#以下代码输出什么？-1" class="headerlink" title="以下代码输出什么？"></a>以下代码输出什么？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123; <span class="attr">key</span>: <span class="string">&#x27;b&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> c = &#123; <span class="attr">key</span>: <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line">a[b] = <span class="number">123</span>;</span><br><span class="line">a[c] = <span class="number">456</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[b]);</span><br></pre></td></tr></table></figure>
<p>答案：<code>456</code><br>本题考察的点是：<code>对象的键名只能是字符串或者Symbol类型</code>，如果不是，会被转换为字符串。所以<code>a[b]</code>和<code>a[c]</code>都会把键名转换为<code>[object Object]</code>，所以<code>a[b]</code>和<code>a[c]</code>实际上是同一个键，最后赋值会覆盖前面的值。</p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>interview</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>interview</tag>
        <tag>array</tag>
        <tag>map</tag>
        <tag>parseint</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-interview-questions-02</title>
    <url>/2024/11/16/javascript-interview-questions-02/</url>
    <content><![CDATA[<h2 id="var-in-for-loop"><a href="#var-in-for-loop" class="headerlink" title="var in for loop."></a><code>var</code> in for loop.</h2><p>What’s the output of the following code?</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>
<p>Answer:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">100</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<ol>
<li>最后一行代码<code>console.log(100);</code>是同步代码，所以会先输出100。</li>
<li>for循环一共执行5次，每次都会调用<code>setTimeout</code>，但是<code>setTimeout</code>是异步代码，JS引擎会将setTimeout的回调函数放到宏任务队列中，等待执行。</li>
<li>当前Event loop执行完毕后，会去执行宏任务队列中的任务，这时候<code>setTimeout</code>的回调函数才会被执行，但是这时候<code>i</code>已经变成了5，所以会输出5个5。</li>
</ol>
<p>所以导致这段代码的问题有二，解决其中任何一个都可以让它输出0, 1, 2, 3, 4。</p>
<ol>
<li>使用了<code>var</code>, <code>var</code>是函数作用域，所以所有的循环都共享一个<code>i</code>。</li>
<li>使用了<code>setTimeout</code>。<code>setTimeout</code>是整个循环结束后才开始执行的！如果我们把<code>setTimeout</code>删除就不会有问题了。以下代码works well!<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>那么是不是不用<code>setTimeout</code>就没有问题了呢？不是的，我们来看这道题的一个变种：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> func = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  func.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func.<span class="title function_">forEach</span>(<span class="function">(<span class="params">f</span>) =&gt;</span> <span class="title function_">f</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>
<p>这个变种没有使用<code>setTimeout</code>，但是结果依然是5个5。为什么呢？观察这个变种和原始题目我们可以看到，他们共同的特点都是在<code>for</code>循环结束后才执行代码，此时i的值已经是5了。这才是根本原因。</p>
<p>好了，现在我们来看看如何解决这个问题。</p>
<h3 id="方法一，使用let代替var。"><a href="#方法一，使用let代替var。" class="headerlink" title="方法一，使用let代替var。"></a>方法一，使用<code>let</code>代替<code>var</code>。</h3><p>由于<code>let</code>有块级作用域，所以每次循环都会创建一个新的变量i，而不是像<code>var</code>那样所有的循环都共享一个i。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>
<h3 id="方法二：将循环变量i参数化"><a href="#方法二：将循环变量i参数化" class="headerlink" title="方法二：将循环变量i参数化"></a>方法二：将循环变量i参数化</h3><p>说得再通俗一点，将setTimeout的逻辑单独抽离成一个函数<code>print</code>。这样每次循环的时候，都会将当前的i传递给<code>print</code>函数，这样<code>setTimeout</code>的代码加入宏任务队列时会记住当前的i值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="title function_">print</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i), <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果觉得单独抽离函数不够优雅，可以使用IIFE（立即执行函数表达式）。注意，这里和闭包没有半毛钱关系，IIFE这里只是为了传递参数，也就是上面抽离函数的简化版。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<h3 id="方法三：使用setTimeout的第三个参数"><a href="#方法三：使用setTimeout的第三个参数" class="headerlink" title="方法三：使用setTimeout的第三个参数"></a>方法三：使用<code>setTimeout</code>的第三个参数</h3><p>这个方法可能很多同学都没有见过，其实<code>setTimeout</code>方法是有第三个参数的，这个参数是用来传递给回调函数的参数的。所以我们可以将当前的i值传递给<code>setTimeout</code>的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">(<span class="params">j</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(j), <span class="number">1000</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>
<p>为了做区分，我把回到函数中的<code>i</code>改成了<code>j</code>，这样就不会混淆了。循环变量<code>i</code>通过<code>setTimeout</code>的第三个参数传递给回调函数。</p>
<p>你学会了吗？</p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>interview</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>interview</tag>
        <tag>var</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-interview-questions-04(JS core)</title>
    <url>/2024/11/16/javascript-interview-questions-04/</url>
    <content><![CDATA[<h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><h3 id="Use-case-1-cache-data"><a href="#Use-case-1-cache-data" class="headerlink" title="Use case 1: cache data."></a>Use case 1: cache data.</h3><p>In the following example, the inner function <code>getId</code> referenced the variable <code>id</code> in outer function <code>createIdGenerator</code>. The variable <code>id</code> is memorized and each call to <code>generateId</code> will return the next id.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createIdGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> id = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">getId</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> id++;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generateId = <span class="title function_">createIdGenerator</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">generateId</span>()); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">generateId</span>()); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">generateId</span>()); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h2 id="event-loop"><a href="#event-loop" class="headerlink" title="event loop"></a>event loop</h2><h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h2><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p><code>this</code> in javascript is a very complex concept, and we need a separated post to elaborate it. Here we just give a brief introduction.</p>
<h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><h2 id="async-await"><a href="#async-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h2><p>据说async&#x2F;await底层是借助Promise和generator来实现的，有待学习。</p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>interview</category>
      </categories>
      <tags>
        <tag>this</tag>
        <tag>promise</tag>
        <tag>closure</tag>
        <tag>event loop</tag>
        <tag>prototype</tag>
        <tag>async/await</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-interview-questions-05(Browser/DOM)</title>
    <url>/2024/11/16/javascript-interview-questions-05(Browser-DOM)/</url>
    <content><![CDATA[<p>This post includes the Browser DOM related interview questions</p>
<h2 id="Performance-optimization"><a href="#Performance-optimization" class="headerlink" title="Performance optimization"></a>Performance optimization</h2><p>前端性能优化的方法有哪些？</p>
<ol>
<li>使用懒加载 - 减少首屏加载时间</li>
<li>減少包体积 - 提升首页加载速度</li>
<li>合并API call - 减少网络请求次数</li>
<li>使用CDN - 加速资源加载速度</li>
<li>使用缓存 - 减少重复请求</li>
</ol>
<h2 id="What’s-the-event-loop-in-Chrome-browser"><a href="#What’s-the-event-loop-in-Chrome-browser" class="headerlink" title="What’s the event loop in Chrome browser?"></a>What’s the event loop in Chrome browser?</h2><p>事件循环的核心流程如下：</p>
<ol>
<li>执行同步代码 :<br>所有同步代码会被依次执行，并压入调用栈。<br>同步代码执行完毕后，调用栈清空。</li>
<li>检查微任务队列 :<br>如果调用栈为空，事件循环会优先检查微任务队列。<br>将微任务队列中的任务依次取出并执行，直到微任务队列为空。</li>
<li>渲染更新 :<br>在浏览器环境中，如果需要更新 DOM 或绘制页面，此时会进行渲染。</li>
<li>检查宏任务队列 :<br>当微任务队列为空时，事件循环会从宏任务队列中取出一个任务并执行。<br>宏任务执行完毕后，再次回到步骤 2，检查微任务队列。</li>
</ol>
<p>以下代码输出结果是什么？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start&#x27;</span>); <span class="comment">// 1. 同步代码，立即执行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Timeout&#x27;</span>); <span class="comment">// 5. 宏任务，最后执行</span></span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Promise&#x27;</span>); <span class="comment">// 3. 微任务，优先于宏任务</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End&#x27;</span>); <span class="comment">// 2. 同步代码，立即执行</span></span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Start</span><br><span class="line">End</span><br><span class="line">Promise</span><br><span class="line">Timeout</span><br></pre></td></tr></table></figure>

<h2 id="什么是cookie-如何保证cookie的安全性？"><a href="#什么是cookie-如何保证cookie的安全性？" class="headerlink" title="什么是cookie?如何保证cookie的安全性？"></a>什么是cookie?如何保证cookie的安全性？</h2><p>我们现不纠结<code>cookie</code>的定义，而是看为什么需要<code>cookie</code>，可能你已经听过这个结论：<code>HTTP</code>是无状态的，也就是说每次请求都是独立的，服务器无法知道这次请求和上次请求是否来自同一个用户。<code>cookie</code>就是为了解决这个问题而诞生的。关于cookie的使用方法，可以看<a href="https://zdd.github.io/2024/03/01/javascript-cookie/">这篇</a></p>
<p>保证<code>cookie</code>的安全性，主要有以下几个方面：</p>
<ol>
<li>设置<code>HttpOnly</code>属性：<code>HttpOnly</code>属性是<code>cookie</code>的一个属性，它的作用是禁止<code>JavaScript</code>访问<code>cookie</code>，这样可以防止<code>XSS</code>攻击。</li>
<li>设置<code>Secure</code>属性：<code>Secure</code>属性是<code>cookie</code>的一个属性，它的作用是要求<code>cookie</code>只能通过<code>HTTPS</code>协议传输，这样可以防止<code>MITM</code>攻击。</li>
<li>设置<code>SameSite</code>属性：<code>SameSite</code>属性是<code>cookie</code>的一个属性，它的作用是指定<code>cookie</code>是否可以随着跨域请求发送，这样可以防止<code>CSRF</code>攻击。</li>
<li>合理设置<code>cookie</code>的过期时间，过期时间够用就好，不要太长。</li>
<li>不要在<code>cookie</code>中存储敏感信息，如密码等。</li>
</ol>
<p>以下是使用Express设置<code>cookie</code>的示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/set-cookie&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">cookie</span>(<span class="string">&#x27;session_id&#x27;</span>, <span class="string">&#x27;your-session-id-here&#x27;</span>, &#123; </span><br><span class="line">        <span class="attr">httpOnly</span>: <span class="literal">true</span>, <span class="comment">// 设置HttpOnly标志</span></span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">true</span>,   <span class="comment">// 强制HTTPS传输</span></span><br><span class="line">        <span class="attr">sameSite</span>: <span class="string">&#x27;strict&#x27;</span>, <span class="comment">// 防止CSRF攻击</span></span><br><span class="line">        <span class="attr">maxAge</span>: <span class="number">3600</span> <span class="comment">// 设置Cookie有效期为1小时.</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Cookie has been set&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="localStorage和sessionStorage的区别是什么？"><a href="#localStorage和sessionStorage的区别是什么？" class="headerlink" title="localStorage和sessionStorage的区别是什么？"></a>localStorage和sessionStorage的区别是什么？</h2><p>localStorage和sessionStorage都是HTML5提供的用于在浏览器端存储数据的机制，它们属于Web Storage API的一部分。尽管两者有相似之处，但也存在一些关键区别：</p>
<ul>
<li>生命周期：<ul>
<li>localStorage：数据没有过期时间，一旦数据被存储，它将永远保留在那里，除非用户通过浏览器设置手动清除数据，或者使用JavaScript代码显式地删除它。</li>
<li>sessionStorage：数据的生命周期与页面会话等同。页面会话在浏览器打开期间一直保持，包括页面重新加载或恢复。一旦浏览器关闭，所有在sessionStorage中保存的数据都会被清除。</li>
</ul>
</li>
<li>作用范围：<ul>
<li>localStorage：在同一源（协议+域名+端口）下的所有窗口、标签页之间共享数据。这意味着即使你在一个标签页中修改了localStorage中的数据，在同一网站的其他标签页中也能访问到更新后的数据。</li>
<li>sessionStorage：对于来自同一源的每个页面，都有其自己的独立存储空间，并且这些存储空间互不干扰。也就是说，不同的标签页或窗口间无法共享sessionStorage中的数据，即使是同一个网站。</li>
</ul>
</li>
<li>使用场景：<ul>
<li>localStorage适用于需要长期存储的数据，如用户偏好设置、应用状态等。</li>
<li>sessionStorage则更适合于临时性的、仅在当前会话期间有用的场景，比如保存表单数据以防止刷新页面时丢失信息。</li>
</ul>
</li>
</ul>
<h2 id="What’s-the-benefit-of-web-component"><a href="#What’s-the-benefit-of-web-component" class="headerlink" title="What’s the benefit of web component?"></a>What’s the benefit of web component?</h2><ol>
<li>Cross platform, framework free.</li>
</ol>
<h2 id="What’s-the-differences-between-document-write-and-innerHTML"><a href="#What’s-the-differences-between-document-write-and-innerHTML" class="headerlink" title="What’s the differences between document.write and innerHTML?"></a>What’s the differences between <code>document.write</code> and <code>innerHTML</code>?</h2><p>Answer:</p>
<ul>
<li><code>document.write</code> update the entire page.</li>
<li><code>innerHTML</code> update the content of an element, it can be used at any time.</li>
</ul>
<h2 id="What’s-the-output-of-the-following-code"><a href="#What’s-the-output-of-the-following-code" class="headerlink" title="What’s the output of the following code?"></a>What’s the output of the following code?</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span> = <span class="string">&quot;background-color: blue;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span> = <span class="string">&quot;background-color: red;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Answer:<br>The browser start to render the page after micro task queue is empty in each event loop. So the background color of the body will be red directly(You won’t see the blue background color).</p>
<h2 id="How-to-create-group-for-options-in-a-select-element"><a href="#How-to-create-group-for-options-in-a-select-element" class="headerlink" title="How to create group for options in a select element?"></a>How to create group for <code>options</code> in a <code>select</code> element?</h2><p>Answer:<br>You can use <code>optgroup</code> element to group <code>options</code> in a <code>select</code> element.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;China&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Beijing<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Dalian<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;America&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Washington<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>New York<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
        <category>interview</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>dom</tag>
        <tag>interview</tag>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-interview-questions-06(frontend tools)</title>
    <url>/2024/11/16/javascript-interview-questions-06/</url>
    <content><![CDATA[<h2 id="什么是Webpack？"><a href="#什么是Webpack？" class="headerlink" title="什么是Webpack？"></a>什么是Webpack？</h2><p>Webpack是一个打包工具，它是基于Node.js的，也就是说它是用JS写的，所以它的速度比较慢，但是它的功能非常强大。而其他的打包工具，比如ESBuild是用Go语言书写的，速度会快很多。</p>
<p><strong>为什么需要使用Webpack呢？</strong><br>在前端技术日益发展的今天，前端技术极大丰富，各种框架和库层出不穷，比如Angular&#x2F;React&#x2F;Vue等，我们的前端项目可能是用不同的框架书写的，可能还要支持typescript，我们还可能使用了不同的CSS预处理器，比如SASS&#x2F;LESS等，而浏览器是不懂框架的语法的，需要转换成原生JS，浏览器也不懂typescript，也需要转换成JavaScript，也不懂SASS&#x2F;LESS语法，需要转换成原生的CSS。</p>
<p>此外，如果你使用了新的ES语法，而浏览器此时尚未支持该语法，那么Webpack也可以帮你转换成浏览器支持的语法。</p>
<p>Webpack的主要功能有：</p>
<ol>
<li>打包JS、CSS、图片等资源文件。</li>
<li>代码转换，比如ES6转ES5、SCSS转CSS等。对于比较新的语法，Webpack可以弥补浏览器未实现的部分。</li>
<li>代码分割，将代码分割成多个文件，按需加载。- Lazy loading，将需要lazy load的模块单独打包成一个文件，当需要的时候再加载。</li>
<li>代码压缩，减少文件体积。</li>
<li>代码优化，比如去除无用代码、去除重复代码等。- Tree shaking</li>
<li>Webpack-dev-server - 本地开发服务器，实时刷新。</li>
</ol>
<h2 id="Webpack中的hash、chunkhash、contenthash有什么区别？"><a href="#Webpack中的hash、chunkhash、contenthash有什么区别？" class="headerlink" title="Webpack中的hash、chunkhash、contenthash有什么区别？"></a>Webpack中的hash、chunkhash、contenthash有什么区别？</h2>]]></content>
      <categories>
        <category>javascript</category>
        <category>interview</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>webpack</tag>
        <tag>interview</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-interview-questions-07</title>
    <url>/2024/11/16/javascript-interview-questions-07/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>javascript</category>
        <category>interview</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>interview</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-interview-questions-08</title>
    <url>/2024/11/16/javascript-interview-questions-08/</url>
    <content><![CDATA[<h2 id="JavaScript中new操作符做了哪些操作？"><a href="#JavaScript中new操作符做了哪些操作？" class="headerlink" title="JavaScript中new操作符做了哪些操作？"></a>JavaScript中new操作符做了哪些操作？</h2><p>在JavaScript中，<code>new</code> 操作符用于创建一个对象。当你使用 <code>new</code> 操作符时，它执行以下步骤：</p>
<ol>
<li>创建空对象</li>
<li>将新对象的 <code>__prototype__</code>属性链接到构造函数的 <code>prototype</code> 属性</li>
<li>执行构造函数中的代码，并将新对象绑定到 <code>this</code> 上。</li>
<li>返回新对象</li>
</ol>
<p>下面是一个简单的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zdd&#x27;</span>, <span class="number">40</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br></pre></td></tr></table></figure>
<p>面试官可能接着问，如何写一个函数，模拟<code>new</code>操作符的行为?</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">NewPerson</span>(<span class="params">fn, ...args</span>) &#123;</span><br><span class="line">  <span class="comment">// Create an empty object</span></span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;; </span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the prototype of the object to the prototype of the function</span></span><br><span class="line">  obj.<span class="property">__proto__</span> = fn.<span class="property"><span class="keyword">prototype</span></span>; </span><br><span class="line"></span><br><span class="line">  <span class="comment">// Call the function with the object as the context</span></span><br><span class="line">  <span class="keyword">const</span> result = fn.<span class="title function_">apply</span>(obj, args); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// Return the object</span></span><br><span class="line">  <span class="keyword">return</span> result <span class="keyword">instanceof</span> <span class="title class_">Object</span> ? result : obj; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">NewPerson</span>(<span class="title class_">Person</span>, <span class="string">&#x27;zdd&#x27;</span>, <span class="number">40</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span><br></pre></td></tr></table></figure>

<p>其实上面的代码可以简化一下，比如前两行代码其实可以用下面的一行代码代替。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure>

<h2 id="如何实现instanceof操作符？"><a href="#如何实现instanceof操作符？" class="headerlink" title="如何实现instanceof操作符？"></a>如何实现instanceof操作符？</h2><p><code>instanceof</code>操作符用于检查一个对象是否是一个类的实例。下面是一个简单的实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myInstanceof</span>(<span class="params">obj, constructor</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> proto = obj.<span class="property">__proto__</span>;</span><br><span class="line">  <span class="keyword">while</span> (proto) &#123;</span><br><span class="line">    <span class="keyword">if</span> (proto === constructor.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    proto = proto.<span class="property">__proto__</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">myInstanceof</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="title class_">Array</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><code>__proto__</code>属于非标准属性，所以不推荐使用。可以使用<code>Object.getPrototypeOf</code>来获取对象的原型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myInstanceof</span>(<span class="params">obj, constructor</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj);</span><br><span class="line">  <span class="keyword">while</span> (proto) &#123;</span><br><span class="line">    <span class="keyword">if</span> (proto === constructor.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(proto);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
        <category>interview</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>interview</tag>
        <tag>prototype</tag>
        <tag>new</tag>
        <tag>instanceof</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-interview-questions-09</title>
    <url>/2024/11/16/javascript-interview-questions-09/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>javascript</category>
        <category>interview</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>interview</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-interview-questions-10(Misc)</title>
    <url>/2024/11/16/javascript-interview-questions-10/</url>
    <content><![CDATA[<h2 id="What’s-the-difference-between-require-and-import"><a href="#What’s-the-difference-between-require-and-import" class="headerlink" title="What’s the difference between require and import?"></a>What’s the difference between <code>require</code> and <code>import</code>?</h2><h2 id="前端如何做性能优化？"><a href="#前端如何做性能优化？" class="headerlink" title="前端如何做性能优化？"></a>前端如何做性能优化？</h2><p>我能想到的点，做性能优化前一定要有benchmark，否则你不知道你的优化是否有效果。</p>
<h3 id="网络层面优化"><a href="#网络层面优化" class="headerlink" title="网络层面优化"></a>网络层面优化</h3><ol>
<li>減少Http请求<ol>
<li>合并文件，将多个css或者javascript文件合并为一个，减少http请求次数。但同时要避免单个文件过大，导致加载时间过长。一个文件的大小最好不要超过1MB。</li>
<li>使用css sprite，将多个小图片合并为一个大图片，通过css的background-position来显示不同的图片。</li>
<li>较小的css可以内联到html中，减少http请求。</li>
<li>使用base64编码，将小图片转为base64编码，直接写在css文件中，减少http请求。</li>
<li>使用svg&#x2F;webp代替png&#x2F;jpg图片。</li>
<li>启用gzip压缩，减少文件大小。</li>
</ol>
</li>
<li>启用缓存：<ol>
<li>强缓存：通过设置http header中的Expires和Cache-Control: max-age 来开启强缓存。</li>
<li>协商缓存：通过设置http header中的Last-Modified和ETag来开启协商缓存。</li>
</ol>
</li>
<li>使用CDN，将静态资源放到CDN上，减少服务器的压力，提高访问速度。</li>
</ol>
<h3 id="打包优化"><a href="#打包优化" class="headerlink" title="打包优化"></a>打包优化</h3><ol>
<li>Tree-shaking， 删除无用代码</li>
<li>lazy loading，按需加载, 通过webpack等打包工具，lazy loading的组件可以打包成单独的chunk文件，按需加载</li>
<li>code splitting，代码分割，将代码分割成多个chunk，按需加载 - 这个和lazy loading是一样的。</li>
<li>代码压缩，删除空格，注释，压缩代码 - 这都是打包工具的基础功能。</li>
</ol>
<h3 id="代码层面的优化"><a href="#代码层面的优化" class="headerlink" title="代码层面的优化"></a>代码层面的优化</h3><ol>
<li>书写高效代码，避免使用过多的循环，避免使用过多的递归。</li>
<li>避免Reflow和Repaint，减少DOM操作，尽量一次性修改DOM。</li>
</ol>
<h3 id="启用性能监控"><a href="#启用性能监控" class="headerlink" title="启用性能监控"></a>启用性能监控</h3><p>性能优化的前提是知道哪里慢，才能有针对性的优化，所以优化前一定要进行监控，找到嗯提的根源，对症下药。</p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>interview</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-interview-this</title>
    <url>/2024/11/10/javascript-interview-this/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>This指向问题是JavaScript面试中必考的问题，今天我们就来将this有关的面试题一网打尽！解答此类面试题的关键是 <code>函数是以何种方式调用的</code>，拿到题目后，<code>先确定函数的调用方式</code>，再根据调用方式来判断this的指向。</p>
<p>根据调用方式的不同，this的指向有以下几种情况：</p>
<ol>
<li>作为普通函数调用, this指向全局对象。</li>
<li>作为对象方法调用, this指向调用方法的对象。</li>
<li>作为构造函数调用, this指向新创建的对象。</li>
<li>使用apply、call、bind调用, this指向指定的对象。</li>
<li>箭头函数中的this, this指向其父级作用域的this。</li>
<li><code>setTimeout</code>函数中的this。</li>
<li>DOM环境中的this。</li>
</ol>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>This的指向只和函数的调用方式相关，与函数的定义位置无关。在面试中，如果遇到this指向的问题，先确定函数的调用方式，再根据调用方式来判断this的指向。</p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>interview</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>interview</tag>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-lazy-load-script</title>
    <url>/2024/11/20/javascript-lazy-load-script/</url>
    <content><![CDATA[<h1 id="How-to-lazy-load-a-script-in-JavaScript"><a href="#How-to-lazy-load-a-script-in-JavaScript" class="headerlink" title="How to lazy load a script in JavaScript?"></a>How to lazy load a script in JavaScript?</h1><ul>
<li>use <code>defer</code> attribute in script tag.<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;path/to/script.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>use <code>async</code> attribute in script tag.<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;path/to/script.js&quot;</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>use <code>window.load</code> event to load script.<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    script.<span class="property">src</span> = <span class="string">&#x27;path/to/script.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>use <code>document.DomContentLoaded</code> event to load script.<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    script.<span class="property">src</span> = <span class="string">&#x27;path/to/script.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>defer</tag>
        <tag>async</tag>
        <tag>script</tag>
        <tag>lazy_load</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-logical-or-operator</title>
    <url>/2024/07/17/javascript-logical-or-operator/</url>
    <content><![CDATA[<h2 id="How-logical-or-operator-works-in-JavaScript"><a href="#How-logical-or-operator-works-in-JavaScript" class="headerlink" title="How logical or || operator works in JavaScript"></a>How logical or <code>||</code> operator works in JavaScript</h2><p>Consider the following expression, what’s the evaluated result?</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">`expr1 || expr2`</span></span><br></pre></td></tr></table></figure>

<p>If <code>expr1</code> can be converted to <code>true</code>, return <code>expr1</code>. Otherwise, return <code>expr2</code>.<br>So we have the following truth:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span> || <span class="literal">true</span>; <span class="comment">// t || t returns true</span></span><br><span class="line"><span class="literal">false</span> || <span class="literal">true</span>; <span class="comment">// f || t returns true</span></span><br><span class="line"><span class="literal">true</span> || <span class="literal">false</span>; <span class="comment">// t || f returns true</span></span><br><span class="line"><span class="literal">false</span> || <span class="number">3</span> === <span class="number">4</span>; <span class="comment">// f || f returns false</span></span><br><span class="line"><span class="string">&quot;Cat&quot;</span> || <span class="string">&quot;Dog&quot;</span>; <span class="comment">// t || t returns &quot;Cat&quot;</span></span><br><span class="line"><span class="literal">false</span> || <span class="string">&quot;Cat&quot;</span>; <span class="comment">// f || t returns &quot;Cat&quot;</span></span><br><span class="line"><span class="string">&quot;Cat&quot;</span> || <span class="literal">false</span>; <span class="comment">// t || f returns &quot;Cat&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;</span> || <span class="literal">false</span>; <span class="comment">// f || f returns false</span></span><br><span class="line"><span class="literal">false</span> || <span class="string">&quot;&quot;</span>; <span class="comment">// f || f returns &quot;&quot;</span></span><br><span class="line"><span class="literal">false</span> || varObject; <span class="comment">// f || object returns varObject</span></span><br></pre></td></tr></table></figure>

<h2 id="in-javascript-not-always-return-boolean-true-or-false"><a href="#in-javascript-not-always-return-boolean-true-or-false" class="headerlink" title="|| in javascript not always return boolean(true or false)"></a><code>||</code> in javascript not always return boolean(<code>true</code> or <code>false</code>)</h2><p>Note that <code>||</code> in javascript is quit difference from <code>||</code> in other languages. For example, in Java, <code>||</code> returns Boolean(<code>true</code> or <code>false</code>), but in JavaScript, it returns the value of one of the operands.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span> || <span class="number">1</span>; <span class="comment">// returns 1</span></span><br><span class="line"><span class="literal">false</span> || <span class="string">&quot;&quot;</span>; <span class="comment">// returns &quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>If you want to convert the value to boolean, you can use double <code>!!</code> or <code>Boolean()</code></p>
<ul>
<li>!!expr - convert to boolean</li>
<li>Boolean(expr) - convert to boolean</li>
</ul>
<h2 id="Short-circuit"><a href="#Short-circuit" class="headerlink" title="Short circuit"></a>Short circuit</h2><p><code>||</code> is a short-circuit operator, which means if the first operand is <code>true</code>, it will not evaluate the second operand.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span> || <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>); <span class="comment">// nothing output</span></span><br></pre></td></tr></table></figure>

<h2 id="vs"><a href="#vs" class="headerlink" title="|| vs ??"></a><code>||</code> vs <code>??</code></h2><p><code>||</code> and <code>??</code> are both used to provide a default value, but they have different behaviors, if you only care about <code>null</code> or <code>undefined</code>, and treat other <code>Falsy</code> value as valid(for example <code>0</code> or empty string <code>&quot;&quot;</code>) use <code>??</code>, otherwise, use <code>||</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> y = x || <span class="number">10</span>; <span class="comment">// y = 10</span></span><br><span class="line"><span class="keyword">const</span> z = x ?? <span class="number">10</span>; <span class="comment">// z = 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> b = a || <span class="string">&quot;default&quot;</span>; <span class="comment">// b = &quot;default&quot;</span></span><br><span class="line"><span class="keyword">const</span> c = a ?? <span class="string">&quot;default&quot;</span>; <span class="comment">// c = &quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment</a></li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>operator</tag>
        <tag>logical</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-method-in-object</title>
    <url>/2025/02/05/javascript-method-in-object/</url>
    <content><![CDATA[<p>今天在浏览<a href="https://vuejs.org/guide/introduction.html">Vue官网</a>时，看到了如下代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>生性多疑的我不禁产生了怀疑，这是什么语法？<code>createApp</code>方法接受一个JS对象，可是JS对象不都是冒号分隔的键值对吗？为什么这个<code>setup()</code>方法没有冒号？难道这是<code>Vue</code>的特殊语法？</p>
<p>于是问了一下AI，原来这是<code>ES6</code>的新增语法（基础知识还是不牢呀，《深入理解ES6》还要再读几遍才行），如果一个JS对象中有函数，那么ES5中必须像下面这样写才行：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">setup</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而<code>ES6</code>新增了一个语法功能，对象中的函数可以省略冒号和<code>function</code>关键字，直接写函数体，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>于是开头那段代码换成ES5的写法就是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">setup</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">createApp</span>(obj).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>这样是不是就好理解多了呢？话不多说，该做饭了。昨天刚从成都旅游回来，今天家里也没有什么菜，姑且做一个圆葱炒蛋吧。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>object</tag>
        <tag>method</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-modules</title>
    <url>/2024/02/18/javascript-modules/</url>
    <content><![CDATA[<h1 id="JavaScript-Modules"><a href="#JavaScript-Modules" class="headerlink" title="JavaScript Modules"></a>JavaScript Modules</h1><h2 id="Why-use-modules"><a href="#Why-use-modules" class="headerlink" title="Why use modules?"></a>Why use modules?</h2><p>早期的JavaScript只是做一些简单的交互，所以不需要模块化。但是随着JavaScript的发展，现在的JavaScript已经可以做很多事情了，比如构建大型的应用程序，而Node.js的出现使得JavaScript甚至可以胜任某些Server端的工作，这时候模块化就显得非常重要了。</p>
<p>模块化的好处有很多，比如：</p>
<ul>
<li>代码复用</li>
<li>代码隔离</li>
<li>代码维护</li>
<li>依赖管理</li>
</ul>
<p>JavaScript模块化主要经历了以下几个阶段：</p>
<ul>
<li>IIFE</li>
<li>CommonJS</li>
<li>AMD</li>
<li>UMD</li>
<li>ES6 Modules</li>
</ul>
<h2 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h2><p>IIFE（Immediately Invoked Function Expression）是一种立即执行的函数表达式，它可以用来模拟模块化。IIFE的特点是：</p>
<ul>
<li>使用闭包来隔离作用域</li>
<li>通过返回一个对象来暴露接口</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable language_">module</span> = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// expose some interface</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>下面的代码使用IIFE封装了一个Person类，其中getName方法是public的，其他方法是private的。因为IIFE是定义后就立即执行的，所以这里我们使用一个person变量来接收IIFE的返回值，这样就可以调用getName方法了。</p>
<p>想要向外暴露任何接口，只需要在返回的对象中添加即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = (<span class="keyword">function</span> <span class="title function_">person</span>(<span class="params">firstName, lastName</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _firstName = firstName;</span><br><span class="line">  <span class="keyword">const</span> _lastName = lastName;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getFirstName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> _firstName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getLastName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> _lastName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;getFirstName()&#125;</span> <span class="subst">$&#123;getLastName()&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">getName</span>: getName,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(<span class="string">&#x27;Philip&#x27;</span>, <span class="string">&#x27;Zhang&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getName</span>()); <span class="comment">// &#x27;Philip Zhang&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>CommonJS是Node.js的模块化规范，它的特点是：</p>
<ul>
<li>使用<code>require</code>来引入模块</li>
<li>使用<code>module.exports</code>来暴露接口</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable language_">module</span> = <span class="built_in">require</span>(<span class="string">&#x27;./module&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// expose some interface</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>AMD（Asynchronous Module Definition）是另一种模块化规范，它的特点是：</p>
<ul>
<li>使用<code>define</code>来定义模块</li>
<li>使用<code>require</code>来引入模块</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>([<span class="string">&#x27;module&#x27;</span>], <span class="keyword">function</span>(<span class="params"><span class="variable language_">module</span></span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// expose some interface</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h2><p>UMD（Universal Module Definition）是一种通用的模块化规范，它的特点是：</p>
<ul>
<li>支持CommonJS和AMD</li>
<li>通过判断<code>typeof module</code>来判断当前环境</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">root, factory</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="property">amd</span>) &#123;</span><br><span class="line">    <span class="comment">// AMD</span></span><br><span class="line">    <span class="title function_">define</span>([<span class="string">&#x27;module&#x27;</span>], factory);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">module</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="variable language_">module</span>.<span class="property">exports</span>) &#123;</span><br><span class="line">    <span class="comment">// CommonJS</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">factory</span>(<span class="built_in">require</span>(<span class="string">&#x27;module&#x27;</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Browser</span></span><br><span class="line">    root.<span class="property">module</span> = <span class="title function_">factory</span>(root.<span class="property">module</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="variable language_">this</span>, <span class="keyword">function</span> (<span class="params"><span class="variable language_">module</span></span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// expose some interface</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<h2 id="ES6-Modules"><a href="#ES6-Modules" class="headerlink" title="ES6 Modules"></a>ES6 Modules</h2><p>ES6 Modules是JavaScript的模块化规范，它的特点是：</p>
<ul>
<li>使用<code>import</code>来引入模块</li>
<li>使用<code>export</code>来暴露接口</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable language_">module</span> <span class="keyword">from</span> <span class="string">&#x27;./module&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// expose some interface</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Node-js中的ES6-Modules"><a href="#Node-js中的ES6-Modules" class="headerlink" title="Node.js中的ES6 Modules"></a>Node.js中的ES6 Modules</h2><p>Node.js从v13.2.0开始支持ES6 Modules，但是需要使用<code>.mjs</code>后缀名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.mjs</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable language_">module</span> <span class="keyword">from</span> <span class="string">&#x27;./module.mjs&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module.mjs</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// expose some interface</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JavaScript模块化的发展经历了很多阶段，从IIFE到CommonJS、AMD、UMD，最后到ES6 Modules。ES6 Modules是JavaScript的官方模块化规范，它的特点是简洁、易用，所以在现代的JavaScript开发中，推荐使用ES6 Modules。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">MDN - JavaScript modules</a></li>
<li>V8 blog - <a href="https://v8.dev/features/modules#mjs">JavaScript Modules</a></li>
<li>V8 blog - <a href="https://v8.dev/features/modules">ES modules in Node.js: status and future</a></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>module</tag>
        <tag>mjs</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-object-access-control</title>
    <url>/2025/03/16/javascript-object-access-control/</url>
    <content><![CDATA[<p>今天来看看在JavaScript中如何控制对象的可访问性。</p>
<h2 id="不可扩展对象"><a href="#不可扩展对象" class="headerlink" title="不可扩展对象"></a>不可扩展对象</h2><p>使用<code>Object.preventExtensions()</code>方法可以将一个对象设置为不可扩展，不可扩展的对象不能添加新属性，但可以修改或者删除已有属性。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>; <span class="comment">// eslint-disable-line</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(person1)); <span class="comment">// true;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(person1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(person1)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">person1.<span class="property">name</span> = <span class="string">&#x27;Philip&#x27;</span>; <span class="comment">// OK</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>); <span class="comment">// Philip</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person1.<span class="property">name</span>; <span class="comment">// OK;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>); <span class="comment">// undefined.</span></span><br><span class="line"></span><br><span class="line">person1.<span class="property">age</span> = <span class="number">18</span>; <span class="comment">// Error: Cannot add property age, object is not extensible</span></span><br></pre></td></tr></table></figure>

<h2 id="密封对象"><a href="#密封对象" class="headerlink" title="密封对象"></a>密封对象</h2><p>使用<code>Object.seal()</code>方法可以将一个对象密封，密封后的对象不能添加、删除属性，但可以修改属性的值。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>; <span class="comment">// eslint-disable-line</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isSealed</span>(person1)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">seal</span>(person1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isSealed</span>(person1)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">person1.<span class="property">name</span> = <span class="string">&#x27;Philip&#x27;</span>; <span class="comment">// OK</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>); <span class="comment">// Philip</span></span><br><span class="line"></span><br><span class="line">person1.<span class="property">age</span> = <span class="number">18</span>; <span class="comment">// Error, Seal object is non-extensible.</span></span><br><span class="line"><span class="keyword">delete</span> person1.<span class="property">name</span>; <span class="comment">// Error in strict mode.</span></span><br></pre></td></tr></table></figure>

<h2 id="冻结对象"><a href="#冻结对象" class="headerlink" title="冻结对象"></a>冻结对象</h2><p>使用<code>Object.freeze()</code>方法可以冻结一个对象，冻结后的对象不能添加、修改、删除属性，也不能修改属性的可枚举性、可配置性、可写性。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(person1)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(person1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(person1)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">person1.<span class="property">name</span> = <span class="string">&#x27;ddz&#x27;</span>; <span class="comment">// Error. object is frozen.</span></span><br><span class="line">person1.<span class="property">age</span> = <span class="number">18</span>; <span class="comment">//  Cannot add property age, object is not extensible</span></span><br><span class="line"><span class="keyword">delete</span> person1.<span class="property">name</span>; <span class="comment">// TypeError: Cannot delete property &#x27;name&#x27; of #&lt;Object&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1);</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table>
<thead>
<tr>
<th>特性</th>
<th>不可扩展对象 (<code>Object.preventExtensions</code>)</th>
<th>密封对象 (<code>Object.seal</code>)</th>
<th>冻结对象 (<code>Object.freeze</code>)</th>
</tr>
</thead>
<tbody><tr>
<td><strong>是否可新增属性</strong></td>
<td>❌ 不可新增</td>
<td>❌ 不可新增</td>
<td>❌ 不可新增</td>
</tr>
<tr>
<td><strong>是否可修改属性值</strong></td>
<td>✅ 可修改</td>
<td>✅ 可修改</td>
<td>❌ 不可修改</td>
</tr>
<tr>
<td><strong>是否可删除属性</strong></td>
<td>✅ 可删除</td>
<td>❌ 不可删除</td>
<td>❌ 不可删除</td>
</tr>
<tr>
<td><strong>是否可更改原型链</strong></td>
<td>✅ 可更改</td>
<td>✅ 可更改</td>
<td>❌ 不可更改</td>
</tr>
<tr>
<td><strong>是否可更改可枚举性</strong></td>
<td>✅ 可更改</td>
<td>❌ 不可更改</td>
<td>❌ 不可更改</td>
</tr>
<tr>
<td><strong>是否可更改可配置性</strong></td>
<td>✅ 可更改</td>
<td>❌ 不可更改</td>
<td>❌ 不可更改</td>
</tr>
<tr>
<td><strong>是否可更改可写性</strong></td>
<td>✅ 可更改</td>
<td>✅ 可更改</td>
<td>❌ 不可更改</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>object</tag>
        <tag>freeze</tag>
        <tag>seal</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-nullish-coalescing-operator</title>
    <url>/2024/07/17/javascript-nullish-coalescing-operator/</url>
    <content><![CDATA[<p>In JavaScript, the nullish operator <code>??</code> is used to return the right-hand side value if the left-hand side value is <code>null</code> or <code>undefined</code>. Otherwise, it returns the left-hand side value.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">x ?? y <span class="comment">// return x if x is not null or undefined, otherwise return y</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> ?? <span class="number">100</span> <span class="comment">// 0</span></span><br><span class="line"><span class="string">&quot;&quot;</span> ?? <span class="string">&quot;default&quot;</span> <span class="comment">// &quot;&quot;</span></span><br><span class="line"><span class="literal">null</span> ?? <span class="string">&quot;default&quot;</span> <span class="comment">// &quot;default&quot;</span></span><br><span class="line"><span class="literal">undefined</span> ?? <span class="string">&quot;default&quot;</span> <span class="comment">// &quot;default&quot;</span></span><br><span class="line"><span class="literal">null</span> ?? <span class="literal">undefined</span> <span class="comment">// undefined</span></span><br><span class="line"><span class="literal">undefined</span> ?? <span class="literal">null</span> <span class="comment">// null</span></span><br></pre></td></tr></table></figure>

<h2 id="Difference-between-and"><a href="#Difference-between-and" class="headerlink" title="Difference between || and ??"></a>Difference between <code>||</code> and <code>??</code></h2><ol>
<li><code>||</code> returns the first truthy value among its operands, if all operands are falsy, it returns the last operand.</li>
<li><code>??</code> returns the first non-null and non-undefined value among its operands, if all operands are null or undefined, it returns the last operand.</li>
</ol>
<h2 id="Short-circuiting-evaluation"><a href="#Short-circuiting-evaluation" class="headerlink" title="Short-circuiting evaluation."></a>Short-circuiting evaluation.</h2><p>Same as <code>||</code>, <code>??</code> also supports short-circuiting evaluation. If the left-hand side value is not <code>null</code> or <code>undefined</code>, the right-hand side value will not be evaluated.</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>operator</tag>
        <tag>null</tag>
        <tag>nullish</tag>
        <tag>undefined</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-object.prototype.groupBy</title>
    <url>/2024/03/02/javascript-object-prototype-groupby/</url>
    <content><![CDATA[<h1 id="JavaScript-Object-prototype-groupBy"><a href="#JavaScript-Object-prototype-groupBy" class="headerlink" title="JavaScript Object.prototype.groupBy"></a>JavaScript Object.prototype.groupBy</h1><p>给定如下对象数组，如何按照<code>type</code>进行分组？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> inventory = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;asparagus&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;vegetables&quot;</span>, <span class="attr">quantity</span>: <span class="number">5</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;bananas&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;fruit&quot;</span>, <span class="attr">quantity</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;goat&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;meat&quot;</span>, <span class="attr">quantity</span>: <span class="number">23</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;cherries&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;fruit&quot;</span>, <span class="attr">quantity</span>: <span class="number">5</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;fish&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;meat&quot;</span>, <span class="attr">quantity</span>: <span class="number">22</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>最直观的做法如下，遍历数组，然后取出每个对象的type字段，按照哈希表归类的方式进行分组，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">groupBy</span>(<span class="params">arr, key</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> inventory) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; type &#125; = item;</span><br><span class="line">    <span class="keyword">if</span> (result[type]) &#123;</span><br><span class="line">      result[type].<span class="title function_">push</span>(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result[type] = [item];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，也可以是用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce">reduce</a>函数，注意下面代码中<code>acc</code>的初始值是<code>&#123;&#125;</code>，因为我们显示传递了<code>&#123;&#125;</code>给reduce函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">groupBy</span> = (<span class="params">arr, key</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> group = item[key];</span><br><span class="line">    <span class="keyword">if</span> (!acc[group]) &#123;</span><br><span class="line">      acc[group] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    acc[group].<span class="title function_">push</span>(item);</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>最后，你还可以使用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/groupBy">groupBy</a>, 只是这个方法比较新( <code>Chrome 117</code> or later and <code>Node.js 21.0.0</code> or later)，要注意兼容性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="title class_">Object</span>.<span class="title function_">groupBy</span>(inventory, <span class="function">(<span class="params">&#123; type &#125;</span>) =&gt;</span> type);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">vegetables</span>: [ &#123; <span class="attr">name</span>: <span class="string">&#x27;asparagus&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;vegetables&#x27;</span>, <span class="attr">quantity</span>: <span class="number">5</span> &#125; ],</span><br><span class="line">  <span class="attr">fruit</span>: [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;bananas&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;fruit&#x27;</span>, <span class="attr">quantity</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;cherries&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;fruit&#x27;</span>, <span class="attr">quantity</span>: <span class="number">5</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">meat</span>: [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;goat&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;meat&#x27;</span>, <span class="attr">quantity</span>: <span class="number">23</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;fish&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;meat&#x27;</span>, <span class="attr">quantity</span>: <span class="number">22</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h1><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/groupBy">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/groupBy</a></li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>object</tag>
        <tag>groupby</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-object-to-primitive</title>
    <url>/2024/12/19/javascript-object-to-primitive/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>JS中Object类型转换为Primitive类型的过程，称为ToPrimitive操作。这篇文章主要介绍一下这个过程。</p>
<h1 id="转换流程"><a href="#转换流程" class="headerlink" title="转换流程"></a>转换流程</h1><ol>
<li>调用对象的<code>[Symbol.toPrimitive]</code>方法，如果返回的是Primitive类型，则返回。</li>
<li>否则，调用对象的<code>valueOf</code>方法，如果返回的是Primitive类型，则返回。</li>
<li>否则，调用对象的<code>toString</code>方法，如果返回的是Primitive类型，则返回。</li>
<li>否则，抛出TypeError异常。</li>
</ol>
<h1 id="与"><a href="#与" class="headerlink" title="[]与{}"></a><code>[]</code>与<code>&#123;&#125;</code></h1><p>注意：<code>[]</code>和<code>&#123;&#125;</code>在转换为Primitive类型时，会有很大的不同。</p>
<ol>
<li>转换为Number类型时，<code>[]</code>会转换为<code>0</code>，<code>&#123;&#125;</code>会转换为<code>NaN</code>。</li>
<li>转换为String类型时，<code>[]</code>会转换为<code>&#39;&#39;</code>，<code>&#123;&#125;</code>会转换为<code>&#39;[object Object]&#39;</code>。</li>
<li>转换为Boolean类型时，<code>[]</code>会转换为<code>false</code>，<code>&#123;&#125;</code>会转换为<code>true</code>。</li>
</ol>
<p>之所以造成这么大的区别就是因为<code>[]</code>和<code>&#123;&#125;</code>的和<code>toString()</code>方法的返回值不同。</p>
<ul>
<li><code>[]</code>的<code>toString()</code>方法返回的是<code>&#39;&#39;</code>，而<code>valueOf()</code>方法返回的是<code>[]</code>。</li>
<li><code>&#123;&#125;</code>的<code>toString()</code>方法返回的是<code>&#39;[object Object]&#39;</code>，而<code>valueOf()</code>方法返回的是<code>&#123;&#125;</code>。</li>
</ul>
<p>因为<code>[]</code>能转换为<code>空字符串</code>，而<code>空字符串</code>可以转换为<code>0</code>或<code>false</code>，所以<code>[]</code>能转换为<code>0</code>或<code>false</code>。而<code>&#123;&#125;</code>则不能。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#type_coercion">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#type_coercion</a></li>
<li><a href="https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toprimitive">https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toprimitive</a></li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>object</tag>
        <tag>primitive</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-object-without-prototype</title>
    <url>/2024/11/13/javascript-object-without-prototype/</url>
    <content><![CDATA[<h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>今天在练习正则表达式的时候，发现了一个有趣的输出，之前未见过（也许曾经见过，但没有留意），索性研究一下。</p>
<p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">`name: zdd, age: 18, gender: male`</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/name: (?&lt;name&gt;\w+), age: (?&lt;age&gt;\d+), gender: (?&lt;gender&gt;\w+)/</span>;</span><br><span class="line"><span class="keyword">const</span> match = str.<span class="title function_">match</span>(regex); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(match.<span class="property">groups</span>);</span><br></pre></td></tr></table></figure>

<p>简单解释一下这个正则表达式：</p>
<ol>
<li><code>/.../</code> - 这是js的正则表达式语法，用<code>//</code>包裹。</li>
<li><code>name: </code> - 匹配字符串<code>name: </code></li>
<li><code>(?&lt;name&gt;...)</code> - 这是一个命名捕获，表示匹配后的值放到<code>name</code>这变量中，可以用<code>match.groups.name</code>来输出捕获的值。</li>
<li><code>\w+</code> - 表示匹配任意字母、数字或下划线（等价于 [a-zA-Z0-9_]）, <code>+</code> - 表示一个或者多个。</li>
</ol>
<p>输出结果如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="title class_">Object</span>: <span class="literal">null</span> prototype] &#123; <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>
<p>这个输出结果里面的<code>[Object: null prototype]</code>是什么意思呢？问了一下通义千问，发现这是一个没有原型的对象。</p>
<p>那么，啥是没有原型的对象呢？可以简单的理解为，这个对象没有继承任何Object的属性和方法，是一个干净的对象。它就是它自己！<br>此类对象没有<code>toString</code>、<code>valueOf</code>等方法，也没有<code>__proto__</code>属性，因此无法通过原型链访问到Object的属性和方法。我们可以通过<code>Object.create(null)</code>来创建一个没有原型的对象。</p>
<p>以下代码会产生一个TypeError,因为<code>person</code>对象没有原型，所以无法访问<code>toString</code>, <code>hasOwnProperty</code>等方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Philip&#x27;</span>;</span><br><span class="line">person.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">toString</span>()); <span class="comment">// TypeError: person.toString is not a function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>)); <span class="comment">// TypeError: person.hasOwnProperty is not a function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>没有原型的对象有哪些好处呢？我们常说，存在即有理，既然这种对象，那么必然有它存在的道理：</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>避免原型污染：在JavaScript中，我们经常会遇到原型污染的问题，通过创建没有原型的对象，可以避免这种问题。</li>
<li>速度快：没有原型的对象，不需要查找原型链，因此访问属性和方法的速度更快。</li>
<li>纯粹的数据容器：没有原型的对象，可以作为一个纯粹的数据容器。</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol>
<li>无法使用<code>Object.prototype</code>上的方法，如<code>toString</code>、<code>valueOf</code>等。</li>
<li>检查属性是否存在只能使用<code>in</code>操作符，不能使用<code>hasOwnProperty</code>方法。</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>prototype</tag>
        <tag>object</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-operator-equality</title>
    <url>/2024/11/18/javascript-operator-equal/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>这篇文章主要介绍一下JavaScript中的比较运算符<code>==</code>。先看几道题，如果你都能答上来，那么可以不用看此文了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;abc&#x27;</span> == <span class="title class_">String</span>(<span class="string">&#x27;abc&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;abc&#x27;</span> === <span class="title class_">String</span>(<span class="string">&#x27;abc&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;abc&#x27;</span> == <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;abc&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;abc&#x27;</span> === <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;abc&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] == []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; == &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="title class_">NaN</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Difference-between-String-abc-and-new-String-abc"><a href="#Difference-between-String-abc-and-new-String-abc" class="headerlink" title="Difference between String(&#39;abc&#39;) and new String(&#39;abc&#39;)"></a>Difference between <code>String(&#39;abc&#39;)</code> and <code>new String(&#39;abc&#39;)</code></h2><ul>
<li><code>String(xxx)</code>是将<code>xxx</code>转换为字符串，所以它返回的是字符串，而<code>&#39;abc&#39;</code>原本就是字符串，这里相当于直接返回<code>&#39;abc&#39;</code>。typeof String(‘abc’)返回的是<code>string</code>。</li>
<li><code>new String(xxx)</code>是创建一个字符串对象，其内容是<code>xxx</code>，所以它返回的是一个对象类型，不是字符串类型。typeof new String(‘abc’)返回的是<code>object</code>。</li>
</ul>
<h2 id="How-works"><a href="#How-works" class="headerlink" title="How == works?"></a>How <code>==</code> works?</h2><p><code>==</code>采用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#loose_equality_using">Loose equality</a>算法，其过程如下：</p>
<ol>
<li>如果两个操作数类型相同，则按如下规则比较：<ol>
<li>Object类型：当两个操作数指向同一个对象时返回<code>true</code>，否则返回<code>false</code>。</li>
<li>String类型：当两个操作数的字符序列相同，返回<code>true</code>。</li>
<li>Number类型：当两个操作数的数值相同，返回<code>true</code>。注意：<code>+0</code>和<code>-0</code>被认为是相等的，NaN和任何值都不相等，包括其自身。</li>
<li>Boolean类型：当两个操作数都是<code>true</code>或者都是<code>false</code>时返回<code>true</code>。</li>
<li>BigInt类型：当两个操作数的数值相同，返回<code>true</code>。</li>
<li>Symbol类型：当两个操作数都是相同的Symbol值时返回<code>true</code>。</li>
</ol>
</li>
<li>如果两个操作数类型不同，则按如下规则比较：<ol>
<li>如果一个操作数是<code>null</code>，另一个操作数是<code>undefined</code>，返回<code>true</code>。</li>
<li>如果一个操作数是<code>primitive</code>类型，另一个操作数是<code>Object</code>类型，将<code>Object</code>类型转换为<code>primitive</code>类型（转换规则<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion">在此</a>），再按如下规则比较。</li>
<li>到这一步时，两个操作数都是<code>primitive</code>类型了，按如下规则继续比较。<ol>
<li>如果两个操作数类型相同，按照第1条规则比较。</li>
<li>如果一个操作数是<code>Symbol</code>类型，但另一个不是，返回<code>false</code>。</li>
<li>如果一个操作数是<code>Boolean</code>类型，将其转换为<code>Number</code>类型(<code>true</code> -&gt; 1, <code>false</code> -&gt; 0)，继续往下比较。</li>
<li><code>Number</code>类型与<code>String</code>类型比较，将<code>String</code>类型转换为<code>Number</code>类型进行比较。转换规则<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion">在此</a>。</li>
<li><code>Number</code>类型与<code>BigInt</code>类型比较，比较他们的值，如果有一个操作数是<code>+Infinity/-Infinity/NaN</code>，返回<code>false</code>。</li>
<li><code>String</code>类型与<code>BigInt</code>类型比较，将<code>String</code>类型转换为<code>BigInt</code>类型（用<code>BigInt()</code>转换），若转换失败则返回<code>false</code>。</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>类型相同时，比较好理解，我们重点梳理一下类型不同时的比较。</p>
<ol>
<li>两个对象类型之间的比较是比较引用地址，也比较简单，无需赘述。</li>
<li>一个对象和一个基本类型的比较，会将对象转换为基本类型，然后再比较。</li>
<li>两个基本类型之间的比较，其实，最终都会归类到此类比较。</li>
</ol>
<p>所以，我们重点讨论一下基本类型之间的比较。JS中有7种基本类型，分别是<code>String</code>, <code>Number</code>, <code>BigInt</code>, <code>Boolean</code>, <code>Symbol</code>, <code>null</code>, <code>undefined</code>。</p>
<ol>
<li><code>null</code>和<code>undefined</code>之间的比较，返回<code>true</code>。</li>
<li><code>Symbol</code>和其他类型之间的比较，都返回<code>false</code>。<br>至此，还剩下<code>String</code>, <code>Number</code>, <code>BigInt</code>, <code>Boolean</code>之间的比较。剩下的这几个类型比较，基本围绕<code>Number</code>进行。</li>
<li><code>Boolean</code>和<code>Number</code>之间的比较，将<code>Boolean</code>转换为<code>Number</code>，然后再比较。</li>
<li><code>String</code>和<code>Number</code>之间的比较，将<code>String</code>转换为<code>Number</code>，然后再比较。</li>
<li><code>Boolean</code>和<code>String</code>之间的比较，将他们都转换为<code>Number</code>然后再比较。</li>
<li><code>String</code>和<code>BigInt</code>之间的比较，将<code>String</code>转换为<code>BigInt</code>，然后再比较。</li>
<li><code>Number</code>和<code>BigInt</code>之间的比较，比较他们的值，如果有一个操作数是<code>+Infinity/-Infinity/NaN</code>，返回<code>false</code>。</li>
</ol>
<p>注意：</p>
<ol>
<li><code>Loose Equality</code>算法满足交换律，即<code>A == B</code>等价于<code>B == A</code>。</li>
<li><code>document.all</code>被视为<code>undefined</code>.</li>
</ol>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>以下给出一些采用<code>==</code>进行比较的例子，我们会给出每个例子的比较规则对应的序号（参考<code>How == works一节</code>）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;1&quot;</span> == <span class="number">1</span>; <span class="comment">// true, 2.3.4</span></span><br><span class="line"><span class="literal">true</span> == <span class="string">&quot;1&quot;</span> <span class="comment">// true, 2.3.3 and 2.3.4</span></span><br><span class="line">[] == <span class="string">&quot;&quot;</span>; <span class="comment">// true, 2.2, 2.3.1</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">false</span>; <span class="comment">// true, 2.3.3</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">null</span>; <span class="comment">// false, 2.1</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">undefined</span>; <span class="comment">// false, 2.1</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>; <span class="comment">// true, 2.1</span></span><br><span class="line"><span class="number">0</span> == !!<span class="literal">undefined</span>; <span class="comment">// true, 2.3.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里有一个窍门，只要两个操作数都是对象字面量，那么一定不相等。无论==还是===都不相等。</span></span><br><span class="line">[] == []; <span class="comment">// false, 1.1</span></span><br><span class="line">&#123;&#125; == &#123;&#125;; <span class="comment">// false, 1.1</span></span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;Philip&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125; == &#123; <span class="attr">name</span>: <span class="string">&#x27;Philip&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;; <span class="comment">// false, 1.1</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">NaN</span> == <span class="title class_">NaN</span>; <span class="comment">// false, 1.3, not NaN === NaN is also false.</span></span><br><span class="line">+<span class="number">0</span> == -<span class="number">0</span>; <span class="comment">// true, 1.3</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">all</span> == <span class="literal">undefined</span>; <span class="comment">// true, 2.1</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">all</span> == <span class="literal">null</span>; <span class="comment">// true, 2.1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> number1 = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> number2 = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">number1 == <span class="number">3</span>; <span class="comment">// true, 2.3.1</span></span><br><span class="line">number1 == number2; <span class="comment">// false, 1.1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> object2 = &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object1 == object2); <span class="comment">// false, 1.1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object1 == object1); <span class="comment">// true, 1.1</span></span><br></pre></td></tr></table></figure>

<p>下面这个例子要注意：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&quot;1,2,3&quot;</span>;</span><br><span class="line">a == b; <span class="comment">// true, 2.3.1</span></span><br></pre></td></tr></table></figure>
<p><code>Array.prototype.toString()</code>方法重写了<code>Object.prototype.toString()</code>方法，数组转化为字符串时，会执行以下步骤：</p>
<ol>
<li>对数组内每个元素调用<code>toString()</code>方法，将其转化为字符串。</li>
<li>将这些字符串用逗号连接起来。</li>
<li>返回这个字符串。</li>
</ol>
<p>所以上面的例子就是<code>[1, 2, 3].toString() == &quot;1,2,3&quot;</code>，所以返回<code>true</code>。<br>所以空数组和空字符串之间的比较也是<code>true</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[] == <span class="string">&quot;&quot;</span>; <span class="comment">// true, 2.3.4</span></span><br></pre></td></tr></table></figure>
<p>数组转字符串还有很多细节，详情请看这里：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString">Array.prototype.toString()</a>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><code>==</code>比较时，不要老想着转换为Boolean，其实大多数时候是转换为Number</li>
<li>对象字面量使用<code>==</code>比较时，一定是<code>false</code></li>
<li><code>new String(...)</code>和<code>String(...)</code>完全不同，前者是创建String对象，后者是将<code>...</code>转换为字符串。</li>
</ol>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality</a></li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>operator</tag>
        <tag>equality</tag>
        <tag>compare</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-operator-or</title>
    <url>/2025/02/06/javascript-operator-or/</url>
    <content><![CDATA[<h1 id="Introduction-to-javascript-operator"><a href="#Introduction-to-javascript-operator" class="headerlink" title="Introduction to javascript operator ||"></a>Introduction to javascript operator <code>||</code></h1><p>In JavaScript, the <code>||</code> operator is used to return the first truthy value among its operands. If all operands are falsy values, it returns the last operand.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">x || y <span class="comment">// return x if x is truthy, otherwise return y</span></span><br><span class="line">x || y || z <span class="comment">// return the first truthy value among x, y, z, or z if all operands are falsy values.</span></span><br><span class="line"><span class="comment">// examples</span></span><br><span class="line"><span class="number">1</span> || <span class="number">2</span> <span class="comment">// 1</span></span><br><span class="line"><span class="number">0</span> || <span class="number">1</span> <span class="comment">// 1</span></span><br><span class="line"><span class="number">0</span> || <span class="string">&quot;&quot;</span> || <span class="number">1</span> <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h2 id="can-return-non-boolean-values"><a href="#can-return-non-boolean-values" class="headerlink" title="|| can return non-boolean values"></a><code>||</code> can return non-boolean values</h2><p>Logical operator or <code>||</code> in most programming languages only return boolean values, but in JavaScript, this is not true.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> || <span class="number">2</span> <span class="comment">// 1, number type</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span> || <span class="string">&quot;world&quot;</span> <span class="comment">// &quot;hello&quot;, string type</span></span><br><span class="line"><span class="number">0</span> || <span class="literal">null</span> <span class="comment">// null, null type</span></span><br><span class="line"><span class="number">0</span> || <span class="literal">undefined</span> <span class="comment">// undefined, undefined type</span></span><br></pre></td></tr></table></figure>

<h2 id="arguments-checking"><a href="#arguments-checking" class="headerlink" title="arguments checking"></a>arguments checking</h2><p><code>||</code> is often used to check if an argument is provided or not. If the argument is not provided, a default value will be used.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeRequest</span>(<span class="params">url, timeout, callback</span>) &#123;</span><br><span class="line">  timeout = timeout || <span class="number">2000</span>;</span><br><span class="line">  callback = callback || <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In above example, if <code>timeout</code> or <code>callback</code> is not provided, the default value will be used.</p>
<p>But there is a problem with this approach, if the argument is provided but falsy value(for example, pass 0 for timeout), the default value will be used. In the following code, we intend to use 0 as the timeout value, but <code>0 || 2000 = 2000</code>, so <code>2000</code> was used as the timeout value.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">makeRequest</span>(<span class="string">&quot;https://example.com&quot;</span>, <span class="number">0</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>To fix this, we can explicitly check whether the arguments is undefined.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeRequest</span>(<span class="params">url, timeout, callback</span>) &#123;</span><br><span class="line">  timeout = (timeout !== <span class="literal">undefined</span>) ? timeout : <span class="number">2000</span>;</span><br><span class="line">  callback = (callback !== <span class="literal">undefined</span>) ? callback : <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Or use the <a href="https://zdd.github.io/2024/07/17/javascript-nullish-coalescing-operator/">nullish operator</a> <code>??</code>, which only returns the right-hand side value if the left-hand side value is <code>null</code> or <code>undefined</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeRequest</span>(<span class="params">url, timeout, callback</span>) &#123;</span><br><span class="line">  timeout = timeout ?? <span class="number">2000</span>;</span><br><span class="line">  callback = callback ?? <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Short-circuit-evaluation"><a href="#Short-circuit-evaluation" class="headerlink" title="Short-circuit evaluation"></a>Short-circuit evaluation</h2><p>The logical OR expression is evaluated left to right, it will stop evaluating once it finds a truthy value.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;called A&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;called B&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">B</span>() || <span class="title function_">A</span>());</span><br></pre></td></tr></table></figure>
<p>The code above will output:</p>
<ol>
<li>called B</li>
<li>true</li>
</ol>
<p>In the above example, <code>B()</code> is called first, and it returns <code>true</code>, so <code>A()</code> is not called.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR</a></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>operator</tag>
        <tag>or</tag>
      </tags>
  </entry>
  <entry>
    <title>optional chaining</title>
    <url>/2023/12/06/javascript-optional-chaining/</url>
    <content><![CDATA[<h1 id="Optional-chaining"><a href="#Optional-chaining" class="headerlink" title="Optional chaining"></a>Optional chaining</h1><h2 id="Why-optional-chaining"><a href="#Why-optional-chaining" class="headerlink" title="Why optional chaining"></a>Why optional chaining</h2><p>Have you write the following code before?</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (user &amp;&amp; user.<span class="property">address</span> &amp;&amp; user.<span class="property">address</span>.<span class="property">street</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">address</span>.<span class="property">street</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>With optional chaining operator, you don’t need so many <code>&amp;&amp;</code> to get a deeply nested property.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user?.<span class="property">address</span>?.<span class="property">street</span>);</span><br></pre></td></tr></table></figure>

<h2 id="How-to-use-optional-chaining"><a href="#How-to-use-optional-chaining" class="headerlink" title="How to use optional chaining"></a>How to use optional chaining</h2><p>The optional chaining (?.) operator accesses an object’s property or calls a function. If the object accessed or function called using this operator is undefined or null, the expression short circuits and evaluates to <code>undefined</code> instead of throwing an error.</p>
<h3 id="Access-object’s-property"><a href="#Access-object’s-property" class="headerlink" title="Access object’s property"></a>Access object’s property</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Philip&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">info</span>.<span class="property">address</span>); <span class="comment">// TypeError: Cannot read property &#x27;address&#x27; of undefined.(Because, person does not have property &#x27;info&#x27;)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">info</span>?.<span class="property">address</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="Call-a-function"><a href="#Call-a-function" class="headerlink" title="Call a function"></a>Call a function</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">onContent, onError</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Do something with the data</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">// Testing if onError really exists</span></span><br><span class="line">    <span class="keyword">if</span> (onError) &#123;</span><br><span class="line">      <span class="title function_">onError</span>(err.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>With optional chaining, you don’t need too check weather <code>onError</code> is defined or not.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">onContent, onError</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Do something with the data</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    onError?.(err.<span class="property">message</span>); <span class="comment">// No exception if onError is undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Short-circuit"><a href="#Short-circuit" class="headerlink" title="Short circuit"></a>Short circuit</h3><p>When using optional chaining, if the left operand is <code>null</code> or <code>undefined</code>, the expression will not be evaluated, for instance:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> nums = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">const</span> firstNumber = nums?.[i++];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 0, since num?. trigger short circuit, [i++] is not evaluated.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="not-work-for-non-declared-root-object"><a href="#not-work-for-non-declared-root-object" class="headerlink" title="?. not work for non-declared root object"></a>?. not work for non-declared root object</h3><p>Optional chaining can not be used with a non-declared root object, but can be used with a root object that is null or undefined.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a?.<span class="property">b</span>); <span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span>?.<span class="property">b</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>?.<span class="property">b</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>In javascript, <code>not defined</code> and <code>undefined</code> are two different concepts. See <a href="https://zdd.github.io/2023/12/06/undefined-vs-not-defined/">undefined vs not defined</a></p>
<h2 id="Unit-test-coverage-for-optional-chaining"><a href="#Unit-test-coverage-for-optional-chaining" class="headerlink" title="Unit test coverage for optional chaining"></a>Unit test coverage for optional chaining</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>operator</tag>
        <tag>undefined</tag>
        <tag>optional chaining</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-promise-order-of-then-catch</title>
    <url>/2024/06/13/javascript-promise-order-of-then-catch/</url>
    <content><![CDATA[<p>What’s the difference of the following two code snippets?<br>first code snippet.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;handler executed...&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;success in fetchData&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>()</span><br><span class="line">  .<span class="title function_">then</span>(handler)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>second code snippet.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;handler executed...&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&quot;error in fetchData&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>()</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(handler);</span><br></pre></td></tr></table></figure>

<p>The first code snippet is <code>xxx.then().catch()</code> while the second code snippet is <code>xxx.catch().then()</code>, since promise.catch also return a promise, so <code>handler</code> in the second code snippet will always be executed. But in the first code snippet, the handler will not be executed.</p>
<p>outputs:</p>
<p>first code snippet.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error <span class="keyword">in</span> fetchData</span><br></pre></td></tr></table></figure>

<p>second code snippet.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error <span class="keyword">in</span> fetchData</span><br><span class="line">handler executed...</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>promise</tag>
        <tag>then</tag>
        <tag>catch</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-promise-reject</title>
    <url>/2024/03/16/javascript-promise-reject/</url>
    <content><![CDATA[<h1 id="JavaScript-Promise-Reject"><a href="#JavaScript-Promise-Reject" class="headerlink" title="JavaScript Promise Reject"></a>JavaScript Promise Reject</h1><p>See the following code, what’s the output?</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleResponse</span>(<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">code</span> !== <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;rejected!&#x27;</span>);</span><br><span class="line">      <span class="title function_">reject</span>(response.<span class="property">code</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      <span class="attr">data</span>: &#123; token &#125;,</span><br><span class="line">    &#125; = response;</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;resolved!&#x27;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>(token);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> response = &#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">201</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">token</span>: <span class="string">&#x27;123455&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">handleResponse</span>(response)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>The output is:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rejected!</span><br><span class="line">resolved!</span><br><span class="line"><span class="number">201</span></span><br></pre></td></tr></table></figure>

<p>Why?</p>
<p><code>reject</code> or <code>resolve</code> will not terminate the execution of the promise, it will continue to execute subsequent code.</p>
<p>To solve this problem, you can add a <code>return</code> statement after <code>reject(response.code)</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleResponse</span>(<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">code</span> !== <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;rejected!&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">reject</span>(response.<span class="property">code</span>); <span class="comment">// return reject here.</span></span><br><span class="line">      <span class="comment">// return; // or return here.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      <span class="attr">data</span>: &#123; token &#125;,</span><br><span class="line">    &#125; = response;</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;resolved!&#x27;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>(token);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Or use the else statement to make the exclusive execution.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleResponse</span>(<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">code</span> !== <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;rejected!&#x27;</span>);</span><br><span class="line">      <span class="title function_">reject</span>(response.<span class="property">code</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="attr">data</span>: &#123; token &#125;,</span><br><span class="line">      &#125; = response;</span><br><span class="line">      <span class="keyword">if</span> (token) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;resolved!&#x27;</span>);</span><br><span class="line">        <span class="title function_">resolve</span>(token);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then we got the correct output as:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rejected!</span><br><span class="line"><span class="number">201</span></span><br></pre></td></tr></table></figure>

<h1 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h1><ul>
<li><code>reject</code> or <code>return</code>will not terminate the execution of the promise, it will continue to execute subsequent code.</li>
</ul>
<p>Three ways to solve this problem:</p>
<ol>
<li><code>return resolved(xxx)</code> or <code>return reject(xxx)</code>, the return value will be ignored, so we can save a line then way 2.</li>
<li>Add a <code>return</code> statement after <code>reject(response.code)</code>.</li>
<li>Use the <code>if/else</code> statement to make the exclusive execution.</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>promise</tag>
        <tag>reject</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-promise-then</title>
    <url>/2024/03/31/javascript-promise-then/</url>
    <content><![CDATA[<h2 id="Promise被reject时，then方法会执行吗？"><a href="#Promise被reject时，then方法会执行吗？" class="headerlink" title="Promise被reject时，then方法会执行吗？"></a>Promise被<code>reject</code>时，then方法会执行吗？</h2><p><code>promise.protyto.then</code>什么时候会执行？我的印象里只有<code>promise</code>状态为<code>fullfilled</code>时才会执行，其实是不对的，<code>promise</code>状态为<code>reject</code>时，同样可以执行<code>then</code>方法。</p>
<p>先来看一个最常规的应用，我们在写代码时都是<code>then</code>和<code>catch</code>配合使用的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;success in fetchData&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>我们在<code>fetchData</code>中使用<code>setTimeout</code>模拟了一个异步操作，100ms后<code>resolve</code>，这时<code>then</code>中的回调函数会被执行，打印出<code>success in fetchData</code>。</p>
<p>同理，假设100ms后<code>reject</code>这个<code>promise</code>，那么会打印出: <code>error in fetchData</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&#x27;error in fetchData&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在常规使用中，我们只给<code>then</code>传了一个方法作为参数，但是<code>then</code>其实可以接受两个参数的。如果我们传递了第二个参数，那么当<code>promise</code>状态为<code>reject</code>时，第二个参数对应的方法会被执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">then</span>(onFulfilled)</span><br><span class="line"><span class="title function_">then</span>(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>

<p>所以，修改一下上面的代码，我们可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&#x27;error in fetchData&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这样，当<code>promise</code>状态为<code>reject</code>时，第二个参数对应的方法会被执行，打印出<code>error in fetchData</code>。这和使用<code>catch</code>的效果是一样的。</p>
<p>那么如果我们既传递了<code>then</code>中的第二个参数<code>onRejected</code>又使用了<code>catch</code>，结果会怎样呢？我们来看一下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&#x27;error in fetchData&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;catch:&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>此时打印出的结果是<code>error in fetchData</code>，因为then中的第二个参数会优先被执行，<code>catch</code>不会被执行。</p>
<h2 id="Promise-then中抛出的异常会被catch捕获吗？"><a href="#Promise-then中抛出的异常会被catch捕获吗？" class="headerlink" title="Promise.then中抛出的异常会被catch捕获吗？"></a>Promise.then中抛出的异常会被catch捕获吗？</h2><p><code>Promise.then</code>中抛出的异常会被<code>catch</code>捕获吗？我们来看一个例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;success in fetchData&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error in then&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在<code>then</code>中，我们抛出了一个异常，这个异常会被<code>catch</code>捕获吗？答案是会的，打印出<code>Error: error in then</code>。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>promise</tag>
        <tag>then</tag>
      </tags>
  </entry>
  <entry>
    <title>promise</title>
    <url>/2024/02/19/javascript-promise1/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Promise就像它的名字一样，是指在未来某个时间将会发生的事情。这个事情会生成一个结果，我们叫做Result。</p>
<p>Promise有三种状态：</p>
<ul>
<li>Pending: 初始状态，既不是成功状态，也不是失败状态。</li>
<li>Fulfilled: 意味着操作成功完成。</li>
<li>Rejected: 意味着操作失败。</li>
</ul>
<p>这里，<code>Fullfilled</code>和<code>Rejected</code>又统称为<code>Settled</code>。也就是说，一个Promise只要执行完毕有就算是<code>Settled</code>了, 无论是成功还是失败。</p>
<h1 id="Promise-API"><a href="#Promise-API" class="headerlink" title="Promise API"></a>Promise API</h1><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><p><code>Promise.all</code>接收一个promise数组，返回一个新的promise。这个新的promise会在所有promise都resolve之后resolve，或者在任何一个promise reject之后reject。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;Promise 1 resolved&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;Promise 2 resolved&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2]).<span class="title function_">then</span>(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="string">``</span></span><br><span class="line"><span class="attr">output</span>:</span><br><span class="line"><span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">[&#x27;Promise 1 resolved&#x27;, &#x27;Promise 2 resolved&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>假设Promise 2 reject了，那么<code>Promise.all</code>会reject，并且返回的promise的值是Promise 2 reject的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;Promise 1 resolved&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="title class_">Error</span>(<span class="string">&#x27;Promise 2 rejected&#x27;</span>));</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Error</span>: <span class="title class_">Promise</span> <span class="number">2</span> rejected</span><br></pre></td></tr></table></figure>

<p>注意，Promise.all大部分情况下是异步返回的，只有一种情况例外，那就是传递一个空数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([]); <span class="comment">// 立即同步返回 Promise &#123; [] &#125;</span></span><br></pre></td></tr></table></figure>

<p>我们可以使用<code>console.log</code>来验证上述代码是同步返回的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>输出结果如下，可见<code>Promise.all([])</code>是同步返回的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start</span><br><span class="line">Promise &#123; [] &#125;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>除了传递空数组外，其他所有情况都是异步返回，比如直接传递非promise数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 异步返回。</span></span><br></pre></td></tr></table></figure>

<p>思考题：<br>以下代码输会输出<code>promise one running...</code>吗？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise one running...&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;rejected&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>解析：会输出’promise one running…’, 虽然<code>Promise.all</code>会在任何一个promise reject之后立即reject，但是剩下的promise还是会继续执行，直到resolve或者reject。注意这就是promise的不可取消性，如何要取消，请使用RxJS中的observable。</p>
<p>到这里我们需要总结一下<code>Promise.all</code>的返回值，一共有以下几种情况：</p>
<ol>
<li>所有promise都resolve，返回一个数组，数组中包含了所有promise的resolve值。</li>
<li>任何一个promise reject，返回的promise会reject，其值是第一个reject的promise的值。</li>
<li>传递一个空数组，返回的promise会立即resolve，值是一个空数组。</li>
</ol>
<h2 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled"></a>Promise.allSettled</h2><p>这个方法与<code>Promise.all</code>类似，不同的是，<code>Promise.allSettled</code>会等待所有promise都settled之后返回。settled的意思是promise已经resolve或者reject了。</p>
<p><code>Promise.allSettled</code>的返回值是一个数组，数组中的每个元素都是一个对象，包含了promise的状态和值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;rejected&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using .catch:</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([p1, p2])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>以上代码输出如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; status: <span class="string">&#x27;fulfilled&#x27;</span>, value: <span class="string">&#x27;one&#x27;</span> &#125;,</span><br><span class="line">  &#123; status: <span class="string">&#x27;rejected&#x27;</span>, reason: <span class="string">&#x27;rejected&#x27;</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any"></a>Promise.any</h2><p>输入的Promise数组中，任意一个promise resolve，返回的promise就resolve。如果所有的promise都reject，返回的promise就reject。</p>
<p>以下代码输出quick，因为<code>p2</code>最快resolve。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;quick&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, <span class="string">&#x27;slow&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promises = [p1, p2, p3];</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">any</span>(promises).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value));</span><br></pre></td></tr></table></figure>

<p>当所有promise都reject时，<code>Promise.any</code>会返回&#96;&#96;AggregateError&#96;，这个错误包含了所有的reject值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> promises = [p1, p2];</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">any</span>(promises).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value));</span><br></pre></td></tr></table></figure>

<p>如果给<code>Promise.any</code>传递一个空数组，返回的promise会reject，错误信息是<code>[AggregateError: All promises were rejected] &#123; [errors]: [] &#125;</code>.</p>
<h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h2><p>这个API最简单了，看名字就知道了，谁先返回就是谁，不论是resolve还是reject。<br><code>Promise.race</code>接收一个promise数组，返回一个新的promise。这个新的promise会在任意一个promise resolve或者reject之后resolve或者reject。</p>
<p>下面代码输出two，因为<code>p2</code>最快resolve。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, <span class="string">&#x27;one&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;two&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2]).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>注意：如果给<code>Promise.race</code>传递一个空数组，返回的promise会一直pending，因为没有promise可以resolve或者reject。这就好比一个没有人参加的百米赛跑，永远不会有人冲过终点。</p>
<h2 id="Promise-in-setTimeout"><a href="#Promise-in-setTimeout" class="headerlink" title="Promise in setTimeout"></a>Promise in setTimeout</h2><p><code>setTimeout</code> is macro-task, and promise is micro-task. So the promise will be executed before the setTimeout.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Promise 1 resolved&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Promise 2 resolved&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = <span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(promise);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using setTimeout, we can execute code after the queue is empty</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(promise);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span> &#123; &lt;pending&gt; &#125;</span><br><span class="line"><span class="title class_">Promise</span> &#123; [ <span class="string">&#x27;Promise 1 resolved&#x27;</span>, <span class="string">&#x27;Promise 2 resolved&#x27;</span> ] &#125;</span><br></pre></td></tr></table></figure>

<p>Why the output?</p>
<ol>
<li><code>Promise.all</code> is a micro-task, so it will be executed before the <code>setTimeout</code> macro-task.</li>
<li>The <code>promise</code> is pending when we log it for the first time.</li>
<li>After the <code>Promise.all</code> is executed, the <code>promise</code> is resolved</li>
<li>The <code>setTimeout</code> is a macro-task, so it will be executed after the queue is empty(no micro-task in the queue).</li>
<li>The <code>promise</code> is resolved when we log it for the second time</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>promise</tag>
        <tag>then</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-promise</title>
    <url>/2024/02/19/javascript-promise/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Promise就像它的名字一样，是指在未来某个时间将会发生的事情。这个事情会生成一个结果，我们叫做Result。</p>
<p>Promise有三种状态：</p>
<ul>
<li>Pending: 初始状态，既不是成功状态，也不是失败状态。</li>
<li>Fulfilled: 意味着操作成功完成。</li>
<li>Rejected: 意味着操作失败。</li>
</ul>
<p>这里，<code>Fullfilled</code>和<code>Rejected</code>又统称为<code>Settled</code>。也就是说，一个Promise只要执行完毕有就算是<code>Settled</code>了, 无论是成功还是失败。</p>
<h1 id="Promise-API"><a href="#Promise-API" class="headerlink" title="Promise API"></a>Promise API</h1><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><p><code>Promise.all</code>接收一个promise数组，返回一个新的promise。这个新的promise会在所有promise都resolve之后resolve，或者在任何一个promise reject之后reject。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;Promise 1 resolved&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;Promise 2 resolved&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2]).<span class="title function_">then</span>(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;Promise 1 resolved&#x27;</span>, <span class="string">&#x27;Promise 2 resolved&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>假设Promise 2 reject了，那么<code>Promise.all</code>会reject，并且返回的promise的值是Promise 2 reject的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;Promise 1 resolved&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="title class_">Error</span>(<span class="string">&#x27;Promise 2 rejected&#x27;</span>));</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Error</span>: <span class="title class_">Promise</span> <span class="number">2</span> rejected</span><br></pre></td></tr></table></figure>

<p>注意，Promise.all大部分情况下是异步返回的，只有一种情况例外，那就是传递一个空数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([]); <span class="comment">// 立即同步返回 Promise &#123; [] &#125;</span></span><br></pre></td></tr></table></figure>

<p>我们可以使用<code>console.log</code>来验证上述代码是同步返回的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>输出结果如下，可见<code>Promise.all([])</code>是同步返回的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start</span><br><span class="line">Promise &#123; [] &#125;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>除了传递空数组外，其他所有情况都是异步返回，比如直接传递非promise数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 异步返回。</span></span><br></pre></td></tr></table></figure>

<p>思考题：<br>以下代码输会输出<code>promise one running...</code>吗？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise one running...&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;rejected&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>解析：会输出’promise one running…’, 虽然<code>Promise.all</code>会在任何一个promise reject之后立即reject，但是剩下的promise还是会继续执行，直到resolve或者reject。注意这就是promise的不可取消性，如何要取消，请使用RxJS中的observable。</p>
<p>到这里我们需要总结一下<code>Promise.all</code>的返回值，一共有以下几种情况：</p>
<ol>
<li>所有promise都resolve，返回一个数组，数组中包含了所有promise的resolve值。</li>
<li>任何一个promise reject，返回的promise会reject，其值是第一个reject的promise的值。</li>
<li>传递一个空数组，返回的promise会立即resolve，值是一个空数组。</li>
</ol>
<h2 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled"></a>Promise.allSettled</h2><p>这个方法与<code>Promise.all</code>类似，不同的是，<code>Promise.allSettled</code>会等待所有promise都settled之后返回。settled的意思是promise已经resolve或者reject了。</p>
<p><code>Promise.allSettled</code>的返回值是一个数组，数组中的每个元素都是一个对象，包含了promise的状态和值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;rejected&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using .catch:</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([p1, p2])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>以上代码输出如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; status: <span class="string">&#x27;fulfilled&#x27;</span>, value: <span class="string">&#x27;one&#x27;</span> &#125;,</span><br><span class="line">  &#123; status: <span class="string">&#x27;rejected&#x27;</span>, reason: <span class="string">&#x27;rejected&#x27;</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any"></a>Promise.any</h2><p>输入的Promise数组中，任意一个promise resolve，返回的promise就resolve。如果所有的promise都reject，返回的promise就reject。</p>
<p>以下代码输出quick，因为<code>p2</code>最快resolve。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;quick&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, <span class="string">&#x27;slow&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promises = [p1, p2, p3];</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">any</span>(promises).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value));</span><br></pre></td></tr></table></figure>

<p>当所有promise都reject时，<code>Promise.any</code>会返回&#96;&#96;AggregateError&#96;，这个错误包含了所有的reject值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> promises = [p1, p2];</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">any</span>(promises).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value));</span><br></pre></td></tr></table></figure>

<p>如果给<code>Promise.any</code>传递一个空数组，返回的promise会reject，错误信息是<code>[AggregateError: All promises were rejected] &#123; [errors]: [] &#125;</code>.</p>
<h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h2><p>这个API最简单了，看名字就知道了，谁先返回就是谁，不论是resolve还是reject。<br><code>Promise.race</code>接收一个promise数组，返回一个新的promise。这个新的promise会在任意一个promise resolve或者reject之后resolve或者reject。</p>
<p>下面代码输出two，因为<code>p2</code>最快resolve。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, <span class="string">&#x27;one&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;two&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2]).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>注意：如果给<code>Promise.race</code>传递一个空数组，返回的promise会一直pending，因为没有promise可以resolve或者reject。这就好比一个没有人参加的百米赛跑，永远不会有人冲过终点。</p>
<h2 id="Promise-in-setTimeout"><a href="#Promise-in-setTimeout" class="headerlink" title="Promise in setTimeout"></a>Promise in setTimeout</h2><p><code>setTimeout</code> is macro-task, and promise is micro-task. So the promise will be executed before the setTimeout.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Promise 1 resolved&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Promise 2 resolved&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = <span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(promise);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using setTimeout, we can execute code after the queue is empty</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(promise);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span> &#123; &lt;pending&gt; &#125;</span><br><span class="line"><span class="title class_">Promise</span> &#123; [ <span class="string">&#x27;Promise 1 resolved&#x27;</span>, <span class="string">&#x27;Promise 2 resolved&#x27;</span> ] &#125;</span><br></pre></td></tr></table></figure>

<p>Why the output?</p>
<ol>
<li><code>Promise.all</code> is a micro-task, so it will be executed before the <code>setTimeout</code> macro-task.</li>
<li>The <code>promise</code> is pending when we log it for the first time.</li>
<li>After the <code>Promise.all</code> is executed, the <code>promise</code> is resolved</li>
<li>The <code>setTimeout</code> is a macro-task, so it will be executed after the queue is empty(no micro-task in the queue).</li>
<li>The <code>promise</code> is resolved when we log it for the second time</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>promise</tag>
        <tag>then</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-prototype-inheritance</title>
    <url>/2025/03/16/javascript-prototype-inheritance/</url>
    <content><![CDATA[<p>今天我们来学习一下如何在JavaScript中实现原型继承，话不多说，直接上代码。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类的构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类的方法</span></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">printName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name, category</span>) &#123;</span><br><span class="line">  <span class="comment">// 好用父类构造函数，初始化父类属性。</span></span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化子类的属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">category</span> = category;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 Dog 的原型为 Animal 的实例，建立原型链</span></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修复子类的 constructor 指向(上面一行代码已经将constructor指向了Animal)</span></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Dog</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类独有的方法。</span></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">printCategory</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Dog name: <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> barking`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;Pet&#x27;</span>);</span><br><span class="line">dog.<span class="title function_">printName</span>(); <span class="comment">// 调用父类的方法</span></span><br><span class="line">dog.<span class="title function_">printCategory</span>(); <span class="comment">// 调用自己的方法</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>inheritance</tag>
        <tag>prototype</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-regex-exec</title>
    <url>/2024/02/23/javascript-regex-exec/</url>
    <content><![CDATA[<h1 id="javascript-regex-exec"><a href="#javascript-regex-exec" class="headerlink" title="javascript regex exec"></a>javascript regex exec</h1><p><code>exec</code>是正则表达式的方法，用来返回匹配的字符串。</p>
<h2 id="exec的返回值"><a href="#exec的返回值" class="headerlink" title="exec的返回值"></a><code>exec</code>的返回值</h2><p><code>exec</code>的返回值是一个数组，数组的第一个元素是匹配的字符串，后面的元素是分组匹配的值。看一个列子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;There are 3 dogs, 5 cats, 2 birds and 1 cow&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/(\d+) (cat|dog|bird|cow)/g</span>;</span><br><span class="line"><span class="keyword">const</span> match = regex.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(match);</span><br></pre></td></tr></table></figure>

<p>返回值如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">&#x27;3 dog&#x27;</span>, <span class="comment">// 匹配的整个字符串</span></span><br><span class="line">  <span class="string">&#x27;3&#x27;</span>, <span class="comment">// 第一个分组匹配的值</span></span><br><span class="line">  <span class="string">&#x27;dog&#x27;</span>, <span class="comment">// 第二个分组匹配的值</span></span><br><span class="line">  <span class="attr">index</span>: <span class="number">10</span>, <span class="comment">// 匹配值对应的下标</span></span><br><span class="line">  <span class="attr">input</span>: <span class="string">&#x27;There are 3 dogs, 5 cats, 2 birds and 1 cow&#x27;</span>, <span class="comment">// 原始字符串</span></span><br><span class="line">  <span class="attr">groups</span>: <span class="literal">undefined</span> <span class="comment">// 分组匹配的值</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="循环处理"><a href="#循环处理" class="headerlink" title="循环处理"></a>循环处理</h2><p><code>exec</code>通常配合<code>while</code>循环使用，一边遍历，一边处理结果。注意，如果使用while循环处理，需要正则表达式中添加<code>/g</code>标志。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;There are 3 dogs, 5 cats, 2 birds and 1 cow&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/(\d+) (cat|dog|bird|cow)/g</span>; <span class="comment">// 添加/g标志</span></span><br><span class="line"><span class="keyword">let</span> match;</span><br><span class="line"><span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line"><span class="keyword">while</span> ((match = regex.<span class="title function_">exec</span>(str)) !== <span class="literal">null</span>) &#123;</span><br><span class="line">  result[match[<span class="number">2</span>]] = match[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">dog</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">  <span class="attr">cat</span>: <span class="string">&#x27;5&#x27;</span>,</span><br><span class="line">  <span class="attr">bird</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">  <span class="attr">cow</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="g标志"><a href="#g标志" class="headerlink" title="/g标志"></a><code>/g</code>标志</h2><p>如果想要使用<code>while</code>循环来遍历所有匹配的字符串，需要使用<code>/g</code>标志。否则会导致<code>while</code>死循环。</p>
<h2 id="match-matchAll-vs-exec"><a href="#match-matchAll-vs-exec" class="headerlink" title="match&#x2F;matchAll vs exec"></a>match&#x2F;matchAll vs exec</h2><ol>
<li><code>match</code>&#x2F;<code>matchAll</code> - 一次性返回所有匹配的字符串。</li>
<li><code>exec</code> - 逐个返回匹配的字符串。</li>
</ol>
<p><code>match</code>&#x2F;<code>matchAll</code>使用<code>/g</code>时，需要对结果进行遍历。<br><code>exec</code>是一边遍历，一边处理结果。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>regex</tag>
        <tag>exec</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-prototype</title>
    <url>/2024/11/16/javascript-prototype/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>本来用英语写了一篇，结果看起来乱糟糟的，还是用中文写一下吧。</p>
<p>原型是JavaScript中非常重要的概念，面试中也常常会问到这个问题。那么，原型到底是什么？<br>原型的英文是<code>prototype</code>，他是函数的一个属性，是一个对象。</p>
<p>下面来看一张图，这个图乍一看非常复杂，但是理解之后，就会发现原型其实非常简单。<br><img src="/../images/js-prototype.png" alt="js-prototype"></p>
<p>在理解这张图之前，我们先明确几个概念：</p>
<ol>
<li>对象具有<code>__proto__</code>和<code>constructor</code>属性。</li>
<li>函数具有<code>prototype</code>属性。</li>
<li>因为JS中函数也是对象，所以函数也有<code>__proto__</code>和<code>constructor</code>属性。</li>
</ol>
<p>所以，我们可以得出以下结论：</p>
<ol>
<li>对象具有<code>__proto__</code>和<code>constructor</code>属性。</li>
<li>函数具有<code>prototype</code>, <code>__proto__</code>和<code>constructor</code>属性。</li>
</ol>
<p>这两条结论反映在上面的图中就是：</p>
<ol>
<li>所有蓝色节点都向外发出两条线，分别对应<code>__proto__</code>和<code>constructor</code>属性。</li>
<li>所有绿色节点都向外发出三条线，分别对应<code>prototype</code>, <code>__proto__</code>和<code>constructor</code>属性。</li>
</ol>
<p>我们以一个简单的Person函数阐述上面这张图。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">printName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Philip&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br></pre></td></tr></table></figure>
<h2 id="proto-属性"><a href="#proto-属性" class="headerlink" title="__proto__属性"></a>__proto__属性</h2><p>在这个例子中，<code>Person</code>函数是一个构造函数，<code>p</code>是<code>Person</code>的一个实例。为了方便，我们将上图简化一下，只保留<code>__proto__</code>属性。<br><img src="/../images/js-prototype-proto.png" alt="js-prototype-proto"></p>
<p>先看左边纵向的这条线。</p>
<ol>
<li>因为对象<code>p</code>是<code>Person</code>函数的一个实例，所以<code>p</code>的<code>__proto__</code>属性指向<code>Person</code>的<code>prototype</code>属性。</li>
<li>而<code>Person</code>继承自<code>Object</code>，所以<code>Person</code>的<code>__proto__</code>属性指向<code>Object</code>的<code>prototype</code>属性。</li>
<li><code>Object</code>的<code>__proto__</code>属性指向<code>null</code>。</li>
</ol>
<p><code>p</code>, <code>Person</code>, <code>Object</code>, <code>null</code>之间通过<code>__proto__</code>属性形成了一条链，这就是所谓的原型链。当我们在某个对象上查找一个属性时，如果该对象没有这个属性，那么JS会通过原型链向上查找，直到找到这个属性或者到达<code>null</code>。举几个例子：</p>
<ul>
<li><code>p.printName()</code> - <code>p</code>对象上没有<code>printName</code>属性，所以JS会通过原型链向上查找，找到<code>Person</code>的<code>prototype</code>属性，从而找到<code>printName</code>方法。</li>
<li><code>p.hasOwnProperty(&#39;name&#39;)</code> - <code>p</code>对象上没有<code>hasOwnProperty</code>属性，向上查找到<code>Person</code>，<code>Person</code>的原型对象上也没有<code>hasOwnProperty</code>属性，继续向上查找到<code>Object</code>，<code>Object</code>原型上有<code>hasOwnProperty</code>属性，于是调用之，所以返回<code>true</code>。</li>
<li><code>p.foo()</code> - <code>p</code>对象上没有<code>foo</code>属性，向上查找到<code>Person</code>，<code>Person</code>的原型对象上也没有<code>foo</code>属性，继续向上查找到<code>Object</code>，<code>Object</code>的原型上还是没有<code>foo</code>属性，继续向上查找到<code>null</code>，而null上也没有<code>foo</code>属性，所以会报错。— <code>TypeError: p.foo is not a function</code></li>
</ul>
<p>再看右侧部分，<code>Person</code>, <code>Function</code>, <code>Object</code>这三者皆是函数，而JS中函数也是对象，故而这三者亦有<code>__proto__</code>属性，而且都指向<code>Function</code>的<code>prototype</code>属性。而<code>Function</code>的<code>__proto__</code>属性指向<code>Object</code>的<code>prototype</code>属性。</p>
<p>由此我们可以得出结论：</p>
<ol>
<li>所有对象的<code>__proto__</code>属性指向其构造函数的<code>prototype</code>属性。</li>
<li>所有函数的<code>__proto__</code>属性指向<code>Function</code>的<code>prototype</code>属性。</li>
<li><code>Function</code>的<code>__proto__</code>属性指向<code>Object</code>的<code>prototype</code>属性。</li>
<li><code>Object</code>的<code>__proto__</code>属性指向<code>null</code>。</li>
</ol>
<p>所有<code>__prototype__</code>的终点都是<code>null</code>.</p>
<h2 id="prototype属性"><a href="#prototype属性" class="headerlink" title="prototype属性"></a>prototype属性</h2><p>照例现简化一下上图，只保留<code>prototype</code>属性。<br><img src="/../images/js-prototype-prototype.png" alt="js-prototype-prototype"></p>
<p>因为<code>prototype</code>是函数的一个属性（对象没有<code>prototype</code>），所以图中只有绿色节点有<code>prototype</code>属性。对于一个函数<code>Foo</code>来说，他的<code>prototype</code>属性是一个对象，指向<code>Foo.prototype</code></p>
<h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>最后来看<code>constructor</code>属性。<br><img src="/../images/js-prototype-constructor.png" alt="js-prototype-constructor"></p>
<p><code>constructor</code>就是某个对象的构造函数，因为JS中函数也是对象，所以函数也有<code>constructor</code>属性。</p>
<ol>
<li>对于普通对象，其<code>constructor</code>属性指向其构造函数。</li>
<li>对于函数，其<code>constructor</code>属性指向<code>Function</code>。</li>
<li><code>Function</code>的<code>constructor</code>属性指向其自身。</li>
</ol>
<p>根据以上结论，不难得出如下结论：</p>
<ol>
<li>对象<code>p</code>的<code>constructor</code>属性指向<code>Person</code>函数, 因为<code>p</code>是<code>Person</code>的一个实例。</li>
<li><code>Person.prototype</code>的<code>constructor</code>指向<code>Person</code>函数，这个是为啥？- 硬性规定</li>
<li><code>Person</code>和<code>Object</code>的<code>constructor</code>都指向<code>Function</code>，因为<code>Person</code>和<code>Object</code>都是函数。</li>
<li><code>Function</code>的<code>constructor</code>属性指向<code>Function</code>。</li>
</ol>
<p>由以上结论可以推导出：<code>Function</code>是所有<code>constructor</code>的终点。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们把上面的结论公式化一下，对于如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure>
<p>我们有如下结论成立：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">constructor</span> === <span class="title class_">Person</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Person</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">constructor</span> === <span class="title class_">Function</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Function</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property">constructor</span> === <span class="title class_">Function</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span>.<span class="property">constructor</span> === <span class="title class_">Function</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="其他杂项"><a href="#其他杂项" class="headerlink" title="其他杂项"></a>其他杂项</h2><ol>
<li>箭头函数没有<code>prototype</code>属性，因为箭头函数不可以做构造函数。</li>
<li>Bound函数（使用<code>bind</code>创建的函数）也没有<code>prototype</code>属性。why？</li>
</ol>
<h1 id="Introduction-1"><a href="#Introduction-1" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>prototype</code> is an very important concept in JavaScript. It’s used to implement inheritance in JavaScript.</p>
<p><code>prototype</code> is a property of a function, it’s an object. When you create a function, JavaScript engine will automatically create a <code>prototype</code> object for you. This object has a property called <code>constructor</code>, which points back to the function.</p>
<p>The prototype data property of a Function instance is used when the function is used as a constructor with the <code>new</code> operator. It will become the new object’s prototype.</p>
<p>Take the following code as an example, its prototype is an empty object <code>&#123;&#125;</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Person</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<p>Let’s create a functions on its prototype, and it’s prototype now has a property(function) called <code>printName</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">printName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// &#123; printName: [Function (anonymous)] &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Create-an-instance-of-Person"><a href="#Create-an-instance-of-Person" class="headerlink" title="Create an instance of Person"></a>Create an instance of <code>Person</code></h2><p>When you create an instance of <code>Person</code>, the instance will have a property called <code>__proto__</code>, which points to the <code>prototype</code> of the constructor function(the <code>Person</code> function).</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">printName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Philip&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">printName</span>()); <span class="comment">// Philip</span></span><br></pre></td></tr></table></figure>

<p>Functions defined on the <code>prototype</code> are shared by all instances of the constructor function.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">printName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zdd&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Philip&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">printName</span> === p2.<span class="property">printName</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>But, functions defined in the constructor function are not shared by all instances.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">printName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zdd&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Philip&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">printName</span> === p2.<span class="property">printName</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li><a href="https://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html">https://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html</a></li>
<li><a href="https://blog.vjeux.com/2011/javascript/how-prototypal-inheritance-really-works.html">https://blog.vjeux.com/2011/javascript/how-prototypal-inheritance-really-works.html</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/65858062">https://zhuanlan.zhihu.com/p/65858062</a></li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>prototype</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-regex-groups</title>
    <url>/2024/02/24/javascript-regex-groups/</url>
    <content><![CDATA[<h1 id="JavaScript-Regex-Groups"><a href="#JavaScript-Regex-Groups" class="headerlink" title="JavaScript Regex Groups"></a>JavaScript Regex Groups</h1><p>分组匹配是正则表达式中非常重要的一部分，它允许我们将多个字符组合在一起，并对它们进行操作。在 JavaScript 中，我们可以使用括号 <code>()</code> 来创建一个分组。在这篇文章中，我们将学习如何使用分组匹配。</p>
<h2 id="匿名分组"><a href="#匿名分组" class="headerlink" title="匿名分组"></a>匿名分组</h2><p>匿名分组的格式如下，其中 <code>xxx</code> 是要匹配的内容。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(xxx)</span><br></pre></td></tr></table></figure>
<p>假设有字符串<code>Personal info: name: zdd, age: 18, gender: male</code>，我们要从中提取出姓名，年龄和性别。可以使用匿名分组来实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">`Personal info: name: zdd, age: 18, gender: male`</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/name: (\w+), age: (\d+), gender: (\w+)/</span>;</span><br><span class="line"><span class="keyword">const</span> match = str.<span class="title function_">match</span>(regex);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(match); <span class="comment">// 返回整个匹配 name: zdd, age: 18, gender: male</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(match[<span class="number">1</span>]); <span class="comment">// zdd</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(match[<span class="number">2</span>]); <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(match[<span class="number">3</span>]); <span class="comment">// male</span></span><br></pre></td></tr></table></figure>
<p>使用匿名分组时，返回值是一个数组，数组第一个元素是整个匹配，我们要的分组结果从数组第二个元素开始(下标1开始)，返回值如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">&#x27;name: zdd, age: 18, gender: male&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;zdd&#x27;</span>, <span class="comment">// 第一组</span></span><br><span class="line">  <span class="string">&#x27;18&#x27;</span>, <span class="comment">// 第二组</span></span><br><span class="line">  <span class="string">&#x27;male&#x27;</span>, <span class="comment">// 第三组</span></span><br><span class="line">  <span class="attr">index</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">input</span>: <span class="string">&#x27;name: zdd, age: 18, gender: male&#x27;</span>,</span><br><span class="line">  <span class="attr">groups</span>: <span class="literal">undefined</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>注意，使用匿名分组时，返回值中<code>groups</code>属性值为undefined，这个值只有使用命名匹配时才有值。</p>
<h2 id="命名分组"><a href="#命名分组" class="headerlink" title="命名分组"></a>命名分组</h2><p>命名分组的格式如下，其中 <code>name</code> 是分组的名称，<code>xxx</code> 是要匹配的内容。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(?&lt;name&gt;xxx)</span><br></pre></td></tr></table></figure>

<p>还是以上面的字符串为例，我们使用命名分组来提取姓名，年龄和性别。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">`Personal info: name: zdd, age: 18, gender: male`</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/name: (?&lt;name&gt;\w+), age: (?&lt;age&gt;\d+), gender: (?&lt;gender&gt;\w+)/</span>;</span><br><span class="line"><span class="keyword">const</span> match = str.<span class="title function_">match</span>(regex); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(match.<span class="property">groups</span>); <span class="comment">// [Object: null prototype] &#123; name: &#x27;zdd&#x27;, age: &#x27;18&#x27;, gender: &#x27;male&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(match.<span class="property">groups</span>.<span class="property">name</span>); <span class="comment">// zdd</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(match.<span class="property">groups</span>.<span class="property">age</span>); <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(match.<span class="property">groups</span>.<span class="property">gender</span>); <span class="comment">// male</span></span><br></pre></td></tr></table></figure>

<p>match返回值如下：与匿名匹配相比，命名匹配的返回值中<code>groups</code>属性不再是undefined，而是一个对象，对象的属性名就是分组的名称，属性值就是匹配的结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">&#x27;name: zdd, age: 18, gender: male&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;zdd&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  <span class="attr">index</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">input</span>: <span class="string">&#x27;name: zdd, age: 18, gender: male&#x27;</span>,</span><br><span class="line">  <span class="attr">groups</span>: [<span class="title class_">Object</span>: <span class="literal">null</span> prototype] &#123; <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>regex</tag>
        <tag>groups</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-regex-summary</title>
    <url>/2024/02/24/javascript-regex-summary/</url>
    <content><![CDATA[<h1 id="javascript-regex-summary"><a href="#javascript-regex-summary" class="headerlink" title="javascript regex summary"></a>javascript regex summary</h1><p>js中正则表达式的几种应用场景：</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><ul>
<li><code>RegExp.prototype.test</code></li>
</ul>
<h2 id="提取"><a href="#提取" class="headerlink" title="提取"></a>提取</h2><ul>
<li><code>String.prototype.match</code></li>
<li><code>String.prototype.matchAll</code></li>
<li><code>RegExp.prototype.exec</code></li>
</ul>
<ol>
<li><code>match</code>&#x2F;<code>exec</code>方法，如果没有分组匹配，则通常取<code>matches[0]</code>,如果有分组匹配，则取<code>matches[1]、matches[2]...</code></li>
</ol>
<h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><ul>
<li><code>String.prototype.replace</code></li>
<li><code>String.prototype.replaceAll</code></li>
</ul>
<h2 id="拆分"><a href="#拆分" class="headerlink" title="拆分"></a>拆分</h2><ul>
<li><code>String.prototype.split</code></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>test</tag>
        <tag>regex</tag>
        <tag>exec</tag>
        <tag>match</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-regex-match</title>
    <url>/2024/02/23/javascript-regex-match/</url>
    <content><![CDATA[<h1 id="javascript-regex-match"><a href="#javascript-regex-match" class="headerlink" title="javascript-regex-match"></a>javascript-regex-match</h1><p>先提醒一下，虽然标题有<code>regex</code>，但是<code>match</code>在js中是字符串的方法，而不是正则表达式的方法。</p>
<p><code>match</code>用來返回符合正则表达式的字符串，如果没有找到匹配的字符串则返回<code>null</code>。</p>
<p>先看一个例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;There are 3 dogs, 5 cats, 2 birds and 1 cow&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> matches = str.<span class="title function_">match</span>(<span class="regexp">/\d/</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matches[<span class="number">0</span>]); <span class="comment">// 3, 返回第一个匹配。</span></span><br></pre></td></tr></table></figure>

<h2 id="match的返回值"><a href="#match的返回值" class="headerlink" title="match的返回值"></a><code>match</code>的返回值</h2><p><code>match</code>的返回值比较特殊，分以下几种情况，</p>
<ul>
<li>如果没有找到匹配，返回null</li>
<li>如果找到了匹配，返回一个数组。</li>
</ul>
<p>返回数组时，又分为以下几种情况</p>
<ol>
<li>如果正则表达式没有<code>g</code>标志(且未分组)，返回一个数组，看如下代码。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;There are 3 dogs, 5 cats, 2 birds and 1 cow&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> matches = str.<span class="title function_">match</span>(<span class="regexp">/\d/</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matches);</span><br></pre></td></tr></table></figure>

<p>返回值如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">&#x27;3&#x27;</span>, <span class="comment">// 匹配的整个字符串</span></span><br><span class="line">  <span class="attr">index</span>: <span class="number">10</span>, <span class="comment">// 匹配值对应的下标</span></span><br><span class="line">  <span class="attr">input</span>: <span class="string">&#x27;There are 3 dogs, 5 cats, 2 birds and 1 cow&#x27;</span>, <span class="comment">// 原始字符串</span></span><br><span class="line">  <span class="attr">groups</span>: <span class="literal">undefined</span> <span class="comment">// 分组匹配的值</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>此时，你需要的匹配值是<code>matches[0]</code>。</p>
<ol>
<li>如果正则表达式没有<code>g</code>标志(且分组)，返回一个数组，比之上面的返回值，多一个分组对应的值。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;There are 3 dogs, 5 cats, 2 birds and 1 cow&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> matches = str.<span class="title function_">match</span>(<span class="regexp">/(\d) cats/</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matches);</span><br></pre></td></tr></table></figure>

<p>返回值如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">&#x27;5 cats&#x27;</span>, <span class="comment">// 匹配的整个字符串</span></span><br><span class="line">  <span class="string">&#x27;5&#x27;</span>, <span class="comment">// 第一个分组匹配的值</span></span><br><span class="line">  <span class="attr">index</span>: <span class="number">18</span>, <span class="comment">// 匹配值对应的下标</span></span><br><span class="line">  <span class="attr">input</span>: <span class="string">&#x27;There are 3 dogs, 5 cats, 2 birds and 1 cow&#x27;</span>, <span class="comment">// 原始字符串</span></span><br><span class="line">  <span class="attr">groups</span>: <span class="literal">undefined</span> <span class="comment">// 分组匹配的值</span></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时，你需要的匹配值是<code>matches[1]</code>。(既然分组了，就要用分组的值呀，否则还分组干嘛呢？)</p>
<ol start="3">
<li>如果正则表达式有<code>g</code>标志（无论是否分组），返回一个数组，数组中的元素是所有匹配的值。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;There are 3 dogs, 5 cats, 2 birds and 1 cow&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> matches = str.<span class="title function_">match</span>(<span class="regexp">/\d/g</span>); <span class="comment">// 或者 str.match(/(\d)/g);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matches);</span><br></pre></td></tr></table></figure>

<p>返回值如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[ <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span> ]</span><br></pre></td></tr></table></figure>

<h2 id="matchAll"><a href="#matchAll" class="headerlink" title="matchAll"></a>matchAll</h2><p><code>match</code>方法使用<code>/g</code>标记时，只能返回匹配的字符串，而无法返回分组信息，这时可以使用<code>matchAll</code>方法。</p>
<p><code>matchAll</code>方法返回一个迭代器，而不是数组，所以不能直接输出，可以使用<code>for...of</code>循环遍历匹配的所有结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;There are 3 dogs, 5 cats, 2 birds and 1 cow&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> matches = str.<span class="title function_">matchAll</span>(<span class="regexp">/(\d) (cats|dogs)/g</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> match <span class="keyword">of</span> matches) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(match);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">&#x27;3 dogs&#x27;</span>, <span class="comment">// 匹配的整个字符串</span></span><br><span class="line">  <span class="string">&#x27;3&#x27;</span>, <span class="comment">// 第一个分组匹配的值</span></span><br><span class="line">  <span class="string">&#x27;dogs&#x27;</span>, <span class="comment">// 第二个分组匹配的值</span></span><br><span class="line">  <span class="attr">index</span>: <span class="number">10</span>, <span class="comment">// 匹配值对应的下标</span></span><br><span class="line">  <span class="attr">input</span>: <span class="string">&#x27;There are 3 dogs, 5 cats, 2 birds and 1 cow&#x27;</span>, <span class="comment">// 原始字符串</span></span><br><span class="line">  <span class="attr">groups</span>: <span class="literal">undefined</span> <span class="comment">// 分组匹配的值</span></span><br><span class="line">]</span><br><span class="line">[</span><br><span class="line">  <span class="string">&#x27;5 cats&#x27;</span>, <span class="comment">// 匹配的整个字符串</span></span><br><span class="line">  <span class="string">&#x27;5&#x27;</span>, <span class="comment">// 第一个分组匹配的值</span></span><br><span class="line">  <span class="string">&#x27;cats&#x27;</span>, <span class="comment">// 第二个分组匹配的值</span></span><br><span class="line">  <span class="attr">index</span>: <span class="number">18</span>, <span class="comment">// 匹配值对应的下标</span></span><br><span class="line">  <span class="attr">input</span>: <span class="string">&#x27;There are 3 dogs, 5 cats, 2 birds and 1 cow&#x27;</span>, <span class="comment">// 原始字符串</span></span><br><span class="line">  <span class="attr">groups</span>: <span class="literal">undefined</span> <span class="comment">// 分组匹配的值</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>假设有如下需求，将<code>There are 3 dogs, 5 cats, 2 birds and 1 cow</code>这句话中每种动物及其数量提出出来，放到一个对象中，可以使用<code>matchAll</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;There are 3 dogs, 5 cats, 2 birds and 1 cow&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> matches = str.<span class="title function_">matchAll</span>(<span class="regexp">/(\d+) (cat|dog|bird|cow)/g</span>);</span><br><span class="line"><span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> match <span class="keyword">of</span> matches) &#123;</span><br><span class="line">  result[match[<span class="number">2</span>]] = match[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">dog</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">cat</span>: <span class="string">&#x27;5&#x27;</span>, <span class="attr">bird</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">cow</span>: <span class="string">&#x27;1&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<p>整个需求如果要使用<code>match</code>方法来做，还是比较复杂的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>什么时候用<code>test</code>, 什么时候用<code>match</code>？</p>
<ol>
<li>如果你只是想判断字符串是否满足某个规则，用<code>test</code></li>
<li>如果你想要得到匹配的子串，用<code>match</code></li>
<li>简单的字符串包含操作可以直接使用<code>indexOf</code>，<code>includes</code>等方法。</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>regex</tag>
        <tag>match</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-return-undefined-in-else-branch</title>
    <url>/2024/06/13/javascript-return-undefined-in-else-branch/</url>
    <content><![CDATA[<h2 id="Dost-it-make-sense-to-return-undefined-in-else-branch"><a href="#Dost-it-make-sense-to-return-undefined-in-else-branch" class="headerlink" title="Dost it make sense to return undefined in else branch?"></a>Dost it make sense to return <code>undefined</code> in <code>else</code> branch?</h2><p>Today, I noticed a code snippet during code review, it looks like this:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getUserInfo</span>(<span class="params">user: User</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (user.<span class="property">isActive</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> user.<span class="property">info</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The code is trying to get the user info, if the user is active, it will return the user info, otherwise, it will return <code>undefined</code>. But does it make sense to return <code>undefined</code> in the <code>else</code> branch? In JavaScript, if a function does not return anything, it implicitly returns <code>undefined</code>. So, the above code can be refactored to:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getUserInfo</span>(<span class="params">user: User</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (user.<span class="property">isActive</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> user.<span class="property">info</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Similarly to the following code.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> data.<span class="title function_">json</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Which can be simplified to:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> data.<span class="title function_">json</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>refactoring</tag>
        <tag>undefined</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-regex-test</title>
    <url>/2024/02/22/javascript-regex-test/</url>
    <content><![CDATA[<h1 id="javascript-regex-test"><a href="#javascript-regex-test" class="headerlink" title="javascript-regex-test"></a>javascript-regex-test</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>javascript中<code>test</code>是<code>Regex</code>对象上的一个方法，用来检测字符串是否满足某种规则，举个例子：判断一个字符串中是否包含单词<code>hello</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;hello, world!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (regex.<span class="title function_">test</span>(str)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简化一下上面的代码，js中正则表达式可以用<code>//</code>包裹，所以可以写成：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/hello/</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;hello, world!&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regex.<span class="title function_">test</span>(str)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>再简化一下，甚至可以写成一行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/hello/</span>.<span class="title function_">test</span>(<span class="string">&#x27;hello, world!&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>规则：regex.test(str), 这个表达式中，调用者是正则表达式，参数是字符串，返回值是布尔值。</p>
<h2 id="大小写无关的匹配"><a href="#大小写无关的匹配" class="headerlink" title="大小写无关的匹配"></a>大小写无关的匹配</h2><p>默认情况下，正则表达式是匹配时是区分大小写的，如果要忽略大小写进行匹配，可以在正则表达式后面加上<code>/i</code>标志。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/hello/i</span>.<span class="title function_">test</span>(<span class="string">&#x27;Hello, world!&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="多行匹配"><a href="#多行匹配" class="headerlink" title="多行匹配"></a>多行匹配</h2><p>默认情况下，正则表达式是单行匹配的，如果要多行匹配，可以在正则表达式后面加上<code>/m</code>标志。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">Hi, </span></span><br><span class="line"><span class="string">hello,</span></span><br><span class="line"><span class="string">world.</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^hello/</span>.<span class="title function_">test</span>(str)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>因为默认情况下，<code>^</code>只匹配字符串的开头，所以上面的代码返回<code>false</code>。如果要多行匹配，可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">Hi, </span></span><br><span class="line"><span class="string">hello,</span></span><br><span class="line"><span class="string">world.</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^hello/m</span>.<span class="title function_">test</span>(str)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p><code>/m</code>表示多行匹配，即使<code>hello</code>不在字符串的首行，也能匹配到。<br>注意，这里<code>/m</code>真正的含义如下：</p>
<ul>
<li>如果不加<code>/m</code>，<code>^</code>和<code>$</code>匹配整个字符串的开头和结尾。</li>
<li>如果加了<code>/m</code>，<code>^</code>和<code>$</code>匹配每一行的开头和结尾。</li>
</ul>
<p>以上面代码为例，如果不加<code>/m</code>，则<code>^hello</code>匹配整个字符串的开头，但是整个字符串的开头是<code>Hi,</code>，所以返回<code>false</code>。如果加了<code>/m</code>，则<code>^hello</code>匹配每一行的开头，而第二行的开头是<code>hello</code>，所以返回<code>true</code>。</p>
<p><strong>注意</strong>, 如果没有给<code>test</code>传递参数，那么test会尝试匹配字符串<code>undefined</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/undefined/</span>.<span class="title function_">test</span>()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="全局匹配"><a href="#全局匹配" class="headerlink" title="全局匹配"></a>全局匹配</h2><p>默认情况下，<code>test</code>只会匹配第一个满足条件的字符串，如果要全局匹配，可以在正则表达式后面加上<code>/g</code>标志。</p>
<p>注意：你永远不需要在<code>test</code>方法上加<code>/g</code>标志，因为<code>test</code>方法只返回一个布尔值，而不是匹配到的字符串。<br>使用<code>/g</code>标志会改变正则表达式的<code>lastIndex</code>属性，这个属性会影响到<code>test</code>方法的行为，导致每次test匹配都从<code>lastIndex</code>开始，而不是从字符串的开头开始。</p>
<p>下面的代码中，为何第二次调用<code>test</code>方法返回<code>false</code>呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/foo/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lastIndex = 0;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regex.<span class="title function_">test</span>(<span class="string">&#x27;foo&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// lastIndex = 3;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regex.<span class="title function_">test</span>(<span class="string">&#x27;foo&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>分析一下：第一次匹配开始之前，lastIndex &#x3D; 0, 指向字符串开头，第一次匹配成功后，lastIndex &#x3D; 3, 下一次匹配从则从下标3开始，但是字符串<code>foo</code>长度为3，后面已经没有字符了，所以导致第二次匹配失败！崩溃吗？</p>
<p><code>/g</code>选项通常用于<code>String.prototype.replace</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;foobarfoo&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="regexp">/foo/</span>, <span class="string">&#x27;&#x27;</span>)); <span class="comment">// barfoo, 只替换了第一个foo</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="regexp">/foo/g</span>, <span class="string">&#x27;&#x27;</span>)); <span class="comment">// bar, 替换了所有的foo</span></span><br></pre></td></tr></table></figure>

<p>javascript中还有一个<code>String.prototype.replaceAll</code>方法，看名字好像会替换所有满足条件的匹配，但是使用这个方法时，必须添加<code>/g</code>标志，否则会报错，真是脱裤子放屁呀！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;foobarfoo&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replaceAll</span>(<span class="regexp">/foo/</span>, <span class="string">&#x27;&#x27;</span>)); <span class="comment">// TypeError: String.prototype.replaceAll called with a non-global RegExp argument</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replaceAll</span>(<span class="regexp">/foo/g</span>, <span class="string">&#x27;&#x27;</span>)); <span class="comment">// bar</span></span><br></pre></td></tr></table></figure>

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test">MDN: RegExp.prototype.test()</a></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>test</tag>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-search-in-array</title>
    <url>/2024/12/13/javascript-search-in-array/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>搜索数组中的元素是我们在日常开发中经常遇到的问题，本文将介绍 JavaScript 中搜索数组元素的几种方法。</p>
<h2 id="Array-prototype-indexOf"><a href="#Array-prototype-indexOf" class="headerlink" title="Array.prototype.indexOf()"></a>Array.prototype.indexOf()</h2><p>在ES6之前，我们通常使用<code>indexOf</code>方法来查找数组中的元素的下标。此函数多用于判断数组中是否存在某元素。<br><code>Array.prototype.indexOf()</code> 方法返回给定元素的第一个索引，如果不存在，则返回 <code>-1</code>。<code>indexOf</code>方法的语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">indexOf(searchElement)</span><br><span class="line">indexOf(searchElement, fromIndex)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>searchElement</code>：要查找的元素。</li>
<li><code>fromIndex</code>：从该索引处开始查找。如果该值大于或等于数组的长度，则 <code>indexOf</code> 返回 <code>-1</code>，表示未找到。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">indexOf</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// output: 2</span></span><br></pre></td></tr></table></figure>
<p><code>indexOf</code>的弊端是只能查找有确定值的元素，无法按条件查找，比如查找大于3的元素下标。</p>
<h2 id="Array-prototype-find"><a href="#Array-prototype-find" class="headerlink" title="Array.prototype.find()"></a>Array.prototype.find()</h2><p>ES6引入了<code>find</code>方法，相比<code>indexOf</code>方法，<code>find</code>方法使用一个条件函数来查找数组中的元素。<br><code>Array.prototype.find()</code> 方法返回数组中满足条件的第一个元素的值。如果找不到责则返回 <code>undefined</code>。<code>find</code>一旦找到元素，立即停止查找并返回。<code>find</code>方法的语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find(callbackFn)</span><br><span class="line">find(callbackFn, thisArg)</span><br></pre></td></tr></table></figure>
<p><code>callbackFn</code> 函数接收三个参数：</p>
<ul>
<li><code>element</code>：数组中当前正在处理的元素。</li>
<li><code>index</code>：数组中当前正在处理的元素的索引。</li>
<li><code>array</code>：调用 <code>find</code> 方法的数组。</li>
</ul>
<p>以下代码查找数组中等于3的元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item === <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// output: 3</span></span><br></pre></td></tr></table></figure>

<p>以下代码查找数组中大于3的元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// output: 4</span></span><br></pre></td></tr></table></figure>

<p>由此可见<code>find</code>相比<code>indexOf</code>更加灵活：</p>
<ol>
<li><code>indexOf</code>只能查找元素的下标，而<code>find</code>可以查找元素本身。</li>
<li><code>indexOf</code>只能查找有确定值的元素下标，而<code>find</code>可以按条件查找。</li>
</ol>
<p>如果想按条件查找元素的下标该怎么办呢？这时候就需要用到<code>findIndex</code>方法。</p>
<h2 id="Array-prototype-findIndex"><a href="#Array-prototype-findIndex" class="headerlink" title="Array.prototype.findIndex()"></a>Array.prototype.findIndex()</h2><p><code>Array.prototype.findIndex()</code> 该方法与<code>find</code>方法类似，只不过它不是返回元素，而是返回元素的下标。找不到则返回 <code>-1</code>。<code>findIndex</code>一旦找到一个匹配，立即停止查找并返回。<code>findIndex</code>方法的语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">findIndex(callbackFn)</span><br><span class="line">findIndex(callbackFn, thisArg)</span><br></pre></td></tr></table></figure>

<p><code>callbackFn</code> 函数接收三个参数：</p>
<ul>
<li><code>element</code>：数组中当前正在处理的元素。</li>
<li><code>index</code>：数组中当前正在处理的元素的索引。</li>
<li><code>array</code>：调用 <code>findIndex</code> 方法的数组。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// output: 3</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes()"></a>Array.prototype.includes()</h2><p><code>Array.prototype.includes()</code> 方法用来判断一个数组是否包含一个指定的值，如果是返回 <code>true</code>，否则返回 <code>false</code>。<code>includes</code>方法的语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">includes(searchElement)</span><br><span class="line">includes(searchElement, fromIndex)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>searchElement</code>：要查找的元素。</li>
<li><code>fromIndex</code>：从该索引处开始查找。如果该值大于或等于数组的长度，则 <code>includes</code> 返回 <code>false</code>，表示未找到。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">includes</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// output: true</span></span><br></pre></td></tr></table></figure>

<p>注意：<code>includes</code>方法只能判断特定值，而不能按条件判断，比如判断数组中是否有大于3的元素，<code>include</code>做不到。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="比较方式："><a href="#比较方式：" class="headerlink" title="比较方式："></a>比较方式：</h3><ol>
<li><code>find</code> 和 <code>findIndex</code> 方法是通过回调函数来判断元素是否满足条件。</li>
<li><code>indexOf</code>使用strict equal <code>===</code>来判断元素是否相等。</li>
<li><code>includes</code>方法是通过 <code>SameValueZero</code> 算法来判断元素是否相等。</li>
</ol>
<h3 id="Sparsed-Array的处理方式："><a href="#Sparsed-Array的处理方式：" class="headerlink" title="Sparsed Array的处理方式："></a>Sparsed Array的处理方式：</h3><ol>
<li><code>indexOf</code>会跳过稀疏数组中的空位。</li>
<li><code>findIndex</code> 和 <code>includes</code> 方法<code>不会</code>跳过稀疏数组中的空位。</li>
</ol>
<h3 id="undefined和NaN的处理方式："><a href="#undefined和NaN的处理方式：" class="headerlink" title="undefined和NaN的处理方式："></a><code>undefined</code>和<code>NaN</code>的处理方式：</h3><ol>
<li><code>indexOf</code>方法无法正确处理<code>undefined</code> 和 <code>NaN</code>。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="title class_">NaN</span>].<span class="title function_">indexOf</span>(<span class="title class_">NaN</span>); <span class="comment">// output: -1</span></span><br><span class="line"><span class="title class_">Array</span>(<span class="number">1</span>).<span class="title function_">indexOf</span>(<span class="literal">undefined</span>); <span class="comment">// output: -1</span></span><br></pre></td></tr></table></figure></li>
<li><code>includes</code>方法可以正确处理<code>undefined</code>及<code>NaN</code>。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="title class_">NaN</span>].<span class="title function_">includes</span>(<span class="title class_">NaN</span>); <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Array</span>(<span class="number">1</span>).<span class="title function_">includes</span>(<span class="literal">undefined</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li><code>find</code>&#x2F;<code>findIndex</code>方法可以正确处理<code>undefined</code>及<code>NaN</code>吗？这取决于回调函数的具体实现。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="title class_">NaN</span>].<span class="title function_">find</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="title class_">Number</span>.<span class="built_in">isNaN</span>(x)); <span class="comment">// OK</span></span><br><span class="line"><span class="title class_">Array</span>(<span class="number">1</span>).<span class="title function_">findIndex</span>(<span class="function"><span class="params">x</span> =&gt;</span> x === <span class="literal">undefined</span>); <span class="comment">// OK</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol>
<li>如果只需判断某元素是否在数组中，使用<code>includes</code>方法。</li>
<li>如果需要对找到的元素做进一步处理，那么使用<code>find</code>方法。</li>
<li>如果需要按确定值查找元素下标，使用<code>indexOf</code>方法。</li>
<li>如果需要根据条件查找数组中的元素的下标，使用<code>findIndex</code>方法。</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>array</tag>
        <tag>find</tag>
        <tag>findindex</tag>
        <tag>indexof</tag>
        <tag>includes</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-return</title>
    <url>/2024/02/26/javascript-return/</url>
    <content><![CDATA[<h1 id="JavaScript-Return"><a href="#JavaScript-Return" class="headerlink" title="JavaScript Return"></a>JavaScript Return</h1><p>今天一起了解一下 JavaScript 中的 <code>return</code> 语句。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>return</code> 语句用于指定函数的返回值。当 JavaScript 遇到 <code>return</code> 语句时，函数将立即返回，并且不再执行任何后续的语句。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> [expression]; <span class="comment">// expression 是要返回的值</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>如果省略 <code>expression</code>，或者 <code>return</code> 语句没有在函数中，则返回值为 <code>undefined</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span>; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p><code>return</code>后面省略表达式，返回值为<code>undefined</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>()); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>没有<code>return</code>语句，也返回<code>undefined</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bar</span>()); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="返回对象"><a href="#返回对象" class="headerlink" title="返回对象"></a>返回对象</h2><p><code>return</code> 语句返回复杂值时，<code>return</code>不能独占一行，否则会报错。</p>
<p>下面这样写会导致语法错误。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getPerson</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="comment">// return 不能独占一行</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正确的写法是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getPerson</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="comment">// &#x27;&#123;&#x27; 与 &#x27;return&#x27; 在同一行</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="try…catch…finally"><a href="#try…catch…finally" class="headerlink" title="try…catch…finally"></a>try…catch…finally</h2><p>如果在 <code>try-catch-finally</code> 语句块中使用了 <code>return</code> 语句，则执行顺序如下：</p>
<ol>
<li>先计算return后面的表达式的值。</li>
<li>然后执行 <code>finally</code> 语句块中的代码。</li>
<li>最后return步骤1中计算出的值。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>()); <span class="comment">// 1 3 2</span></span><br></pre></td></tr></table></figure>

<p>再看一个复杂的例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="keyword">return</span> a++;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>()); <span class="comment">// 1 2 1</span></span><br></pre></td></tr></table></figure>
<p>为啥结果是<code>1 2 1</code>呢？</p>
<ul>
<li>try中&#96;console.log(a)输出1，这个很好理解。</li>
<li><code>return a++</code>，这里的<code>a++</code>是先返回<code>a</code>的值，然后再执行<code>a++</code>，所以<code>return</code>返回的是<code>1</code>。</li>
<li><code>finally</code>中<code>console.log(a)</code>输出的是<code>2</code>，因为<code>a++</code>执行了一次。</li>
</ul>
<p>所以执行的顺序是：</p>
<ol>
<li>先计算return后面的表达式，a &#x3D; 2.</li>
<li>然后执行finally中的代码，输出a &#x3D; 2</li>
<li>最后return返回1.</li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>return</tag>
        <tag>syntax</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-search-in-string</title>
    <url>/2024/12/26/javascript-search-in-string/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>字符串操作是JS中非常常见的操作，本文将介绍JS中搜索字符串的几种方法。</p>
<h1 id="判断是否包含某个字符串"><a href="#判断是否包含某个字符串" class="headerlink" title="判断是否包含某个字符串"></a>判断是否包含某个字符串</h1><h2 id="String-prototype-indexOf"><a href="#String-prototype-indexOf" class="headerlink" title="String.prototype.indexOf()"></a>String.prototype.indexOf()</h2><p>在ES5中，我们通常使用<code>indexOf</code>方法来查找字符串中的子串。<code>indexOf</code>方法返回给定子串的第一个索引，如果不存在，则返回 <code>-1</code>。<code>indexOf</code>方法的语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">indexOf(searchValue)</span><br><span class="line">indexOf(searchValue, fromIndex)</span><br></pre></td></tr></table></figure>

<h2 id="String-prototype-includes"><a href="#String-prototype-includes" class="headerlink" title="String.prototype.includes()"></a>String.prototype.includes()</h2><p><code>includes</code>方法是ES6引入的，相比<code>indexOf</code>方法，<code>includes</code>方法更加直观。<code>includes</code>方法用于判断一个字符串是否包含另一个字符串。<code>includes</code>方法的语法如下：</p>
<h2 id="String-prototype-startsWith"><a href="#String-prototype-startsWith" class="headerlink" title="String.prototype.startsWith()"></a>String.prototype.startsWith()</h2><p><code>startsWith</code>也是ES6引入的方法，用于判断一个字符串是否以另一个字符串开头。<code>startsWith</code>方法的语法如下：</p>
<h2 id="String-prototype-endsWith"><a href="#String-prototype-endsWith" class="headerlink" title="String.prototype.endsWith()"></a>String.prototype.endsWith()</h2><p><code>endsWith</code>也是ES6引入的方法，用于判断一个字符串是否以另一个字符串结尾。<code>endsWith</code>方法的语法如下：</p>
<p><code>includes</code>, <code>startsWith</code>, <code>endsWith</code>方法都可以传递第二个参数，表示从指定位置开始搜索。个人感觉没有必要。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>string</tag>
        <tag>includes</tag>
        <tag>startswith</tag>
        <tag>endswith</tag>
        <tag>search</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-strict-equality</title>
    <url>/2024/11/19/javascript-strict-equal/</url>
    <content><![CDATA[<h1 id="How-works-？"><a href="#How-works-？" class="headerlink" title="How &#x3D;&#x3D;&#x3D; works ？"></a>How &#x3D;&#x3D;&#x3D; works ？</h1><p>Suppose the following expression</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">A === B</span><br></pre></td></tr></table></figure>

<p>How strict equality works in JavaScript? Here are the steps:</p>
<ol>
<li>If the operands are of different types, return <code>false</code></li>
<li><strong>If both operands are objects, return true only if they refer to the same object.</strong></li>
<li>If both operands are null or both operands are undefined. return true.</li>
<li>If either operand is <code>NaN</code>, return false</li>
<li>Otherwise, compare the two operand’s value as below<ol>
<li>Numbers must have the same numeric values.</li>
<li>Strings must have the same characters in the same order.</li>
<li>Booleans must be both true or both false.</li>
</ol>
</li>
</ol>
<h3 id="Code-Example"><a href="#Code-Example" class="headerlink" title="Code Example"></a>Code Example</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> === <span class="string">&#x27;1&#x27;</span>); <span class="comment">// false, different type.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span> &#125; === &#123; <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span> &#125;); <span class="comment">// false, different object with same value.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] === []); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; === &#123;&#125;); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> === <span class="literal">undefined</span>); <span class="comment">// false, different type.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Pay more attention to the following examples</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="number">0</span> === -<span class="number">0</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality</a></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>operator</tag>
        <tag>equality</tag>
        <tag>compare</tag>
        <tag>strict equal</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-string-operation</title>
    <url>/2025/02/13/javascript-string-operation/</url>
    <content><![CDATA[<p>字符串在任何编程语言中都是非常重要的数据类型，对字符串的操作是程序员必备的技能，这篇文章探讨一下Javascript中常见的字符串操作，没有什么高深的内容，算是一篇笔记吧。</p>
<h2 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h2><p>JS中String对象上没有reverse方法，但是Array对象上有reverse方法，所以我们可以先把字符串转成数组，然后再调用reverse方法，最后再把数组转回字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseString</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了用<code>split(&#39;&#39;)</code>方法，我们还可以用<code>Array.from</code>方法，这个方法可以把类数组对象或者可迭代对象转成数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseString</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(str).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然也可以使用<code>...</code>扩展运算符，这个运算符可以把可迭代对象转成数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseString</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [...str].<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>string</tag>
        <tag>reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-template-string</title>
    <url>/2024/12/12/javascript-template-string/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>JavaScript模板字符串是ES6新增的一种字符串形式，它可以让我们在字符串中插入变量，而不需要使用<code>+</code>号连接字符串，这样使得字符串的拼接更加简洁。以下是模板字符串的特点。</p>
<h2 id="Interpolation"><a href="#Interpolation" class="headerlink" title="Interpolation"></a>Interpolation</h2><p>模板字符串中可以插入变量，使用<code>$&#123;&#125;</code>包裹变量名。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;zdd&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// Hello, zdd</span></span><br></pre></td></tr></table></figure>

<h2 id="Multiple-lines-of-string"><a href="#Multiple-lines-of-string" class="headerlink" title="Multiple lines of string"></a>Multiple lines of string</h2><p>模板字符串可以跨行，这样我们就可以直接在字符串中换行，而不需要使用<code>\n</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">`Hello</span></span><br><span class="line"><span class="string">World`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure>

<h2 id="Tagged-template"><a href="#Tagged-template" class="headerlink" title="Tagged template"></a>Tagged template</h2><p>模板字符串还支持标签模板，即在模板字符串前面加上一个函数名，这个函数会处理模板字符串的内容。所以，这个模板字符串的应用场景是什么？在项目中好像没见过这么用的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">tag</span>(<span class="params">strings, ...values</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(strings); <span class="comment">// [&#x27;Hello, &#x27;, &#x27;&#x27;]</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(values); <span class="comment">// [&#x27;zdd&#x27;]</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + values[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;zdd&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> str = tag<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// Hello, zdd</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>template</tag>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-event-model</title>
    <url>/2023/08/03/javascript-stopPropagation-vs-stopImmediatePropagation/</url>
    <content><![CDATA[<h2 id="JavaScript事件模型"><a href="#JavaScript事件模型" class="headerlink" title="JavaScript事件模型"></a>JavaScript事件模型</h2><p>在JavaScript中，有两种事件的传递方向，一种是由内层元素向外层元素传递，也叫自底向上的方式，称作事件冒泡，好比水中的气泡由水底向水面上升的过程。另一种叫做事件捕获，方向刚好相反，从外层元素向内层元素传递，也叫自顶向下。</p>
<p>目前主流的浏览器都支持这两种事件传递方式，但是在IE8及以下版本的浏览器中，只支持事件冒泡，不支持事件捕获。</p>
<p>所以DOM中的事件处理分为以下三个阶段</p>
<ul>
<li>capture（捕获阶段），事件由外层向内层传递</li>
<li>target（命中阶段），事件到达目标元素</li>
<li>bubbling（冒泡阶段），事件由内层向外层传递</li>
</ul>
<p><img src="/../images/event-dispatch-modal.jpg"></p>
<p>那么如何指定事件的传递方式呢？我们可以通过addEventListener的第三个参数来指定，比如下面的代码：<br>当useCapture为true时，事件传递方式为事件捕获，当useCapture为false时，事件传递方式为事件冒泡。默认值为false，使用事件冒泡模式。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addEventListener</span>(type, listener, useCapture)</span><br></pre></td></tr></table></figure>

<h1 id="Event-stopPropagation"><a href="#Event-stopPropagation" class="headerlink" title="Event.stopPropagation"></a>Event.stopPropagation</h1><ol>
<li>当事件传递方式为捕获模式时，<code>event.stopPropagation()</code>会阻止事件继续向下（内层元素）传递。</li>
<li>当事件传递方式为冒泡模式时，<code>event.stopPropagation()</code>会阻止事件继续向上（外层元素）传递。</li>
</ol>
<p>代码示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">  div1</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">    div2</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div3&quot;</span>&gt;</span></span><br><span class="line">      div3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#div1&quot;</span>);</span><br><span class="line"><span class="title function_">bindEventListener</span>(div1, <span class="string">&quot;click&quot;</span>, clickHandler1, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">const</span> div2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#div2&quot;</span>);</span><br><span class="line"><span class="title function_">bindEventListener</span>(div2, <span class="string">&quot;click&quot;</span>, clickHandler2, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">const</span> div3 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#div3&quot;</span>);</span><br><span class="line"><span class="title function_">bindEventListener</span>(div3, <span class="string">&quot;click&quot;</span>, clickHandler3, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindEventListener</span>(<span class="params">element, event, listener, useCapture</span>) &#123;</span><br><span class="line">  element.<span class="title function_">addEventListener</span>(event, listener, useCapture);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clickHandler1</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> text = event.<span class="property">currentTarget</span>.<span class="property">id</span> + <span class="string">&quot; clicked&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clickHandler2</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> text = event.<span class="property">currentTarget</span>.<span class="property">id</span> + <span class="string">&quot; clicked&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clickHandler3</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> text = event.<span class="property">currentTarget</span>.<span class="property">id</span> + <span class="string">&quot; clicked&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/../images/event-bubble.jpg"></p>
<p>点击<code>div3</code>，输出如下，因为采用的是冒泡模式，所以事件会从内层元素向外层元素传递。即<code>div3</code>最先捕获事件，然后是冒泡给<code>div2</code>，最后是<code>div1</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div3 clicked</span><br><span class="line">div2 clicked</span><br><span class="line">div1 clicked</span><br></pre></td></tr></table></figure>
<p>如果我们在clickHandler3中加入<code>event.stopPropagation()</code>，再次点击div3，输出如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div3 clicked</span><br></pre></td></tr></table></figure>
<p>可见，<code>event.stopPropagation()</code>阻止了事件继续向上（外层元素）传递。</p>
<p>将事件处理函数改为捕获模式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">bindEventListener</span>(div1, <span class="string">&quot;click&quot;</span>, clickHandler1, <span class="literal">true</span>);</span><br><span class="line"><span class="title function_">bindEventListener</span>(div2, <span class="string">&quot;click&quot;</span>, clickHandler2, <span class="literal">true</span>);</span><br><span class="line"><span class="title function_">bindEventListener</span>(div3, <span class="string">&quot;click&quot;</span>, clickHandler3, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>再次点击div3，输出如下，因为采用的是捕获模式，所以事件会从外层元素向内层元素传递。即<code>div1</code>最先捕获事件，然后是<code>div2</code>，最后是<code>div3</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div1 clicked</span><br><span class="line">div2 clicked</span><br><span class="line">div3 clicked</span><br></pre></td></tr></table></figure>
<p>如果我们在clickHandler1中加入<code>event.stopPropagation()</code>，再次点击div3，输出如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div1 clicked</span><br></pre></td></tr></table></figure>
<p>可见，<code>event.stopPropagation()</code>阻止了事件继续向下（内层元素）传递。</p>
<h1 id="Event-stopImmediatePropagation"><a href="#Event-stopImmediatePropagation" class="headerlink" title="Event.stopImmediatePropagation"></a>Event.stopImmediatePropagation</h1><p>如果将上述代码中的<code>event.stopPropagation()</code>改为<code>event.stopImmediatePropagation()</code>，你会发现，输出的结果是一样的，这说明<code>event.stopImmediatePropagation()</code>与<code>event.stopPropagation()</code>的作用是一样的，都是阻止事件继续传递。既然作用是一样的，那么为什么还要有<code>event.stopImmediatePropagation()</code>呢？这是因为<code>event.stopImmediatePropagation()</code>还有一个额外的功能，就是阻止事件处理函数队列中的其他函数执行，比如下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">bindEventListener</span>(div1, <span class="string">&quot;click&quot;</span>, clickHandler1, <span class="literal">false</span>);</span><br><span class="line"><span class="title function_">bindEventListener</span>(div1, <span class="string">&quot;click&quot;</span>, clickHandler2, <span class="literal">false</span>);</span><br><span class="line"><span class="title function_">bindEventListener</span>(div1, <span class="string">&quot;click&quot;</span>, clickHandler3, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>当我们点击div1时，输出如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div1 clicked</span><br><span class="line">div1 clicked</span><br><span class="line">div1 clicked</span><br></pre></td></tr></table></figure>

<p>当多个事件处理函数绑定到同一个元素的同一个事件时，事件处理函数的执行顺序是按照绑定的顺序执行的，比如上面的代码，clickHandler1会先于clickHandler2执行，clickHandler2会先于clickHandler3执行。如果我们在clickHandler1中加入<code>event.stopImmediatePropagation()</code>，再次点击div1，输出如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div1 clicked</span><br></pre></td></tr></table></figure>
<p>可见，<code>event.stopImmediatePropagation()</code>阻止了事件处理函数队列中的其他函数执行。clickHandler2和clickHandler3都被阻止了执行。</p>
<h3 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h3><p><code>event.stopPropagation()</code>虽然能阻止事件传播，却不能阻止事件的默认行为，比如将上例中的button换成<code>&lt;a&gt;</code>的话，即使阻止了事件传播，点击链接后a标签依然会跳转。这时，我们可以使用  <code>event.preventDefault()</code>来实现这个功能。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-Hans-CN&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>event-handler<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">div</span><span class="selector-id">#my-div</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin</span>: <span class="number">32px</span> auto;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">padding-top</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border</span>: <span class="number">1px</span> solid gray;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			</span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin</span>: <span class="number">16px</span> auto;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;my-div&quot;</span>&gt;</span>div</span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&#x27;my-button&#x27;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>	</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;my-div&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, divClickHandler, <span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;my-button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, buttonClickHandler, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">divClickHandler</span>(<span class="params">event</span>) &#123;</span><br><span class="line">	event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">	event.<span class="title function_">preventDefault</span>(); <span class="comment">// 阻止链接打开的默认行为</span></span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;div clicked&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">buttonClickHandler</span>(<span class="params">event</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;button clicked&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有以下几点需要注意：</p>
<ol>
<li><code>event.preventDefault()</code>只会阻止事件默认行为，并不会阻止事件继续传播</li>
<li><code>event.preventDefault()</code>只对cancelable&#x3D;true的事件起作用。</li>
</ol>
<p><code>event.preventDefault()</code>的应用场景有：</p>
<ol>
<li><p>阻止<code>&lt;a&gt;</code>标签点击后跳转</p>
</li>
<li><p>阻止<code>&lt;checkbox&gt;</code>被选中</p>
</li>
<li><p>验证用户输入，比如只允许输入小写字母，当输入非小写字母时，不显示输入的字符。</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkName</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> charCode = evt.<span class="property">charCode</span>;</span><br><span class="line">  <span class="keyword">if</span> (charCode != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (charCode &lt; <span class="number">97</span> || charCode &gt; <span class="number">122</span>) &#123;</span><br><span class="line">      evt.<span class="title function_">preventDefault</span>();</span><br><span class="line">      <span class="title function_">displayWarning</span>(</span><br><span class="line">        <span class="string">&quot;Please use lowercase letters only.&quot;</span></span><br><span class="line">        + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;charCode: &quot;</span> + charCode + <span class="string">&quot;\n&quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation">Event.stopPropagation()</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation">Event.stopImmediatePropagation()</a></li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>event</tag>
        <tag>stoppropagation</tag>
        <tag>stopimmediatepropagation</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-the-most-powerful-line-of-code</title>
    <url>/2024/07/17/javascript-the-most-powerful-line-of-code/</url>
    <content><![CDATA[<p>From Quora: <a href="https://www.quora.com/What-is-the-most-elegant-piece-of-JavaScript-code-you-can-write">https://www.quora.com/What-is-the-most-elegant-piece-of-JavaScript-code-you-can-write</a></p>
<p>I actually have two candidates for the title of “most powerful line of code ever written in JavaScript”. The first is this line:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">element.innerHTML = &quot;...&quot;; </span><br></pre></td></tr></table></figure>

<p>The innerHTML property was introduced by Microsoft in the Internet Explorer 4.0 browser (IE4), which was released in October 1997. Prior to this, the only way to modify the HTML content of a page from JavaScript was using the document.write method. Unfortunately, calling document.write on a loaded document automatically calls document.open, which clears the entire document. In other words, it was only with the introduction of innerHTML that JavaScript gained the ability to modify a specific portion of a page, by inserting a bit of arbitrary HTML inside an existing element. And thus, modern Web applications were born.</p>
<p>My other candidate is this line:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>(); </span><br></pre></td></tr></table></figure>

<p>Prior to this, content could only be downloaded into the browser by requesting a whole new page. Developers resorted to all sorts of tricks, primarily using hidden frames, to circumvent this limitation, but such code was very unwieldy, and had problematic side-effects. It was Microsoft again that changed the game by introducing the XMLHttpRequest object in Internet Explorer 5.0 (IE5) in March 1999. And just like that, AJAX was created, and along with it Single-Page Applications, and the modern Web we know today.</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript tricks</title>
    <url>/2024/04/11/javascript-tricks/</url>
    <content><![CDATA[<h1 id="JavaScript-Tricks"><a href="#JavaScript-Tricks" class="headerlink" title="JavaScript Tricks"></a>JavaScript Tricks</h1><h2 id="1-typeof-null-object-This-is-a-known-bug-in-JavaScript"><a href="#1-typeof-null-object-This-is-a-known-bug-in-JavaScript" class="headerlink" title="1. typeof null === &#39;object&#39;. This is a known bug in JavaScript."></a>1. <code>typeof null === &#39;object&#39;</code>. This is a known bug in JavaScript.</h2><h2 id="2-typeof-NaN-number-But-this-is-true"><a href="#2-typeof-NaN-number-But-this-is-true" class="headerlink" title="2. typeof NaN === &#39;number&#39;. But, this is true."></a>2. <code>typeof NaN === &#39;number&#39;</code>. But, this is true.</h2><h2 id="3-perform-a-shallow-copy-only-the-first-level-is-copied-by-value-other-levels-is-copied-by-reference"><a href="#3-perform-a-shallow-copy-only-the-first-level-is-copied-by-value-other-levels-is-copied-by-reference" class="headerlink" title="3. ... perform a shallow copy(only the first level is copied by value, other levels is copied by reference)."></a>3. <code>...</code> perform a shallow copy(only the first level is copied by value, other levels is copied by reference).</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line"><span class="keyword">const</span> newArr = [...arr];</span><br><span class="line"></span><br><span class="line">newArr[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, [3, 4]]</span></span><br><span class="line"></span><br><span class="line">newArr[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, [5, 4]]</span></span><br></pre></td></tr></table></figure>

<h2 id="4-There-is-no-pass-by-reference-in-JavaScript-only-pass-by-value"><a href="#4-There-is-no-pass-by-reference-in-JavaScript-only-pass-by-value" class="headerlink" title="4. There is no pass by reference in JavaScript, only pass by value."></a>4. There is no pass by reference in JavaScript, only pass by value.</h2><h2 id="5-In-JavaScript-everything-is-object-this-is-not-true"><a href="#5-In-JavaScript-everything-is-object-this-is-not-true" class="headerlink" title="5. In JavaScript, everything is object - this is not true."></a>5. In JavaScript, everything is object - this is not true.</h2><h2 id="6-type-print-or-window-print-in-Browser-console-you-will-get-a-print-dialog"><a href="#6-type-print-or-window-print-in-Browser-console-you-will-get-a-print-dialog" class="headerlink" title="6. type print or window.print in Browser console, you will get a print dialog."></a>6. type <code>print</code> or <code>window.print</code> in <code>Browser console</code>, you will get a print dialog.</h2><h2 id="7-0-can-be-used-to-remove-the-fractional-part-of-a-number"><a href="#7-0-can-be-used-to-remove-the-fractional-part-of-a-number" class="headerlink" title="7. |0 can be used to remove the fractional part of a number."></a>7. <code>|0</code> can be used to remove the fractional part of a number.</h2><p>It has the same effect as <code>Math.floor()</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">3.14</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num | <span class="number">0</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(num)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h2 id="8-can-be-used-to-convert-a-value-to-a-boolean"><a href="#8-can-be-used-to-convert-a-value-to-a-boolean" class="headerlink" title="8. !! can be used to convert a value to a boolean."></a>8. <code>!!</code> can be used to convert a value to a boolean.</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!a); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="number">0</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="9-How-to-quit-node-js-REPL"><a href="#9-How-to-quit-node-js-REPL" class="headerlink" title="9. How to quit node.js REPL?"></a>9. How to quit node.js REPL?</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; .<span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; process.exit()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>tricks</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-url-fragment</title>
    <url>/2024/07/27/javascript-url-fragment/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>URL fragment</code> is the part of the URL that comes after the <code>#</code> symbol. </p>
<p><img src="/../images/http-url.png" alt="url"></p>
<h2 id="1-A-fragment-in-a-url-specify-the-location-within-the-page"><a href="#1-A-fragment-in-a-url-specify-the-location-within-the-page" class="headerlink" title="1. A fragment in a url specify the location within the page."></a>1. A fragment in a url specify the location within the page.</h2><p>How to go to the specific location in the page? </p>
<ol>
<li>Create a empty <code>&lt;a&gt;</code> tag with <code>id</code> attribute set to the fragment part in url.</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;fragment1&quot;</span>&gt;</span></span><br><span class="line">  content of fragment 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;fragment2&quot;</span>&gt;</span></span><br><span class="line">  content of fragment 2</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>input the following url in your browser <code>http://example.com/page.html#fragment1</code>, the browser will scroll to the location of the <code>fragment1</code> in the page.</p>
<p>If you want to jump to the specific location in the page by clicking a link in the page, you can create a link with its <code>href</code> set to the <code>id</code> part of the section. </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#fragment1&quot;</span>&gt;</span>Go to fragment 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#fragment2&quot;</span>&gt;</span>Go to fragment 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-Fragment-never-send-to-server-in-http-request"><a href="#2-Fragment-never-send-to-server-in-http-request" class="headerlink" title="2. Fragment never send to server in http request."></a>2. Fragment never send to server in http request.</h2><p>The fragment part of the URL is never sent to the server. It is only used by the browser. Take the following URL as an example, when you input it in the browser, observe the network tab in the developer tools, you will find that the fragment part is not sent to the server. the server only receives the request for the URL <code>http://example.com/page.html</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://localhost:3000/page1#fragment</span><br></pre></td></tr></table></figure>

<h2 id="3-Anything-after-the-first-is-a-fragment-identifier"><a href="#3-Anything-after-the-first-is-a-fragment-identifier" class="headerlink" title="3. Anything after the first # is a fragment identifier."></a>3. Anything after the first <code>#</code> is a fragment identifier.</h2><p>The url below want to set the color by the fragment part of the URL, but it won’t work because browser will parse the fragment part as <code>#ffff&amp;shape=circle</code> instead of <code>#ffff</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">http://example.com/?color=#ffff&amp;shape=circle</span><br></pre></td></tr></table></figure>

<h2 id="4-Changing-fragment-id-doesn’t-reload-a-page-but-create-history"><a href="#4-Changing-fragment-id-doesn’t-reload-a-page-but-create-history" class="headerlink" title="4. Changing fragment id doesn’t reload a page but create history."></a>4. Changing fragment id doesn’t reload a page but create history.</h2><p>When you change the fragment part of the URL, the page will not reload, but it will create a new entry in the browser history. You can use the <code>forward</code> and <code>back</code> button in the browser to navigate between the history entries.</p>
<pre><code class="language-html">## 5. Googlebot ignores the fragment part of the URL.

# References:
1. https://blog.httpwatch.com/2011/03/01/6-things-you-should-know-about-fragment-urls/
2. https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Identifying_resources_on_the_Web#Fragment
</code></pre>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>url</tag>
        <tag>fragment</tag>
        <tag>anchor</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-try-catch-finally</title>
    <url>/2024/12/13/javascript-try-catch-finally/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="try"><a href="#try" class="headerlink" title="try"></a>try</h2><h2 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h2><p>JavaScript中的catch不能按类型捕获异常，只能捕获所有异常。如果需要按类型捕获异常，可以使用<code>if</code>语句判断异常类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title function_">myFunction</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="keyword">if</span> (e <span class="keyword">instanceof</span> <span class="title class_">ReferenceError</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`ReferenceError:<span class="subst">$&#123;e.message&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> <span class="title class_">TypeError</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`TypeError: <span class="subst">$&#123;e.message&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> <span class="title class_">SyntaxError</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`SyntaxError: <span class="subst">$&#123;e.message&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> <span class="title class_">Error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Error: <span class="subst">$&#123;e.message&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与<code>Java</code>等其他类型的语言不同，JS不能像下面这样捕获异常。JS中一个<code>try</code>只能对应一个<code>catch</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  myFunction();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ReferenceError) &#123;</span><br><span class="line">  console.error(`ReferenceError:$&#123;e.message&#125;`);</span><br><span class="line">&#125; <span class="keyword">catch</span> (TypeError) &#123;</span><br><span class="line">  console.error(`TypeError: $&#123;e.message&#125;`);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SyntaxError) &#123;</span><br><span class="line">  console.error(`SyntaxError: $&#123;e.message&#125;`);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Error) &#123;</span><br><span class="line">  console.error(`Error: $&#123;e.message&#125;`);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p><code>return</code>和<code>finally</code>同时存在时，<code>finally</code>会在<code>return</code>之前执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>try</tag>
      </tags>
  </entry>
  <entry>
    <title>this-in-javascript</title>
    <url>/2024/04/04/javascript-this/</url>
    <content><![CDATA[<h1 id="This-in-javascript"><a href="#This-in-javascript" class="headerlink" title="This in javascript"></a>This in javascript</h1><p>在JavaScript中，<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">this</a>是一个非常重要的概念，它代表了函数或方法执行时所处的上下文，<code>this</code>的值取决于函数的调用方式，而不是定义的位置，所以this是在运行时确定的。(箭头函数另议)</p>
<h1 id="this的值"><a href="#this的值" class="headerlink" title="this的值"></a><code>this</code>的值</h1><p>概括来说，<code>this</code>的值受以下因素影响</p>
<h2 id="函数或方法的调用方式"><a href="#函数或方法的调用方式" class="headerlink" title="函数或方法的调用方式"></a>函数或方法的调用方式</h2><h3 id="作为普通函数调用"><a href="#作为普通函数调用" class="headerlink" title="作为普通函数调用"></a>作为普通函数调用</h3><p>当函数做为普通函数调用时，<code>this</code>指向全局对象:</p>
<ul>
<li>非严格模式：浏览器中为<code>window</code>对象，Node.js中为<code>global</code>对象。</li>
<li>严格模式：<code>this</code>的值为<code>undefined</code>。</li>
</ul>
<p>以下代码，在Browser环境运行时，输出<code>window</code>对象，在Node.js环境运行时，输出<code>global</code>对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">globalFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">globalFunction</span>(); <span class="comment">// window or global</span></span><br></pre></td></tr></table></figure>

<p>而以下代码则都输出<code>undefined</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">globalFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">globalFunction</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="作为对象方法调用"><a href="#作为对象方法调用" class="headerlink" title="作为对象方法调用"></a>作为对象方法调用</h3><p>当函数作为对象的方法调用时，<code>this</code>指向调用该方法的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Philip&#x27;</span>,</span><br><span class="line">  <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">sayName</span>(); <span class="comment">// Philip</span></span><br></pre></td></tr></table></figure>
<p>需要注意的是，如果将对象方法赋值给普通函数，那么调用普通函数时，<code>this</code>将指向全局对象。<br>下面的代码，虽然<code>person.sayName</code>是对象方法，但是它被赋值给了普通函数<code>sayName</code>，所以<code>this</code>指向全局对象。但是全局对象上没有<code>name</code>属性，所以无论是Browser环境还是Node.js环境，都输出<code>undefined</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Philip&#x27;</span>,</span><br><span class="line">  <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sayName = person.<span class="property">sayName</span>; </span><br><span class="line"><span class="comment">// or const sayName = person[&#x27;sayName&#x27;];</span></span><br><span class="line"><span class="comment">// or const &#123;sayName&#125; = person;</span></span><br><span class="line"><span class="title function_">sayName</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<h3 id="作为构造函数调用"><a href="#作为构造函数调用" class="headerlink" title="作为构造函数调用"></a>作为构造函数调用</h3><p>当函数作为构造函数调用时，<code>this</code>指向新创建的对象。（除非构造函数返回了另外一个对象），在JS中如果函数的首字母大写，表示这是一个构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zdd&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// zdd</span></span><br></pre></td></tr></table></figure>

<p>使用原型链定义的构造函数也一样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Philip&#x27;</span>);</span><br><span class="line">person.<span class="title function_">sayName</span>(); <span class="comment">// 输出：Philip，此时 this 指向 person 实例</span></span><br></pre></td></tr></table></figure>

<p>需要注意：使用原型链定义函数时，不要用箭头函数，因为箭头没有自己的this绑定，而是继承其parent的this，下面代码中，this指向全局对象，会导致name值为undefined。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Philip&#x27;</span>);</span><br><span class="line">john.<span class="title function_">sayName</span>(); <span class="comment">// 输出：undefined，此时 this 指向全局对象</span></span><br></pre></td></tr></table></figure>

<p>如果构造函数返回了一个对象，那么<code>this</code>指向这个返回的对象，而不是新创建的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Philip&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">name</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>在这里，<code>this</code>指向了返回的对象<code>&#123;age: 18&#125;</code>，而不是新创建的对象<code>foo</code>。而新创建的对象上没有name属性，所以输出<code>undefined</code>。</p>
<h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><h3 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h3><p>上面已经讲过，不再赘述。</p>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>与普通函数不同，箭头函数没有自己的this绑定（注意，不是没有this)，箭头函数的this继承自它的父级作用域this（定义时就确定了）, 所以箭头函数的this是在定义时确定的，而不是在运行时确定的。<br>以下代码中，<code>sayName</code>是一个箭头函数，它的this继承自它的父级this，也就是全局对象，而全局对象上没有<code>name</code>属性，所以输出<code>undefined</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Philip&#x27;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">sayName</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>箭头函数的this继承自它的父级作用域this，这里的父级作用域必须是函数或者全局作用域，不能是对象。比如下面的代码：arrowFunction输出<code>undefined</code>。因为outer是对象，并不是它的父级作用域，所以this指向全局对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> outer = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;outer&#x27;</span>,</span><br><span class="line">  <span class="attr">inner</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;inner&#x27;</span>,</span><br><span class="line">    <span class="title function_">regularFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// &#x27;inner&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">arrowFunction</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// undefined</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">outer.<span class="property">inner</span>.<span class="title function_">regularFunction</span>(); <span class="comment">// inner</span></span><br><span class="line">outer.<span class="property">inner</span>.<span class="title function_">arrowFunction</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>思考题1：下面代码输出什么？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;outer&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">inner</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;inner&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="title function_">printName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> outerObj = <span class="keyword">new</span> <span class="title function_">outer</span>();</span><br><span class="line">outerObj.<span class="title function_">inner</span>().<span class="title function_">printName</span>();</span><br></pre></td></tr></table></figure>

<p>答案：<code>undefined</code>, 原因：</p>
<ol>
<li><code>inner</code> function最终返回一个对象，对象中的<code>printName</code>是一个对象方法。</li>
<li>返回的对象上没有<code>name</code>属性，所以输出<code>undefined</code>。</li>
</ol>
<p>思考题2：下面代码输出什么？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;outer&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">inner</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;inner&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">printName</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> outerObj = <span class="keyword">new</span> <span class="title function_">outer</span>();</span><br><span class="line">outerObj.<span class="title function_">inner</span>().<span class="title function_">printName</span>();</span><br></pre></td></tr></table></figure>
<p>答案：<code>inner</code>, 因为<code>printName</code>是一个箭头函数，它的this继承自它的父级this，也就是<code>inner</code>函数的this，所以输出<code>inner</code>。</p>
<p>你可以使用<code>bind</code>, <code>call</code>, <code>apply</code>来调用箭头函数，但是这些方法无法改变箭头函数的this值，因为箭头函数的this值是在定义时确定的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> globalObject = <span class="variable language_">this</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; <span class="variable language_">this</span>;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;Philip&#x27;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>() === globalObject); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//bind</span></span><br><span class="line"><span class="keyword">const</span> boundFoo = foo.<span class="title function_">bind</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">boundFoo</span>() === globalObject); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="title function_">call</span>(obj) === globalObject); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="title function_">apply</span>(obj) === globalObject); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>Arrow functions create a closure over the this value of its surrounding scope, which means arrow functions behave if they are “auto-bound” — no matter how it’s invoked, this is bound to what it was when the function was created (the example above, the global object). The same applies to arrow functions created inside other functions: their thremains that of the enclosing lexical context.  </p>
<p>箭头函数与普通函数this的区别</p>
<table>
<thead>
<tr>
<th>函数类型</th>
<th>this指向</th>
<th>this确定时机</th>
<th>是否可以更改this</th>
</tr>
</thead>
<tbody><tr>
<td>普通函数</td>
<td>取决于调用情况</td>
<td>运行时确定</td>
<td>可以</td>
</tr>
<tr>
<td>箭头函数</td>
<td>取决于父级this</td>
<td>定义时确定</td>
<td>不可以</td>
</tr>
</tbody></table>
<h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>由上面的代码可知，Browser环境与Node.js环境，<code>this</code>的值也不同。</p>
<h2 id="模块类型"><a href="#模块类型" class="headerlink" title="模块类型"></a>模块类型</h2><h3 id="CommonJS模块"><a href="#CommonJS模块" class="headerlink" title="CommonJS模块"></a>CommonJS模块</h3><p>在CommonJS模块中，top-level <code>this</code>的值为空对象<code>&#123;&#125;</code>。以下代码在输出<code>&#123;&#125;</code>。（可以在Node.js中新建test.js文件，然后运行如下代码）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br></pre></td></tr></table></figure>
<h3 id="ES6模块"><a href="#ES6模块" class="headerlink" title="ES6模块"></a>ES6模块</h3><p>在ES6模块中，top level <code>this</code>的值为undefined。以下代码在输出<code>undefined</code>。（可以在Node.js中新建<code>test.mjs</code>文件，然后运行如下代码）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>注意，下面这个this不是top level <code>this</code>, 因为它位于函数内部，所以它指向全局对象<code>global</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// global this.</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="Strict-mode"><a href="#Strict-mode" class="headerlink" title="Strict mode"></a>Strict mode</h2><p>我们以上的讨论都是基于非strict mode下，在严格模式下，全局<code>this</code>的值为undefined。注意<code>strict mode</code>并不影响对象方法及构造函数调用，只影响普通函数调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>();</span><br></pre></td></tr></table></figure>

<h2 id="globalThis"><a href="#globalThis" class="headerlink" title="globalThis"></a>globalThis</h2><p>无论在哪个环境，都可以使用<code>globalThis</code>来获取全局对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalThis);</span><br></pre></td></tr></table></figure>

<h2 id="global-this-vs-globalThis"><a href="#global-this-vs-globalThis" class="headerlink" title="global this vs globalThis"></a>global this vs globalThis</h2><p>In Node.js, the this keyword inside a module (a file) refers to the current <code>module&#39;s exports</code>, not the global object. This is because each file in Node.js is treated as a separate module and has its own scope.<br>On the other hand, globalThis is a standard <code>built-in object</code> in JavaScript that always refers to the global object, regardless of where it is called. In the case of Node.js, globalThis refers to the global object which is global<br>看以下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === globalThis); <span class="comment">// true in browser, false in Node.js</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window in browser, &#123;&#125;(empty object) in Node.js， undefined in ES module</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalThis); <span class="comment">// window in browser, global object in Node.js</span></span><br></pre></td></tr></table></figure>

<h3 id="DOM中的this"><a href="#DOM中的this" class="headerlink" title="DOM中的this"></a>DOM中的this</h3><p>DOM事件处理函数中的this指向绑定事件的元素。以下示例以Chrome浏览器为准。<br>输出<code>myButton</code>，原因是<code>this</code>指向了绑定事件的元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;myButton&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(this.id)&quot;</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>同样输出<code>myButton</code>，原因是<code>this</code>指向了绑定事件的元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;myButton&quot;</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> myButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myButton&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  myButton.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出undefined. 因为onButtonClick是普通函数，所以<code>this</code>指向了全局对象。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;myButton&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;onButtonClick()&quot;</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">onButtonClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在实际代码中，我们一般不这样使用this，而是通过<code>event.target</code>来获取元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;myButton&quot;</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> myButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myButton&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  myButton.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br></pre></td></tr></table></figure>

<p>也可以使用箭头函数：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;myButton&quot;</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> myButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myButton&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    myButton.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="class中的this，注意super。"><a href="#class中的this，注意super。" class="headerlink" title="class中的this，注意super。"></a>class中的this，注意super。</h2><h2 id="手动改变this的值"><a href="#手动改变this的值" class="headerlink" title="手动改变this的值"></a>手动改变<code>this</code>的值</h2><p>JS中<code>call</code>, <code>apply</code>, <code>bind</code>这三个函数都可以改变<code>this</code>的值。详情请看<a href="https://zdd.github.io/2024/04/14/javascript-apply-call-bind/">这里</a></p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol>
<li><p>普通函数调用，this指向全局对象，在浏览器环境下，严格模式this是<code>undefined</code>, 非严格模式下，是 <code>window</code>对象。</p>
</li>
<li><p>通过对象调用函数，this指向调用函数的对象，如果是链式调用，则指向离函数最近的对象。(如果将对象方法赋值给普通函数，那么遵循第一条)</p>
</li>
<li><p>调用构造函数时，this指向新创建的对象。</p>
</li>
<li><p>通过apply&#x2F;call&#x2F;bind调用的函数，this指向apply&#x2F;call&#x2F;bind绑定的对象，也即第一个参数。</p>
<p> 注意，<code>bind</code> 与apply&#x2F;call的区别，bind会重新创建一个函数。</p>
</li>
<li><p>箭头函数中的this，指向箭头函数所在的上下文环境，比如包含箭头函数的函数或者全局上下文。</p>
</li>
</ol>
<h1 id="Global-this"><a href="#Global-this" class="headerlink" title="Global this"></a>Global this</h1><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#global_context">global context</a> - Outside of any functions or classes(may be defined as an block or arrow functions in global scope)</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Global_scope">global scope</a> - In a programming environment, the global scope is the scope that contains, and is visible in, all other scopes.<br>In client-side JavaScript, the global scope is generally the web page inside which all the code is being executed.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Global_object">global object</a> - A global object is an object that exists in global scope.<ul>
<li>Browser - <code>window</code></li>
<li>Node.js - <code>global</code></li>
<li>Worker - <code>self</code></li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis">globalThis</a> - The global property allow one to access the global object regardless of the current environment.</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后我们用一个表格总结一下本文的内容：</p>
<ol>
<li><p>strict mode只影响普通函数调用，不影响对象方法及构造函数调用。</p>
 <table style="text-align: center;">
   <tr style="background-color: #777777;">
     <td>Mode</td>
     <td colspan="2">non-strict mode</td>
     <td colspan="2">strict mode</td>
   </tr>
   <tr>
     <td>Environment</td>
     <td>Browser</td>
     <td>Node.js</td>
     <td>Browser</td>
     <td>Node.js</td>
   </tr>
   <tr>
     <td>this in regular function</td>
     <td>window</td>
     <td>global object</td>
     <td>undefined</td>
     <td>undefined</td>
   </tr>
 </table>
</li>
<li><p>top level <code>this</code></p>
 <table style="text-align: center;">
   <tr style="background-color: #777777;">
     <td>Environment</td>
     <td>Browser</td>
     <td>Node.js</td>
     <td>ES6 Module</td>
   </tr>
   <tr>
     <td>Top level this</td>
     <td>window</td>
     <td>{}</td>
     <td>undefined</td>
   </tr>
 </table></li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-xxx is not a function</title>
    <url>/2024/07/17/javascript-xxx-is-not-a-function/</url>
    <content><![CDATA[<p>Have you ever seen this error: “TypeError: xxx is not a function”? This error occurs when you try to call a function that does not exist.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Philip&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">getAge</span>(); <span class="comment">// TypeError: person.getAge is not a function</span></span><br></pre></td></tr></table></figure>

<p>You can solve this by the <code>optional chaining</code> operator <code>?.</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.<span class="property">getAge</span>?.(); <span class="comment">// nothing output</span></span><br></pre></td></tr></table></figure>

<p>However, if there is a property in the object has the same name by accident, you will still get that error</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Philip&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">getAge</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="property">getAge</span>?.(); <span class="comment">// TypeError: person.getAge is not a function</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>function</tag>
        <tag>optional chaining</tag>
        <tag>property</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-var-let-const</title>
    <url>/2024/11/14/javascript-var-let-const/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>var</code>, <code>let</code> and <code>const</code>是JavaScript中三种定义变量的方式，它们之间有什么区别呢？这是面试中常见的一道题，今天我们来一文说透它。<br><code>let</code>和<code>const</code>区别不大，主要是<code>const</code>声明的变量是常量，不可修改，而<code>let</code>声明的变量是可修改的。所以我们重点放在<code>var</code>和<code>let</code>上。</p>
<h1 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h1><p>声明变量的同时为其赋值叫做初始化。</p>
<ul>
<li><code>var</code>和<code>let</code>声明的变量都可以不赋值，此时变量的值为<code>undefined</code>。</li>
<li><code>const</code>声明的变量必须赋值，否则会报错。</li>
</ul>
<p><code>var</code>和<code>let</code>声明的变量可以不赋值，此时变量的值为<code>undefined</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num; <span class="comment">// num is undefined</span></span><br><span class="line">num = <span class="number">1</span>; <span class="comment">// num is 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str; <span class="comment">// str is undefined</span></span><br><span class="line">str = <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// str is &#x27;hello&#x27; </span></span><br></pre></td></tr></table></figure>

<p><code>const</code>声明的变量必须赋值，否则会报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a; <span class="comment">// SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>

<h1 id="Hoisting"><a href="#Hoisting" class="headerlink" title="Hoisting"></a>Hoisting</h1><p><code>Hoisting</code>这个词中文译为提升，就是将变量的声明提升到其作用域的顶部，注意提升的是声明，而不是赋值。</p>
<ul>
<li><code>var</code>声明的变量会被提升至其作用域顶部。</li>
<li><code>let</code>和<code>const</code>声明的变量不会被提升。（注意这个说法有争议，详见<a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting">MDN</a>）</li>
<li>提升只针对变量声明，不包括赋值。</li>
</ul>
<h2 id="如果var是在全局作用域声明的，那么它会被提升到全局作用域的顶部。"><a href="#如果var是在全局作用域声明的，那么它会被提升到全局作用域的顶部。" class="headerlink" title="如果var是在全局作用域声明的，那么它会被提升到全局作用域的顶部。"></a>如果var是在全局作用域声明的，那么它会被提升到全局作用域的顶部。</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Philip&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>以上代码等价于：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name; <span class="comment">// `var`声明的变量会被提升到其作用域顶部。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// undefined</span></span><br><span class="line">name = <span class="string">&#x27;Philip&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="如果var是在函数作用域声明的，那么它会被提升到函数作用域的顶部。"><a href="#如果var是在函数作用域声明的，那么它会被提升到函数作用域的顶部。" class="headerlink" title="如果var是在函数作用域声明的，那么它会被提升到函数作用域的顶部。"></a>如果var是在函数作用域声明的，那么它会被提升到函数作用域的顶部。</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// undefined</span></span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;Philip&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">printName</span>();</span><br></pre></td></tr></table></figure>
<p>以上代码等价于：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name; <span class="comment">// `var`声明的变量会被提升到其作用域顶部。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// undefined</span></span><br><span class="line">  name = <span class="string">&#x27;Philip&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">printName</span>();</span><br></pre></td></tr></table></figure>
<h2 id="let和const声明的变量不会被提升。"><a href="#let和const声明的变量不会被提升。" class="headerlink" title="let和const声明的变量不会被提升。"></a><code>let</code>和<code>const</code>声明的变量不会被提升。</h2><p>对于<code>let</code>和<code>const</code>，它们不会被提升，所以下面代码会报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// ReferenceError: Cannot access &#x27;num&#x27; before initialization</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>前面说过，关于<code>let</code>和<code>const</code>是否被提升有争议。</p>
<ul>
<li>一种说法是<code>let</code>和<code>const</code>不会被提升，所以在声明之前访问会报错。</li>
<li>另一种说法是<code>let</code>和<code>const</code>会被提升，但是在声明之前访问会抛出<code>Temporal Dead Zone</code>错误。</li>
</ul>
<p>比如下面的代码：<br>这段代码会报错，但是如果我们把<code>&#123;&#125;</code>内的<code>const x = 2;</code>注释掉，那么代码就不会报错。如果<code>const x = 2</code>没有被提升的话，那么<code>console.log(x)</code>应该可以访问到全局的<code>x</code>，而不会报错。换句话说：因为<code>const x = 2</code>被提升了，所以<code>console.log(x)</code>访问的是提升后的<code>x</code>，而此时<code>x</code>还没有被初始化，所以报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// ReferenceError: Cannot access &#x27;x&#x27; before initialization</span></span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="提升只针对变量声明，不包括赋值。"><a href="#提升只针对变量声明，不包括赋值。" class="headerlink" title="提升只针对变量声明，不包括赋值。"></a>提升只针对变量声明，不包括赋值。</h2><p>下面的代码会报错，因为x &#x3D; 1是赋值，并不是声明，所以不会提升。(注意：如果变量声明前没有加<code>var</code>, <code>let</code>或<code>const</code>，那么其实产生的是一个意外的全局变量。)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// ReferenceError: x is not defined</span></span><br><span class="line">x = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="如果有同名函数和变量，那么提升后，变量位于函数之前（或者说函数会覆盖变量）。"><a href="#如果有同名函数和变量，那么提升后，变量位于函数之前（或者说函数会覆盖变量）。" class="headerlink" title="如果有同名函数和变量，那么提升后，变量位于函数之前（或者说函数会覆盖变量）。"></a>如果有同名函数和变量，那么提升后，变量位于函数之前（或者说函数会覆盖变量）。</h2><p>以下代码中有一个同名的函数和变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// [Function: foo], not undefined.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;function foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>提升后代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;function foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line">foo = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>看几道面试题，以下几段代码输出什么？</p>
<ol>
<li>第一题</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>解决var提升的问题很简单，就是按照提升规则将代码重写一下，上面的代码等价于如下代码，结果一目了然。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>第二题</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只要函数内部有<code>var</code>声明的变量，那么所有全局声明的var变量都会被忽略，以上代码提升后等价于如下代码（注意function也有提升），函数内部的var永远会覆盖全局的var。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a; <span class="comment">// value of a is `undefined`</span></span><br><span class="line">  <span class="keyword">if</span> (a) &#123;</span><br><span class="line">    a = <span class="number">10</span>; <span class="comment">// never executed.</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>第三题</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> foo);</span><br><span class="line">  <span class="keyword">var</span> foo = <span class="string">&#x27;variable&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;function&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> foo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>
<p>还是那句话，此类题目的解法就是按照提升规则把代码重新写一遍，以上代码提升后等价于如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> foo;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;function&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> foo);</span><br><span class="line">  </span><br><span class="line">  foo = <span class="string">&#x27;variable&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> foo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>
<p>所以输出结果是<code>function</code>和<code>string</code>。</p>
<h1 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h1><ul>
<li><code>var</code>声明的变量有只两种作用域：全局作用域和函数作用域。（没有块级作用域）</li>
<li><code>let</code>和<code>const</code>声明的变量有三种作用域：全局作用域，函数作用域和块级作用域。</li>
<li><code>var</code>声明的全局变量会挂载到<code>window</code>对象上，而<code>let</code>和<code>const</code>不会。</li>
<li><code>let</code>和<code>const</code>有临时性死区，而<code>var</code>没有。</li>
</ul>
<h2 id="面试题-1"><a href="#面试题-1" class="headerlink" title="面试题"></a>面试题</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>以下代码输出什么？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br></pre></td></tr></table></figure>
<p>答案：1，因为<code>let</code>有块级作用域，所以<code>let x = 2</code>只在<code>&#123;&#125;</code>内有效。</p>
<h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>以下代码输出什么？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br></pre></td></tr></table></figure>
<p>答案：2，因为<code>var</code>没有块级作用域，所以<code>var x = 2</code>会覆盖外部的<code>var x = 1</code>。</p>
<h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><p>以下代码输出什么？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;zdd&#x27;</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name); </span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&#x27;Philip&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>答案：ReferenceError: Cannot access ‘name’ before initialization。因为<code>let</code>有块级作用域，所以<code>console.log(name);</code>访问的是<code>let name = &#39;Philip&#39;;</code>之前的<code>name</code>，而此时<code>name</code>还没有被初始化，此时<code>name</code>处于暂时性死区中，所以报错。</p>
<h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><p>以下代码输出什么？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>
<p>答案：ReferenceError: foo is not defined。因为<code>foo</code>是在块级作用域内声明的，所以在外部无法访问。但是如果我们把<code>&#39;use strict&#39;;</code>去掉，那么代码就可以正常运行。因为在非严格模式下，函数声明会被提升到全局作用域。</p>
<h3 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h3><p>以下代码输出什么？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> x;</span><br><span class="line">  <span class="keyword">let</span> y;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (x) &#123;</span><br><span class="line">    x = <span class="number">1</span>;</span><br><span class="line">    y = <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>答案：1 <code>undefined</code> 2。因为<code>catch</code>中的<code>x</code>是一个新的变量，不是外部的<code>x</code>，所以<code>x = 1</code>只会改变<code>catch</code>中的<code>x</code>，而不会改变外部的<code>x</code>。而<code>y = 2</code>不是<code>catch</code>的参数，只是在<code>catch</code>中赋值的，所以会改变外部的<code>y</code>。</p>
<h1 id="Temporal-Dead-Zone"><a href="#Temporal-Dead-Zone" class="headerlink" title="Temporal Dead Zone"></a>Temporal Dead Zone</h1><p>TDZ即<code>Temporal Dead Zone</code> - 中文名暂时性死区，是指<code>let</code>和<code>const</code>声明的变量在其作用域开始到变量声明之间的这段区域。在暂时性死区内无法访问变量，访问会报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// ReferenceError: Cannot access &#x27;b&#x27; before initialization</span></span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>
<p>对于以上代码，常量b的暂时性死区开始于函数的第一行，终止于b的声明，而<code>console.log(b);</code>这句恰恰在暂时性死区内访问了b，所以会报错。</p>
<h2 id="面试题-2"><a href="#面试题-2" class="headerlink" title="面试题"></a>面试题</h2><p>以下代码输出什么？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> bar);</span><br><span class="line">  <span class="keyword">const</span> bar = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>
<p>答案：<br><code>ReferenceError: Cannot access &#39;bar&#39; before initialization</code><br>因为<code>console.log(typeof bar);</code>这句在<code>bar</code>的暂时性死区内访问了<code>bar</code>，所以会报错。可以看到，即使强如<code>typeof</code>这种几乎不会报错的操作符也无法规避暂时性死区。</p>
<p>如果我们把<code>const bar = 1;</code>去掉，那么代码就不会报错。<code>typeof</code>操作符对于没有声明的变量不会报错，而是返回<code>undefined</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> bar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Redeclaration"><a href="#Redeclaration" class="headerlink" title="Redeclaration"></a>Redeclaration</h1><ul>
<li><code>var</code>声明的变量可以被重复声明，后声明的覆盖先声明的。</li>
<li><code>let</code>和<code>const</code>声明的变量不可以被重复声明。</li>
</ul>
<h2 id="面试题-3"><a href="#面试题-3" class="headerlink" title="面试题"></a>面试题</h2><p>看几道面试题，以下几段代码输出什么？</p>
<ol>
<li>第一题</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure>
<p>答案：3 3 1, 这个题主要考察两个知识点：</p>
<ol>
<li><code>var</code>声明的变量没有块级作用域。</li>
<li><code>var</code>声明的变量可以被重复声明，后声明的会覆盖先声明的。<br>所以<code>var a = 3</code>会覆盖外部的<code>var a = 2</code>，但是<code>var a = 2</code>不会覆盖最外面的<code>var a = 1</code>。因为<code>var</code>有函数作用域。</li>
</ol>
<p>以上代码提升后等价于如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="keyword">var</span> a; <span class="comment">// redeclaration</span></span><br><span class="line">  a = <span class="number">2</span>;</span><br><span class="line">  &#123;</span><br><span class="line">    a = <span class="number">3</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure>
<p>注意：面试题中凡事用<code>&#123;&#125;</code>包裹<code>var</code>的都是障眼法，<code>var</code>没有块级作用域。</p>
<h3 id="第二题-1"><a href="#第二题-1" class="headerlink" title="第二题"></a>第二题</h3><p>以下代码输出2, 1。因为let有块级作用域。<code>let a = 2</code>只在<code>&#123;&#125;</code>内有效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<h1 id="Accidental-Global-Variables"><a href="#Accidental-Global-Variables" class="headerlink" title="Accidental Global Variables"></a>Accidental Global Variables</h1><p>如果我们声明变量的时候忘记了写<code>var</code>, <code>let</code>或者<code>const</code>，那么这个变量就是所谓的<code>Accidental Global Variables</code>，意思是<code>意外的全局变量</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  b = <span class="number">2</span>; <span class="comment">// accident global variable</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h1 id="面试题-4"><a href="#面试题-4" class="headerlink" title="面试题"></a>面试题</h1><p>以下代码输出什么？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>答案：3 3 3<br>因为<code>var</code>没有块级作用域，所以<code>setTimeout</code>内的<code>i</code>都是指向同一个<code>i</code>，而<code>setTimeout</code>是异步的，其回调函数代码需要先进入宏任务队列，待<code>for</code>循环结束后才能执行，此时<code>i</code>已经是3了。关于这道题的详细解释，请看<a href="https://zdd.github.io/2024/11/16/javascript-interview-questions-02/">这篇</a>。</p>
<h1 id="Best-Practices"><a href="#Best-Practices" class="headerlink" title="Best Practices"></a>Best Practices</h1><ol>
<li><p>如今ES6已经普及，对于业务代码来说，基本不需要使用<code>var</code>了，<code>var</code>目前只有JS框架或者底层工具库才会使用。</p>
</li>
<li><p>对于<code>let</code>和<code>const</code>，优先使用<code>const</code>，只有在需要修改变量的情况下才使用<code>let</code>。</p>
</li>
<li><p>经典for循环使用<code>let</code>，因为循环变量会被修改。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>for...in</code>和<code>for...of</code>使用<code>const</code>，因为循环变量不会被修改。<br>  <code>for ... of</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>for ... in</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>interview</tag>
        <tag>hoisting</tag>
        <tag>var</tag>
        <tag>let</tag>
        <tag>const</tag>
      </tags>
  </entry>
  <entry>
    <title>jest-it-each</title>
    <url>/2024/12/13/jest-it-each/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>有时候我们需要对一组数据进行相同的测试，这时候可以使用<code>it.each</code>。</p>
<h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> info = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;zdd1&#x27;</span>, <span class="attr">age</span>: <span class="number">19</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;zdd2&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">it.<span class="title function_">each</span>(info)(<span class="string">&#x27;test %s&#x27;</span>, <span class="function">(<span class="params">name, age</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(name).<span class="title function_">toMatch</span>(<span class="regexp">/zdd/</span>);</span><br><span class="line">  <span class="title function_">expect</span>(age).<span class="title function_">toBeGreaterThan</span>(<span class="number">17</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>jest</category>
      </categories>
      <tags>
        <tag>jest</tag>
        <tag>test</tag>
        <tag>it</tag>
        <tag>each</tag>
      </tags>
  </entry>
  <entry>
    <title>jest-from-scratch</title>
    <url>/2024/07/16/jest-from-scratch/</url>
    <content><![CDATA[<p>In this post, I will show you how to set up a <a href="https://jestjs.io/">Jest</a> project from scratch. We won’t use any front-end frameworks like <code>React</code>, <code>Angular</code>, or <code>Vue</code>, just a simple vanilla <code>JavaScript</code> project.</p>
<h1 id="CommonJs"><a href="#CommonJs" class="headerlink" title="CommonJs"></a>CommonJs</h1><h2 id="Step-1-Create-a-new-project"><a href="#Step-1-Create-a-new-project" class="headerlink" title="Step 1: Create a new project"></a>Step 1: Create a new project</h2><p>Run the following command to init a new project directory, it will simply create a <code>package.json</code> file in the current directory.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y <span class="comment"># with -y, you don&#x27;t need to answer the questions</span></span><br></pre></td></tr></table></figure>

<h2 id="Step-2-Install-Jest"><a href="#Step-2-Install-Jest" class="headerlink" title="Step 2: Install Jest"></a>Step 2: Install Jest</h2><p>Run the following command to install <code>Jest</code> as a dev dependency.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev jest</span><br></pre></td></tr></table></figure>

<h2 id="Step-3-Create-a-javascript-file"><a href="#Step-3-Create-a-javascript-file" class="headerlink" title="Step 3: Create a javascript file"></a>Step 3: Create a javascript file</h2><p>We’ll first focus on CommonJs, create a new file named <code>sum.js</code> in the root directory of your project, and add the following code:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = sum;</span><br></pre></td></tr></table></figure>

<h2 id="Step-4-Create-a-test-file"><a href="#Step-4-Create-a-test-file" class="headerlink" title="Step 4: Create a test file"></a>Step 4: Create a test file</h2><p>Create a new file named <code>sum.test.js</code> in the root directory of your project, and add the following code:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="built_in">require</span>(<span class="string">&#x27;./sum&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;adds 1 + 2 to equal 3&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>)).<span class="title function_">toBe</span>(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Step-5-Update-package-json"><a href="#Step-5-Update-package-json" class="headerlink" title="Step 5: Update package.json"></a>Step 5: Update <code>package.json</code></h2><p>Add the following line to the <code>scripts</code> property in the <code>package.json</code> file:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Step-6-Run-the-test"><a href="#Step-6-Run-the-test" class="headerlink" title="Step 6: Run the test"></a>Step 6: Run the test</h2><p>Run the following command to run the test:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<h2 id="Run-test-with-coverage"><a href="#Run-test-with-coverage" class="headerlink" title="Run test with coverage"></a>Run test with coverage</h2><p>Run the following command to run the test with coverage:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx jest -- --coverage</span><br></pre></td></tr></table></figure>

<h1 id="ESModule"><a href="#ESModule" class="headerlink" title="ESModule"></a>ESModule</h1><p>To run Jest with ESModule, first rewrite your file and test file to use ESModule syntax.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sum.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sum.test.js</span></span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&#x27;./sum.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;adds 1 + 2 to equal 3&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>)).<span class="title function_">toBe</span>(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Run the test, you will got following error:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Jest encountered an unexpected token</span><br><span class="line">SyntaxError: Cannot use import statement outside a module</span><br></pre></td></tr></table></figure>

<p>This is because you are trying to use ESModule syntax in a CommonJs environment, to fix this, you can update your file name to <code>sum.test.mjs</code> or you need to add the following line to the <code>package.json</code> file:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;jest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;moduleFileExtensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;js&quot;</span><span class="punctuation">,</span> <span class="string">&quot;mjs&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;transform&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>Then run the test again, it still not work, got the following error, it seems that Jest didn’t find any test file with the default pattern.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">No tests found, exiting with code 1</span><br><span class="line">Run with `--passWithNoTests` to <span class="built_in">exit</span> with code 0</span><br><span class="line">In D:\personal\codes\jest</span><br><span class="line">  5 files checked.</span><br><span class="line">  testMatch: **/__tests__/**/*.[jt]s?(x), **/?(*.)+(spec|<span class="built_in">test</span>).[tj]s?(x) - 0 matches</span><br><span class="line">  testPathIgnorePatterns: \\node_modules\\ - 5 matches</span><br><span class="line">  testRegex:  - 0 matches</span><br><span class="line">Pattern:  - 0 matches</span><br></pre></td></tr></table></figure>

<p>Update <code>jest</code> config in <code>package.json</code> file to include <code>mjs</code> file extension in <a href="https://jestjs.io/docs/next/configuration#testmatch-arraystring">testMatch</a>, see <a href="https://github.com/micromatch/micromatch">micromatch</a> for detail matching rules. Note: this is <code>not</code> regex.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;jest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;testMatch&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;**/?(*.)test.?js&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>Then run the test again, got the previous error again</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SyntaxError: Cannot use import statement outside a module</span><br></pre></td></tr></table></figure>

<p>Then search jest official documentation, change jest command in <code>package.json</code> file to:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node --experimental-vm-modules node_modules/jest/bin/jest.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>Then run the test again, it works now.</p>
<h1 id="Using-config-file"><a href="#Using-config-file" class="headerlink" title="Using config file"></a>Using config file</h1><p>You can move the jest config in <code>package.json</code> to a separate file named <code>jest.config.js</code>, and update the <code>package.json</code> file to use the config file.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest --config jest.config.js&quot;</span></span><br><span class="line">  <span class="attr">&quot;test-esm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node --experimental-vm-modules node_modules/jest/bin/jest.js --config jest.config.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>Then create a new file named <code>jest.config.js</code> in the root directory of your project, and add the following code:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">moduleFileExtensions</span>: [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;mjs&#x27;</span>],</span><br><span class="line">  <span class="attr">transform</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">testMatch</span>: [<span class="string">&#x27;**/?(*.)test.?js&#x27;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Then run the test again, it works now.</p>
]]></content>
      <categories>
        <category>jest</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>jest</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>jest-localstorage-does-not-need-mock-now</title>
    <url>/2024/07/15/jest-localstorage-does-not-need-mock-now/</url>
    <content><![CDATA[<h1 id="You-don’t-need-to-mock-localStorage-with-latest-jsdom"><a href="#You-don’t-need-to-mock-localStorage-with-latest-jsdom" class="headerlink" title="You don’t need to mock localStorage with latest jsdom"></a>You don’t need to mock <code>localStorage</code> with latest <code>jsdom</code></h1><p>Suppose you have a <code>localStorage</code> utility function like this:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// storage-utils.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">saveItem</span>(<span class="params">item: any</span>) &#123;</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;item&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(item));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getItem</span>(<span class="params">name: string</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> jsonString = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(name);</span><br><span class="line">  <span class="keyword">if</span> (jsonString) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonString);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To test above code, you have the following test file:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// storage-utils.spec.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; getItem, saveItem &#125; <span class="keyword">from</span> <span class="string">&#x27;./storage-utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;local storage should work&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should set and get item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> item = &#123; <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line">    <span class="title function_">saveItem</span>(item);</span><br><span class="line">    <span class="keyword">const</span> storedItem = <span class="title function_">getItem</span>(<span class="string">&#x27;item&#x27;</span>);</span><br><span class="line">    <span class="title function_">expect</span>(storedItem).<span class="title function_">toEqual</span>(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>When you run this test with <code>Jest</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># first, navigate to the directory where the test file is located.</span></span><br><span class="line">jest storage-utils.spec.ts</span><br></pre></td></tr></table></figure>
<p>Everything works fine, but <code>localStorage</code> is only available in <code>browser environment</code>, and you didn’t mock it, why?</p>
<p>This is because <code>Jest</code> now use <code>jsdom</code> as the default environment, and <code>jsdom</code> has implemented <code>localStorage</code> and <code>sessionStorage</code> APIs, so you don’t need to mock them anymore.</p>
<p>To test this, you can find the <code>jest.config.js</code> file in the root directory of your project, and add the following line to the <code>testEnvironment</code> property:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">preset</span>: <span class="string">&#x27;jest-preset-angular&#x27;</span>,</span><br><span class="line">  <span class="attr">setupFilesAfterEnv</span>: [<span class="string">&#x27;&lt;rootDir&gt;/setup-jest.ts&#x27;</span>],</span><br><span class="line">  <span class="attr">testEnvironment</span>: <span class="string">&#x27;node&#x27;</span>, <span class="comment">// &lt;-- change this to &#x27;node&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Then run the test again, you will see the test failed because <code>localStorage</code> is not available in the <code>node</code> environment, and you will get the following error:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">localStorage is not defined</span><br><span class="line">ReferenceError: localStorage is not defined</span><br></pre></td></tr></table></figure>

<h1 id="Use-jsdom-by-in-test-file"><a href="#Use-jsdom-by-in-test-file" class="headerlink" title="Use jsdom by in test file"></a>Use <code>jsdom</code> by in test file</h1><p>Suppose you global jest config is <code>node</code>(in file <code>jest.config.js</code> under project root), but you want to use <code>jsdom</code> in some test cases, you can use the following code in the test file, add @jest-environment jsdom at the top of the file.(Don’t use <code>//</code> comment, it will not work)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jest</span>-environment jsdom</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; getItem, saveItem &#125; <span class="keyword">from</span> <span class="string">&#x27;./storage-utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;local storage should work&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should set and get item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> item = &#123; <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line">    <span class="title function_">saveItem</span>(item);</span><br><span class="line">    <span class="keyword">const</span> storedItem = <span class="title function_">getItem</span>(<span class="string">&#x27;item&#x27;</span>);</span><br><span class="line">    <span class="title function_">expect</span>(storedItem).<span class="title function_">toEqual</span>(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="Mock-localStorage"><a href="#Mock-localStorage" class="headerlink" title="Mock localStorage"></a>Mock <code>localStorage</code></h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mockLocalStorage.ts</span></span><br><span class="line"><span class="keyword">const</span> mockLocalStorage = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> store = &#123;&#125; <span class="keyword">as</span> <span class="title class_">Storage</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">getItem</span>(<span class="params"><span class="attr">key</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> store[key];</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setItem</span>(<span class="params"><span class="attr">key</span>: <span class="built_in">string</span>, <span class="attr">value</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      store[key] = value;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">removeItem</span>(<span class="params"><span class="attr">key</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="keyword">delete</span> store[key];</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">      store = &#123;&#125; <span class="keyword">as</span> <span class="title class_">Storage</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mockLocalStorage;</span><br></pre></td></tr></table></figure>

<p>Test file, note that we use <code>globalThis</code> here, it’s environment independently, and works both in <code>node</code> and <code>browser</code> environment.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// storage-utils.spec.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; getItem, saveItem &#125; <span class="keyword">from</span> <span class="string">&#x27;./storage-utils&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> mockLocalStorage <span class="keyword">from</span> <span class="string">&#x27;./mockLocalStorage&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;local storage should work&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(globalThis, <span class="string">&#x27;localStorage&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">value</span>: mockLocalStorage,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should set and get item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> item = &#123; <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line">    <span class="title function_">saveItem</span>(item);</span><br><span class="line">    <span class="keyword">const</span> storedItem = <span class="title function_">getItem</span>(<span class="string">&#x27;item&#x27;</span>);</span><br><span class="line">    <span class="title function_">expect</span>(storedItem).<span class="title function_">toEqual</span>(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h1><ol>
<li><a href="https://jestjs.io/docs/configuration#testenvironment-string">https://jestjs.io/docs/configuration#testenvironment-string</a> - the official document still said that <code>node</code> is the default environment, but in my case, it’s <code>jsdom</code>, not sure why.</li>
<li><a href="https://github.com/jsdom/jsdom/blob/main/Changelog.md#11120">https://github.com/jsdom/jsdom/blob/main/Changelog.md#11120</a></li>
</ol>
]]></content>
      <categories>
        <category>jest</category>
      </categories>
      <tags>
        <tag>jest</tag>
        <tag>localstorage</tag>
        <tag>mock</tag>
        <tag>jsdom</tag>
      </tags>
  </entry>
  <entry>
    <title>jest-mockXXXOnce</title>
    <url>/2024/09/20/jest-mockxxxonce/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>There are lots of mockXXXOnce functions in Jest API, for example:</p>
<ul>
<li><a href="https://jestjs.io/docs/mock-function-api#mockfnmockimplementationoncefn">mockImplementationOnce</a></li>
<li><a href="https://jestjs.io/docs/mock-function-api#mockfnmockreturnvalueoncevalue">mockReturnValueOnce</a></li>
<li><a href="https://jestjs.io/docs/mock-function-api#mockfnmockresolvedvalueoncevalue">mockResolvedValueOnce</a></li>
</ul>
<p>These functions are only mocked on the first call, all the subsequent calls will use the original implementations or return the original values.</p>
<p>Be careful when using such functions, it may not be what you want, take the following code as example:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  title = <span class="string">&#x27;jest-demo&#x27;</span>;</span><br><span class="line">  lastTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">getIdleTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Date</span>.<span class="title function_">now</span>() - <span class="variable language_">this</span>.<span class="property">lastTime</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">getDuration</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">getIdleTime</span>() &gt; <span class="number">5</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;5+ hours&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">getIdleTime</span>() &gt;= <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;1 ~ 5 hours&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;in an hour&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Here are the test codes, the first one pass test, but the second one will failed. Do you know why?</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">`should return 5+ hours`</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fixture = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">AppComponent</span>);</span><br><span class="line">  <span class="keyword">const</span> component = fixture.<span class="property">componentInstance</span>;</span><br><span class="line">  jest.<span class="title function_">spyOn</span>(component, <span class="string">&#x27;getIdleTime&#x27;</span>).<span class="title function_">mockImplementationOnce</span>(<span class="function">() =&gt;</span> <span class="number">6</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="title function_">getDuration</span>()).<span class="title function_">toBe</span>(<span class="string">&#x27;5+ hours&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">`should return 1 ~ 5 hours`</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fixture = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">AppComponent</span>);</span><br><span class="line">  <span class="keyword">const</span> component = fixture.<span class="property">componentInstance</span>;</span><br><span class="line">  jest.<span class="title function_">spyOn</span>(component, <span class="string">&#x27;getIdleTime&#x27;</span>).<span class="title function_">mockImplementationOnce</span>(<span class="function">() =&gt;</span> <span class="number">4</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="title function_">getDuration</span>()).<span class="title function_">toBe</span>(<span class="string">&#x27;1 ~ 5 hours&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Because the first test case only reach the first <code>if</code> branch in <code>getDuration</code> function, it only call <code>getIdleTime</code> once. So there is no problem.</p>
<p>But the second test case need to reach the second <code>if</code> branch in <code>getDuration</code> function, but the mock only take effect in the first if branch, the second branch will still use the original implementation of <code>getIdleTime</code> function, so the test failed.</p>
<p>To fix this issue, you can use <code>mockImplementation</code> instead of <code>mockImplementationOnce</code> in the second test case.</p>
]]></content>
      <categories>
        <category>jest</category>
      </categories>
      <tags>
        <tag>jest</tag>
        <tag>mock</tag>
      </tags>
  </entry>
  <entry>
    <title>jest-test-async-functions</title>
    <url>/2024/07/16/jest-test-async-functions/</url>
    <content><![CDATA[<h1 id="Test-promise"><a href="#Test-promise" class="headerlink" title="Test promise"></a>Test promise</h1><p>How many ways to test an async function which has a promise with jest in an angular app? suppose you have the following function</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To test this function, you can use the following ways:</p>
<h2 id="1-Using-async-await"><a href="#1-Using-async-await" class="headerlink" title="1. Using async&#x2F;await"></a>1. Using async&#x2F;await</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should return 10&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">getData</span>();</span><br><span class="line">  <span class="title function_">expect</span>(result).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="2-By-returning-promise"><a href="#2-By-returning-promise" class="headerlink" title="2. By returning promise"></a>2. By returning promise</h2><p>In jest, when you return a promise in your test, jest will wait for the promise to resolve. see <a href="https://jestjs.io/docs/asynchronous">here</a> for details.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should return 10&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getData</span>().<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(result).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="3-By-a-done-callback"><a href="#3-By-a-done-callback" class="headerlink" title="3. By a done callback"></a>3. By a <code>done</code> callback</h2><p>This one works fine when promise is resolved. but if the promise is rejected, the test will wait for a maximum of 5 seconds timeout, and then fail. while others will fail immediately.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should return 10&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">getData</span>().<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(result).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="title function_">done</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="4-By-waitForAsync-in-angular"><a href="#4-By-waitForAsync-in-angular" class="headerlink" title="4. By waitForAsync in angular"></a>4. By <code>waitForAsync</code> in angular</h2><p>In angular, you can use <code>waitForAsync</code> to test async functions. Note that you don’t need <code>await</code> in this case.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should return 10&#x27;</span>, <span class="title function_">waitForAsync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">getData</span>().<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(result).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<h2 id="5-Using-fakeAsync-in-angular"><a href="#5-Using-fakeAsync-in-angular" class="headerlink" title="5. Using fakeAsync in angular"></a>5. Using <code>fakeAsync</code> in angular</h2><p>In angular, you can use <code>fakeAsync</code> to test async functions. Note that you don’t need <code>flush</code> or <code>tick</code> in this case.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should return 10&#x27;</span>, <span class="title function_">fakeAsync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">getData</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(result).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">flush</span>();</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<h2 id="6-This-one-not-work"><a href="#6-This-one-not-work" class="headerlink" title="6. This one not work!"></a>6. This one not work!</h2><p>Since we have a <code>setTimeout</code> in the <code>getData</code> function, the following test will fail.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should return 10&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">getData</span>().<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(result).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>if getData() doesn’t have a <code>setTimeout</code>, the above test will work.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Test-observable"><a href="#Test-observable" class="headerlink" title="Test observable"></a>Test observable</h1><p>How many ways to test an async function which returns an observable with jest in an angular app? suppose you have the following function</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Observable</span>(<span class="function">(<span class="params">observer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      observer.<span class="title function_">next</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-Test-with-done-callback"><a href="#1-Test-with-done-callback" class="headerlink" title="1. Test with done callback"></a>1. Test with <code>done</code> callback</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should complete with value 10&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">  component.<span class="title function_">getData</span>().<span class="title function_">subscribe</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(result).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="title function_">done</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="2-Test-by-convert-observable-to-promise"><a href="#2-Test-by-convert-observable-to-promise" class="headerlink" title="2. Test by convert observable to promise"></a>2. Test by convert observable to promise</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should complete with value 10&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">expect</span>(<span class="title function_">firstValueFrom</span>(component.<span class="title function_">getData</span>())).<span class="property">resolves</span>.<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="3-Convert-to-promise-manually"><a href="#3-Convert-to-promise-manually" class="headerlink" title="3. Convert to promise manually"></a>3. Convert to promise manually</h2><p>This one is not recommended, Please use <code>firstValueFrom</code> or <code>lastValueFrom</code> from <code>rxjs</code> to convert observable to promise.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should complete with value 10&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    component.<span class="title function_">getData</span>().<span class="title function_">subscribe</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">expect</span>(result).<span class="title function_">toBe</span>(<span class="number">10</span>);</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>jest</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>angular</tag>
        <tag>jest</tag>
        <tag>async</tag>
      </tags>
  </entry>
  <entry>
    <title>jest-troubleshooting</title>
    <url>/2024/09/02/jest-troubleshooting/</url>
    <content><![CDATA[<h2 id="1-TypeError-configSet-processWithEsbuild-is-not-a-function"><a href="#1-TypeError-configSet-processWithEsbuild-is-not-a-function" class="headerlink" title="1. TypeError: configSet.processWithEsbuild is not a function"></a>1. TypeError: configSet.processWithEsbuild is not a function</h2><p>Solution: Update jest.config.js to use <code>jest-angular-preset</code> instead of <code>ts-preset</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">transform</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;^.+\\.(ts|js|html)$&#x27;</span>: <span class="string">&#x27;ts-jest&#x27;</span>, <span class="comment">// &lt;-- update this line</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">transform</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;^.+\\.(ts|js|html)$&#x27;</span>: <span class="string">&#x27;jest-preset-angular&#x27;</span>, <span class="comment">// &lt;-- update this line</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="2-SyntaxError-xxx-spec-ts-Missing-semicolon-26-42"><a href="#2-SyntaxError-xxx-spec-ts-Missing-semicolon-26-42" class="headerlink" title="2. SyntaxError: xxx.spec.ts: Missing semicolon. (26:42)"></a>2. SyntaxError: xxx.spec.ts: Missing semicolon. (26:42)</h2><p>Look into the error message, the error occurs on this line.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> compiled = fixture.<span class="property">nativeElement</span> <span class="keyword">as</span> <span class="title class_">HTMLElement</span>;</span><br></pre></td></tr></table></figure>
<p>The reason is because <code>as</code>, it’s a keyword in <code>TypeScript</code>, but it’s not a keyword in <code>JavaScript</code>. So the root cause is <code>Jest</code> cannot understand the <code>TypeScript</code> syntax.<br>We need a <code>preset</code> to help <code>Jest</code> to understand <code>TypeScript</code> syntax. The <code>ts-jest</code> is the most popular one. </p>
<ul>
<li>If you project is a pure <code>TypeScript</code> project, see <a href="https://jestjs.io/docs/getting-started#using-typescript">here</a> on how to config <code>ts-jest</code>.</li>
<li>If you project is an <code>Angular</code> project, Please use <code>jest-preset-angular</code>, see <a href="https://zdd.github.io/2023/06/07/Angular-Integrate-Jest-to-Angular-App/">here</a> for details.</li>
</ul>
<h2 id="3-jest-failed-to-cache-transform-results-in-xxx-jest-jest-transform-cache-map-Failure-message-ENOSPC-no-space-left-on-device-write"><a href="#3-jest-failed-to-cache-transform-results-in-xxx-jest-jest-transform-cache-map-Failure-message-ENOSPC-no-space-left-on-device-write" class="headerlink" title="3. jest: failed to cache transform results in: xxx&#x2F;jest&#x2F;jest-transform-cache.map, Failure message: ENOSPC: no space left on device, write"></a>3. jest: failed to cache transform results in: xxx&#x2F;jest&#x2F;jest-transform-cache.map, Failure message: ENOSPC: no space left on device, write</h2><p>This is because Jest is trying to transform itself, so add the following to your <code>jest.config.js</code> file will resolve this issue. see <a href="https://github.com/jestjs/jest/issues/9503">here</a> for details.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">transformIgnorePatterns</span>: [</span><br><span class="line">    <span class="string">&#x27;&lt;rootDir&gt;/node_modules/@babel&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&lt;rootDir&gt;/node_modules/@jest&#x27;</span>,</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jest</category>
      </categories>
      <tags>
        <tag>jest</tag>
        <tag>troubleshooting</tag>
      </tags>
  </entry>
  <entry>
    <title>jest-useFakeTimer</title>
    <url>/2024/04/11/jest-usefaketimer/</url>
    <content><![CDATA[<h1 id="Jest-useFakeTimer"><a href="#Jest-useFakeTimer" class="headerlink" title="Jest useFakeTimer"></a>Jest useFakeTimer</h1><p>Jest’s useFakeTimers function is used to mock timers in JavaScript. This is particularly useful when you have code that uses setTimeout, setInterval, or Date objects, and you want to control the passage of time in your tests.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>To use Jest’s useFakeTimers function, you need to call it before the code you want to test. You can then advance the timers using the advanceTimersByTime function.</p>
<h2 id="Advance-Timers"><a href="#Advance-Timers" class="headerlink" title="Advance Timers"></a>Advance Timers</h2><p>待测试代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">somethingDone = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">doSomethingAfter1Second</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">somethingDone</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test doSomethingAfter1Second&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  jest.<span class="title function_">useFakeTimers</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> component = <span class="keyword">new</span> <span class="title class_">Component</span>();</span><br><span class="line">  component.<span class="title function_">doSomethingAfter1Second</span>();</span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">somethingDone</span>).<span class="title function_">toBe</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  jest.<span class="title function_">advanceTimersByTime</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">somethingDone</span>).<span class="title function_">toBe</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Run-all-timers"><a href="#Run-all-timers" class="headerlink" title="Run all timers"></a>Run all timers</h2><p>Jest.runAllTimers() will run all pending timers. This is useful when you have multiple timers that need to be run in sequence. (Note, it will not work for nested timers)</p>
<p>待测试代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">somethingDone = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">doSomethingAfter1Second</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">somethingDone</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">somethingDone</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// other timers...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test doSomethingAfter1Second&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  jest.<span class="title function_">useFakeTimers</span>();</span><br><span class="line">  component.<span class="title function_">doSomethingAfter1Second</span>();</span><br><span class="line">  jest.<span class="title function_">runAllTimers</span>();</span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">somethingDone</span>).<span class="title function_">toBe</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Run-only-pending-timers"><a href="#Run-only-pending-timers" class="headerlink" title="Run only pending timers"></a>Run only pending timers</h2><p>There are also scenarios where you might have a recursive timer – that is a timer that sets a new timer in its own callback.</p>
<p>Jest.runOnlyPendingTimers() will only run the timers that are currently pending. This is useful when you want to run the timers that are currently in the queue, but not the ones that are scheduled to run in the future.</p>
<p>If you use <code>jest.runAllTimers</code> here, it will run all the timers and end up with an infinite loop.</p>
<p>待测试代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">firstRound = <span class="literal">false</span>;</span><br><span class="line">secondRound = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">infiniteTimerGame</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstRound</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// Schedule the next game in 10 seconds</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">secondRound</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">infiniteTimerGame</span>();</span><br><span class="line">    &#125;, <span class="number">10000</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test infiniteTimerGame&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  jest.<span class="title function_">useFakeTimers</span>();</span><br><span class="line">  component.<span class="title function_">infiniteTimerGame</span>();</span><br><span class="line">  <span class="comment">// This will only run the timers that are currently pending(the outer timer)</span></span><br><span class="line">  jest.<span class="title function_">runOnlyPendingTimers</span>(); </span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">firstRound</span>).<span class="title function_">toBe</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// or jest.runOnlyPendingTimers(); This will run the newly created timer</span></span><br><span class="line">  jest.<span class="title function_">advanceTimersByTime</span>(<span class="number">10000</span>); </span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">secondRound</span>).<span class="title function_">toBe</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Selective-faking"><a href="#Selective-faking" class="headerlink" title="Selective faking"></a>Selective faking</h2><p>Sometimes your code may require to avoid overwriting the original implementation of one or another API. If that is the case, you can use <code>doNotFake</code> option. For example, here is how you could provide a custom mock function for <code>performance.mark()</code> in jsdom environment:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mockPerformanceMark = jest.<span class="title function_">fn</span>();</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">performance</span>.<span class="property">mark</span> = mockPerformanceMark;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;allows mocking `performance.mark()`&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  jest.<span class="title function_">useFakeTimers</span>(&#123;<span class="attr">doNotFake</span>: [<span class="string">&#x27;performance&#x27;</span>]&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(<span class="variable language_">window</span>.<span class="property">performance</span>.<span class="property">mark</span>).<span class="title function_">toBe</span>(mockPerformanceMark);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Restore-timers"><a href="#Restore-timers" class="headerlink" title="Restore timers"></a>Restore timers</h2><p>After you have finished testing, you should restore the original timers using jest.useRealTimers(), This can be done by invoking jest.useRealTimers() in the afterEach hook.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  jest.<span class="title function_">useRealTimers</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>You can also do this at the end of a test:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test doSomethingAfter1Second&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  jest.<span class="title function_">useFakeTimers</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> component = <span class="keyword">new</span> <span class="title class_">Component</span>();</span><br><span class="line">  component.<span class="title function_">doSomethingAfter1Second</span>();</span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">somethingDone</span>).<span class="title function_">toBe</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  jest.<span class="title function_">advanceTimersByTime</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="title function_">expect</span>(component.<span class="property">somethingDone</span>).<span class="title function_">toBe</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  jest.<span class="title function_">useRealTimers</span>(); <span class="comment">// restore to use real timers</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>jest</category>
      </categories>
      <tags>
        <tag>jest</tag>
        <tag>test</tag>
        <tag>timer</tag>
      </tags>
  </entry>
  <entry>
    <title>js-web-worker</title>
    <url>/2025/03/09/js-web-worker/</url>
    <content><![CDATA[<p>今天介绍一下JS中的Web Worker。</p>
]]></content>
      <categories>
        <category>jest</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>web worker</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown</title>
    <url>/2024/04/28/markdown/</url>
    <content><![CDATA[<h2 id="Anchor"><a href="#Anchor" class="headerlink" title="Anchor"></a>Anchor</h2><p>Anchor is a way to jump to a specific location in a page.</p>
<ol>
<li><p>create anchor</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;anchor_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>jump to anchor</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">Link Text</span>](<span class="link">#anchor_name</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Colored-text"><a href="#Colored-text" class="headerlink" title="Colored text"></a>Colored text</h2><p>Markdown itself support a limited features of HTML, so you can use HTML to color text.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span></span>red<span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:blue&quot;</span>&gt;</span></span>blue<span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:green&quot;</span>&gt;</span></span>green<span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>NG0100: Expression has changed after it was checked</title>
    <url>/2024/04/22/ng0100-expression-has-changed-after-it-was-checked/</url>
    <content><![CDATA[<p>不知各位冰雪聪明的朋友们是否遇到过如下错误？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NG0100: Expression has changed after it was checked</span><br></pre></td></tr></table></figure>

<p>大家在第一次遇到这个错误的时候是什么反应呢？反正我是一头雾水，今天我就带大家揭开这个错误的神秘面纱，我现在很困。。。非常不想写，但是我还是要写，因为我是一个有责任心的人。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为什么我的眼里常含泪水？因为我太困了。。。</span><br></pre></td></tr></table></figure>
<p>言归正传！其实从这个错误的描述来看，聪明的你已经发现了，那就是在Angular刚刚进行完一次变更检测，你又更新了某个值。那么，有哪些场景会导致这个错误呢？我们依次来看。</p>
<p>先来看一个最简单的例子：</p>
<h2 id="Update-value-in-ngAfterViewInit"><a href="#Update-value-in-ngAfterViewInit" class="headerlink" title="Update value in ngAfterViewInit"></a>Update value in <code>ngAfterViewInit</code></h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line"><span class="title function_">ngAfterViewInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个例子中，我们在<code>ngAfterViewInit</code>生命周期钩子中更新了<code>count</code>的值，在<code>ngAfterViewInit</code>之前，Angular刚刚进行完一次变更检测，我们在<code>ngAfterViewInit</code>中更新了<code>count</code>的值，此时下一次变更检测还未开始，所以就产生了这个错误。</p>
<p><img src="/../images/update-value-in-ngafterviewinit.png" alt="error"></p>
<p>他来了，他来了，他迈着箭步走来了！<br>我们可以点击红框中的文件链接，查看到底哪个变量出了问题。</p>
<p><img src="/../images/ng0100.png" alt="ng0100"></p>
<p>既然错误已经发生了，那么该如何解决它呢？</p>
<ol>
<li>不要在<code>ngAfterViewInit</code>中更新值。你可以在其他地方更新，比如用户点击了某个按钮，或者做了其他操作时。</li>
<li>使用<code>ChangeDetectorRef</code>手动触发变更检测。既然Angular不让我们在变更检测之后更新值，那么我们就在更新值以后手动触发一次变更检测，如下：<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">cdr</span>: <span class="title class_">ChangeDetectorRef</span></span>) &#123;&#125;</span><br><span class="line"><span class="title function_">ngAfterViewInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">2</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">cdr</span>.<span class="title function_">detectChanges</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用异步更新，比如用<code>setTimeout</code>，<code>Promise</code>等包裹一下更新值的操作。因为Angular内部使用<code>zone.js</code>对这些异步操作进行了hook，并自动加入了更新检测，所以这样做是安全的。<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ngAfterViewInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">2</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">ngAfterViewInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">2</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Use-random-values-in-template-bindings"><a href="#Use-random-values-in-template-bindings" class="headerlink" title="Use random values in template bindings"></a>Use random values in template bindings</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; randomValue &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line"><span class="keyword">get</span> <span class="title function_">randomValue</span>() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个例子中，我们在模板中使用了一个随机值，每次变更检测都会重新计算这个值，所以就会产生这个错误。</p>
<h2 id="Update-parent-component-property-from-child-component"><a href="#Update-parent-component-property-from-child-component" class="headerlink" title="Update parent component property from child component"></a>Update parent component property from child component</h2><p>We declare a name property in parent component and show it on html template.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// parent.component.ts</span></span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- parent.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I&#x27;m Father, my name is: &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-child</span> (<span class="attr">onChangeName</span>)=<span class="string">&quot;changeName($event)&quot;</span> [<span class="attr">age</span>]=<span class="string">30</span> [<span class="attr">name</span>]=<span class="string">&quot;&#x27;Philip&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Then we update the name property in child component.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;!-- child.<span class="property">component</span>.<span class="property">html</span> --&gt;</span><br><span class="line"><span class="meta">@Output</span>() onChangeName = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"><span class="title function_">ngOnInit</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onChangeName</span>.<span class="title function_">emit</span>(<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Run the application, you will see the error in the console.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">core.mjs:9171 ERROR Error: NG0100: ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: <span class="string">&#x27;Tom&#x27;</span>. Current value: <span class="string">&#x27;Jerry&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><h3 id="There-are-several-scenarios-that-produce-this-error"><a href="#There-are-several-scenarios-that-produce-this-error" class="headerlink" title="There are several scenarios that produce this error."></a>There are several scenarios that produce this error.</h3><ol>
<li>value in <code>ngAfterViewInit</code>.</li>
<li>Use random values in template bindings</li>
<li>Update parent component property from child component.</li>
</ol>
<h3 id="How-to-solve-this-problem"><a href="#How-to-solve-this-problem" class="headerlink" title="How to solve this problem"></a>How to solve this problem</h3><ol>
<li>Refactor <code>ngAfterViewInit</code> lifecycle hook.</li>
<li>Use <code>ChangeDetectorRef</code> to manually trigger change detection.</li>
<li>Make getters idempotent.</li>
<li>Make the update async(last resort)</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://angular.io/errors/NG0100">https://angular.io/errors/NG0100</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>话说我现在实在太困了，睁不开眼睛，写这破玩意能涨工资吗？大概率不能！但是老话儿说的好，凡事求个明白！不扯了，睡觉去了。</p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>change detection</tag>
      </tags>
  </entry>
  <entry>
    <title>nest.js - geting start</title>
    <url>/2024/03/10/nest-js-geting-start/</url>
    <content><![CDATA[<h1 id="nest-js-geting-start"><a href="#nest-js-geting-start" class="headerlink" title="nest.js - geting start"></a>nest.js - geting start</h1><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -g @nestjs/cli</span><br></pre></td></tr></table></figure>

<h2 id="Create-a-new-project"><a href="#Create-a-new-project" class="headerlink" title="Create a new project"></a>Create a new project</h2>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nest new project-name</span><br></pre></td></tr></table></figure>

<h2 id="Create-a-new-module"><a href="#Create-a-new-module" class="headerlink" title="Create a new module"></a>Create a new module</h2>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nest g module module-name</span><br></pre></td></tr></table></figure>

<h2 id="Create-a-new-controller"><a href="#Create-a-new-controller" class="headerlink" title="Create a new controller"></a>Create a new controller</h2>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nest g controller controller-name</span><br></pre></td></tr></table></figure>

<h2 id="Create-a-new-service"><a href="#Create-a-new-service" class="headerlink" title="Create a new service"></a>Create a new service</h2>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nest g service service-name</span><br></pre></td></tr></table></figure>

<h2 id="Create-a-new-pipe"><a href="#Create-a-new-pipe" class="headerlink" title="Create a new pipe"></a>Create a new pipe</h2>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nest g pipe pipe-name</span><br></pre></td></tr></table></figure>

<h2 id="Create-a-new-resource"><a href="#Create-a-new-resource" class="headerlink" title="Create a new resource"></a>Create a new resource</h2>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nest g resource resource-name</span><br></pre></td></tr></table></figure>

<h2 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h2><p>Nest.js is database agnostic, you can use any database you want. For example, you can use TypeORM, Sequelize, Mongoose, etc.</p>
<h3 id="Install-TypeORM-with-mysql-driver"><a href="#Install-TypeORM-with-mysql-driver" class="headerlink" title="Install TypeORM with mysql driver"></a>Install TypeORM with mysql driver</h3>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save @nestjs/typeorm typeorm mysql2</span><br></pre></td></tr></table></figure>

<h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><h3 id="Error-Nest-can’t-resolve-dependencies-of-the-SearchHistoryService-Please-make-sure-that-the-argument-“SearchHistoryRepository”-at-index-0-is-available-in-the-SearchHistoryModule-context"><a href="#Error-Nest-can’t-resolve-dependencies-of-the-SearchHistoryService-Please-make-sure-that-the-argument-“SearchHistoryRepository”-at-index-0-is-available-in-the-SearchHistoryModule-context" class="headerlink" title="Error: Nest can’t resolve dependencies of the SearchHistoryService (?). Please make sure that the argument “SearchHistoryRepository” at index [0] is available in the SearchHistoryModule context."></a>Error: Nest can’t resolve dependencies of the SearchHistoryService (?). Please make sure that the argument “SearchHistoryRepository” at index [0] is available in the SearchHistoryModule context.</h3><ol>
<li>如果这个错误发生在一个module中（即不存在Module之间相互引用的情况），那么很可能是Module文件中缺少imports。加上下面这句：</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SearchHistoryService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./search_history.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SearchHistoryController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./search_history.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TypeOrmModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SearchHistory</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./entities/search_history.entity&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">TypeOrmModule</span>.<span class="title function_">forFeature</span>([<span class="title class_">SearchHistory</span>])], <span class="comment">// 这一句不能少！！！这个问题困扰了我一整天！</span></span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">SearchHistoryController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">SearchHistoryService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SearchHistoryModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>如果这个错误发生在module交叉引用中，比如A module中的service引用了B module的service，那么需<br>要：</li>
</ol>
<ul>
<li>在B module中exports需要被引用的service</li>
<li>在A module中imports B module</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A module</span></span><br><span class="line"><span class="attr">imports</span>: [<span class="title class_">BModule</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// B module</span></span><br><span class="line"><span class="attr">exports</span>: [<span class="title class_">BService</span>],</span><br></pre></td></tr></table></figure>

<h3 id="Database-data-was-deleted-after-start-nest-js"><a href="#Database-data-was-deleted-after-start-nest-js" class="headerlink" title="Database data was deleted after start nest.js"></a>Database data was deleted after start nest.js</h3><p>将app.module.ts中的<code>synchronize</code>设置为<code>false</code>，这样每次启动都不会删除数据。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">TypeOrmModule</span>.<span class="title function_">forRoot</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">      <span class="attr">host</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">      <span class="attr">port</span>: <span class="number">1234</span>,</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">      <span class="attr">database</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">      <span class="attr">entities</span>: [xxx],</span><br><span class="line">      <span class="attr">logging</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">synchronize</span>: <span class="literal">false</span>, <span class="comment">// 这里设置为false！！！切记</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">XXXModule</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AppService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nest</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>nest</tag>
        <tag>backend</tag>
        <tag>typeorm</tag>
      </tags>
  </entry>
  <entry>
    <title>misc-2024-09</title>
    <url>/2024/09/18/misc-2024-09/</url>
    <content><![CDATA[<ol>
<li><code>ngc</code> - Angular compiler</li>
<li><code>ngcc</code> - Angular compatible compiler</li>
<li>. <code>fems</code> - <a href="https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/edit?pli=1#heading=h.k0mh3o8u5hx">Flattened ES Module</a>, this is the angular file format for ES Module.</li>
<li>AOT - <a href="https://angular.dev/tools/cli/aot-compiler">Ahead of Time Compilation</a></li>
<li>JIT - <a href="https://radheradhepawan.medium.com/what-is-aot-and-jit-ivy-and-v8-how-work-together-in-angular-f54f3efb8a5f">Just in Time Compilation</a></li>
<li><code>ng add</code> vs <code>npm install</code> - <code>ng add</code> is a schematic that can install packages and run additional code to set up the package. <code>npm install</code> is just installing the package.</li>
<li>Angular HttpClient底层是基于HttpXMLRequest和Jsonp的，所以可以使用<code>XMLHttpRequest</code>的所有方法。</li>
<li>HostBinding - Angular Decorator that declares a DOM property to bind to. is equivalent to [property]&#x3D;”expression”.</li>
<li>Angular如何处理scss文件的？package.json中并没有安装sass对应的包。难道是Angular CLI内置了sass的编译器，所以不需要安装sass包？</li>
<li>:ng-deep和:host如何配合使用</li>
<li>Angular中的ViewEncapsulation是如何实现的？有哪三种封装模式？</li>
<li>Reload page on same url with different parameters<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">appConfig</span>: <span class="title class_">ApplicationConfig</span> = &#123;</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    <span class="title function_">provideRouter</span>(</span><br><span class="line">      appRoutes,</span><br><span class="line">      <span class="title function_">withRouterConfig</span>(&#123; <span class="attr">onSameUrlNavigation</span>: <span class="string">&#x27;reload&#x27;</span> &#125;)</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>如何使用Native Federation?</li>
<li>How to mock service in Unit test(Jest) in Angular? <a href="https://stackoverflow.com/questions/79071748/mock-provided-service-in-standalone-component-in-jest-unit-test">https://stackoverflow.com/questions/79071748/mock-provided-service-in-standalone-component-in-jest-unit-test</a></li>
<li>这种怎么测试？添加到Jest异步测试中。<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dataService</span>.<span class="title function_">fetchData</span>().<span class="title function_">subscribe</span>(<span class="function">(<span class="params"><span class="attr">data</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">products</span> = data;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Generate module based component after Angular 17.<br>Start from Angular 17, Angular CLI use standalone component by default, however, you can still generate module based application with the following command.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng g app my-app --standalone=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<ol start="17">
<li>Why Angular use <code>Decorator</code> instead of <code>Abstract Class</code> for <code>Component</code> and <code>Service</code>?</li>
<li>Android No matching client found for package name ‘com.jiyuzhai.caoquanbei’, update package name in file app&#x2F;src&#x2F;google-services.json to match your application id.</li>
<li>一个Angular文件内可以定义多个组件。</li>
<li>Event loop and browser rendering是如何交互的，也就是Browser rendering是在Event loop哪个阶段进行的？</li>
<li>NW.js和Electron类似，都是用来开发跨平台桌面应用的框架。</li>
<li>Traceur和Babel都是用来将ES6+代码转换为ES5代码的工具。Traceur是Google开发的，Babel是社区开发的。</li>
<li>RxJS 社区中常见的约定：以 $ 结尾的变量通常表示它是一个 Observable（可观察对象）。</li>
<li>Virtual Dom的好处是什么？为什么要使用Virtual Dom？<ol>
<li>performance - 批量更新dom，而不是每次更新都操作dom。</li>
<li>可以跨平台 - 这点很重要，多数人回到虚拟DOM，都说性能，但是跨平台也很重要，虚拟DOM相当于一个中间层，可以对接不同平台，比如Android，IOS，Desktop，Web等。</li>
<li>为什么有些框架不用虚拟DOM还更快？这是因为React&#x2F;Vue等框架的最小单元就是组件，无法做到控件级别的更新，所以只能更新整个组件，这样就会有性能问题。而有些框架是以控件为最小单元，所以可以做到控件级别的更新，这样就会更快。</li>
</ol>
</li>
<li>Angular router可以传参数，用navigationExtras对象中的state.<ol>
<li>在导航时传递参数</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([<span class="string">&#x27;/detail&#x27;</span>], &#123; <span class="attr">state</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125; &#125;);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在接收参数的组件中获取参数</li>
</ol>
 <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> id = history.<span class="property">state</span>.<span class="property">id</span>; <span class="comment">// 不对吧？history 哪来的？</span></span><br></pre></td></tr></table></figure></li>
<li>GraphQL playground.</li>
<li>You should never use function in angular template. - url</li>
<li>Directive composition API - search on angular.dev, this is a new feature in angular 15, why this is useful?</li>
<li>javascript, generator functions</li>
<li><code>default</code> import syntax in ES6.</li>
<li><code>WeakMap</code> is not iterable, why? <code>TypedArray</code> is not array. </li>
<li>Angular <code>BehaviorSubject</code> vs <code>Subject</code> - <code>BehaviorSubject</code> needs an initial value, <code>Subject</code> does not.</li>
<li>Angular <code>aot</code> can be enabled&#x2F;disabled in <code>angular.json</code> file.</li>
<li><code>it.each</code> in <code>Jest</code> - This need real example from project.</li>
<li>Why Jest need transformer? Because Jest only understand JavaScript, so it needs transformer to transform other file types to JavaScript. for example ts -&gt; js, tsx&#x2F;jsx -&gt; js vue&#x2F;angular -&gt; js, by default Jest use babel-jest as transformer, you can also use angular-jest-preset for Angular project.</li>
<li>Proxy.revocable(target, handler).</li>
<li>What is cross-site request forgery (CSRF) attack? How to prevent it?</li>
<li>Website defacement - what’s this?</li>
<li>steps to use web component.</li>
<li>Grid layout.</li>
<li><code>HTML</code> page will always show even it contains errors, the console won’t display html error, it only show javascript errors.</li>
<li>Html中<a>标签的样式按照LVHA的顺序来写，这样可以避免样式覆盖的问题。<ol>
<li><code>:link</code> - 未访问的链接</li>
<li><code>:visited</code> - 已访问的链接</li>
<li><code>:hover</code> - 鼠标悬停</li>
<li><code>:active</code> - 激活状态</li>
</ol>
</li>
<li>css function <code>env</code> - <code>env()</code> 函数可以用来获取环境变量的值，比如获取视口的宽度。</li>
<li>css <code>@support</code> operator - <code>@supports</code> 操作符用来检测浏览器是否支持某个CSS属性。</li>
<li>video tag: <code>source</code> vs <code>src</code> - What’s the differences?</li>
<li>CSS attributes selectors - <code>^</code>, <code>$</code>, <code>*</code>, <code>~</code> - What’s the differences? [attr*&#x3D;value] vs [attr~&#x3D;value].</li>
<li>compare in javascript:<ol>
<li>&#x3D;&#x3D;</li>
<li>&#x3D;&#x3D;&#x3D;</li>
<li>Object.is</li>
<li>SameValueZero - <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness">MDN</a></li>
</ol>
</li>
<li>chunk load error: <a href="https://rollbar.com/blog/javascript-chunk-load-error/">https://rollbar.com/blog/javascript-chunk-load-error/</a></li>
<li>drag and drop:<ol>
<li><a href="https://material.angular.io/cdk/drag-drop/overview">https://material.angular.io/cdk/drag-drop/overview</a></li>
<li><a href="https://github.com/swimlane/ngx-dnd">https://github.com/swimlane/ngx-dnd</a></li>
<li><a href="https://packery.metafizzy.co/">https://packery.metafizzy.co/</a></li>
</ol>
</li>
<li>What’s the differences between <code>markForCheck()</code> and <code>detectChanges()</code> in Angular? - stackoverflow</li>
<li>SASS vs SCSS<ol>
<li>SASS - Syntactically Awesome Style Sheets</li>
<li>SCSS - Sassy CSS</li>
<li>SASS is the older syntax, it use indentation to define blocks, SCSS is the newer syntax, it use curl braces to define</li>
</ol>
</li>
<li>如何查看JS编译后的代码？比如变量提升后的代码，Google的V8引擎可以实现这个功能。而Node底层也是V8，所以用Node命令可以查看，但是输出的代码不是很直观。需要进一步研究，参考资料：<a href="https://medium.com/@drag13dev/https-medium-com-drag13dev-how-to-get-javascript-bytecode-from-nodejs-7bd396805d30">https://medium.com/@drag13dev/https-medium-com-drag13dev-how-to-get-javascript-bytecode-from-nodejs-7bd396805d30</a></li>
<li>JavaScript中有些时候使用new和不使用new结果完全不同，比如：<ol>
<li>Date() vs new Date(): Date()返回的是字符串，new Date()返回的是Date对象。</li>
<li>String() vs new String(): String()返回的是字符串，new String()返回的是String对象。- 在这里， 不加new其实相当于类型转换</li>
<li>Number() vs new Number(): Number()返回的是数字，new Number()返回的是Number对象。- 同上</li>
<li>注意：对于Array，加不加new，结果一样，都是数组。</li>
</ol>
</li>
<li><code>Harmony Import/Export</code> - 其实就是ES6中的Import&#x2F;Export，这是ES6的模块化规范，可以用来导入导出模块。参考这里：<a href="https://en.wikipedia.org/wiki/ECMAScript_version_history#4th_Edition_(abandoned)">https://en.wikipedia.org/wiki/ECMAScript_version_history#4th_Edition_(abandoned)</a> 和这里：<a href="https://stackoverflow.com/questions/52871611/what-is-harmony-and-what-are-harmony-exports">https://stackoverflow.com/questions/52871611/what-is-harmony-and-what-are-harmony-exports</a></li>
<li>Immutable.js - 一个用来处理不可变数据的库，可以用来提高性能。参考这里：<a href="https://immutable-js.com/">https://immutable-js.com/</a></li>
<li>性能优化好文 - <a href="https://zhuanlan.zhihu.com/p/41292532">https://zhuanlan.zhihu.com/p/41292532</a></li>
<li>html中的checkbox&#x2F;radio button默认的样式由浏览器决定，不是十分好定制化，如果只是更改颜色的话，可以使用accent-color属性，如果要更改大小的话，可能就需要其他手段了。比如这里：<a href="https://stackoverflow.com/questions/4148499/how-to-style-a-checkbox-using-css/69164710#69164710">https://stackoverflow.com/questions/4148499/how-to-style-a-checkbox-using-css/69164710#69164710</a></li>
<li>有哪些样式是CSS改变不了的？<ol>
<li>select控件中option的高亮色，就是鼠标划过每个选项时的高亮色，这个一般是蓝色，且不能更改。如果想改，那么需要使用ul&#x2F;li模拟select控件。</li>
</ol>
</li>
<li>浏览器如何处理双击，双击的时候，浏览器会选取最近的能选到的文本，所以随便打开一个网站，找个空白处双击一下，你会发现有文本被选中了。如何禁止这种行为呢？<br>以下方法会禁止所有选中文本的行为，包括用户主动选择的，要找到最近的node，手动设置一下。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">disableTextSelection</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;selectstart&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> e.<span class="title function_">preventDefault</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx-beginner-guide-for-windows</title>
    <url>/2024/04/27/nginx-beginner-guide-for-windows/</url>
    <content><![CDATA[<h1 id="Install-Nginx-on-Windows"><a href="#Install-Nginx-on-Windows" class="headerlink" title="Install Nginx on Windows"></a>Install Nginx on Windows</h1><ol>
<li>Download Nginx from <a href="https://nginx.org/en/download.html">Nginx official website</a>.</li>
<li>Extract the downloaded file to a folder, for example, <code>C:\nginx</code>.</li>
</ol>
<h2 id="Build-your-app"><a href="#Build-your-app" class="headerlink" title="Build your app"></a>Build your app</h2><ol>
<li>Build your Angular app using the following command: This will generate the <code>dist</code> folder under your project root. for example, <code>D:\codes\angular\angular-router</code>.<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng build --prod</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Setup-Nginx"><a href="#Setup-Nginx" class="headerlink" title="Setup Nginx"></a>Setup Nginx</h2><ol>
<li>Open a command prompt as an administrator.</li>
<li>Navigate to the Nginx directory.</li>
<li>Open the <code>conf/nginx.conf</code> file in a text editor.</li>
<li>Find the <code>http</code> | <code>server</code> block and add the following line:<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> D:/codes/angular/angular-router/dist;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Start-Nginx"><a href="#Start-Nginx" class="headerlink" title="Start Nginx"></a>Start Nginx</h2><ol>
<li>Open a command prompt as an administrator.</li>
<li>Navigate to the Nginx directory.</li>
<li>Start Nginx using the following command:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start nginx</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Restart-Nginx"><a href="#Restart-Nginx" class="headerlink" title="Restart Nginx"></a>Restart Nginx</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<h2 id="Stop-Nginx"><a href="#Stop-Nginx" class="headerlink" title="Stop Nginx"></a>Stop Nginx</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure>

<h2 id="Check-Nginx-configuration"><a href="#Check-Nginx-configuration" class="headerlink" title="Check Nginx configuration"></a>Check Nginx configuration</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure>
<p>If the configuration is valid, you will see a message like this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx: the configuration file C:/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file C:/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>node-misc</title>
    <url>/2024/12/15/node-misc/</url>
    <content><![CDATA[<h2 id="指定前端项目的Node版本"><a href="#指定前端项目的Node版本" class="headerlink" title="指定前端项目的Node版本"></a>指定前端项目的Node版本</h2><p>可以在<code>package.json</code>中指定前端项目的Node版本，这样其他人在安装依赖时就会自动安装指定版本的Node。</p>
<p>以下配置要求Node版本大于等于14.0.0。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;engines&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt;=14.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>也可以指定更加复杂的版本：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;engines&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^18.13.0 || ^20.9.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>如果Node版本不符合要求，那么在运行<code>npm install</code>时会报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error angular-realworld@0.0.0: The engine <span class="string">&quot;node&quot;</span> is incompatible with this module. Expected version <span class="string">&quot;^18.13.0 || ^20.9.0&quot;</span>. Got <span class="string">&quot;22.12.0&quot;</span></span><br></pre></td></tr></table></figure>
<p>关于版本好，这里多说几句，Node.js采用的是SemVer规范，即Semantic Versioning，版本号由三部分组成：<code>major.minor.patch</code>，例如<code>20.0.0</code>。</p>
<ul>
<li><code>^</code> - 表示锁定主版本号，例如<code>^20.0.0</code>表示只能更新到<code>20.x.x</code>版本。</li>
<li><code>~</code> - 表示锁定主&#x2F;次版本号，例如<code>~20.9.0</code>表示只能更新到<code>20.9.x</code>版本。</li>
</ul>
]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>misc</tag>
        <tag>node version</tag>
      </tags>
  </entry>
  <entry>
    <title>node-npm-command</title>
    <url>/2025/04/06/node-npm-command/</url>
    <content><![CDATA[<h1 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h1><h2 id="1-npm-install-error"><a href="#1-npm-install-error" class="headerlink" title="1. npm install error"></a>1. npm install error</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code ERESOLVE</span><br><span class="line">npm ERR! ERESOLVE could not resolve</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! While resolving: karma-jasmine-html-reporter@1.6.0</span><br><span class="line">npm ERR! Found: jasmine-core@3.6.0</span><br></pre></td></tr></table></figure>
<p>This is caused by dependency conflict, you can try to install the package with <code>--force</code> or <code>--legacy-peer-deps</code> flag. see <a href="https://stackoverflow.com/questions/64573177/unable-to-resolve-dependency-tree-error-when-installing-npm-packages">here</a> for more details.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --force</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --legacy-peer-deps</span><br></pre></td></tr></table></figure>

<h2 id="2-List-global-packages"><a href="#2-List-global-packages" class="headerlink" title="2. List global packages"></a>2. List global packages</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm list -g</span><br><span class="line">npm list -g --depth 0 <span class="comment"># list all global packages without dependencies</span></span><br></pre></td></tr></table></figure>

<h2 id="3-Find-where-nodejs-was-installed-Windows-OS"><a href="#3-Find-where-nodejs-was-installed-Windows-OS" class="headerlink" title="3. Find where nodejs was installed(Windows OS)"></a>3. Find where nodejs was installed(Windows OS)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">where</span> node</span><br></pre></td></tr></table></figure>

<h2 id="4-Find-outdated-packages"><a href="#4-Find-outdated-packages" class="headerlink" title="4. Find outdated packages"></a>4. Find outdated packages</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm outdated</span><br></pre></td></tr></table></figure>

<h2 id="5-Update-all-packages"><a href="#5-Update-all-packages" class="headerlink" title="5. Update all packages"></a>5. Update all packages</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm update</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>npm</tag>
        <tag>command</tag>
        <tag>useful</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs-event-loop</title>
    <url>/2025/03/02/nodejs-event-loop/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Node.js中的事件循环和javascript中的事件循环是不同的，Node.js中的队列更多，算法更复杂，今天我们来一探究竟。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick">https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick</a></li>
</ol>
]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>event loop</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>npm-install-production</title>
    <url>/2024/09/28/npm-install-production/</url>
    <content><![CDATA[<p>The <code>npm install --production</code> command is used to install only the dependencies listed under the <code>dependencies</code> section in the <code>package.json</code> file, excluding the <code>devDependencies</code>. This is typically used in production environments where you want to avoid installing unnecessary development tools and libraries.</p>
<p>Here is a brief explanation of when and why you might use <code>npm install --production</code>:</p>
<ol>
<li><p><strong>Production Deployment</strong>: When deploying an application to a production environment, you often want to minimize the size of the deployment package and reduce the number of installed packages to only those necessary for running the application. This helps in improving performance and security.</p>
</li>
<li><p><strong>Server Environments</strong>: In server environments where the application is running, you generally do not need development tools like testing frameworks, linters, or build tools. Using <code>npm install --production</code> ensures that only the essential packages are installed.</p>
</li>
<li><p><strong>Docker Images</strong>: When building Docker images for your application, using <code>npm install --production</code> can help create smaller and more efficient images by excluding development dependencies.</p>
</li>
</ol>
<p>Example usage:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install --production</span><br></pre></td></tr></table></figure>

<p>This command will read the <code>package.json</code> file and install only the packages listed under <code>dependencies</code>, ignoring those under <code>devDependencies</code>.</p>
]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>dependency</tag>
        <tag>devdependencies</tag>
      </tags>
  </entry>
  <entry>
    <title>nx commands</title>
    <url>/2023/11/07/nx-commands/</url>
    <content><![CDATA[<h1 id="Generate-app"><a href="#Generate-app" class="headerlink" title="Generate app"></a>Generate app</h1><p>Take <code>Angular</code> as an example, first, install angular <a href="https://nx.dev/plugin-registry">plugin</a> for Nx.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nx add @nx/angular</span><br></pre></td></tr></table></figure>

<p>Then, generate an app.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nx g @nx/angular:app appName</span><br></pre></td></tr></table></figure>

<h1 id="Generate-library"><a href="#Generate-library" class="headerlink" title="Generate library"></a>Generate library</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nx g @nx/angular:lib libName</span><br></pre></td></tr></table></figure>

<h1 id="Generate-Angular-component"><a href="#Generate-Angular-component" class="headerlink" title="Generate Angular component"></a>Generate Angular component</h1><p>The following command generate a angular component for project <code>my-app</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nx generate @nx/angular:component my-component --project=my-app</span><br></pre></td></tr></table></figure>
<p>Note that <code>--project</code> is deprecated and will be removed in Nx v20, use <code>--directory</code> instead.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nx generate @nx/angular:component my-component --directory=apps/my-app/src/app</span><br></pre></td></tr></table></figure>
<p>The value of <code>--directory</code> is relative to the root of the project.</p>
<p><strong>Note</strong> –directory is only used for <code>component</code>, to generate <code>service</code> in Angular, you can still use <code>--project</code>. </p>
<p>If above commands not work, use the following command. where <code>header</code> is the name of the component, the first one is folder name.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nx generate @nx/angular:component apps/yanzhenqingshufa/src/app/layout/header/header</span><br></pre></td></tr></table></figure>

<h1 id="Show-affected-apps"><a href="#Show-affected-apps" class="headerlink" title="Show affected apps"></a>Show affected apps</h1><p>nx v15</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nx affected:apps</span><br></pre></td></tr></table></figure>
<p>nx v16</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nx print-affected --<span class="built_in">type</span>=app --<span class="keyword">select</span>=projects</span><br></pre></td></tr></table></figure>
<p>nx v17+</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nx show projects --affected</span><br><span class="line">nx affected --graph -t build</span><br><span class="line">nx graph --affected</span><br></pre></td></tr></table></figure>
<p>If there is no affected apps, <code>nx print-affected</code> will show the following output. look at the <code>projects</code> property, its empty, which means there is no affected apps.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;tasks&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;projects&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;projectGraph&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;nodes&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;content-templates&quot;</span>,</span><br><span class="line">      <span class="string">&quot;todos-e2e&quot;</span>,</span><br><span class="line">      <span class="string">&quot;todos&quot;</span>,</span><br><span class="line">      <span class="string">&quot;data&quot;</span>,</span><br><span class="line">      <span class="string">&quot;api&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ui&quot;</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If your apps&#x2F;libs was created manually, you have to make sure that there is a file <code>project.json</code> under the root of your app&#x2F;lib, and have the following content at least.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;content-templates&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;projectType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="Show-graph"><a href="#Show-graph" class="headerlink" title="Show graph"></a>Show graph</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nx dep-graph</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nx</category>
      </categories>
      <tags>
        <tag>monorepo</tag>
        <tag>angular</tag>
        <tag>nx</tag>
      </tags>
  </entry>
  <entry>
    <title>nx-config</title>
    <url>/2025/01/20/nx-config/</url>
    <content><![CDATA[<h1 id="Generate-project-with-default-styling-file-extension"><a href="#Generate-project-with-default-styling-file-extension" class="headerlink" title="Generate project with default styling file extension"></a>Generate project with default styling file extension</h1><p>Nx based monorepo can use file <code>nx.json</code> to config project generate options for specific frameworks.<br>Take the following config as an example, when creating angular applications, nx will use <code>scss</code> as file extension for style files by default. If you want the terminal prompt you during the generation, remove the <code>style</code> option from the config.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;generators&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@nx/react&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;application&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;less&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;linter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bundler&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;babel&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;less&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;library&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;less&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;linter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@nx/angular:application&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;scss&quot;</span><span class="punctuation">,</span> <span class="comment">// &lt;--- use scss as default style file</span></span><br><span class="line">    <span class="attr">&quot;linter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unitTestRunner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;e2eTestRunner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cypress&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@nx/angular:library&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;linter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unitTestRunner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@nx/angular:component&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;scss&quot;</span> <span class="comment">// &lt;--- use scss as default style file</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@nx/web:application&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;css&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unitTestRunner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;e2eTestRunner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nx</category>
      </categories>
      <tags>
        <tag>nx</tag>
      </tags>
  </entry>
  <entry>
    <title>nx-library-types</title>
    <url>/2024/09/19/nx-library-types/</url>
    <content><![CDATA[<h2 id="Nx-Library-Types-by-functionality"><a href="#Nx-Library-Types-by-functionality" class="headerlink" title="Nx Library Types by functionality"></a>Nx Library Types by functionality</h2><h3 id="Feature-library"><a href="#Feature-library" class="headerlink" title="Feature library"></a>Feature library</h3><p>此类library主要负责和业务相关的组件和页面等等。</p>
<h3 id="UI-library"><a href="#UI-library" class="headerlink" title="UI library"></a>UI library</h3><p>此类Library主要是负责和UI相关的功能。</p>
<h3 id="Data-access-library"><a href="#Data-access-library" class="headerlink" title="Data access library"></a>Data access library</h3><p>此类library主要负责和数据相关的功能，比如和后端API交互，数据处理等。</p>
<h3 id="Utility-library"><a href="#Utility-library" class="headerlink" title="Utility library"></a>Utility library</h3><p>此类library主要负责工具和辅助功能，比如一些通用的函数，服务等。</p>
<h2 id="Nx-library-types-by-buildable-and-publishable"><a href="#Nx-library-types-by-buildable-and-publishable" class="headerlink" title="Nx library types by buildable and publishable"></a>Nx library types by buildable and publishable</h2><h3 id="Workspace-library-Normal-library"><a href="#Workspace-library-Normal-library" class="headerlink" title="Workspace library(Normal library)"></a>Workspace library(Normal library)</h3><p>Create without any options, it’s a normal library.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nx g @nx/angular:lib libName</span><br></pre></td></tr></table></figure>
<ul>
<li>No <code>ng-packagr</code> file generated.</li>
<li>No <code>package.json</code> file generated .</li>
<li>No <code>targets/build</code> section in <code>project.json</code> file.</li>
</ul>
<p>This type of libraries is intended to be used within the monorepo. It was imported by apps or other libraries in the same monorepo. It can’t be builded or published independently.</p>
<h3 id="Buildable-library"><a href="#Buildable-library" class="headerlink" title="Buildable library"></a>Buildable library</h3><p>Create by adding <code>buildable</code> option.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nx g @nx/angular:lib libName --buildable</span><br></pre></td></tr></table></figure>
<ul>
<li>Add <code>ng-packagr</code> file to root of the library.</li>
<li>Add <code>package.json</code> file to root of the library.</li>
<li><code>name</code> property in <code>package.json</code> is the <code>libName</code>.</li>
<li>Add <code>targets/build</code> section in <code>project.json</code> file.</li>
<li>Executor of build is: <code>&quot;executor&quot;: &quot;@nx/angular:ng-packagr-lite&quot;</code></li>
</ul>
<p><code>Buildable</code> libraries are similar to “publishable libraries” described above. Their scope however is not to distribute or publish them to some external registry. Thus they might not be optimized for bundling and distribution.</p>
<p><code>Buildable</code> libraries are mostly used for producing some pre-compiled output that can be directly referenced from an Nx workspace application without the need to again compile it. A typical scenario is to leverage Nx’s incremental building capabilities.</p>
<h3 id="Publishable-library"><a href="#Publishable-library" class="headerlink" title="Publishable library"></a>Publishable library</h3><p>Create by adding <code>publishable</code> and <code>importPath</code> option. <code>importPath</code> is the path that the library will be imported from, will be used as name of the package.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nx g @nx/angular:lib libName --publishable --importPath=@myorg/libName</span><br></pre></td></tr></table></figure>
<ul>
<li>Add <code>ng-packagr</code> file to root of the library.</li>
<li>Add <code>package.json</code> file to root of the library.</li>
<li><code>name</code> property in <code>package.json</code> is the <code>importPath</code>.</li>
<li>Add <code>targets/build</code> section in <code>project.json</code> file.</li>
<li>Executor of build is: <code>&quot;executor&quot;: &quot;@nx/angular:package&quot;</code></li>
</ul>
<p><code>Publishable</code> libraries is intended to be published outside of the monorepo, and can be imported by other projects.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://nx.dev/concepts/decisions/project-dependency-rules">https://nx.dev/concepts/decisions/project-dependency-rules</a></li>
<li><a href="https://nx.dev/concepts/buildable-and-publishable-libraries">https://nx.dev/concepts/buildable-and-publishable-libraries</a></li>
</ul>
]]></content>
      <categories>
        <category>nx</category>
      </categories>
      <tags>
        <tag>nx</tag>
        <tag>library</tag>
        <tag>buildable</tag>
        <tag>publishable</tag>
      </tags>
  </entry>
  <entry>
    <title>react-analyze-bundle-size</title>
    <url>/2024/05/06/react-analyze-bundle-size/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Use source map explorer to analyze the bundle size of a React app.</p>
<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><h3 id="1-Install-source-map-explorer"><a href="#1-Install-source-map-explorer" class="headerlink" title="1. Install source-map-explorer"></a>1. Install source-map-explorer</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g source-map-explorer</span><br><span class="line">yarn global add source-map-explorer</span><br></pre></td></tr></table></figure>

<h3 id="Turn-on-source-map"><a href="#Turn-on-source-map" class="headerlink" title="Turn on source map"></a>Turn on source map</h3><p>In <code>package.json</code>, add the following line to the <code>build</code> script:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GENERATE_SOURCEMAP=true react-scripts build&quot;</span></span><br></pre></td></tr></table></figure>

<p>If this doesn’t work, open environment config file <code>.env.production</code> and add the following line:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GENERATE_SOURCEMAP=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>Don’t forget to set it to false after you finish analyzing the bundle size. source map should never be enabled in production.</p>
<h3 id="2-Build-the-React-app"><a href="#2-Build-the-React-app" class="headerlink" title="2. Build the React app"></a>2. Build the React app</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br><span class="line">yarn build</span><br></pre></td></tr></table></figure>

<h3 id="3-Analyze-the-bundle-size"><a href="#3-Analyze-the-bundle-size" class="headerlink" title="3. Analyze the bundle size"></a>3. Analyze the bundle size</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">source-map-explorer build/static/js/*.js</span><br></pre></td></tr></table></figure>
<p>The output will show you the size of each file in the bundle, and the size of each dependency.</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>bundle</tag>
        <tag>performance</tag>
      </tags>
  </entry>
  <entry>
    <title>React-interview</title>
    <url>/2025/02/22/react-interview/</url>
    <content><![CDATA[<h2 id="React-Fiber架构"><a href="#React-Fiber架构" class="headerlink" title="React Fiber架构"></a>React Fiber架构</h2><p>React的渲染可以分为两个主要阶段：Reconciler(协调阶段)，和Committer(提交阶段)。</p>
<h3 id="Reconciler-协调阶段"><a href="#Reconciler-协调阶段" class="headerlink" title="Reconciler(协调阶段)"></a>Reconciler(协调阶段)</h3><p>工作内容： 构建Fiber树，比较新旧虚拟DOM的不同之处，生成一个变更记录，即一系列需要对真实DOM进行的操作。此阶段的特点：异步，并发，可中断。如果执行过程中有更高优先级的任务来了，那么会中断当前Reconciler的工作，转而处理更重要的任务。</p>
<h3 id="Committer阶段"><a href="#Committer阶段" class="headerlink" title="Committer阶段"></a>Committer阶段</h3><p>工作内容：将Reconciler阶段生成的变更记录应用到真实的DOM上。此阶段是同步的，不可中断的。<br>工作阶段：</p>
<ol>
<li>Dom更新前 - useEffect在这个阶段执行，通过微任务队列异步执行（页面渲染后执行）</li>
<li>Dom更新 - 执行真实DOM的更新</li>
<li>Dom更新后 - useLayoutEffect在这个阶段执行，同步（页面渲染前执行）</li>
</ol>
<p>注意页面的渲染和JS的执行是互斥的，只有JS代码执行完，页面才能渲染，这就是<code>useLayoutEffect</code>的作用，可以在页面渲染前执行一些操作，比如调整布局。</p>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>Fiber架构中采用<code>FiberNod</code>e和<code>FiberTree</code>来描述虚拟DOM树。<code>FiberNode</code>是一个双向链表，每个节点都有一个指向父节点的指针，一个指向子节点的指针，一个指向兄弟节点的指针。<code>FiberTree</code>是一个树形结构，由<code>FiberNode</code>组成。</p>
<h2 id="React-diff算法"><a href="#React-diff算法" class="headerlink" title="React diff算法"></a>React diff算法</h2><h3 id="树比较"><a href="#树比较" class="headerlink" title="树比较"></a>树比较</h3><p>只做同层级结点比较，如果结点不存在了，则直接删除。不会继续比较其子树。这避免了夸层级移动操作，对于跨层级移动操作，相当于删除再重建。同层级结点移动呢？可以处理。</p>
<h3 id="组件比较"><a href="#组件比较" class="headerlink" title="组件比较"></a>组件比较</h3><p>只做同类型的组件比较，比如div和div比较，p和p比较，只有组件的类型相同，才进入子树进行深层次比较。如果类型不一致，则删除重新创建。</p>
<h3 id="元素比较"><a href="#元素比较" class="headerlink" title="元素比较"></a>元素比较</h3><p>对于同层级的元素结点。</p>
<ol>
<li>元素在新集合中，但是不在原来的集合中，属于全新的结点，对集合进行插入操作。</li>
<li>元素在原来的集合中，但是不在新的集合中，则删除该元素。</li>
<li>元素在新集合中，也在原来的集合中，且元素并未更新，只是位置发生了变化，则进行移动操作。</li>
</ol>
<h3 id="双缓冲策略："><a href="#双缓冲策略：" class="headerlink" title="双缓冲策略："></a>双缓冲策略：</h3><ol>
<li>current树负责呈现当前页面，而所有的更新都由workInProgress树来承接，当变更完成需要渲染时，将workInProgress树变成current树。</li>
</ol>
<h2 id="setState是同步还是异步？"><a href="#setState是同步还是异步？" class="headerlink" title="setState是同步还是异步？"></a><code>setState</code>是同步还是异步？</h2><p>这个问题需要区分开来看，在React18之前，如果<code>executionContext</code>被赋值了，代表该任务已经进入React调度流程中，此时React会对该任务进行异步处理（批量处理），如果<code>executionContext</code>没有被赋值，代表该任务还没有进入React调度流程，此时React会对该任务进行同步处理。想<code>setTimeout</code>, <code>setInterval</code>等函数都是不会进入React调度流程的，所以是同步处理。而合成事件都会进入到React调度流程中，所以会被异步处理。在React18后，如果使用<code>createRoot</code>创建根节点，那么<code>setState</code>会变成同步的。但是如果还是使用传统的<code>render</code>方式，那么和React18之前的处理逻辑一样。</p>
<h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><p>虚拟DOM是React的核心概念之一，它是一个轻量级的JavaScript对象，用来描述真实DOM的层次结构。React通过比较新旧虚拟DOM的差异，然后只更新需要更新的部分，从而提高页面的渲染性能。</p>
<p>虚拟DOM的量大作用：</p>
<ol>
<li>跨平台，因为虚拟DOM只是一个数据结构，所以可以在不同平台上使用，比如浏览器，移动端App等。这是虚拟DOM的重要特性，很多人没有意识到。</li>
<li>高性能，通过比较新旧虚拟DOM的差异，只更新需要更新的部分，减少了对真实DOM的操作，提高了页面的渲染性能。</li>
</ol>
<h2 id="React中嵌套组件的渲染顺序，生命周期，销毁顺序。"><a href="#React中嵌套组件的渲染顺序，生命周期，销毁顺序。" class="headerlink" title="React中嵌套组件的渲染顺序，生命周期，销毁顺序。"></a>React中嵌套组件的渲染顺序，生命周期，销毁顺序。</h2><h3 id="渲染顺序"><a href="#渲染顺序" class="headerlink" title="渲染顺序"></a>渲染顺序</h3><p>当React开始渲染过程时，它首先从上到下、从父到子地渲染组件树。这意味着父组件会先于其子组件进行渲染。一旦父组件完成它的渲染（包括执行相关的生命周期方法），React会递归地进入该父组件的子组件，并按照同样的方式渲染它们。</p>
<h3 id="生命周期顺序"><a href="#生命周期顺序" class="headerlink" title="生命周期顺序"></a>生命周期顺序</h3><ul>
<li>首次挂载时：<ul>
<li>父组件：constructor -&gt; static getDerivedStateFromProps -&gt; render -&gt; 子组件重复相同流程 -&gt; 子组件componentDidMount -&gt; 父组件componentDidMount</li>
</ul>
</li>
<li>更新时（由于props变化或state变化）：<ul>
<li>父组件：static getDerivedStateFromProps -&gt; shouldComponentUpdate -&gt; render -&gt; 子组件重复相同流程 -&gt; 子组件componentDidUpdate -&gt; 父组件componentDidUpdate</li>
</ul>
</li>
</ul>
<h3 id="销毁顺序"><a href="#销毁顺序" class="headerlink" title="销毁顺序"></a>销毁顺序</h3><p>当组件被卸载时，React会以相反的顺序卸载组件树中的组件。也就是说，React首先卸载最深层的子组件，然后逐步向上，直到根组件。</p>
<h2 id="受控组件和非受控组件"><a href="#受控组件和非受控组件" class="headerlink" title="受控组件和非受控组件"></a>受控组件和非受控组件</h2><p>受控组件是指组件的值是由React的state来控制的，比如下面的input，其中关键一句就是<code>value=&#123;this.state.value&#125;</code> 这样就把input的value和组件的state关联起来了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NameForm</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">value</span>: <span class="string">&#x27;&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleSubmit</span> = <span class="variable language_">this</span>.<span class="property">handleSubmit</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">value</span>: event.<span class="property">target</span>.<span class="property">value</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleSubmit</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;A name was submitted: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">value</span>);</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Name:</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义hook"><a href="#自定义hook" class="headerlink" title="自定义hook"></a>自定义hook</h2><h3 id="模拟componentDidMount"><a href="#模拟componentDidMount" class="headerlink" title="模拟componentDidMount"></a>模拟<code>componentDidMount</code></h3><p>当我们为<code>useEffect</code>的依赖传递空数组时，它只会在组件初始化时执行一次，这就相当于<code>componentDidMount</code>。注意，这个只是粗略的模拟，因为<code>useEffect</code>是异步执行，且时机是在浏览器渲染完成后，而<code>componentDidMount</code>是在浏览器渲染前同步执行。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useEffect&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useMount = (<span class="function">(<span class="params">callBack</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">callBack</span>();</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="模拟componentDidUpdate"><a href="#模拟componentDidUpdate" class="headerlink" title="模拟componentDidUpdate"></a>模拟<code>componentDidUpdate</code></h3><p>componentDidUpdate是在每次组件的state或props更新是调用的，但是组件mount的时候不调用，所以我们需要一个变量来标志组件是否是第一次加载，这里我们使用<code>useRef</code>来标志组件是否是第一次加载。因为<code>useRef</code>包裹的值在整个组件声明周期内引用不变（有点像静态变量），并且这个值改变后不会触发组件的重新渲染。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">useUpdate</span> = (<span class="params">callback, deps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> isMounted = <span class="title function_">useRef</span>(<span class="literal">false</span>); <span class="comment">// 🚩 关键点</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isMounted.<span class="property">current</span>) &#123;</span><br><span class="line">      <span class="title function_">callback</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      isMounted.<span class="property">current</span> = <span class="literal">true</span>; <span class="comment">// 挂载后切换标识</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, deps);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>需要注意的是，如果在React18+严格模式下运行该函数，还是会执行一次，因为React18+的严格模式会执行两次。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)).<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">StrictMode</span>&gt;</span> // 严格模式，去掉即可得到正确结果</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">StrictMode</span>&gt;</span></span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="模拟componentWillUnmount"><a href="#模拟componentWillUnmount" class="headerlink" title="模拟componentWillUnmount"></a>模拟<code>componentWillUnmount</code></h3><p>这个就比较简单了，<code>componentWillUnmount</code>是在组件卸载时调用的，我们可以使用<code>useEffect</code>的返回值来模拟这个生命周期。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUnmount = (<span class="function">(<span class="params">callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">callback</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>interview</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>react-interview-batching</title>
    <url>/2025/03/04/react-interview-batching/</url>
    <content><![CDATA[<p>请问以下代码输出什么？为什么？</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">DemoComponentState</span> &#123;</span><br><span class="line">  <span class="attr">val</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DemoComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&lt;&#123;&#125;, <span class="title class_">DemoComponentState</span>&gt; &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">props</span>: &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">val</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">val</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span> + <span class="number">1</span>&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">val</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span> + <span class="number">1</span>&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">val</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span> + <span class="number">1</span>&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span>);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">val</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span> + <span class="number">1</span>&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>答案：1 1 2 2。<br>解析：</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>interview</tag>
        <tag>react</tag>
        <tag>batching</tag>
      </tags>
  </entry>
  <entry>
    <title>refactor-replace-temp-with-query</title>
    <url>/2023/09/16/refactor-replace-temp-with-query/</url>
    <content><![CDATA[<h1 id="Replace-Temp-with-Query"><a href="#Replace-Temp-with-Query" class="headerlink" title="Replace Temp with Query"></a>Replace Temp with Query</h1><p>以查询取代临时变量的方法只适用于处理某些类型的临时变量，即那些只被赋值一次，而且之后再也没有被修改的临时变量。<br>看下面的代码：我们可以将 <code>price()</code>中的临时变量 <code>basePrice</code> 和<code>discountFactor</code> 替换为查询函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">quantity, item</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">quantity</span> = quantity;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">item</span> = item;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">price</span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> basePrice = <span class="variable language_">this</span>.<span class="property">quantity</span> * <span class="variable language_">this</span>.<span class="property">item</span>.<span class="property">price</span>;</span><br><span class="line">    <span class="keyword">let</span> discountFactor = <span class="number">0.98</span>;</span><br><span class="line">    <span class="keyword">if</span> (basePrice &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">      discountFactor -= <span class="number">0.03</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> basePrice * discountFactor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改后如下：可以看到，修改后，<code>price()</code>内的代码明显更加简洁，更加容易理解。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">quantity, item</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">quantity</span> = quantity;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">item</span> = item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> <span class="title function_">price</span>() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">basePrice</span> * <span class="variable language_">this</span>.<span class="property">discountFactor</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use this method to replace the temp variable basePrice</span></span><br><span class="line"><span class="keyword">get</span> <span class="title function_">basePrice</span>() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">quantity</span> * <span class="variable language_">this</span>.<span class="property">item</span>.<span class="property">price</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use this method to replace the temp variable discountFactor</span></span><br><span class="line"><span class="keyword">get</span> <span class="title function_">discountFactor</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> discountFactor = <span class="number">0.98</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">basePrice</span> &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">    discountFactor -= <span class="number">0.03</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> discountFactor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，<code>discountFactor()</code>函数还可以进一步简化：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">get</span> <span class="title function_">discountFactor</span>() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">basePrice</span> &gt; <span class="number">1000</span> ? <span class="number">0.95</span> : <span class="number">0.98</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果是在不支持<code>getter</code>和<code>setter</code>的语言中，我们可以使用<code>extract function</code>的方法来实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">quantity, item</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">quantity</span> = quantity;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">item</span> = item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getPrice</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getBasePrice</span>() * <span class="variable language_">this</span>.<span class="title function_">getDiscountFactor</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use this method to replace the temp variable basePrice</span></span><br><span class="line"><span class="title function_">getBasePrice</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">quantity</span> * <span class="variable language_">this</span>.<span class="property">item</span>.<span class="property">price</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use this method to replace the temp variable discountFactor</span></span><br><span class="line"><span class="title function_">getDiscountFactor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getBasePrice</span>() &gt; <span class="number">1000</span> ? <span class="number">0.95</span> : <span class="number">0.98</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>refactoring</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>getter</tag>
        <tag>setter</tag>
        <tag>refactoring</tag>
        <tag>clean code</tag>
        <tag>variable</tag>
      </tags>
  </entry>
  <entry>
    <title>RxJS-backpressure</title>
    <url>/2024/11/30/rxjs-backpressure/</url>
    <content><![CDATA[<h1 id="什么是背压"><a href="#什么是背压" class="headerlink" title="什么是背压"></a>什么是背压</h1><p><code>Back pressure</code> 翻译成中文叫做<code>背压</code>，也有叫<code>回压</code>的，那么到底啥是背压呢？望文思义一下，背压就是来自背后的压力，那么背后是指哪里呢？在RxJS中，背后就是指产生数据的Observable，我们姑且称之为生产者，而订阅这个Observable的Observer就是消费者。背压就是生产者生产数据的速度大于消费者消费的速度，导致大量的数据积压。</p>
<p>现实生活中的例子，你老婆一分钟能烙五个饼，而你每分钟只能吃一个，那么烙好的饼就会越积越多，你就吃不消了。</p>
<h1 id="解决背压"><a href="#解决背压" class="headerlink" title="解决背压"></a>解决背压</h1><p>解决背压基本就两种方法：缓冲和丢弃，我们在时髦一下，在泛化一下，就是无损处理和有损处理。</p>
<ul>
<li>Lossy Operation</li>
<li>Lossless Operation</li>
</ul>
<h2 id="有损方式"><a href="#有损方式" class="headerlink" title="有损方式"></a>有损方式</h2><ul>
<li>debounce</li>
<li>throttle</li>
</ul>
<h2 id="无损方式"><a href="#无损方式" class="headerlink" title="无损方式"></a>无损方式</h2><ul>
<li>bufferCount - 按数量缓冲，攒够Count个数据再发出</li>
<li>bufferTime - 按时间缓冲，攒够Time时间内的数据再发出</li>
<li>buffer - 按条件缓冲，满足条件时发出缓冲的数据, buffer(xxx), xxx是一个Observable，当xxx发出数据时，发出缓冲的数据。</li>
</ul>
]]></content>
      <categories>
        <category>rxjs</category>
      </categories>
      <tags>
        <tag>undefined</tag>
        <tag>rxjs</tag>
        <tag>backpressure</tag>
      </tags>
  </entry>
  <entry>
    <title>run-typescript-with-node</title>
    <url>/2024/08/24/run-typescript-with-node/</url>
    <content><![CDATA[<p>Firstly, <code>node</code> can’t run <code>typescript</code> files directly. You need to compile the <code>typescript</code> files to <code>javascript</code> files and then run them with <code>node</code>.</p>
<p>The following command won’t work!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node ./src/main.ts</span><br></pre></td></tr></table></figure>

<p>You’ll got error like this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(node:13596) Warning: To load an ES module, <span class="built_in">set</span> <span class="string">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span> <span class="keyword">in</span> the package.json or use the .mjs extension.</span><br><span class="line"></span><br><span class="line">SyntaxError: Cannot use import statement outside a module</span><br></pre></td></tr></table></figure>

<p>How to solve this problem?</p>
<ol>
<li>Use <code>ts-node</code> to run <code>typescript</code> files directly.<ol>
<li><code>npm install -g ts-node</code></li>
<li><code>ts-node ./src/main.ts</code></li>
</ol>
</li>
<li>Use <code>tsc</code> to compile <code>typescript</code> files to <code>javascript</code> files and then run them with <code>node</code>.<ol>
<li><code>npm install -g typescript</code></li>
<li><code>tsc ./src/main.ts</code></li>
<li><code>node ./src/main.js</code></li>
</ol>
</li>
</ol>
<p>Happy coding!</p>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>typescript</tag>
        <tag>ts-node</tag>
      </tags>
  </entry>
  <entry>
    <title>rxjs-create</title>
    <url>/2024/11/28/rxjs-create/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>RxJS中有许多创建Observable的方法，如<code>from</code>、<code>of</code>、<code>interval</code>等，本文一一介绍。</p>
<h2 id="from"><a href="#from" class="headerlink" title="from"></a>from</h2><p><code>from</code>方法可以将一个数组、类数组对象、Promise、可迭代对象、Observable-like对象转换为Observable。</p>
<h3 id="将数组转换为Observable"><a href="#将数组转换为Observable" class="headerlink" title="将数组转换为Observable"></a>将数组转换为Observable</h3><p><code>RxJS</code>社区有一个约定，以<code>$</code>结尾的变量代表一个Observable对象。下面的例子将一个数组转换为Observable。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">from</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> array$ = <span class="title function_">from</span>(array);</span><br><span class="line">array$.<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// 1, 2, 3</span></span><br></pre></td></tr></table></figure>
<p>上面的代码可以简化为：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">from</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// 1, 2, 3</span></span><br></pre></td></tr></table></figure>

<h3 id="将Promise转换为Observable"><a href="#将Promise转换为Observable" class="headerlink" title="将Promise转换为Observable"></a>将Promise转换为Observable</h3><p>下面的例子将一个Promise对象转换为Observable。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">from</span>(p).<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure>

<h3 id="将可迭代对象转换为Observable"><a href="#将可迭代对象转换为Observable" class="headerlink" title="将可迭代对象转换为Observable"></a>将可迭代对象转换为Observable</h3><p>其实数组就是可迭代对象，所以前面数组的例子已经包含该例子，下面的例子将一个可迭代对象转换为Observable。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">generate123</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">from</span>(<span class="title function_">generate123</span>()).<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure>

<h3 id="使用asapScheduler"><a href="#使用asapScheduler" class="headerlink" title="使用asapScheduler"></a>使用<code>asapScheduler</code></h3><p>使用<code>asapScheduler</code>可以让<code>from</code>方法在当前任务队列的末尾执行，下面的例子展示了如何使用<code>asapScheduler</code>。你知道以下代码输出什么吗？如果不加<code>asapScheduler</code>，输出会是什么？</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;from start...&#x27;</span>);</span><br><span class="line"><span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], asapScheduler).<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;from end...&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>以上代码输出如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from start...</span><br><span class="line">from end...</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>如果去掉<code>asapScheduler</code>，则<code>from</code>同步执行，输出如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from start...</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">from end...</span><br></pre></td></tr></table></figure>

<p><code>from</code>的以下书写方式已经被废弃，将在RxJS 8中移除.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], asapScheduler).<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure>

<p>推荐使用下面的方式，详情看<a href="https://rxjs.dev/deprecations/scheduler-argument">这里</a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">scheduled</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], asapScheduler).<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure>


<h3 id="将Dom事件转换为Observable"><a href="#将Dom事件转换为Observable" class="headerlink" title="将Dom事件转换为Observable"></a>将Dom事件转换为Observable</h3><p>使用<code>fromEvent</code>方法可以将Dom事件转换为Observable。<br>以下代码监听<code>document</code>的<code>click</code>事件，当点击<code>document</code>时，会在控制台输出<code>clicked!</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/rxjs@^7/dist/bundles/rxjs.umd.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>rxjs demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; fromEvent &#125; = rxjs;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&quot;click&quot;</span>).<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clicked!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>默认情况下，浏览器的事件模型是冒泡模型，也可以改为捕获模型，只需要传递<code>&#123; capture: true &#125;</code>作为<code>fromEvent</code>的第三个参数即可。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&quot;click&quot;</span>, &#123; <span class="attr">capture</span>: <span class="literal">true</span> &#125;).<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clicked!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="of"><a href="#of" class="headerlink" title="of"></a>of</h2><p><code>of</code>把输入的值转换为Observable。与<code>from</code>不同的是，<code>of</code>不会做任何flatten操作，它会把输入的值当做一个整体。这一点体现在数组上，<code>from</code>会把数组的每个元素当做一个值，而<code>of</code>会把整个数组当做一个值。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span>, <span class="keyword">from</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="title function_">of</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// 1, 2, 3</span></span><br></pre></td></tr></table></figure>

<p><code>of</code>通常用在要一次性生成多个值的场景，比如下面的例子：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// 1, 2, 3</span></span><br></pre></td></tr></table></figure>

<h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><p>Emit a sequence of numbers in a range.</p>
<p>在一个范围内生成一个Observable。<code>range</code>方法有三个参数，分别是<code>start</code>、<code>count</code>和<code>scheduler</code>。<code>start</code>表示起始值，<code>count</code>表示生成的个数，<code>scheduler</code>表示调度器。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; range &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">range</span>(<span class="number">1</span>, <span class="number">3</span>).<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// 1, 2, 3</span></span><br></pre></td></tr></table></figure>

<h2 id="interval"><a href="#interval" class="headerlink" title="interval"></a>interval</h2><p><code>interval</code>方法会每隔一段时间发出一个递增的数字。<code>interval</code>方法有一个参数<code>period</code>，表示时间间隔，单位是毫秒。<code>interval</code>默认使用<code>asyncScheduler</code>。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// 0, 1, 2, 3, 4, ...</span></span><br></pre></td></tr></table></figure>
<p>有三点需要注意：</p>
<ol>
<li><code>interval</code>方法是异步的，默认使用<code>asyncScheduler</code>。</li>
<li><code>interval</code>方法会从0开始发出数字。</li>
<li><code>interval</code>方法第不是立即执行的，而是在第一个时间间隔之后执行。</li>
</ol>
<p>以下代码输出什么？</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;interval start...&#x27;</span>);</span><br><span class="line"><span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;interval end...&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>答：因为<code>interval</code>默认使用<code>asyncScheduler</code>，所以<code>interval</code>方法是异步的，所以<code>interval start...</code>和<code>interval end...</code>会先输出，然后再输出<code>0, 1, 2, 3, 4, ...</code>。</p>
<h2 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h2><p>可以将<code>timer</code>看成是高配版的<code>interval</code>，为啥这么说呢？因为<code>interval</code>只能设置时间间隔，却无法控制开始时间（<code>interval</code>的开始时间就是其时间间隔），而<code>timer</code>既能控制间隔时间，也能控制开始时间。</p>
<p>来看这样一个需求，每个1秒产生一个数字（从0开始），但是要求第一个数字立即产生，而不是等待1秒。<code>interval</code>无法满足这个需求，但是<code>timer</code>可以。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; timer &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">1000</span>).<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// 0, 1, 2, 3, 4, ...</span></span><br></pre></td></tr></table></figure>
<p><code>timer</code>方法的第一个参数就是开始时间，除了可以指定一个具体的毫秒数之外，还可以指定一个<code>Date</code>对象，表示在指定的时间开始。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">timer</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2024</span>, <span class="number">11</span>, <span class="number">28</span>, <span class="number">17</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1000</span>).<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// 0, 1, 2, 3, 4, ...</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rxjs</category>
      </categories>
      <tags>
        <tag>timer</tag>
        <tag>rxjs</tag>
        <tag>from</tag>
        <tag>of</tag>
        <tag>range</tag>
        <tag>interval</tag>
      </tags>
  </entry>
  <entry>
    <title>rxjs-interview-questions</title>
    <url>/2024/12/05/rxjs-interview-questions/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>There are some questions about RxJS that are often asked in interviews. Let’s take a look at them.</p>
<h2 id="What’s-the-difference-between-Promise-and-Observable"><a href="#What’s-the-difference-between-Promise-and-Observable" class="headerlink" title="What’s the difference between Promise and Observable?"></a>What’s the difference between <code>Promise</code> and <code>Observable</code>?</h2><ol>
<li><code>Promise</code>是一对一的，而<code>Observable</code>可以是一对多的。（一个Observer可以有多个订阅者）</li>
<li><code>Promise</code>不能取消（配合某些Library也许可以），而<code>Observable</code>可以。</li>
<li><code>Promise</code>定义后立即执行，而<code>Observable</code>是惰性的。订阅后才执行。</li>
<li><code>Promise</code>可以配合<code>async/await</code>使用，而<code>Observable</code>不行。</li>
<li><code>Promise</code>没有操作符，而<code>Observable</code>有很多操作符，比如map，retry等，在处理复杂请求时更加方便。</li>
</ol>
]]></content>
      <categories>
        <category>rxjs</category>
      </categories>
      <tags>
        <tag>interview</tag>
        <tag>rxjs</tag>
      </tags>
  </entry>
  <entry>
    <title>rxjs-function-timeout</title>
    <url>/2024/09/28/rxjs-function-timeout/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In <code>RxJS</code>, there is a <a href="https://rxjs.dev/api/index/function/timeout"><code>timeout</code></a> operator, it’s used to throw an error if the source observable does not emit a value within a specified timeout duration.</p>
<h2 id="Use-case"><a href="#Use-case" class="headerlink" title="Use case"></a>Use case</h2><p>In Angular, the HttpClient service is used to make HTTP requests. Sometimes, we want to set a timeout for the request, if the request does not complete within the specified time, we want to cancel the request and show an error message to the user.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HttpClient</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; catchError, timeout &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; throwError &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ApiService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">http</span>: <span class="title class_">HttpClient</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;https://example.com/api/data&#x27;</span>).<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">timeout</span>(<span class="number">10000</span>), <span class="comment">// 10 seconds</span></span><br><span class="line">      <span class="title function_">catchError</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Handle timeout or other errors</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Request timed out or failed&#x27;</span>, error);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">throwError</span>(error);</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>But, wait, what if I want to add this timeout for all my requests? Do I need to add the <code>timeout</code> operator to every request? The answer is no, you can create an interceptor to add the <code>timeout</code> operator to all requests.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">HttpEvent</span>,</span><br><span class="line">  <span class="title class_">HttpHandler</span>,</span><br><span class="line">  <span class="title class_">HttpInterceptor</span>,</span><br><span class="line">  <span class="title class_">HttpRequest</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; timeout &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">DEFAULT_TIMEOUT</span> = <span class="keyword">new</span> <span class="title class_">InjectionToken</span>&lt;<span class="built_in">number</span>&gt;(<span class="string">&#x27;defaultTimeout&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TimeoutInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HttpInterceptor</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="meta">@Inject</span>(DEFAULT_TIMEOUT) <span class="keyword">protected</span> <span class="attr">defaultTimeout</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">intercept</span>(</span><br><span class="line">    <span class="attr">req</span>: <span class="title class_">HttpRequest</span>&lt;<span class="built_in">any</span>&gt;,</span><br><span class="line">    <span class="attr">next</span>: <span class="title class_">HttpHandler</span></span><br><span class="line">  ): <span class="title class_">Observable</span>&lt;<span class="title class_">HttpEvent</span>&lt;<span class="built_in">any</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> next.<span class="title function_">handle</span>(req).<span class="title function_">pipe</span>(<span class="title function_">timeout</span>(<span class="variable language_">this</span>.<span class="property">defaultTimeout</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Don’t forget to add the interceptor to the providers array in the <code>AppModule</code>.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">HTTP_INTERCEPTORS</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TimeoutInterceptor</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./timeout.interceptor&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: <span class="variable constant_">HTTP_INTERCEPTORS</span>,</span><br><span class="line">      <span class="attr">useClass</span>: <span class="title class_">TimeoutInterceptor</span>,</span><br><span class="line">      <span class="attr">multi</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">provide</span>: <span class="variable constant_">DEFAULT_TIMEOUT</span>, <span class="attr">useValue</span>: <span class="number">30000</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>Now, all your HTTP requests will have a timeout of 10 seconds.</p>
<p>But, what if I want to set different timeout values for some specific requests? You can add a custom header to the request and check it in the interceptor, if custom header <code>timeout</code> exists, use the custom timeout value, otherwise use the default timeout value.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">HttpEvent</span>,</span><br><span class="line">  <span class="title class_">HttpHandler</span>,</span><br><span class="line">  <span class="title class_">HttpInterceptor</span>,</span><br><span class="line">  <span class="title class_">HttpRequest</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TimeoutInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HttpInterceptor</span> &#123;</span><br><span class="line">  <span class="title function_">intercept</span>(</span><br><span class="line">    <span class="attr">req</span>: <span class="title class_">HttpRequest</span>&lt;<span class="built_in">any</span>&gt;,</span><br><span class="line">    <span class="attr">next</span>: <span class="title class_">HttpHandler</span></span><br><span class="line">  ): <span class="title class_">Observable</span>&lt;<span class="title class_">HttpEvent</span>&lt;<span class="built_in">any</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> timeoutValue = req.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&#x27;timeout&#x27;</span>) || <span class="variable language_">this</span>.<span class="property">defaultTimeout</span>;</span><br><span class="line">    <span class="keyword">const</span> timeoutValueNumeric = <span class="title class_">Number</span>(timeoutValue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next.<span class="title function_">handle</span>(req).<span class="title function_">pipe</span>(<span class="title function_">timeout</span>(timeoutValueNumeric));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Now, you can set the timeout value in the request headers.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HttpHeaders</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>().<span class="title function_">set</span>(<span class="string">&#x27;timeout&#x27;</span>, <span class="string">&#x27;5000&#x27;</span>); <span class="comment">// 5 seconds</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;https://example.com/api/data&#x27;</span>, &#123; headers &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://rxjs.dev/api/index/function/timeout">https://rxjs.dev/api/index/function/timeout</a></li>
<li><a href="https://stackoverflow.com/questions/45938931/default-and-specific-request-timeout">https://stackoverflow.com/questions/45938931/default-and-specific-request-timeout</a></li>
</ol>
]]></content>
      <categories>
        <category>rxjs</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>rxjs</tag>
        <tag>timeout</tag>
      </tags>
  </entry>
  <entry>
    <title>rxjs-introduction</title>
    <url>/2025/03/10/rxjs-introduction/</url>
    <content><![CDATA[<p>今天来一篇RxJS的科普。</p>
<h1 id="什么是RxJS"><a href="#什么是RxJS" class="headerlink" title="什么是RxJS"></a>什么是RxJS</h1><p>先看RxJS这个词，RxJS &#x3D; Rx + JS，JS就是Javascript，那么Rx又是什么呢？</p>
<p>Rx &#x3D; Reactive extension, 最早是由微软开发的一套软件库，用于处理异步数据流和事件流。后来，ReactiveX被移植到了多种编程语言中，如RxJS（Javascript）、RxJava（Java）、RxSwift（Swift）等。</p>
<p>下面是Wikipedia对ReactiveX的定义：<br><code>ReactiveX is an API for asynchronous programming with observable streams。</code></p>
<p>RxJS就是Rx的JavaScript版本。</p>
<h1 id="RxJS的核心概念"><a href="#RxJS的核心概念" class="headerlink" title="RxJS的核心概念"></a>RxJS的核心概念</h1><p>Rx中使用了两个设计模式，观察者模式和迭代器模式。Rx还大量使用了函数式编程的思想。</p>
<h2 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h2><p>这是RxJS中最终要的概念，没有之一，Observable，顾名思义，就是可观察对象，我们看一个现实中的例子，你在看风景，那么风景就是一个Observable，你在观察风景，风景发生了变化，你就会感知到，这就是Observable的概念。</p>
<h2 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h2><p>Observer - 观察者，还是以现实中的例子来解释，你在看风景，你就是一个Observer。</p>
<h2 id="Subscription"><a href="#Subscription" class="headerlink" title="Subscription"></a>Subscription</h2><p>Subscription - 订阅，订阅是联系Observable和Observer的桥梁，我们常说，Observable发生变化时，Observer会收到通知，那么Observer如何收到通知呢？就是通过订阅机制来实现的。</p>
<h2 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h2><p>Operators - 操作符，RxJS提供了许多操作符，用于对Observable进行操作，比如<code>map</code>、<code>filter</code>、<code>reduce</code>等。Operators都是纯函数，它们不会改变原始的Observable，而是返回一个新的Observable。</p>
<h2 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h2><p>Subject - 主题，Subject是一种特殊的Observable，它允许将值多播给多个Observer。也就是说，它是用来实现多播的，同时，Subject也是Observer。</p>
<h2 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h2><p>Scheduler - 调度器，RxJS提供了调度器，用于控制Observable何时开始发送通知。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li><a href="https://en.wikipedia.org/wiki/ReactiveX">https://en.wikipedia.org/wiki/ReactiveX</a></li>
<li><a href="https://rxjs.dev/guide/overview">https://rxjs.dev/guide/overview</a></li>
</ol>
]]></content>
      <categories>
        <category>rxjs</category>
      </categories>
      <tags>
        <tag>rxjs</tag>
      </tags>
  </entry>
  <entry>
    <title>rxjs-map-related-operators</title>
    <url>/2025/03/09/rxjs-map-related-operators/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>RxJS中有许多和<code>map</code>相关的操作符，如<code>map</code>、<code>mapTo</code>、<code>mergeMap</code>、<code>switchMap</code>等，本文一一介绍。</p>
<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p><code>map</code>操作符是RxJS中最常用的操作符之一，它类似于数组的<code>map</code>方法，可以对Observable发出的每个值进行转换。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rxjs</category>
      </categories>
      <tags>
        <tag>map</tag>
        <tag>rxjs</tag>
        <tag>mapto</tag>
      </tags>
  </entry>
  <entry>
    <title>rxjs-observer</title>
    <url>/2025/03/11/rxjs-observer/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>rxjs</category>
      </categories>
      <tags>
        <tag>observer</tag>
        <tag>rxjs</tag>
      </tags>
  </entry>
  <entry>
    <title>rxjs-pull-push</title>
    <url>/2025/03/11/rxjs-pull-push/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Pull和Push是两种数据流的传递方式，他们决定了数据如何从生产者传递到消费者。</p>
<h1 id="Pull"><a href="#Pull" class="headerlink" title="Pull"></a>Pull</h1><p>Pull是拉模型，也就是消费者主动向生产者请求数据，消费者是主动的一方。在JavaScript中，所有的函数都是Pull模型的，函数相当于数据的生产者，函数调用者相当于数据的消费者。调用这个函数，就是在请求数据。</p>
<p>下面的代码中num.reduce函数用来求数组的和，<code>const sum = nums.reduce(...)</code>调用函数请求数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> sum = nums.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure>

<h1 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h1><p>Push是推模型，由数据的生产者主动向外推送数据，生产者是主动的一方。在JavaScript中，<code>Promise</code>就是Push模型的，与函数不同，Promise决定什么时候发送数据。</p>
<p>下面代码中的<code>p.then(console)</code>会在Promise resolve之后执行，Promise决定了何时发送数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">42</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// 42</span></span><br></pre></td></tr></table></figure>

<p>RxJS中的Observable也是推模型的，Observable决定了何时发送数据。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li><a href="https://rxjs.dev/guide/observable">https://rxjs.dev/guide/observable</a></li>
</ol>
]]></content>
      <categories>
        <category>rxjs</category>
      </categories>
      <tags>
        <tag>rxjs</tag>
        <tag>pull</tag>
        <tag>push</tag>
      </tags>
  </entry>
  <entry>
    <title>RxJS-observable</title>
    <url>/2024/11/30/rxjs-observable/</url>
    <content><![CDATA[<h1 id="什么是Observable"><a href="#什么是Observable" class="headerlink" title="什么是Observable"></a>什么是Observable</h1><p><code>Observable</code>是RxJS中的一个类，它是一个可观察对象，用于表示一个异步数据流。<code>Observable</code>可以发出三种类型的值：<code>next</code>、<code>error</code>和<code>complete</code>。<code>next</code>表示发出一个值，<code>error</code>表示发出一个错误，<code>complete</code>表示数据流结束。</p>
<h2 id="Cold-Observable"><a href="#Cold-Observable" class="headerlink" title="Cold Observable"></a>Cold Observable</h2><p>Cold Observable有以下特点：</p>
<ul>
<li>一般来说是单播的(Unicast)，每个订阅者都会有自己的数据流。</li>
<li>一般是惰性的，创建时并不发出数据，只有有订阅时才会开始发出数据。</li>
</ul>
<p>Angular中的Http请求就是一个Cold Observable，每次订阅都会发起一个新的请求。</p>
<h2 id="Hot-Observable"><a href="#Hot-Observable" class="headerlink" title="Hot Observable"></a>Hot Observable</h2><p>Host Observable一般用Subject来实现，Subject是一种特殊的Observable，它既是Observable也是Observer。</p>
<p>Hot Observable有以下特点：</p>
<ul>
<li>一般来说是多播的(Multicast)，所有订阅者共享同一个数据流。</li>
<li>一般是热的，创建后就开始发出数据，即使没有订阅者也发出数据。</li>
</ul>
]]></content>
      <categories>
        <category>rxjs</category>
      </categories>
      <tags>
        <tag>rxjs</tag>
        <tag>observable</tag>
        <tag>cold</tag>
        <tag>hot</tag>
      </tags>
  </entry>
  <entry>
    <title>rxjs-subject</title>
    <url>/2025/03/11/rxjs-subject/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>今天来学习一下RxJS中的<code>Subject</code>，有人说它既是<code>Observable</code>，又是<code>Observer</code>，那么它到底是什么呢？先来看一下官方的定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Subject is equivalent to an EventEmitter, and the only way of multicasting a value or event to multiple Observers.</span><br></pre></td></tr></table></figure>

<p>翻译一下：Subject等价于EventEmitter，是唯一一种将值或事件多播给多个观察者的方法。</p>
<h1 id="Subject的特点"><a href="#Subject的特点" class="headerlink" title="Subject的特点"></a>Subject的特点</h1><h2 id="多播"><a href="#多播" class="headerlink" title="多播"></a>多播</h2><p>下面的代码中，有两个订阅者，但是他们共享数据流，所以他们会输出相同的随机数。这就是Subject的多播特性。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Subject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line">subject.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;observerA: &#x27;</span> + v));</span><br><span class="line">subject.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;observerB: &#x27;</span> + v));</span><br><span class="line">subject.<span class="title function_">next</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br></pre></td></tr></table></figure>

<p>但是如果改用observable, 那么每个订阅者都会收到一份数据，以下代码打印出不同的随机数。也就是说：对于普通的observable，每次订阅都会发起新的请求。一次订阅只能有一个观察者。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observable = <span class="keyword">new</span> <span class="title class_">Observable</span>(<span class="function">(<span class="params">subscriber</span>) =&gt;</span> &#123;</span><br><span class="line">  subscriber.<span class="title function_">next</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">observable.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v));</span><br><span class="line">observable.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v));</span><br></pre></td></tr></table></figure>


<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table>
<thead>
<tr>
<th>特性</th>
<th>Observable</th>
<th>Subject</th>
</tr>
</thead>
<tbody><tr>
<td>单播多播</td>
<td>单播</td>
<td>多播</td>
</tr>
<tr>
<td>数据产生时机</td>
<td>订阅时产生</td>
<td>由Subject.next()产生</td>
</tr>
<tr>
<td>冷热</td>
<td>冷</td>
<td>热</td>
</tr>
<tr>
<td>是否是Observer</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>订阅时机的影响</td>
<td>每次订阅后产生新的数据</td>
<td>共享数据流，订阅后接收续生成的数据</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>rxjs</category>
      </categories>
      <tags>
        <tag>rxjs</tag>
        <tag>subject</tag>
      </tags>
  </entry>
  <entry>
    <title>software-architecture-design-principle</title>
    <url>/2024/11/16/software-architecture-design-principle/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>SOLID</code>是五个面向对象设计原则的首字母缩写，分别是：</p>
<ul>
<li>Single Responsibility Principle (SRP) - 单一职责原则</li>
<li>Open&#x2F;Closed Principle (OCP) - 开闭原则</li>
<li>Liskov Substitution Principle (LSP) - 里氏替换原则</li>
<li>Interface Segregation Principle (ISP) - 接口隔离原则</li>
<li>Dependency Inversion Principle (DIP) - 依赖倒置原则</li>
</ul>
<h2 id="Single-Responsibility-Principle-SRP"><a href="#Single-Responsibility-Principle-SRP" class="headerlink" title="Single Responsibility Principle (SRP)"></a>Single Responsibility Principle (SRP)</h2><p>单一职责原则是指一个类应该只有一个引起它变化的原因。换句话说，一个类应该只有一个职责。这不意味着一个类只能有一个功能 - 这是不准确的说法。确切的说，一个类或者模块应该对且仅对一类行为主体负责！</p>
<h2 id="Open-Closed-Principle-OCP"><a href="#Open-Closed-Principle-OCP" class="headerlink" title="Open&#x2F;Closed Principle (OCP)"></a>Open&#x2F;Closed Principle (OCP)</h2><p>开闭原则是指一个软件实体（类、模块、函数等）应该对扩展开放，对修改关闭。这意味着一个实体应该通过扩展来实现新的功能，而不是通过修改已有的代码来实现。</p>
<p>这通常通过使用抽象类和接口来实现。抽象类和接口定义了一组规范，具体的实现类来实现这些规范。如果将来要添加新的功能，只需要添加新的实现类，而不需要修改已有的代码。</p>
<h2 id="Liskov-Substitution-Principle-LSP"><a href="#Liskov-Substitution-Principle-LSP" class="headerlink" title="Liskov Substitution Principle (LSP)"></a>Liskov Substitution Principle (LSP)</h2><p>里氏替换原则是指一个软件实体（类、模块、函数等）应该可以被它的子类替换，而不影响程序的正确性。这意味着一个子类应该可以替换它的父类，而不需要修改父类的代码。</p>
<h2 id="Interface-Segregation-Principle-ISP"><a href="#Interface-Segregation-Principle-ISP" class="headerlink" title="Interface Segregation Principle (ISP)"></a>Interface Segregation Principle (ISP)</h2><p>接口隔离原则是指一个类对另一个类的依赖应该建立在最小的接口上。换句话说，一个类不应该依赖它不需要的接口。</p>
<h2 id="Dependency-Inversion-Principle-DIP"><a href="#Dependency-Inversion-Principle-DIP" class="headerlink" title="Dependency Inversion Principle (DIP)"></a>Dependency Inversion Principle (DIP)</h2><p>依赖倒置原则是指高层模块不应该依赖于低层模块，两者都应该依赖于抽象。换句话说，模块之间的依赖关系应该是通过抽象发生的，而不是通过具体实现发生的。</p>
]]></content>
      <categories>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>solid</tag>
        <tag>principle</tag>
        <tag>architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>rxjs-use-case</title>
    <url>/2024/11/29/rxjs-use-case/</url>
    <content><![CDATA[<h1 id="RxJS-Use-Case"><a href="#RxJS-Use-Case" class="headerlink" title="RxJS Use Case"></a>RxJS Use Case</h1><h2 id="统计页面点击次数"><a href="#统计页面点击次数" class="headerlink" title="统计页面点击次数"></a>统计页面点击次数</h2><p>注意，RxJS中的<code>scan</code>相当于JavaScript中的<code>Array.prototype.reduce</code>，下面的例子展示了如何统计页面点击次数。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; fromEvent, scan &#125; = rxjs;</span><br><span class="line"><span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&quot;click&quot;</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">scan</span>(<span class="function">(<span class="params">count</span>) =&gt;</span> count + <span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function">(<span class="params">count</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(count));</span><br></pre></td></tr></table></figure>

<h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><h3 id="Resize窗口"><a href="#Resize窗口" class="headerlink" title="Resize窗口"></a>Resize窗口</h3><p>resize时间触发非常频繁，我们可以使用<code>throttleTime</code>来节流，下面的例子展示了如何节流resize事件。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; fromEvent, throttleTime &#125; = rxjs;</span><br><span class="line"><span class="title function_">fromEvent</span>(<span class="variable language_">window</span>, <span class="string">&quot;resize&quot;</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">throttleTime</span>(<span class="number">500</span>))</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`window width: <span class="subst">$&#123;<span class="variable language_">window</span>.innerWidth&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`window height: <span class="subst">$&#123;<span class="variable language_">window</span>.innerHeight&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="统计点击次数"><a href="#统计点击次数" class="headerlink" title="统计点击次数"></a>统计点击次数</h3><p><code>throttleTime</code>可以用来实现节流，下面的例子展示了如何实现节流，无论用户点击的有多快，我们都是每隔1秒统计一次点击次数。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; fromEvent, throttleTime, scan &#125; = rxjs;</span><br><span class="line"><span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&quot;click&quot;</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">throttleTime</span>(<span class="number">1000</span>),</span><br><span class="line">    <span class="title function_">scan</span>(<span class="function">(<span class="params">count</span>) =&gt;</span> count + <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function">(<span class="params">count</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(count));</span><br></pre></td></tr></table></figure>

<h2 id="设置最大并发请求数"><a href="#设置最大并发请求数" class="headerlink" title="设置最大并发请求数"></a>设置最大并发请求数</h2><p><code>mergeMap</code> with <code>concurrency</code>参数可以设置最大并发请求数，下面的例子展示了如何设置最大并发请求数。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, mergeMap, <span class="keyword">of</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source = <span class="title function_">interval</span>(<span class="number">1000</span>);</span><br><span class="line">source.<span class="title function_">pipe</span>(<span class="title function_">mergeMap</span>(<span class="function">() =&gt;</span> <span class="title function_">of</span>(<span class="string">&#x27;request&#x27;</span>), <span class="number">2</span>)).<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure>

<h2 id="避免重复请求"><a href="#避免重复请求" class="headerlink" title="避免重复请求"></a>避免重复请求</h2><p>使用<code>switchMap</code>可以避免重复请求，下面的例子展示了如何避免重复请求。</p>
<h2 id="忽略某个值"><a href="#忽略某个值" class="headerlink" title="忽略某个值"></a>忽略某个值</h2><p>使用<code>skip</code>， 以下代码忽略了<code>interval</code>的前两个值，然后取3个值。所以忽略0和1，取2, 3, 4。关于interval的详细信息，请看<a href="https://zdd.github.io/2024/11/28/rxjs-create/#interval">这里</a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, skip, take &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(<span class="title function_">skip</span>(<span class="number">2</span>), <span class="title function_">take</span>(<span class="number">3</span>)).<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// 2, 3, 4</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>rxjs</category>
      </categories>
      <tags>
        <tag>rxjs</tag>
        <tag>take</tag>
        <tag>skip</tag>
        <tag>case</tag>
      </tags>
  </entry>
  <entry>
    <title>tcp-open-and-close</title>
    <url>/2024/02/19/tcp-open-and-close/</url>
    <content><![CDATA[<h1 id="TCP-Open-and-Close"><a href="#TCP-Open-and-Close" class="headerlink" title="TCP Open and Close"></a>TCP Open and Close</h1><h2 id="TPC连接需要三次握手"><a href="#TPC连接需要三次握手" class="headerlink" title="TPC连接需要三次握手"></a>TPC连接需要三次握手</h2><p>第一次握手（客户端发送 SYN 报文给服务器，服务器接收该报文）：客户端什么都不能确认；服务器确认了对方发送正常，自己接收正常。</p>
<p>第二次握手（服务器响应 SYN 报文给客户端，客户端接收该报文）：客户端确认了：自己发送、接收正常，对方发送、接收正常；服务器确认了：对方发送正常，自己接收正常。</p>
<p>第三次握手（客户端发送 ACK 报文给服务器）：客户端确认了：自己发送、接收正常，对方发送、接收正常； 服务器确认了：自己发送、接收正常，对方发送、接收正常</p>
<p><img src="/../images/tcp-open.png" alt="tcp-open"></p>
<h2 id="TCP断开需要四次挥手"><a href="#TCP断开需要四次挥手" class="headerlink" title="TCP断开需要四次挥手"></a>TCP断开需要四次挥手</h2><p>四次挥手过程如下图所示，流程如下：</p>
<ol>
<li><p>客户端数据数据发送完毕，想关闭连接，发送FIN给服务器端。此时客户端进入FIN-WAIT-1状态</p>
</li>
<li><p>服务器端收到客户端的FIN，并返回ACK给客户端，确认已经收到客户端的关闭通知。</p>
<p> 当客户端收到服务器端的ACK通知后，不能立即关闭连接，因为服务器端可能还要继续发送数据。所以此时客户端进入FIN-WAIT-2状态。</p>
<p> 也就是在这个时间点上，客户端只是不再发送数据了，但是可能还要接收数据。</p>
</li>
<li><p>待服务器端数据发送完毕，发送FIN给客户端，告知客户端，我也发完了，准备关闭。此时服务器端进入CLOSE-WAIT状态。</p>
</li>
<li><p>客户端收到来自服务端的FIN后，返回ACK给服务端，表示我收到你的关闭通知了，你可以关闭了，服务端收到客户端的ACK后，立即关闭，状态变为CLOSE。客户端发送完ACK后，进入TIME-WAIT状态，且等待2ms后自动关闭，状态变为CLOSE。</p>
</li>
</ol>
<p>所以，为啥要等2ms才能关闭？</p>
<p><img src="/../images/tcp-close.png" alt="tcp-close"></p>
]]></content>
      <categories>
        <category>network</category>
        <category>tcp</category>
      </categories>
      <tags>
        <tag>tcp</tag>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>to-do-list</title>
    <url>/2024/04/20/to-do-list/</url>
    <content><![CDATA[<h2 id="To-Do-List"><a href="#To-Do-List" class="headerlink" title="To Do List"></a>To Do List</h2><ol>
<li><p><code>typescript</code> tag not found on github pages tags.</p>
</li>
<li><p>Angular, AOT vs JIT and Ivy</p>
</li>
<li><p>Angular, How <code>ngc</code> works?</p>
</li>
<li><p>Angular, ngc vs ngcc.</p>
</li>
<li><p>Angular change detection</p>
<ol>
<li><a href="https://angularindepth.com/posts/1513/from-zone-js-to-zoneless-angular-and-back-how-it-all-works">https://angularindepth.com/posts/1513/from-zone-js-to-zoneless-angular-and-back-how-it-all-works</a></li>
<li><a href="https://blog.angular-university.io/how-does-angular-2-change-detection-really-work/">https://blog.angular-university.io/how-does-angular-2-change-detection-really-work/</a></li>
<li><a href="https://justangular.com/blog/a-new-era-for-angular-zoneless-change-detection?source=post_page-----babdeb6bc84e--------------------------------">https://justangular.com/blog/a-new-era-for-angular-zoneless-change-detection?source=post_page-----babdeb6bc84e--------------------------------</a></li>
<li></li>
</ol>
</li>
<li><p>Angular zone</p>
<ol>
<li><a href="https://dev.to/vivekdogra02/angular-zonejs-change-detection-understanding-the-core-concepts-16ek">https://dev.to/vivekdogra02/angular-zonejs-change-detection-understanding-the-core-concepts-16ek</a></li>
<li><a href="https://angularindepth.com/posts/1135/i-reverse-engineered-zones-zone-js-and-here-is-what-ive-found">https://angularindepth.com/posts/1135/i-reverse-engineered-zones-zone-js-and-here-is-what-ive-found</a></li>
<li><a href="https://justangular.com/blog/a-change-detection-zone-js-zoneless-local-change-detection-and-signals-story">https://justangular.com/blog/a-change-detection-zone-js-zoneless-local-change-detection-and-signals-story</a></li>
<li><a href="https://justangular.com/blog/its-ok-to-use-function-calls-in-angular-templates">https://justangular.com/blog/its-ok-to-use-function-calls-in-angular-templates</a></li>
</ol>
</li>
<li><p>Angular polyfill(under project root)</p>
</li>
<li><p>Angular data binding.</p>
</li>
<li><p>What’s new in Angular 15</p>
</li>
<li><p>What’s new in Angular 16</p>
</li>
<li><p>What’s new in Angular 17</p>
</li>
<li><p><code>angular.json</code> - <code>projects</code> - <code>architect</code> - <code>build</code> - <code>options</code> - <code>tsConfig</code></p>
</li>
<li><p>Angular router: <code>resolver</code> &#x3D; <a href="https://medium.com/@singhkrishnapal0818/angular-resolver-with-example-cf23f6d38f7f">https://medium.com/@singhkrishnapal0818/angular-resolver-with-example-cf23f6d38f7f</a></p>
</li>
<li><p>Never use function call in angular template: <a href="https://medium.com/showpad-engineering/why-you-should-never-use-function-calls-in-angular-template-expressions-e1a50f9c0496">https://medium.com/showpad-engineering/why-you-should-never-use-function-calls-in-angular-template-expressions-e1a50f9c0496</a></p>
</li>
<li><p><a href="https://medium.com/ngconf/accessing-route-params-in-angular-1f8e12770617">https://medium.com/ngconf/accessing-route-params-in-angular-1f8e12770617</a></p>
</li>
<li><p>Angular service scope providedIn: ‘root’, ‘platform’, ‘any’ - <a href="https://dev.to/christiankohler/improved-dependeny-injection-with-the-new-providedin-scopes-any-and-platform-30bb">https://dev.to/christiankohler/improved-dependeny-injection-with-the-new-providedin-scopes-any-and-platform-30bb</a>, <a href="https://angular.io/guide/providers#limiting-provider-scope-with-components">https://angular.io/guide/providers#limiting-provider-scope-with-components</a></p>
</li>
<li><p>Good angular post:</p>
<ol>
<li><a href="https://justangular.com/blog">https://justangular.com/blog</a></li>
<li><a href="https://blog.angular.io/">https://blog.angular.io/</a></li>
<li><a href="https://angulararchitects.io/en/blog">https://angulararchitects.io/en/blog</a></li>
</ol>
</li>
<li><p>What is browserlist in Angular: <a href="https://github.com/browserslist/browserslist">https://github.com/browserslist/browserslist</a></p>
</li>
<li><p>Angular, what is matrix parameters: <a href="https://stackoverflow.com/questions/2048121/url-matrix-parameters-vs-query-parameters">https://stackoverflow.com/questions/2048121/url-matrix-parameters-vs-query-parameters</a></p>
</li>
</ol>
<h2 id="SSR-in-Angular"><a href="#SSR-in-Angular" class="headerlink" title="SSR in Angular"></a>SSR in Angular</h2><p>多页应用<br><a href="http://www.guoxue.com/shibu/24shi/hansu/hsu_002.htm">http://www.guoxue.com/shibu/24shi/hansu/hsu_002.htm</a></p>
<ol>
<li><a href="https://medium.com/@nishtha.viitorcloud/ssr-server-side-rendering-in-angular-a68bee12cb0d">https://medium.com/@nishtha.viitorcloud/ssr-server-side-rendering-in-angular-a68bee12cb0d</a></li>
<li><a href="https://medium.com/@mbleigh/when-should-i-server-side-render-c2a383ff2d0f">https://medium.com/@mbleigh/when-should-i-server-side-render-c2a383ff2d0f</a></li>
<li><a href="https://solutionshub.epam.com/blog/post/what-is-server-side-rendering">https://solutionshub.epam.com/blog/post/what-is-server-side-rendering</a></li>
</ol>
<h2 id="Module-Federation"><a href="#Module-Federation" class="headerlink" title="Module Federation"></a>Module Federation</h2><ol>
<li>code example: <a href="https://github.com/module-federation/module-federation-examples">https://github.com/module-federation/module-federation-examples</a></li>
<li><a href="https://medium.com/swlh/webpack-5-module-federation-a-game-changer-to-javascript-architecture-bcdd30e02669">https://medium.com/swlh/webpack-5-module-federation-a-game-changer-to-javascript-architecture-bcdd30e02669</a> - need pay</li>
<li><a href="https://medium.com/@scriptedalchemy/understanding-webpack-module-federation-a-deep-dive-efe5c55bf366">https://medium.com/@scriptedalchemy/understanding-webpack-module-federation-a-deep-dive-efe5c55bf366</a></li>
<li><a href="https://www.angulararchitects.io/en/blog/micro-frontends-with-modern-angular-part-1-standalone-and-esbuild/">https://www.angulararchitects.io/en/blog/micro-frontends-with-modern-angular-part-1-standalone-and-esbuild/</a></li>
<li><a href="https://module-federation.io/">https://module-federation.io/</a></li>
<li><a href="https://www.youtube.com/watch?v=-ei6RqZilYI">https://www.youtube.com/watch?v=-ei6RqZilYI</a></li>
<li><a href="https://vugar-005.medium.com/module-federation-series-part-1-a-little-in-depth-258f331bc11e">https://vugar-005.medium.com/module-federation-series-part-1-a-little-in-depth-258f331bc11e</a></li>
</ol>
<h2 id="Native-module-federation"><a href="#Native-module-federation" class="headerlink" title="Native module federation"></a>Native module federation</h2><p><a href="https://github.com/angular-architects/module-federation-plugin/blob/main/libs/native-federation/README.md">https://github.com/angular-architects/module-federation-plugin/blob/main/libs/native-federation/README.md</a></p>
<h3 id="Angular-Elements"><a href="#Angular-Elements" class="headerlink" title="Angular Elements"></a>Angular Elements</h3><p>Angular elements are Angular components packaged as custom elements (also called Web Components), a web standard for defining new HTML elements in a framework-agnostic way</p>
<h3 id="Pure-ESM-package"><a href="#Pure-ESM-package" class="headerlink" title="Pure ESM package"></a>Pure ESM package</h3><p><a href="https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c">https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c</a></p>
<h3 id="Angular-CLI"><a href="#Angular-CLI" class="headerlink" title="Angular CLI"></a>Angular CLI</h3><p><a href="https://angular.dev/cli">https://angular.dev/cli</a></p>
<h3 id="dynamic-import"><a href="#dynamic-import" class="headerlink" title="dynamic import"></a>dynamic import</h3><p><a href="https://medium.com/unalai/%E8%AA%8D%E8%AD%98-dynamic-import-3a6f75da2fc9">https://medium.com/unalai/%E8%AA%8D%E8%AD%98-dynamic-import-3a6f75da2fc9</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import</a></p>
<h3 id="Angular-lazy-loading"><a href="#Angular-lazy-loading" class="headerlink" title="Angular lazy loading"></a>Angular lazy loading</h3><p><a href="https://angular.dev/guide/ngmodules/lazy-loading">https://angular.dev/guide/ngmodules/lazy-loading</a></p>
<h3 id="Write-tools"><a href="#Write-tools" class="headerlink" title="Write tools"></a>Write tools</h3><p>ASCII tree<br>markdown table generator, convert table cell contains multiple lines of code to markdown text, see <code>What&#39;s new in angular 17 for details</code></p>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>todo</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeError: Cannot read property &#39;setState&#39; of undefined</title>
    <url>/2024/03/06/typeerror-cannot-read-property-setstate-of-undefined/</url>
    <content><![CDATA[<h1 id="TypeError-Cannot-read-property-‘setState’-of-undefined"><a href="#TypeError-Cannot-read-property-‘setState’-of-undefined" class="headerlink" title="TypeError: Cannot read property ‘setState’ of undefined"></a>TypeError: Cannot read property ‘setState’ of undefined</h1><p>相信很多初学React的同学都差不多遇到过这个错误。</p>
<p>在js中，function中的this代表调用这个函数的object，也就是谁调用这个函数，那么this就指向谁，这个object可以是window，可以使document，也可以是button。</p>
<p>这个特性导致了React中一个常见的的找不到this的问题，且看下面的代码。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThisTest</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;ddz&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ThisTest</span>;</span><br></pre></td></tr></table></figure>

<p>以上代码运行的时候会出现如下错误：</p>
<p><code>TypeError: Cannot read property &#39;setState&#39; of undefined</code></p>
<p>为啥呢？</p>
<p>我们来分析一下，函数handleClick中有一个this，而ES6 Class中的方法默认不绑定this，所以出错了。怎么解决？两个办法：</p>
<p>方法一：将handleClick改为箭头函数，因为箭头函数中的this指向该函数所在的组件，如下：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;ddz&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>方法二：用bind函数将调用的函数绑定到组件上，一般我们在constructor中做这个绑定，上面的代码可以变为：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThisTest</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加下面一行。</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然网上还有其他方法，比如使用React.createClass来创建组件，这样会自动将this绑定到组件上，但这种创建组件的方法已经不推荐使用了，或者在render函数中绑定this，如下：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)&#125;&gt;hello&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>或者直接将箭头函数写在调用处，如下：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">handleClick</span>&#125;&gt;hello&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>这两种方法会有轻微的性能问题，因为每次render函数调用时都会重新分配handleClick这个函数。</p>
<p>推荐第一种方法，简单方便，没有副作用。</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript-array-literal-type</title>
    <url>/2024/02/10/typescript-array-literal-type/</url>
    <content><![CDATA[<h1 id="TypeScript-Array-Literal-Type"><a href="#TypeScript-Array-Literal-Type" class="headerlink" title="TypeScript Array Literal Type"></a>TypeScript Array Literal Type</h1><h2 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h2><p>考虑下面的类型定义：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> response &#123;</span><br><span class="line">  <span class="attr">students</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">      <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意这里的<code>students</code>是一个数组字面量，而不是普通的数组，数组中的元素是一个对象，对象中有<code>name</code>和<code>age</code>两个属性。我们在使用这个类型的时候，可能会遇到这样的情况：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">data</span>: response = &#123;</span><br><span class="line">  <span class="attr">students</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Philip&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这样的情况下，<code>data</code>是一个符合<code>response</code>类型的对象，但是<code>students</code>数组中的元素个数是不对的，因为<code>students</code>的类型定义是一个元素的数组字面量。所以我们不能传入两个元素（这相当于把students当作数组类型来使用，而不是当作数组字面量来使用）。所以TS会给出如下提示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">is not assignable to <span class="built_in">type</span> [&#123; name: string; age: number; &#125;]</span><br><span class="line">Source has 2 element(s) but target allows only 1</span><br></pre></td></tr></table></figure>

<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>这时候我们可以使用<code>Array</code>类型来定义<code>students</code>：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> response &#123;</span><br><span class="line">  <span class="attr">students</span>: <span class="title class_">Array</span>&lt;&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  &#125;&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的定义，<code>students</code>是一个数组，数组中的元素是一个对象，对象中有<code>name</code>和<code>age</code>两个属性。这样的定义，<code>students</code>数组中的元素个数是不确定的，可以是0个或者多个。</p>
<p>也可以使用<code>[]</code>来定义<code>students</code>：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> response &#123;</span><br><span class="line">  <span class="attr">students</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  &#125;[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的定义和上面的是等价的。这时，我们再使用上面的<code>data</code>：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">data</span>: response = &#123;</span><br><span class="line">  <span class="attr">students</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Philip&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>就不会报错了。</p>
<p>但是有一种特殊情况，就是类型定义有时是无法修改的，比如定义在第三方库中，这时候我们可以使用push完成同样的效果。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">data</span>: response = &#123;</span><br><span class="line">  <span class="attr">students</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Philip&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">data.<span class="property">students</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
        <tag>array</tag>
        <tag>interface</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript-coding-standard</title>
    <url>/2025/03/29/typescript-coding-standard/</url>
    <content><![CDATA[<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><h2 id="User-optional-chaining-operator-instead-of"><a href="#User-optional-chaining-operator-instead-of" class="headerlink" title="User optional chaining operator ? instead of &amp;&amp;"></a>User optional chaining operator <code>?</code> instead of <code>&amp;&amp;</code></h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line">    <span class="attr">state</span>: <span class="string">&#x27;NY&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> city = user &amp;&amp; user.<span class="property">address</span> &amp;&amp; user.<span class="property">address</span>.<span class="property">city</span>; <span class="comment">// old way</span></span><br><span class="line"><span class="keyword">const</span> city = user?.<span class="property">address</span>?.<span class="property">city</span>; <span class="comment">// new way</span></span><br></pre></td></tr></table></figure>
<p>这种方式确实简单很多，但是处理Unit Test可能会麻烦一些。</p>
<h2 id="Use-nullish-coalescing-operator-instead-of"><a href="#Use-nullish-coalescing-operator-instead-of" class="headerlink" title="Use nullish coalescing operator ?? instead of ||"></a>Use nullish coalescing operator <code>??</code> instead of <code>||</code></h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = user.<span class="property">name</span> || <span class="string">&#x27;Guest&#x27;</span>; <span class="comment">// old way</span></span><br><span class="line"><span class="keyword">const</span> name = user.<span class="property">name</span> ?? <span class="string">&#x27;Guest&#x27;</span>; <span class="comment">// new way</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
        <tag>coding standard</tag>
        <tag>code review</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript-interface-vs-type</title>
    <url>/2024/11/19/typescript-interface-vs-type/</url>
    <content><![CDATA[<h2 id="What’s-the-differences-between-interface-and-type-in-typescript"><a href="#What’s-the-differences-between-interface-and-type-in-typescript" class="headerlink" title="What’s the differences between interface and type in typescript."></a>What’s the differences between interface and type in typescript.</h2><ol>
<li><p>types can create primitive type alias, while interface cannot.</p>
 <figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">name</span>: <span class="title class_">Name</span> = <span class="string">&#x27;zdd&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>interface can do declaration merging together</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">Person</span> = &#123; </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>, </span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure>
<p> while type can not do declaration merging</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">type <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">Person</span> = &#123; <span class="comment">// Error, Duplicate identifier &#x27;Person&#x27;</span></span><br><span class="line">    <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Extends and implements</p>
<ul>
<li>interface can extends another interface or class</li>
<li>class can implement interface</li>
</ul>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">IPerson</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> implements <span class="title class_">IPerson</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: string</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi, I am a student&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <strong>Interface extends interface</strong></p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">PartialPointX</span> &#123; <span class="attr">x</span>: number; &#125;</span><br><span class="line">interface <span class="title class_">Point</span> <span class="keyword">extends</span> <span class="title class_">PartialPointX</span> &#123; <span class="attr">y</span>: number; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> <strong>Type alias extends type alias</strong></p>
 <figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PartialPointX</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span>; &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = <span class="title class_">PartialPointX</span> &amp; &#123; <span class="attr">y</span>: <span class="built_in">number</span>; &#125;;</span><br></pre></td></tr></table></figure>
<p> <strong>Interface extends type alias</strong></p>
 <figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PartialPointX</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span>; &#125;;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> <span class="keyword">extends</span> <span class="title class_">PartialPointX</span> &#123; <span class="attr">y</span>: <span class="built_in">number</span>; &#125;</span><br></pre></td></tr></table></figure>
<p> <strong>Type alias extends interface</strong></p>
 <figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PartialPointX</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = <span class="title class_">PartialPointX</span> &amp; &#123; <span class="attr">y</span>: <span class="built_in">number</span>; &#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>types can create <code>interaction</code> types, but interface not.</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">type <span class="title class_">Name</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">Age</span> = &#123;</span><br><span class="line">    <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">Person</span> = <span class="title class_">Name</span> &amp; <span class="title class_">Age</span>; <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Name</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Age</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">Person</span> = <span class="title class_">Name</span> &amp; <span class="title class_">Age</span>; <span class="comment">// OK</span></span><br><span class="line">interface <span class="title class_">Person</span> = <span class="title class_">Name</span> &amp; <span class="title class_">Age</span> <span class="comment">// Error.</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>types can create <code>union</code> types, but interface not.</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">type <span class="title class_">Man</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">Women</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">Person</span> = <span class="title class_">Man</span> | <span class="title class_">Women</span>; <span class="comment">// ok</span></span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Man</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Woman</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">Person</span> = <span class="title class_">Man</span> &amp; <span class="title class_">Woman</span>; <span class="comment">// ok</span></span><br><span class="line">interface <span class="title class_">Person</span> = <span class="title class_">Man</span> &amp; <span class="title class_">Woman</span>; <span class="comment">// Error.</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>types can define <code>tuple</code>, but interface not.</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">type <span class="title class_">Response</span> = [string, number]; <span class="comment">// ok</span></span><br><span class="line">interface <span class="title class_">Response</span> = [string, number]; <span class="comment">// not work</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>总结一下，主要的区别就是：</p>
<ul>
<li><code>interface</code>可以做declaration合并，但是type不能。</li>
<li><code>interface</code> can be extend by <code>class</code>, while type can not be extend.</li>
<li><code>type</code> 可以定义<code>union</code> <code>interaction</code>类型，但是<code>interface</code>不能。</li>
</ul>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
        <tag>type</tag>
        <tag>interface</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript-tsc-guide</title>
    <url>/2024/09/18/typescript-tsc-guide/</url>
    <content><![CDATA[<h2 id="Install-TypeScript"><a href="#Install-TypeScript" class="headerlink" title="Install TypeScript"></a>Install TypeScript</h2><p>This directive will install TypeScript globally.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure>

<h2 id="Init-TypeScript-project"><a href="#Init-TypeScript-project" class="headerlink" title="Init TypeScript project"></a>Init TypeScript project</h2><p>This step will create a <code>tsconfig.json</code> file in under <code>typescript-tsc-guide</code> folder.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> typescript-tsc-guide</span><br><span class="line"><span class="built_in">cd</span> typescript-tsc-guide</span><br><span class="line">tsc --init <span class="comment"># create tsconfig.json file</span></span><br></pre></td></tr></table></figure>

<h2 id="Create-typescript-files"><a href="#Create-typescript-files" class="headerlink" title="Create typescript files"></a>Create typescript files</h2><p>Create a folder <code>src</code> under current folder. Then create a file <code>index.ts</code> under <code>src</code> folder.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> src</span><br><span class="line"><span class="built_in">touch</span> src/index.ts</span><br></pre></td></tr></table></figure>

<p>input the following code to <code>src/index.ts</code> file.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br></pre></td></tr></table></figure>

<h2 id="Compile-TypeScript-files"><a href="#Compile-TypeScript-files" class="headerlink" title="Compile TypeScript files"></a>Compile TypeScript files</h2><p>This step will compile the <code>src/index.ts</code> file to <code>src/index.js</code> file.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> typescript-tsc-guide</span><br><span class="line">tsc</span><br></pre></td></tr></table></figure>

<h2 id="Compile-options"><a href="#Compile-options" class="headerlink" title="Compile options"></a>Compile options</h2><h3 id="outDir"><a href="#outDir" class="headerlink" title="outDir"></a>outDir</h3><p>Usually, we put the emitted files under <code>dist</code> folder. To do this, we need to modify the <code>tsconfig.json</code> file.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span> <span class="comment">// output directory for the emitted files</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>Run <code>tsc</code> again, the emitted files will be under <code>dist</code> folder.</p>
<h3 id="rootDir"><a href="#rootDir" class="headerlink" title="rootDir"></a>rootDir</h3><p>We can also specify the source folder by using <code>rootDir</code> option, in this way, only files under the source folder will be compiled.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span> <span class="comment">// specify the source folder</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>If you specify the <code>rootDir</code> option, you can’t put the source files outside the source folder. otherwise you’ll got the following error:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error TS6059: File <span class="string">&#x27;/typescript-tsc-guide/xxx.ts&#x27;</span> is not under <span class="string">&#x27;rootDir&#x27;</span> <span class="string">&#x27;/typescript-tsc-guide/src&#x27;</span>. <span class="string">&#x27;rootDir&#x27;</span> is expected to contain all <span class="built_in">source</span> files.</span><br></pre></td></tr></table></figure>

<p>To test this, create a file <code>test.ts</code> under project root(same location as tsconfig.json) and run <code>tsc</code> command, you’ll get the error.</p>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
        <tag>tsc</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript-how-tsconfig-works-in-framework</title>
    <url>/2024/06/05/typescript-how-tsconfig-works-in-framework/</url>
    <content><![CDATA[<p>这篇文章讨论一下在 Angular&#x2F;Nx 项目中 tsconfig.json 是如何工作的，本文使用的环境如下：</p>
<ul>
<li>Node: 20.11.0(<code>node -v</code>)</li>
<li>NPM: 10.2.4(<code>npm -v</code>)</li>
<li>Angular CLI: 17.3.7(<code>ng version</code>)</li>
<li>Typescript: 5.4.2(in <code>package.json</code> —by project, or <code>tsc -v</code> —globally)</li>
<li>Nx: 15.2.1(<code>nx --version</code>)</li>
</ul>
<h2 id="1-什么是-tsconfig-json"><a href="#1-什么是-tsconfig-json" class="headerlink" title="1. 什么是 tsconfig.json"></a>1. 什么是 tsconfig.json</h2><p><code>tsconfig.json</code> 是 TypeScript 的配置文件，用于配置 TypeScript 编译器的行为。目前很多框架都使用Typescript，自然也就需要配置 <code>tsconfig.json</code> 文件。</p>
<h2 id="2-Angular-Single-Project"><a href="#2-Angular-Single-Project" class="headerlink" title="2. Angular Single Project"></a>2. Angular Single Project</h2><p>Angular框架原生支持Typescript，所以在Angular项目中，使用Angular CLI创建Angular项目后，项目的文件结构如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">my-app/</span><br><span class="line">├─ node_modules/</span><br><span class="line">├─ src/</span><br><span class="line">│  ├─ index.html</span><br><span class="line">│  ├─ main.ts</span><br><span class="line">│  ├─ ...</span><br><span class="line">├─ angular.json</span><br><span class="line">├─ package.json</span><br><span class="line">├─ tsconfig.app.json</span><br><span class="line">├─ tsconfig.json</span><br><span class="line">├─ tsconfig.spec.json</span><br><span class="line">├─ ...</span><br></pre></td></tr></table></figure>

<p>与tsconfig相关的文件有如下三个：</p>
<ul>
<li>tsconfig.json</li>
<li>tsconfig.app.json</li>
<li>tsconfig.spec.json</li>
</ul>
<h3 id="2-1-tsconfig-json"><a href="#2-1-tsconfig-json" class="headerlink" title="2.1 tsconfig.json"></a>2.1 tsconfig.json</h3><p>先看一下 <code>tsconfig.json</code> 文件，这是该项目总的配置文件，用来做一些通用配置，其他tsconfig文件可以继承这个文件。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* To learn more about this file see: https://angular.io/config/tsconfig. */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compileOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/out-tsc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitOverride&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noPropertyAccessFromIndexSignature&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitReturns&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noFallthroughCasesInSwitch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;experimentalDecorators&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;importHelpers&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2022&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2022&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;useDefineForClassFields&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;ES2022&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;dom&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;angularCompilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;enableI18nLegacyMessageIdFormat&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strictInjectionParameters&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strictInputAccessModifiers&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strictTemplates&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-tsconfig-app-json"><a href="#2-2-tsconfig-app-json" class="headerlink" title="2.2 tsconfig.app.json"></a>2.2 tsconfig.app.json</h3><p><code>tsconfig.app.json</code> 文件是 Angular app的编译配置文件，由第一行<code>&quot;extends&quot;: &quot;./tsconfig.json&quot;</code>可知，它继承了 <code>tsconfig.json</code> 文件的配置，同时也可以覆盖 <code>tsconfig.json</code> 文件的配置。</p>
<ul>
<li>files: </li>
<li>include: <code>&quot;src/**/*.d.ts&quot;</code> 表示包含所有位于src目录下的Typescript类型定义文件(*.d.ts)</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* To learn more about this file see: https://angular.io/config/tsconfig. */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./tsconfig.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./out-tsc/app&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;src/main.ts&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;src/**/*.d.ts&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-tsconfig-spec-json"><a href="#2-3-tsconfig-spec-json" class="headerlink" title="2.3 tsconfig.spec.json"></a>2.3 tsconfig.spec.json</h3><p><code>tsconfig.spec.json</code> 文件是 Angular app的测试配置文件，由第一行<code>&quot;extends&quot;: &quot;./tsconfig.json&quot;</code>可知，它也继承了 <code>tsconfig.json</code> 文件。在include选项中，包含了所有的测试文件(<em>.spec.ts)和类型定义文件(</em>.d.ts)。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* To learn more about this file see: https://angular.io/config/tsconfig. */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./tsconfig.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./out-tsc/spec&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;jasmine&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;src/**/*.spec.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.d.ts&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>如果你尝试将<code>src/**/*.spec.ts</code>从<code>include</code>选项中删除，再运行<code>npm run test</code>，将会遇到如下错误。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">An unhandled exception occurred: error TS18003: No inputs were found in config file &#x27;.../my-app/tsconfig.spec.json&#x27;. Specified &#x27;include&#x27; paths were &#x27;[&quot;src/**/*.d.ts&quot;]&#x27; and &#x27;exclude&#x27; paths were &#x27;[&quot;./out-tsc/spec&quot;]&#x27;</span><br></pre></td></tr></table></figure>

<p>由上面的分析可知，Angular项目中的 <code>tsconfig.json</code> 文件是一个全局配置文件，<code>tsconfig.app.json</code>掌管app的编译选项，<code>tsconfig.spec.json</code>负责测试文件的配置，这两者分别继承了 <code>tsconfig.json</code> 文件，同时可以做一些个性化的配置。</p>
<p>那么<code>tsconfig.app.json</code>和<code>tsconfig.spec.json</code>文件是如何被使用的呢？这就需要分析另一个文件：<code>angular.json</code>：</p>
<h3 id="2-4-angular-json"><a href="#2-4-angular-json" class="headerlink" title="2.4 angular.json"></a>2.4 angular.json</h3><p>可以看到在<code>projects | my-app | architect | build | options</code>中，有一个<code>tsConfig</code>选项，这个选项指定了<code>tsconfig.app.json</code>文件的路径，这就是告诉Angular CLI在编译app时要使用<code>tsconfig.app.json</code>文件。</p>
<p>同时，在<code>projects | my-app | architect | test | options</code>中，有一个<code>tsConfig</code>选项，这个选项指定了<code>tsconfig.spec.json</code>文件的路径，这就是告诉Angular CLI在编译测试文件时要使用<code>tsconfig.spec.json</code>文件。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/@angular/cli/lib/config/schema.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;newProjectRoot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;projects&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;projects&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;my-app&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;projectType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;architect&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@angular-devkit/build-angular:application&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tsConfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsconfig.app.json&quot;</span><span class="punctuation">,</span> <span class="comment">// 1 &lt;-- here</span></span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@angular-devkit/build-angular:karma&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;polyfills&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;zone.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="string">&quot;zone.js/testing&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tsConfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsconfig.spec.json&quot;</span><span class="punctuation">,</span> <span class="comment">// 2 &lt;-- here</span></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>总结一下：</p>
<ul>
<li><code>tsconfig.json</code> 是全局配置文件</li>
<li><code>tsconfig.app.json</code> 是app的编译配置文件，继承了<code>tsconfig.json</code>文件。</li>
<li><code>tsconfig.spec.json</code> 是测试文件的配置文件，继承了<code>tsconfig.json</code>文件。</li>
<li><code>angular.json</code> 文件中的<code>tsConfig</code>选项指定了<code>tsconfig.app.json</code>和<code>tsconfig.spec.json</code>文件的路径</li>
</ul>
<p>上图：<br><img src="/../images/angular-single-project-tsconfig.png" alt="angular-single-project-tsconfig"></p>
<h2 id="3-Angular-Multi-Project"><a href="#3-Angular-Multi-Project" class="headerlink" title="3. Angular Multi Project"></a>3. Angular Multi Project</h2><p>关于如何创建Angular多项目应用，可以参考<a href="https://zdd.github.io/2024/05/26/angular-module-federation/">这篇</a></p>
<p>多项目应用的文件结构如下，projects目录负责存放所有的子项目，这里有两个子项目：mfe1和shell。<br>每个子项目分别有自己的<code>tsconfig.app.json</code>和<code>tsconfig.spec.json</code>文件，这两个文件分别继承了全局的<code>tsconfig.json</code>文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">my-app/</span><br><span class="line">├─ node_modules/</span><br><span class="line">├─ projects/</span><br><span class="line">│  ├─ mfe1/</span><br><span class="line">│  │  ├─ ...</span><br><span class="line">│  │  ├─ tsconfig.app.json</span><br><span class="line">│  │  ├─ tsconfig.spec.json</span><br><span class="line">│  ├─ shell/</span><br><span class="line">│  │  ├─ ...</span><br><span class="line">│  │  ├─ tsconfig.app.json</span><br><span class="line">│  │  ├─ tsconfig.spec.json</span><br><span class="line">├─ ...</span><br><span class="line">├─ angular.json</span><br><span class="line">├─ package.json</span><br><span class="line">├─ tsconfig.json</span><br></pre></td></tr></table></figure>

<p><code>angular.json</code>文件中的<code>tsConfig</code>选项指定了每个子项目的<code>tsconfig.app.json</code>和<code>tsconfig.spec.json</code>文件的路径。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/@angular/cli/lib/config/schema.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;newProjectRoot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;projects&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;projects&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;shell&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// project shell &lt;-- here</span></span><br><span class="line">      <span class="attr">&quot;projectType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="attr">&quot;architect&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ngx-build-plus:browser&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            <span class="attr">&quot;tsConfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;projects/shell/tsconfig.app.json&quot;</span><span class="punctuation">,</span> <span class="comment">// 1 &lt;-- here</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="comment">// ...</span></span><br><span class="line">          <span class="attr">&quot;tsConfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;projects/shell/tsconfig.spec.json&quot;</span><span class="punctuation">,</span> <span class="comment">// 2 &lt;-- here</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mfe1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// project mfe1 &lt;-- here</span></span><br><span class="line">      <span class="attr">&quot;projectType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="attr">&quot;architect&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ngx-build-plus:browser&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            <span class="attr">&quot;tsConfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;projects/mfe1/tsconfig.app.json&quot;</span><span class="punctuation">,</span> <span class="comment">// 3 &lt;-- here</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@angular-devkit/build-angular:karma&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            <span class="attr">&quot;tsConfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;projects/mfe1/tsconfig.spec.json&quot;</span><span class="punctuation">,</span> <span class="comment">// 4 &lt;-- here</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>总结一下：<br>多项目Angular应用的tsconfig文件使用情况</p>
<ul>
<li><code>tsconfig.json</code> 是全局配置文件，位于workspace根目录下</li>
<li>每个子项目有自己的<code>tsconfig.app.json</code>和<code>tsconfig.spec.json</code>文件，分别继承了全局的<code>tsconfig.json</code>文件</li>
<li><code>angular.json</code> 文件中的<code>tsConfig</code>选项指定了每个子项目的<code>tsconfig.app.json</code>和<code>tsconfig.spec.json</code>文件的路径</li>
</ul>
<p>上图：<br><img src="/../images/angular-multiple-projects-tsconfig.png" alt="angular-multiple-projects-tsconfig"></p>
<h2 id="4-Nx-Mono-Repo"><a href="#4-Nx-Mono-Repo" class="headerlink" title="4. Nx Mono Repo"></a>4. Nx Mono Repo</h2><p>使用Nx创建的Mono Repo项目，Nx会自动创建一个<code>tsconfig.base.json</code>文件，这个文件是全局的配置文件，所有的子项目都会继承这个文件。并且没有<code>angular.json</code>文件，每个子项目有自己的<code>project.json</code>文件，负责引用子项目中的<code>tsconfig</code>文件。</p>
<p>假设我们的mono repo包含一个app，名为<code>todo</code>, 一个library, 名为<code>data-access</code>，则文件结构如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Nx mono repo/</span><br><span class="line">├─ apps/</span><br><span class="line">│  ├─ todo/</span><br><span class="line">│  │  ├─ ...</span><br><span class="line">│  │  ├─ project.json</span><br><span class="line">│  │  ├─ tsconfig.app.json</span><br><span class="line">│  │  ├─ tsconfig.json</span><br><span class="line">│  │  ├─ tsconfig.spec.json</span><br><span class="line">├─ libs/</span><br><span class="line">│  ├─ data-access/</span><br><span class="line">│  │  ├─ ...</span><br><span class="line">│  │  ├─ project.json</span><br><span class="line">│  │  ├─ tsconfig.json</span><br><span class="line">│  │  ├─ tsconfig.lib.json</span><br><span class="line">│  │  ├─ tsconfig.spec.json</span><br><span class="line">├─ node_modules/</span><br><span class="line">├─ package.json</span><br><span class="line">├─ tsconfig.base.json</span><br><span class="line">├─ ...</span><br></pre></td></tr></table></figure>

<p>总结一下：</p>
<ul>
<li><code>tsconfig.base.json</code> 是全局配置文件，位于workspace根目录下</li>
<li>app项目有自己的<code>tsconfig.app.json</code>和<code>tsconfig.spec.json</code>文件以及<code>tsconfig.json</code>，继承关系如下：<ul>
<li><code>tsconfig.app.json</code>继承<code>tsconfig.json</code></li>
<li><code>tsconfig.spec.json</code>继承<code>tsconfig.json</code></li>
<li><code>tsconfig.json</code>继承<code>tsconfig.base.json</code></li>
</ul>
</li>
<li>library项目有自己的<code>tsconfig.lib.json</code>和<code>tsconfig.spec.json</code>文件以及<code>tsconfig.json</code>，继承关系如下：<ul>
<li><code>tsconfig.lib.json</code>继承<code>tsconfig.json</code></li>
<li><code>tsconfig.spec.json</code>继承<code>tsconfig.json</code></li>
<li><code>tsconfig.json</code>继承<code>tsconfig.base.json</code></li>
</ul>
</li>
<li>每个子项目的<code>project.json</code>文件负责引用子项目中的<code>tsconfig</code>文件</li>
</ul>
<p>一图胜千言<br><img src="/../images/nx-mono-repo-tsconfig.png" alt="nx-mono-repo-tsconfig"></p>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>typescript</tag>
        <tag>nx</tag>
        <tag>tsconfig</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript-paths</title>
    <url>/2024/05/25/typescript-paths/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><code>paths</code> is a TypeScript configuration option that allows you to map a module name to a path. This is useful when you have a complex project structure and you want to avoid long relative paths.</p>
<h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><p>Add the following configuration to your <code>tsconfig.json</code> file.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span> <span class="comment">// This must be specified.</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@app/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/app/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@shared/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/shared/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@utils/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/app/service/others/utils/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="baseUrl"><a href="#baseUrl" class="headerlink" title="baseUrl"></a>baseUrl</h2><p>The <code>baseUrl</code> option specifies the base directory to resolve non-relative module names. This must be specified when using absolute path. In above example, <code>baseUrl</code> is set to <code>.</code>(this is the same directory with <code>tsconfig.json</code>) which means the base directory is the root directory of the project. take “@app&#x2F;*” as an example, when you import a module like <code>import &#123;AppComponent&#125; from &#39;@app/app.component&#39;</code>, TypeScript will look for the module in the <code>src/app</code> directory.</p>
<p>if you don’t specify <code>baseUrl</code>, You must use relative paths to import modules. For example:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@app/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/app/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@shared/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/shared/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@utils/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/app/service/others/utils/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>Suppose you have a file <code>stringUtils.ts</code> in the <code>src/app/service/others/utils</code> directory. You can import it like this:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;stringUtils&#125; <span class="keyword">from</span> <span class="string">&#x27;@utils/stringUtils&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>You don’t need to write the long relative path. TypeScript will automatically resolve the path based on the configuration in <code>tsconfig.json</code>.</p>
<h2 id="Nx-mono-repo"><a href="#Nx-mono-repo" class="headerlink" title="Nx mono repo"></a>Nx mono repo</h2><p>When using Nx mono repo to create multiple app&#x2F;libs, be careful when you use <code>paths</code> in <code>tsconfig.json</code>. You need to add the <code>paths</code> configuration to the <code>tsconfig.base.json</code> file in the root directory of the Nx workspace. and every tsconfig.json in each app&#x2F;lib should extend <code>tsconfig.base.json</code>.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json in app or lib</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../tsconfig.base.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../dist/out-tsc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;**/*.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;**/*.tsx&quot;</span><span class="punctuation">,</span> <span class="string">&quot;**/*.js&quot;</span><span class="punctuation">,</span> <span class="string">&quot;**/*.jsx&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tsconfig.base.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span> <span class="comment">// This must be specified.</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@app/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;apps/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@shared/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;libs/shared/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@utils/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;libs/shared/utils/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>Note that <code>tsconfig.json</code> in app&#x2F;lib has higher priority than <code>tsconfig.base.json</code>. If you have same configuration in both files, the configuration in <code>tsconfig.json</code> will override the configuration in <code>tsconfig.base.json</code>. this will cause some path not found sometimes.</p>
<p>So, </p>
<ul>
<li><code>Only</code> add <code>paths</code> configuration to <code>tsconfig.base.json</code> file in the root directory of Nx workspace.</li>
<li><code>Do not</code> add <code>paths</code> configuration to any other <code>tsconfig.json</code> file in the app&#x2F;lib.</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.typescriptlang.org/tsconfig/#paths">https://www.typescriptlang.org/tsconfig/#paths</a></p>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
        <tag>tsconfig</tag>
        <tag>paths</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript-type-assertion</title>
    <url>/2024/06/04/typescript-type-assertion/</url>
    <content><![CDATA[<p>今天做Code Review的时候看到如下一行代码，之前没有见过这种写法，查了一下资料，发现这是TypeScript中的类型断言。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myCanvas = &lt;<span class="title class_">HTMLCanvasElement</span>&gt;<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;main_canvas&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>其实类型断言我也之前也用过，不过用的是<code>as</code>关键字，如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myCanvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;main_canvas&quot;</span>) <span class="keyword">as</span> <span class="title class_">HTMLCanvasElement</span>;</span><br></pre></td></tr></table></figure>

<p>这两者效果一样。TypeScript中的类型断言有两种写法，一种是<code>&lt;Type&gt;</code>，另一种是<code>as Type</code>。这两种写法是等价的，但是在React中，<code>&lt;Type&gt;</code>会和JSX的语法冲突，所以推荐使用<code>as Type</code>的写法。</p>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
        <tag>type assertion</tag>
      </tags>
  </entry>
  <entry>
    <title>undefined vs not defined</title>
    <url>/2023/12/06/undefined-vs-not-defined/</url>
    <content><![CDATA[<h1 id="undefined-vs-not-defined"><a href="#undefined-vs-not-defined" class="headerlink" title="undefined vs not defined"></a>undefined vs not defined</h1><p>In JavaScript, <code>undefined</code> and <code>not defined</code> are two different concepts. </p>
<ul>
<li><code>undefined</code>: a variable has been declared but has not yet been assigned a value.</li>
<li><code>not defined</code>: a variable has not been declared(not exists).</li>
</ul>
<h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="not-defined"><a href="#not-defined" class="headerlink" title="not defined"></a>not defined</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// Uncaught ReferenceError: b is not defined</span></span><br></pre></td></tr></table></figure>

<p>Whenever you try to access a variable that is not declared, JavaScript throws an error: <code>Uncaught ReferenceError: xxx is not defined</code>. This is because variable b is not declared anywhere in the code. but you can still use <code>typeof</code> to check if a variable is defined or not.</p>
<h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> b); <span class="comment">// undefined, even b is not defined</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>undefined</tag>
        <tag>not defined</tag>
      </tags>
  </entry>
  <entry>
    <title>undefined-in-javascript</title>
    <url>/2023/12/15/undefined-in-javascript/</url>
    <content><![CDATA[<h1 id="undefined-in-javascript"><a href="#undefined-in-javascript" class="headerlink" title="undefined in javascript"></a>undefined in javascript</h1><p>什么情况下JavaScript会产生<code>undefined</code>类型？</p>
<h2 id="1-显式undefined类型"><a href="#1-显式undefined类型" class="headerlink" title="1. 显式undefined类型"></a>1. 显式<code>undefined</code>类型</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined.</span></span><br></pre></td></tr></table></figure>

<h2 id="2-未初始化的变量"><a href="#2-未初始化的变量" class="headerlink" title="2. 未初始化的变量"></a>2. 未初始化的变量</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined.</span></span><br></pre></td></tr></table></figure>

<h2 id="3-访问对象中不存在的属性"><a href="#3-访问对象中不存在的属性" class="headerlink" title="3. 访问对象中不存在的属性"></a>3. 访问对象中不存在的属性</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zdd&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">41</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">gender</span>); <span class="comment">// undefined.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array in JavaScript is also Object.</span></span><br><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[<span class="number">3</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="4-函数没有返回值"><a href="#4-函数没有返回值" class="headerlink" title="4. 函数没有返回值"></a>4. 函数没有返回值</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello, world!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>()); <span class="comment">// undefined.</span></span><br></pre></td></tr></table></figure>

<h2 id="5-调用函数没有传递对应的参数"><a href="#5-调用函数没有传递对应的参数" class="headerlink" title="5. 调用函数没有传递对应的参数"></a>5. 调用函数没有传递对应的参数</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// output undefined.</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// output undefined.</span></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(); <span class="comment">// no arguments passed in.</span></span><br></pre></td></tr></table></figure>

<h1 id="undefined-not-defined"><a href="#undefined-not-defined" class="headerlink" title="undefined !&#x3D; not defined"></a><code>undefined</code> !&#x3D; <code>not defined</code></h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// error, b is not defined</span></span><br></pre></td></tr></table></figure>

<h1 id="undefined-vs-void-0"><a href="#undefined-vs-void-0" class="headerlink" title="undefined vs void 0"></a><code>undefined</code> vs <code>void 0</code></h1><p>既然已经有了<code>undefined</code>，为什么有很多JavaScript库中还使用<code>void 0</code>呢？ 原因就是<code>undefined</code>是一个值，而不是关键字，能被用户串改，看下面的代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="literal">undefined</span> = <span class="number">1</span>; <span class="comment">// undefined被用户篡改！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 这里判断参数是否传入，结果失效了，因为undefined值在前面被改成了1</span></span><br><span class="line">  <span class="keyword">if</span> (a === <span class="literal">undefined</span> || b === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请输入两个数&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 这里会执行add函数中的if分支，是不是很崩溃？</span></span><br></pre></td></tr></table></figure>

<p>使用<code>void 0</code>就不会有这个问题。 </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="literal">undefined</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 写成void 0就没有问题了，无论undefined被改成什么，都不影响。</span></span><br><span class="line">  <span class="keyword">if</span> (a === <span class="keyword">void</span> <span class="number">0</span> || b === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请输入两个数&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<p><code>void expression</code> - 先对<code>expression</code>求值，然后返回<code>undefined</code></p>
<h1 id="undefined-in-regex"><a href="#undefined-in-regex" class="headerlink" title="undefined in regex"></a><code>undefined</code> in regex</h1><p>In regex, you can use <code>test</code> to check whether a string matches a pattern.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^hello/</span>.<span class="title function_">test</span>(<span class="string">&#x27;hello, world!&#x27;</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>If you didn’t pass any parameter to <code>test</code>, it will try to match string <code>undefined</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/undefined/</span>.<span class="title function_">test</span>()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>This is equivalent to the following code, since <code>undefined</code> convert to string is <code>&#39;undefined&#39;</code>, so the result is true.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/undefined/</span>.<span class="title function_">test</span>(<span class="literal">undefined</span>));</span><br></pre></td></tr></table></figure>
<p>See <a href="https://zdd.github.io/2024/02/22/javascript-regex-test/">here</a> for details of <code>test</code> in javascript regex.</p>
<h1 id="undefined-vs-null"><a href="#undefined-vs-null" class="headerlink" title="undefined vs null"></a><code>undefined</code> vs <code>null</code></h1><p>Conceptually, <code>undefined</code> indicates the absence of a <em>value</em>, while <code>null</code> indicates the absence of an <em>object</em> (which could also make up an excuse for <code>[typeof null === &quot;object&quot;](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null)</code>). The language usually defaults to <code>undefined</code> when something is devoid of a value:</p>
<ul>
<li>A <code>[return](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return)</code> statement with no value (<code>return;</code>) implicitly returns <code>undefined</code>.</li>
<li>Accessing a nonexistent <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">object</a> property (<code>obj.iDontExist</code>) returns <code>undefined</code>.</li>
<li>A variable declaration without initialization (<code>let x;</code>) implicitly initializes the variable to <code>undefined</code>.</li>
<li>Many methods, such as <code>[Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)</code> and <code>[Map.prototype.get()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get)</code>, return <code>undefined</code> when no element is found.</li>
</ul>
<p><code>null</code> is used much less often in the core language. The most important place is the end of the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">prototype chain</a> — subsequently, methods that interact with prototypes, such as <code>[Object.getPrototypeOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf)</code>, <code>[Object.create()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create)</code>, etc., accept or return <code>null</code> instead of <code>undefined</code>.</p>
<p><code>null</code> is a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords">keyword</a>, but <code>undefined</code> is a normal <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers">identifier</a> that happens to be a global property. In practice, the difference is minor, since <code>undefined</code> should not be redefined or shadowed.</p>
<h1 id="undefined-convert-to-other-types"><a href="#undefined-convert-to-other-types" class="headerlink" title="undefined convert to other types"></a>undefined convert to other types</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(<span class="literal">undefined</span>)); <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="literal">undefined</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>注意<code>null</code>转换为其他类型时与<code>undefined</code>的区别</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(<span class="literal">null</span>)); <span class="comment">// &quot;null&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="literal">null</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h1 id="References："><a href="#References：" class="headerlink" title="References："></a>References：</h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#undefined_type">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#undefined_type</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void</a></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>undefined</tag>
      </tags>
  </entry>
  <entry>
    <title>useful-commands-all-in-one</title>
    <url>/2024/05/14/useful-commands/</url>
    <content><![CDATA[<h1 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h1><ol>
<li><code>Ctrl + P</code> - Search by file name</li>
<li><code>Ctrl + Shift + P</code> - Open command palette</li>
<li><code>Alt + Left Arrow</code> - Go back</li>
<li><code>Ctrl + K, Ctrl + 0</code> - Fold all</li>
<li><code>Ctrl + K, Ctrl + J</code> - Unfold all</li>
</ol>
<h1 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h1><h2 id="Create-project-with-specific-version"><a href="#Create-project-with-specific-version" class="headerlink" title="Create project with specific version"></a>Create project with specific version</h2><p>The following command create angular app with angular 15</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx @angular/cli@15 new my-app</span><br></pre></td></tr></table></figure>

<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a>Branch</h2><h3 id="1-merge-main-branch-to-current-branch"><a href="#1-merge-main-branch-to-current-branch" class="headerlink" title="1. merge main branch to current branch"></a>1. merge main branch to current branch</h3><p>This is very useful when you work on a branch for a long time, and every day before you start coding, you sync your branch with <code>main</code> branch.<br>Suppose you are on the <code>feature-branch</code> branch, and you want to merge the <code>main</code> branch to the <code>feature-branch</code> branch, just use the following command.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin main</span><br></pre></td></tr></table></figure>

<h3 id="Move-changes-from-one-branch-to-another"><a href="#Move-changes-from-one-branch-to-another" class="headerlink" title="Move changes from one branch to another"></a>Move changes from one branch to another</h3><p>Suppose you made some modifications on branch <code>A</code>, and you want to move these changes to branch <code>B</code>, you can use the following command.<br>If branch <code>B</code> is existing and has the latest code, you can use the following command.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git switch B <span class="comment"># the modification code will automatically bring to branch B</span></span><br></pre></td></tr></table></figure>

<p>If branch <code>B</code> is not existing, you can use the following command.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash <span class="comment"># save the changes</span></span><br><span class="line">git checkout main <span class="comment"># switch to main branch</span></span><br><span class="line">git pull <span class="comment"># pull the latest code</span></span><br><span class="line">git checkout -b B <span class="comment"># create a new branch B</span></span><br><span class="line">git stash pop <span class="comment"># apply the changes to branch B</span></span><br></pre></td></tr></table></figure>

<p><code>git checkout</code> vs <code>git switch</code>?</p>
<h3 id="Checkout-a-remote-branch"><a href="#Checkout-a-remote-branch" class="headerlink" title="Checkout a remote branch"></a>Checkout a remote branch</h3><p>For <code>single</code> remote, use the following command.</p>
<ol>
<li><code>git fetch</code> – fetch the remote branch</li>
<li><code>git checkout -b local-branch-name origin/remote-branch-name</code> – checkout the remote branch</li>
<li><code>git switch -t remote-branch-name</code> – switch to the remote branch, use s<code>git branch -v -a</code> to make sure your branch is ready.</li>
<li>checkout from tag: <code>git checkout tags/v1.0.0 -b branch-name</code></li>
</ol>
<h3 id="Delete-branch"><a href="#Delete-branch" class="headerlink" title="Delete branch"></a>Delete branch</h3><ol>
<li><code>git branch -d branch-name</code> – delete a local branch</li>
<li><code>git branch -D branch-name</code> – force delete a local branch</li>
<li><code>git push origin --delete branch-name</code> – delete a remote branch</li>
</ol>
<h2 id="Diff"><a href="#Diff" class="headerlink" title="Diff"></a>Diff</h2><h3 id="Diff-staged-indexed-changes"><a href="#Diff-staged-indexed-changes" class="headerlink" title="Diff staged&#x2F;indexed changes"></a>Diff staged&#x2F;indexed changes</h3><ol>
<li><code>git diff --cached</code> </li>
<li><code>git status -v</code> – show the changes in the index(staged changes)</li>
</ol>
<h3 id="2-checkout-remote-branch"><a href="#2-checkout-remote-branch" class="headerlink" title="2. checkout remote branch"></a>2. checkout remote branch</h3><p>Before checking out a remote branch, you need to fetch the remote branch first.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git checkout -b local-branch-name origin/remote-branch-name</span><br></pre></td></tr></table></figure>

<h3 id="3-Checkout-a-specific-commit"><a href="#3-Checkout-a-specific-commit" class="headerlink" title="3. Checkout a specific commit."></a>3. Checkout a specific commit.</h3><p>The following command will create a new branch from the specific commit, you can find the commit id by <code>git log</code> command or from the git history.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b new_branch commit-hash</span><br></pre></td></tr></table></figure>

<h2 id="Undo"><a href="#Undo" class="headerlink" title="Undo"></a>Undo</h2><h3 id="1-Undo-last-commit"><a href="#1-Undo-last-commit" class="headerlink" title="1. Undo last commit"></a>1. Undo last commit</h3><ol>
<li><code>git reset --soft HEAD~1</code> &#x2F;&#x2F; undo the last commit and keep the changes in working directory.</li>
<li><code>git reset --hard HEAD~1</code> &#x2F;&#x2F; undo the last commit and remove all changes.</li>
</ol>
<h3 id="2-Undo-staged-changes-not-committed-yet"><a href="#2-Undo-staged-changes-not-committed-yet" class="headerlink" title="2. Undo staged changes(not committed yet)"></a>2. Undo staged changes(not committed yet)</h3><ol>
<li><code>git reset HEAD file-name</code> &#x2F;&#x2F; unstage a file</li>
<li><code>git reset HEAD .</code> &#x2F;&#x2F; unstage all files</li>
</ol>
<h3 id="3-Undo-unstaged-changes-changes-are-not-added-or-committed"><a href="#3-Undo-unstaged-changes-changes-are-not-added-or-committed" class="headerlink" title="3. Undo unstaged changes(changes are not added or committed)"></a>3. Undo unstaged changes(changes are not added or committed)</h3><ol>
<li><code>git checkout -- .</code> &#x2F;&#x2F; undo all changes in the working directory, same as <code>git checkout .</code>?</li>
<li><code>git checkout -- file-name</code> &#x2F;&#x2F; undo changes in a specific file</li>
<li><code>git checkout -- &#39;*.js&#39;</code> &#x2F;&#x2F; undo changes in all js files</li>
</ol>
<h3 id="4-Undo-untracked-files"><a href="#4-Undo-untracked-files" class="headerlink" title="4. Undo untracked files"></a>4. Undo untracked files</h3><ol>
<li><code>git clean -f</code> &#x2F;&#x2F; remove untracked files</li>
<li><code>git clean -f -d</code> &#x2F;&#x2F; remove untracked files and directories</li>
</ol>
<p><code>git restore</code>和<code>git reset</code>的区别是什么？</p>
<h2 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h2><p><code>git stash</code> – save the changes<br><code>git stash list</code> – list all stashes<br><code>git stash apply &quot;stash@&#123;n&#125;&quot;</code> – apply the nth stash<br><code>git stash apply n</code> – apply the nth stash<br><code>git stash pop</code> – apply the latest stash and remove it from the stash list</p>
<h1 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h1><ol>
<li><code>F12</code> - Open developer tools</li>
<li><code>Ctrl + Shift + P</code> - Open command palette(only works after you open developer tools)</li>
<li><code>Ctrl + P</code> - Open file(after you open developer tools), this is pretty useful when you want to find a file in the source tab.</li>
<li><code>Ctrl</code> + <code>Mouse Left Click</code> - Open a link in a new tab. (also can use <code>Mouse Wheel</code> click)</li>
</ol>
<h1 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h1><ol start="5">
<li>Input <code>chrome://settings</code> in the address bar to open the settings page.</li>
</ol>
<h1 id="Jest"><a href="#Jest" class="headerlink" title="Jest"></a>Jest</h1><ol>
<li><code>jest</code> - Run all test</li>
<li><code>jest --coverage</code> - Run test with coverage report</li>
<li><code>jest --watch</code> - Run test in watch mode</li>
<li><code>jest test.spec.ts</code> - Run a specific test file</li>
<li><code>jest test.spec.ts --coverage</code> - Run a specific test file with coverage report</li>
</ol>
<h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><p><code>Win + Shift + S</code> - Take a screenshot</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://jestjs.io/docs/cli">https://jestjs.io/docs/cli</a></li>
</ul>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>npm</tag>
        <tag>command</tag>
        <tag>useful</tag>
        <tag>shortcut</tag>
        <tag>git</tag>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>useful-online-tools</title>
    <url>/2024/02/19/useful-online-tools/</url>
    <content><![CDATA[<h1 id="Useful-Online-Tools"><a href="#Useful-Online-Tools" class="headerlink" title="Useful Online Tools"></a>Useful Online Tools</h1><h2 id="Web性能测试"><a href="#Web性能测试" class="headerlink" title="Web性能测试"></a>Web性能测试</h2><ol>
<li><a href="https://www.webpagetest.org/">https://www.webpagetest.org/</a></li>
<li><a href="https://pagespeed.web.dev/">https://pagespeed.web.dev/</a></li>
</ol>
<h2 id="Online-books"><a href="#Online-books" class="headerlink" title="Online books"></a>Online books</h2><ol>
<li><a href="https://github.com/getify/You-Dont-Know-JS/tree/2nd-ed">You don’t know JS</a></li>
<li><a href="https://link.zhihu.com/?target=https://github.com/ruanyf/es6tutorial">ES6 入门</a></li>
<li><a href="https://link.zhihu.com/?target=https://github.com/mjavascript/practical-modern-javascript">深入理解JS特性</a></li>
<li><a href="https://dr-axel.de/">Exploring JS</a></li>
<li>Modern JavaScript: <a href="https://zh.javascript.info/">中文版</a>, <a href="https://javascript.info/">英文版</a></li>
</ol>
<h2 id="ASCII-tree-generator"><a href="#ASCII-tree-generator" class="headerlink" title="ASCII tree generator"></a>ASCII tree generator</h2><p><a href="https://ascii-tree-generator.com/">https://ascii-tree-generator.com/</a></p>
<h2 id="Regex"><a href="#Regex" class="headerlink" title="Regex"></a>Regex</h2><ul>
<li><a href="https://regex101.com/">Regex 101</a> - Online regex tester and debugger, 最好用的正则表达式工具，没有之一。</li>
</ul>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><ul>
<li><a href="https://jsonplaceholder.typicode.com/">Free Json Server</a> - 一个免费的 JSON Server，可以用来测试前端请求。</li>
<li><a href="https://jsonformatter.curiousconcept.com/">Json Formatter</a> - JSON 格式化工具，可以将 JSON 格式化成易读的格式。</li>
<li><a href="https://www.jsonschema.net/">Json schema generator</a> - JSON Schema 生成工具，可以根据 JSON 生成 JSON Schema。</li>
</ul>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><ul>
<li><a href="https://www.typescriptlang.org/play">TypeScript Playground</a> - TypeScript 在线编译器，可以在线编译 TypeScript 代码。</li>
</ul>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul>
<li><a href="https://astexplorer.net/">AST</a> - Abstract Syntax Tree，可以将 JavaScript 代码转换成 AST 树，方便理解代码的结构。</li>
</ul>
<h2 id="UI-Framework"><a href="#UI-Framework" class="headerlink" title="UI Framework"></a>UI Framework</h2><ul>
<li>A Pure Javascript UI Framework: <a href="https://github.com/layui/layui">https://github.com/layui/layui</a></li>
</ul>
<h2 id="Standard"><a href="#Standard" class="headerlink" title="Standard:"></a>Standard:</h2><p><code>RFC</code> - <a href="https://en.wikipedia.org/wiki/Request_for_Comments">Request for Comments</a></p>
<ul>
<li>Http Semantics : <a href="https://www.rfc-editor.org/rfc/rfc9110">https://www.rfc-editor.org/rfc/rfc9110</a></li>
<li>Http: 1.0: <a href="https://www.rfc-editor.org/rfc/inline-errata/rfc1945.html">https://www.rfc-editor.org/rfc/inline-errata/rfc1945.html</a></li>
<li>Http 1.1: <a href="https://datatracker.ietf.org/doc/html/rfc2616">https://datatracker.ietf.org/doc/html/rfc2616</a></li>
<li>Http 2.0 : <a href="https://www.rfc-editor.org/rfc/rfc9113.html">https://www.rfc-editor.org/rfc/rfc9113.html</a></li>
</ul>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>regex</tag>
        <tag>useful</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>web-api</title>
    <url>/2024/02/28/web-api/</url>
    <content><![CDATA[<h1 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h1><ul>
<li>REST - Representational State Transfer</li>
<li>SOAP - Simple Object Access Protocol</li>
<li>GraphQL - A query language for your API</li>
</ul>
<h2 id="difference-between-REST-and-SOAP"><a href="#difference-between-REST-and-SOAP" class="headerlink" title="difference between REST and SOAP"></a>difference between REST and SOAP</h2><table>
<thead>
<tr>
<th>Feature</th>
<th>REST</th>
<th>SOAP</th>
</tr>
</thead>
<tbody><tr>
<td>Protocol</td>
<td>Can use any protocol but typically uses HTTP&#x2F;HTTPS</td>
<td>Uses HTTP, SMTP, TCP, and more</td>
</tr>
<tr>
<td>Standards</td>
<td>No official standard, uses HTTP methods (GET, POST, PUT, DELETE)</td>
<td>Official standard by W3C</td>
</tr>
<tr>
<td>Performance</td>
<td>Lightweight, less data overhead</td>
<td>Heavyweight, more data overhead due to XML usage</td>
</tr>
<tr>
<td>Message format</td>
<td>Can use multiple formats (JSON, XML, etc.)</td>
<td>Uses XML</td>
</tr>
<tr>
<td>Security</td>
<td>Uses web security standards</td>
<td>Uses WS-Security which is more robust</td>
</tr>
<tr>
<td>Transaction support</td>
<td>No official support</td>
<td>Official support</td>
</tr>
<tr>
<td>State management</td>
<td>Stateless</td>
<td>Stateful</td>
</tr>
</tbody></table>
<p>说明：</p>
<ol>
<li>SOAP by itself is a protocol, but it can use any protocol to transport its messages, REST is not a protocol, it typically uses HTTP&#x2F;HTTPS.</li>
<li>REST is stateless which means <code>each request from client to server must contain all of the information necessary to understand the request, and cannot take advantage of any stored context on the server. Session state is therefore kept entirely on the client.</code></li>
</ol>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>api</tag>
        <tag>rest</tag>
        <tag>soap</tag>
        <tag>graphql</tag>
      </tags>
  </entry>
  <entry>
    <title>web-optimization</title>
    <url>/2025/03/19/web-optimization/</url>
    <content><![CDATA[<p>前端性能优化有很多方面，细节很多，最近面试也经常考到这个问题，现整理如下，以便日后查阅。</p>
<h1 id="Http层面的优化："><a href="#Http层面的优化：" class="headerlink" title="Http层面的优化："></a>Http层面的优化：</h1><ol>
<li>减少HTTP请求次数， Http请求是很耗时的操作，減少HTTP请求次数是提高网站性能的一个重要手段。</li>
<li>使用缓存，缓存可以减少服务器的压力，提高网站的访问速度。</li>
<li>使用CDN，CDN是内容分发网络，可以加速网站的访问速度。</li>
<li>使用Gzip压缩，Gzip是一种压缩算法，可以减小文件的体积，提高网站的访问速度。</li>
<li>使用HTTP2，HTTP2是HTTP协议的新版本，可以提高网站的访问速度。</li>
</ol>
<h1 id="JS-css-html层面的优化："><a href="#JS-css-html层面的优化：" class="headerlink" title="JS&#x2F;css&#x2F;html层面的优化："></a>JS&#x2F;css&#x2F;html层面的优化：</h1><ol>
<li>使用lazy loading，对于首页不需要立即展示的组件，可以采用延迟加载。</li>
<li>代码压缩，代码压缩是一种优化技术，可以减小文件的体积，提高网站的访问速度。现在的打包工具比如webpack都自动开启了代码压缩。</li>
<li>Reduce Bundle size，减小文件的体积，提高网站的访问速度。<ol>
<li>使用Tree Shaking，Tree Shaking是一种优化技术，可以减小文件的体积，提高网站的访问速度。</li>
<li>使用Code Splitting，Code Splitting是一种优化技术，可以减小文件的体积，提高网站的访问速度。</li>
</ol>
</li>
<li>复杂的客户端计算可以用web worker来处理，web worker的好处是可以在后台线程中运行脚本，不会影响主线程的运行。不影响浏览器的渲染。</li>
<li>CSS优化<ol>
<li>CSS很小的话，可以采用内联的方式插入到html中，这样就不必额外下载一个css文件。</li>
<li>CSS很大的话，则要独立出一个文件来，这样可以利用缓存机制，注意index.html一般是不缓存的。</li>
</ol>
</li>
</ol>
<h1 id="图片优化："><a href="#图片优化：" class="headerlink" title="图片优化："></a>图片优化：</h1><ol>
<li>使用webp格式，webp是一种新的图片格式，可以减小文件的体积，提高网站的访问速度。</li>
<li>使用图片懒加载，图片懒加载是一种优化技术，可以减小文件的体积，提高网站的访问速度。</li>
<li>使用图片压缩，图片压缩是一种优化技术，可以减小文件的体积，提高网站的访问速度。</li>
<li>雪碧图，雪碧图是一种优化技术，可以减小文件的体积，提高网站的访问速度。</li>
</ol>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>optimization</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>web-security</title>
    <url>/2025/03/20/web-security/</url>
    <content><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>XSS &#x3D; Cross Site Scripting, 即跨站脚本攻击为了和CSS（层叠样式表）区分开来，所以叫XSS。这种攻击方式是黑客向目标站点注入恶意代码，当用户浏览网页对应的恶意代码就会执行以窃取用户的信息，最常见的就是cookie盗取。常见的XSS攻击有三种</p>
<h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><p>存储型攻击如下图所示：<br><img src="/../images/xss-attack-store.png" alt="alt text"></p>
<ol>
<li>黑客发现目标网站的漏洞，并提交恶意代码到目标网站，这些恶意代码存储到目标网站的数据库中。</li>
<li>用户访问目标网站，目标网站从数据库中读取恶意代码并返回给用户。</li>
<li>用户浏览器执行恶意代码，黑客获取用户的信息。</li>
</ol>
<ul>
<li>首先黑客必须先发现目标网站存在XSS漏洞，然后黑客提交恶意代码（通过留言，创建表单等方式-这是方式都是目标网站提供的功能，所有用户都能使用）到网站服务器，服务器把提交的内容存储到后代数据库。假设黑客提交了某个博客文章的留言，或者创建了某个音频网站的一个专辑。</li>
<li>正常用户访问目标网站，看到了黑客在博客上的留言，或者黑客创建的音频专辑，这时候浏览器会执行这些恶意代码，黑客就能获取用户的信息。</li>
</ul>
<h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><h2 id="Dom型"><a href="#Dom型" class="headerlink" title="Dom型"></a>Dom型</h2><h2 id="如何防范XSS攻击"><a href="#如何防范XSS攻击" class="headerlink" title="如何防范XSS攻击"></a>如何防范XSS攻击</h2><h3 id="输入验证"><a href="#输入验证" class="headerlink" title="输入验证"></a>输入验证</h3><p>在软件开发届有一句名言：永远不要相信前端传递过来的数据，后端一定要对前端传入的数据进行验证，即使前端已经验证了，后端也要验证。只要这样，才能保证安全。</p>
<h3 id="对输出进行转义"><a href="#对输出进行转义" class="headerlink" title="对输出进行转义"></a>对输出进行转义</h3><p>现在流行的前端框架都会对用户的输入进行转义，比如React或者Angular框架，如果用户输入<code>&lt;script&gt;alert(&#39;hello&#39;)&lt;/script&gt;</code>，这个内容会被转义成<code>&amp;lt;script&amp;gt;alert(&#39;hello&#39;)&amp;lt;/script&amp;gt;</code>，这样就可以正常渲染，而不会被浏览器执行了。</p>
<h3 id="对Cookies使用HttpOnly属性"><a href="#对Cookies使用HttpOnly属性" class="headerlink" title="对Cookies使用HttpOnly属性"></a>对Cookies使用HttpOnly属性</h3><p>标记为HttpOnly的cookie，浏览器只能通过HTTP协议访问，而不能通过JavaScript访问，这样就可以防范XSS攻击。</p>
<h3 id="CPS"><a href="#CPS" class="headerlink" title="CPS"></a>CPS</h3><p>CPS &#x3D; Content Security Policy, 即内容安全策略，这是一种安全策略，可以防范XSS攻击。CPS是一个HTTP头部，可以告诉浏览器只能加载指定的资源，比如只能加载指定的域名下的资源，或者只能加载指定的类型的资源。这样就可以防范XSS攻击。<br>CPS只是众多防范XSS攻击方式的一种，还有其他方法可以方法XSS攻击，比如output encoding, sanitization等。</p>
<p>关于CSP的详细内容，请看<a href="https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/CSP">这里</a>。</p>
<p>CPS也不只用于防范XSS攻击，还可以防范其他攻击，比如：</p>
<ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/Clickjacking">Prevent Clickjacking(点击劫持)</a>。</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Glossary/MitM">manipulator-in-the-middle(中间人攻击)</a>。</li>
</ol>
<h1 id="XSRF"><a href="#XSRF" class="headerlink" title="XSRF"></a>XSRF</h1><p>XSRF &#x3D; Cross Site Request Forgery, 即开展请求伪造。与XSS攻击方式不同，这种方式需要黑客自己有一个恶意站点，然后诱导用户点击恶意链接跳转到黑客的恶意站点，黑客再根据用户的cookie和其他信息伪造一个请求发送给用户访问的正常站点。</p>
<ol>
<li>目标站点存在XSRF漏洞。</li>
<li>黑客自己有一个恶意站点。</li>
<li>用户登录过目标站点，并且在浏览器上保持有该站点的登录状态</li>
<li>黑客诱导用户点击恶意链接，跳转到黑客的恶意站点。</li>
</ol>
<h2 id="如何防范XSRF攻击"><a href="#如何防范XSRF攻击" class="headerlink" title="如何防范XSRF攻击"></a>如何防范XSRF攻击</h2><h3 id="充分利用Cookies的SameSite属性"><a href="#充分利用Cookies的SameSite属性" class="headerlink" title="充分利用Cookies的SameSite属性"></a>充分利用Cookies的SameSite属性</h3><h3 id="验证请求的来源站点"><a href="#验证请求的来源站点" class="headerlink" title="验证请求的来源站点"></a>验证请求的来源站点</h3><h3 id="使用CSRF-Token"><a href="#使用CSRF-Token" class="headerlink" title="使用CSRF Token"></a>使用CSRF Token</h3><hr>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>security</tag>
        <tag>web</tag>
        <tag>xss</tag>
        <tag>xsrf</tag>
      </tags>
  </entry>
  <entry>
    <title>webstorm-tips</title>
    <url>/2024/03/10/webstorm-tips/</url>
    <content><![CDATA[<h1 id="webstorm-tips"><a href="#webstorm-tips" class="headerlink" title="webstorm-tips"></a>webstorm-tips</h1><h1 id="Conflict-between-prettier-and-eslint"><a href="#Conflict-between-prettier-and-eslint" class="headerlink" title="Conflict between prettier and eslint"></a>Conflict between prettier and eslint</h1><h2 id="ESlint-delete-cr-prettier-prettier"><a href="#ESlint-delete-cr-prettier-prettier" class="headerlink" title="[ESlint] delete cr (prettier&#x2F;prettier)"></a>[ESlint] delete cr (prettier&#x2F;prettier)</h2><p>Resolution: put the following config in your .eslintrc.js under project root.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">rules</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">&#x27;prettier/prettier&#x27;</span>: [</span><br><span class="line">    <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&#x27;endOfLine&#x27;</span>: <span class="string">&#x27;auto&#x27;</span> <span class="comment">// This line will remove the warning</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tools</category>
        <category>webstorm</category>
      </categories>
      <tags>
        <tag>webstorm</tag>
        <tag>ide</tag>
      </tags>
  </entry>
  <entry>
    <title>What&#39;s new in Angular 14</title>
    <url>/2024/06/16/what-s-new-in-angular-14/</url>
    <content><![CDATA[<h1 id="Table-of-content"><a href="#Table-of-content" class="headerlink" title="Table of content"></a>Table of content</h1><table>
<thead>
<tr>
<th>Feature</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>Standalone components</td>
<td></td>
</tr>
<tr>
<td>Typed Angular Forms</td>
<td></td>
</tr>
<tr>
<td><a href='#inject'>inject</a></td>
<td>a new function to inject dependencies</td>
</tr>
</tbody></table>
<h2 id="Standalone-Directives-Components-Pipes"><a href="#Standalone-Directives-Components-Pipes" class="headerlink" title="Standalone Directives&#x2F;Components&#x2F;Pipes"></a>Standalone Directives&#x2F;Components&#x2F;Pipes</h2><h2 id="Typed-Angular-Forms"><a href="#Typed-Angular-Forms" class="headerlink" title="Typed Angular Forms"></a>Typed Angular Forms</h2><h2 id="Define-title-in-router"><a href="#Define-title-in-router" class="headerlink" title="Define title in router"></a>Define <code>title</code> in router</h2><p>You can specify the title of a page in the router configuration now.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeComponent</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;Home Page&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>Use <code>TitleStrategy</code> to set the title in the browser tab for complex scenarios.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TemplatePageTitleStrategy</span> <span class="keyword">extends</span> <span class="title class_ inherited__">TitleStrategy</span> &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="title function_">updateTitle</span>(<span class="params"><span class="attr">routerState</span>: <span class="title class_">RouterStateSnapshot</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> title = <span class="variable language_">this</span>.<span class="title function_">buildTitle</span>(routerState);</span><br><span class="line">    <span class="keyword">if</span> (title !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`My App - <span class="subst">$&#123;title&#125;</span>`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`My App - Home`</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">providers</span>: [&#123;<span class="attr">provide</span>: <span class="title class_">TitleStrategy</span>,  <span class="attr">useClass</span>: <span class="title class_">TemplatePageTitleStrategy</span>&#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Target-TypeScript-4-7-and-ES2020"><a href="#Target-TypeScript-4-7-and-ES2020" class="headerlink" title="Target TypeScript 4.7 and ES2020"></a>Target TypeScript 4.7 and ES2020</h2><h2 id="Bind-to-protected-component-members"><a href="#Bind-to-protected-component-members" class="headerlink" title="Bind to protected component members."></a>Bind to protected component members.</h2><p>Start form Angular 14, you can bind protected properties in component class to your template.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;my-component&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&#123;&#123; message &#125;&#125;&#x27;</span>,  <span class="comment">// &lt;--- Now compiles!</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">message</span>: <span class="built_in">string</span> = <span class="string">&#x27;Hello world&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Optional-injectors-in-Embedded-Views"><a href="#Optional-injectors-in-Embedded-Views" class="headerlink" title="Optional injectors in Embedded Views"></a>Optional injectors in Embedded Views</h2><p>What’s Embedded views? Need further research.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">viewContainer.<span class="title function_">createEmbeddedView</span>(templateRef, context, &#123;</span><br><span class="line">  <span class="attr">injector</span>: injector,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="New-CLI-commands"><a href="#New-CLI-commands" class="headerlink" title="New CLI commands"></a>New CLI commands</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng completion</span><br><span class="line">ng analytics</span><br><span class="line">ng cache</span><br><span class="line">ng cache info</span><br></pre></td></tr></table></figure>

<h2 id="Experimental-ESM-Application-build"><a href="#Experimental-ESM-Application-build" class="headerlink" title="Experimental ESM Application build"></a>Experimental ESM Application build</h2><p>Update the build config in <code>angular.json</code> to use the new esbuild builder.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@angular-devkit/build-angular:browser&quot;</span></span><br><span class="line"><span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@angular-devkit/build-angular:browser-esbuild&quot;</span> <span class="comment">// &lt;-- new</span></span><br></pre></td></tr></table></figure>
<h2 id="inject-functions"><a href="#inject-functions" class="headerlink" title="inject functions"></a>inject functions</h2><p><a id='inject'></a>The new <code>inject</code> function in Angular 14 is a new way to inject dependencies into your components.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.angular.dev/angular-v14-is-now-available-391a6db736af">https://blog.angular.dev/angular-v14-is-now-available-391a6db736af</a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>angular 14</tag>
      </tags>
  </entry>
  <entry>
    <title>What&#39;s new in Angular 15</title>
    <url>/2024/06/16/what-s-new-in-angular-15/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="Tree-shakable-router"><a href="#Tree-shakable-router" class="headerlink" title="Tree-shakable router"></a>Tree-shakable router</h2><p>You can build multiple routes applications with the new router standalone API.</p>
<p>Define the root routes in <code>app.routes.ts</code>, and use <code>loadChildren</code> to load the lazy routes.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.routes.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">appRoutes</span>: <span class="title class_">Routes</span> = [&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;lazy&#x27;</span>,</span><br><span class="line">  <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./lazy/lazy.routes&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">routes</span> =&gt;</span> routes.<span class="property">lazyRoutes</span>)</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>Define the lazy routes in <code>lazy.routes.ts</code>.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lazy.routes.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Routes</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">LazyComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./lazy.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">lazyRoutes</span>: <span class="title class_">Routes</span> = [&#123;<span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">LazyComponent</span>&#125;];</span><br></pre></td></tr></table></figure>
<p>Provide the router in file <code>main.ts</code>.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">AppComponent</span>, &#123;</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    <span class="title function_">provideRouter</span>(appRoutes) <span class="comment">// tree-shakable</span></span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>The benefit of <code>provideRouter</code> is that it is tree-shakable.</p>
<h2 id="Directive-composition-API"><a href="#Directive-composition-API" class="headerlink" title="Directive composition API"></a>Directive composition API</h2><p>这个我没太看懂，需要进一步研究它的来历。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;mat-menu&#x27;</span>,</span><br><span class="line">  <span class="attr">hostDirectives</span>: [<span class="title class_">HasColor</span>, &#123;</span><br><span class="line">    <span class="attr">directive</span>: <span class="title class_">CdkMenu</span>,</span><br><span class="line">    <span class="attr">inputs</span>: [<span class="string">&#x27;cdkMenuDisabled: disabled&#x27;</span>],</span><br><span class="line">    <span class="attr">outputs</span>: [<span class="string">&#x27;cdkMenuClosed: closed&#x27;</span>]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MatMenu</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="NgOptimizedImage"><a href="#NgOptimizedImage" class="headerlink" title="NgOptimizedImage"></a>NgOptimizedImage</h2><p><code>NgOptimizedImage</code> is a new directive that optimizes images for the web.<br>First, import <code>NgOptimizedImage</code> in your component.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgOptimizedImage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">NgOptimizedImage</span>],</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>Then, replace <code>src</code> in img tag with <code>ngSrc</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> [<span class="attr">ngSrc</span>]=<span class="string">&quot;url&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Functional-router-guards"><a href="#Functional-router-guards" class="headerlink" title="Functional router guards."></a>Functional router guards.</h2><p>You can now use functional router guards.</p>
<p>Before:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>(&#123; <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyGuardWithDependency</span> <span class="keyword">implements</span> <span class="title class_">CanActivate</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">loginService</span>: <span class="title class_">LoginService</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">canActivate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">loginService</span>.<span class="title function_">isLoggedIn</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> route = &#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;somePath&#x27;</span>,</span><br><span class="line">  <span class="attr">canActivate</span>: [<span class="title class_">MyGuardWithDependency</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>After:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> route = &#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">  <span class="attr">canActivate</span>: [<span class="function">() =&gt;</span> <span class="title function_">inject</span>(<span class="title class_">LoginService</span>).<span class="title function_">isLoggedIn</span>()]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Route-unwraps-default-imports"><a href="#Route-unwraps-default-imports" class="headerlink" title="Route unwraps default imports"></a>Route unwraps default imports</h2><p>Before:<br>You need <code>.then</code> to unwrap the default import.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;lazy&#x27;</span>,</span><br><span class="line">  <span class="attr">loadComponent</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./lazy-file&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">m</span> =&gt;</span> m.<span class="property">LazyComponent</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Now: with the default export enabled, you can directly use the default import.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;lazy&#x27;</span>,</span><br><span class="line">  <span class="attr">loadComponent</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./lazy-file&#x27;</span>), <span class="comment">// &lt;--- no need to unwrap manually.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You must use <code>default export</code> in the lazy file.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;...&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">LazyComponent</span> &#123; ... &#125; <span class="comment">// default export.</span></span><br></pre></td></tr></table></figure>

<h2 id="Automatic-imports-in-language-service"><a href="#Automatic-imports-in-language-service" class="headerlink" title="Automatic imports in language service."></a>Automatic imports in language service.</h2><p>When you type a component selector in the template, the language service will prompt to import the component for you.</p>
<h2 id="CLI-improvements"><a href="#CLI-improvements" class="headerlink" title="CLI improvements"></a>CLI improvements</h2><h3 id="Generate-standalone-components-with-the-following-command"><a href="#Generate-standalone-components-with-the-following-command" class="headerlink" title="Generate standalone components with the following command"></a>Generate standalone components with the following command</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng g component --standalone</span><br></pre></td></tr></table></figure>
<h3 id="Simplify-the-output-of-the-ng-serve-command"><a href="#Simplify-the-output-of-the-ng-serve-command" class="headerlink" title="Simplify the output of the ng serve command."></a>Simplify the output of the <code>ng serve</code> command.</h3><ol>
<li>Remove File <code>test.ts</code>, <code>polyfills.ts</code>, and <code>environments</code></li>
<li>Specify polyfills in <code>angular.json</code><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;polyfills&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="string">&quot;zone.js&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Global-format-for-Date-pipe"><a href="#Global-format-for-Date-pipe" class="headerlink" title="Global format for Date pipe"></a>Global format for <code>Date</code> pipe</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">AppComponent</span>, &#123;</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: <span class="variable constant_">DATE_PIPE_DEFAULT_OPTIONS</span>,</span><br><span class="line">      <span class="attr">useValue</span>: &#123; <span class="attr">dateFormat</span>: <span class="string">&#x27;shortDate&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Deprecations"><a href="#Deprecations" class="headerlink" title="Deprecations"></a>Deprecations</h2><ol>
<li><code>providedIn: &#39;any&#39;</code> is deprecated. Use <code>providedIn: &#39;root&#39;</code> instead.</li>
<li><code>providedIn: NgModule</code> is deprecated. Use <code>providedIn: &#39;root&#39;</code> or <code>providedIn: NgModule</code> instead.</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://blog.angular.dev/angular-v15-is-now-available-df7be7f2f4c8">https://blog.angular.dev/angular-v15-is-now-available-df7be7f2f4c8</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>angular 15</tag>
      </tags>
  </entry>
  <entry>
    <title>What&#39;s new in Angular 16</title>
    <url>/2024/06/16/what-s-new-in-angular-16/</url>
    <content><![CDATA[<h1 id="Table-of-content"><a href="#Table-of-content" class="headerlink" title="Table of content"></a>Table of content</h1><table>
<thead>
<tr>
<th>Feature</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><a href='#self-closing-tags'>Self closing tags</a></td>
<td>It’s a small improvement that could save you some typing</td>
</tr>
<tr>
<td><a href='#signals'>Signals</a></td>
<td></td>
</tr>
<tr>
<td><a href='#take-until-destroyed'>takeUntilDestroyed</a></td>
<td>A more simple version of <code>takeUntil</code></td>
</tr>
</tbody></table>
<h2 id="Self-closing-tags"><a href="#Self-closing-tags" class="headerlink" title="Self closing tags"></a>Self closing tags</h2><p><a id='self-closing-tags'></a><br>In Angular 16, you can use self-closing tags in the template. This is really useful for a components with long names.</p>
<p>Before</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-component</span>&gt;</span><span class="tag">&lt;/<span class="name">app-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Now</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-component</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Angular-Signals"><a href="#Angular-Signals" class="headerlink" title="Angular Signals"></a>Angular Signals</h2><p><a id='signals'></a></p>
<h2 id="takeUntilDestroyed"><a href="#takeUntilDestroyed" class="headerlink" title="takeUntilDestroyed"></a>takeUntilDestroyed</h2><p><a id='#take-until-destroyed' href='https://medium.com/@chandrashekharsingh25/exploring-the-takeuntildestroyed-operator-in-angular-d7244c24a43e'>Detail example</a></p>
<h2 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  bootstrapApplication,</span><br><span class="line">  provideClientHydration,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">RootCmp</span>, &#123;</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title function_">provideClientHydration</span>()]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><a href="https://v17.angular.io/guide/hydration">https://v17.angular.io/guide/hydration</a></p>
<h2 id="Transition-to-standalone"><a href="#Transition-to-standalone" class="headerlink" title="Transition to standalone"></a>Transition to standalone</h2><p>You can use the following cli command to transit your app to standalone.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng generate @angular/core:standalone</span><br></pre></td></tr></table></figure>
<p>and you’ll see the following options in terminal, use the arrow key to select the options.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? Choose the <span class="built_in">type</span> of migration: (Use arrow keys)</span><br><span class="line">&gt; Convert all components, directives and pipes to standalone</span><br><span class="line">  Remove unnecessary NgModule classes</span><br><span class="line">  Bootstrap the application using standalone APIs</span><br></pre></td></tr></table></figure>

<h2 id="Create-new-project-with-standalone"><a href="#Create-new-project-with-standalone" class="headerlink" title="Create new project with standalone"></a>Create new project with standalone</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng new --standalone</span><br></pre></td></tr></table></figure>

<h2 id="Required-Inputs"><a href="#Required-Inputs" class="headerlink" title="Required Inputs"></a>Required Inputs</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(...)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>(&#123; <span class="attr">required</span>: <span class="literal">true</span> &#125;) <span class="attr">title</span>: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Passing-router-data-as-component-input"><a href="#Passing-router-data-as-component-input" class="headerlink" title="Passing router data as component input"></a>Passing router data as component input</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="attr">loadComponent</span>: <span class="keyword">import</span>(<span class="string">&#x27;./about&#x27;</span>),</span><br><span class="line">    <span class="attr">resolve</span>: &#123; <span class="attr">contact</span>: <span class="function">() =&gt;</span> <span class="title function_">getContact</span>() &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(...)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">About</span> &#123;</span><br><span class="line">  <span class="comment">// The value of &quot;contact&quot; is passed to the contact input</span></span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">contact</span>?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Flexible-ngOnDestroy"><a href="#Flexible-ngOnDestroy" class="headerlink" title="Flexible ngOnDestroy"></a>Flexible ngOnDestroy</h2><p>现在还不懂，需要继续研究。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.angular.dev/angular-v16-is-here-4d7a28ec680d">https://blog.angular.dev/angular-v16-is-here-4d7a28ec680d</a></p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>angular 16</tag>
      </tags>
  </entry>
  <entry>
    <title>What&#39;s new in Angular 18</title>
    <url>/2024/06/16/what-s-new-in-angular-18/</url>
    <content><![CDATA[<p>Over the past three releases, Angular team introduced a lot of new features and improvements, Angular 18 focused on polishing the previous work and graduating many of the new APIs from experimental to stable. another exciting feature is <code>zoneless change detection</code> - still in experimental phase. Here is the content table:</p>
<ol>
<li>Zoneless Change Detection</li>
<li>angular.dev is the new home for angular developers</li>
<li>Stable features: Material 3, deferrable views, built-in control flows</li>
<li>SSR improvements: i18n hydration support, better debugging, hydration support in Angular Material.</li>
<li>Native await for zoneless apps.</li>
<li>Fallback content for <code>ng-content</code>.</li>
</ol>
<h2 id="Zoneless-Change-Detection"><a href="#Zoneless-Change-Detection" class="headerlink" title="Zoneless Change Detection"></a>Zoneless Change Detection</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">App</span>, &#123;</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    <span class="title function_">provideExperimentalZonelessChangeDetection</span>()</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Then remove zone.js from file <code>angular.json</code> in your project.</p>
<h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p><code>HttpClientTestingModule</code> is deprecated, use &#96;&#96; instead.</p>
<p>Before:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HttpClientTestingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http/testing&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">beforeEach</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">    <span class="attr">imports</span>: [<span class="title class_">HttpClientTestingModule</span>], <span class="comment">// &lt;-- Here</span></span><br><span class="line">  &#125;).<span class="title function_">compileComponents</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Now</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; provideHttpClientTesting &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http/testing&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">beforeEach</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">    <span class="attr">providers</span>: [</span><br><span class="line">      <span class="title function_">provideHttpClientTesting</span>(),</span><br><span class="line">    ]</span><br><span class="line">  &#125;).<span class="title function_">compileComponents</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Native-await-for-zoneless-apps"><a href="#Native-await-for-zoneless-apps" class="headerlink" title="Native await for zoneless apps"></a>Native await for zoneless apps</h2><p>因为Angular一直使用zone.js实现更新检测，但是async&#x2F;await语法zone.js一直无法做monkey patch，导致在zone.js中使用promise来模拟，现在如果你的app不是用zone.js，那么Angular就不会再使用promise来模拟async&#x2F;await，而是直接使用原生的async&#x2F;await。</p>
<h2 id="Specifying-a-fallback-content-for-ng-content"><a href="#Specifying-a-fallback-content-for-ng-content" class="headerlink" title="Specifying a fallback content for ng-content"></a>Specifying a fallback content for ng-content</h2><p><code>ng-content</code>现在可以指定一个fallback content，当没有传递内容时，会显示这个fallback content。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-profile&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ng-content select=&quot;.greeting&quot;&gt;Hello &lt;/ng-content&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;ng-content&gt;Unknown user&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Profile</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>调用代码：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;app-profile&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;greeting&quot;</span>&gt;</span>Good morning <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/app-profile&gt;</span><br></pre></td></tr></table></figure>

<p>which will result in:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;span class=<span class="string">&quot;greeting&quot;</span>&gt;Good morning &lt;/span&gt;</span><br><span class="line">Unknown user</span><br></pre></td></tr></table></figure>
<ol>
<li>We specified <code>Good morning</code> for the first <code>ng-content</code>, so the fallback <code>Hello </code> won’t be displayed.</li>
<li>We didn’t specify any content for the second <code>ng-content</code>, so the fallback <code>Unknown user</code> will be displayed.</li>
</ol>
<h2 id="Unified-control-state-change-events"><a href="#Unified-control-state-change-events" class="headerlink" title="Unified control state change events"></a>Unified control state change events</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nameControl = <span class="keyword">new</span> <span class="title class_">FormControl</span>&lt;<span class="built_in">string</span>|<span class="literal">null</span>&gt;(<span class="string">&#x27;name&#x27;</span>, <span class="title class_">Validators</span>.<span class="property">required</span>);</span><br><span class="line">nameControl.<span class="property">events</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// process the individual events</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Router-redirect-as-function"><a href="#Router-redirect-as-function" class="headerlink" title="Router redirect as function"></a>Router redirect as function</h2><p>The <code>redirectTo</code> property in the route configuration can now be a function that returns a URL string or an array of URL segments.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;first-component&quot;</span>, <span class="attr">component</span>: <span class="title class_">FirstComponent</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;old-user-page&quot;</span>,</span><br><span class="line">    <span class="attr">redirectTo</span>: <span class="function">(<span class="params">&#123; queryParams &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> errorHandler = <span class="title function_">inject</span>(<span class="title class_">ErrorHandler</span>);</span><br><span class="line">      <span class="keyword">const</span> userIdParam = queryParams[<span class="string">&#x27;userId&#x27;</span>];</span><br><span class="line">      <span class="keyword">if</span> (userIdParam !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`/user/<span class="subst">$&#123;userIdParam&#125;</span>`</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        errorHandler.<span class="title function_">handleError</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Attempted navigation to user page without user ID.&#x27;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`/not-found`</span>; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;user/:userId&quot;</span>, <span class="attr">component</span>: <span class="title class_">OtherComponent</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h2 id="Support-typescript-5-4"><a href="#Support-typescript-5-4" class="headerlink" title="Support typescript 5.4"></a>Support typescript 5.4</h2><h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><ol>
<li><a href="https://blog.angular.dev/angular-v18-is-now-available-e79d5ac0affe">https://blog.angular.dev/angular-v18-is-now-available-e79d5ac0affe</a></li>
</ol>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>angular 18</tag>
      </tags>
  </entry>
  <entry>
    <title>What&#39;s new in Angular 17</title>
    <url>/2024/06/16/what-s-new-in-angular-17/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><table>
<thead>
<tr>
<th>Feature</th>
<th>Description</th>
<th>Example</th>
<th>State</th>
</tr>
</thead>
<tbody><tr>
<td>new <code>output</code> api</td>
<td>a more streamlined <code>output</code> api</td>
<td>old: <code>@Output() updateParentName = new EventEmitter&lt;string&gt;();</code><br>  new: <code>updateParentName = output&lt;string&gt;();</code> <br> tutorial: <a href="https://blog.angular.dev/meet-angulars-new-output-api-253a41ffa13c">output</a></td>
<td>stable</td>
</tr>
<tr>
<td>Deferred view</td>
<td>A new mechanism of lazy load</td>
<td><pre>@defer (on viewport) { <br>  <code>&lt;comment-list/&gt;</code> <br>} @loading { <br>  <code>Loading…</code> <br>} @error { <br>  <code>Loading failed :(</code> <br>} @placeholder { <br>  <code>&lt;img src=&quot;comments-placeholder.png&quot;</code>&gt; <br>} </pre></td>
<td>preview(<a href="https://blog.angular.dev/introducing-angular-v17-4d7033312e4b">detail</a>)</td>
</tr>
<tr>
<td>New control flow</td>
<td>a new syntax for control flow</td>
<td><pre>@if(condition) {<div>  Some content</div>} else {<div>  Other content</div>}</pre></td>
<td>comments</td>
</tr>
</tbody></table>
<h2 id="New-logo"><a href="#New-logo" class="headerlink" title="New logo"></a>New logo</h2><h2 id="Future-looking-documentation"><a href="#Future-looking-documentation" class="headerlink" title="Future looking documentation"></a>Future looking documentation</h2><p><a href="https://www.angular.io/">https://www.angular.io</a> -&gt; <a href="https://www.angular.dev/">https://www.angular.dev</a> The  new interactive learning experience is powered by <a href="https://webcontainers.io/">WebContainers</a></p>
<h2 id="Built-in-Control-flow"><a href="#Built-in-Control-flow" class="headerlink" title="Built-in Control flow"></a>Built-in Control flow</h2><h3 id="if-for-switch"><a href="#if-for-switch" class="headerlink" title="@if, @for, @switch"></a>@if, @for, @switch</h3><ol>
<li><a href="https://zdd.github.io/2024/11/30/angular-ngif/"><code>@if</code></a></li>
<li><a href="https://zdd.github.io/2024/12/31/angular-directive-ngfor/"><code>@for</code></a></li>
<li><a href="https://zdd.github.io/2024/11/30/angular-ngswitch/"><code>@switch</code></a></li>
</ol>
<h3 id="Benefit-of-new-control-flow"><a href="#Benefit-of-new-control-flow" class="headerlink" title="Benefit of new control flow"></a>Benefit of new control flow</h3><ol>
<li>More ergonomic syntax that is closer to JavaScript, fewer documentation lookups.</li>
<li>Better type checking thanks to more optimal type narrowing.</li>
<li>Exists in build time which reduces runtime footprint. drop you bundle size by up to 30k.</li>
<li>Automatically available without any imports.</li>
<li>Performance improvements.</li>
</ol>
<h2 id="Deferrable-views"><a href="#Deferrable-views" class="headerlink" title="Deferrable views"></a>Deferrable views</h2><p><a href="xxx">deferrable views</a></p>
<h2 id="Enable-SSR-in-new-project"><a href="#Enable-SSR-in-new-project" class="headerlink" title="Enable SSR in new project"></a>Enable SSR in new project</h2><p>From Angular 17, when you create a project with <code>ng new</code>, you can enable SSR by adding <code>--ssr</code> flag.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng new my-app --ssr</span><br></pre></td></tr></table></figure>
<p>If you didn’t provide <code>--ssr</code> option, Angular will ask you to choose whether .</p>
<h2 id="Hydration-graduate-from-developer-preview"><a href="#Hydration-graduate-from-developer-preview" class="headerlink" title="Hydration graduate from developer preview"></a>Hydration graduate from developer preview</h2><p>Hydration is now enabled by default for all applications using SSR.</p>
<h2 id="Add-hydration-to-existing-project"><a href="#Add-hydration-to-existing-project" class="headerlink" title="Add hydration to existing project"></a>Add hydration to existing project</h2><p>If you have an existing project and want to add hydration, you can use the following command.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng add @angular/ssr</span><br></pre></td></tr></table></figure>

<h2 id="New-lifecycle-hooks"><a href="#New-lifecycle-hooks" class="headerlink" title="New lifecycle hooks"></a>New lifecycle hooks</h2><p>The following lifecycle hooks are used to improve the performance of Angular’s SSR and SSG.</p>
<ol>
<li><code>afterRender</code> - register a callback to be invoked each time the application finishes rendering.</li>
<li><code>afterNextRender</code> - register a callback to be invoked the next time the application finishes rendering.</li>
</ol>
<h2 id="Vite-and-ESBuild-default-for-new-projects"><a href="#Vite-and-ESBuild-default-for-new-projects" class="headerlink" title="Vite and ESBuild default for new projects"></a>Vite and ESBuild default for new projects</h2><p>From Angular 17, when you create a new project, the default build tool will be Vite and ESBuild.</p>
<h2 id="Experimental-view-transitions-support"><a href="#Experimental-view-transitions-support" class="headerlink" title="Experimental view transitions support"></a>Experimental view transitions support</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">App</span>, &#123;</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    <span class="title function_">provideRouter</span>(routes, <span class="title function_">withViewTransitions</span>()),</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Defer-loading-of-the-animation-module"><a href="#Defer-loading-of-the-animation-module" class="headerlink" title="Defer loading of the animation module"></a>Defer loading of the animation module</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; provideAnimationsAsync &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser/animations-async&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">RootCmp</span>, &#123;</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title function_">provideAnimationsAsync</span>()]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Input-value-transforms"><a href="#Input-value-transforms" class="headerlink" title="Input value transforms"></a>Input value transforms</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// child.component.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">flag</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// parent.component.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ParentComponent</span> &#123;</span><br><span class="line">  flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The following code will cause an error: Type “” is not assignable to type “boolean”.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- parent.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-child</span> <span class="attr">flag</span>&gt;</span><span class="tag">&lt;/<span class="name">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>to use flag before Angular 17, you need to use the following code:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- parent.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-child</span> [<span class="attr">flag</span>]=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>From Angular 17, you can use the first format with some extra configuration in ChildComponent. In this way Angular will automatically convert the flag attribute to a boolean value.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// child.component.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>(&#123;<span class="attr">transform</span>: booleanAttribute&#125;) <span class="attr">flag</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Style-and-styleUrls-as-string"><a href="#Style-and-styleUrls-as-string" class="headerlink" title="Style and styleUrls as string"></a>Style and styleUrls as string</h2><p>You don’t need to use array for <code>styles</code> and <code>styleUrls</code> anymore.<br>before:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">styles</span>: [<span class="string">`</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">  `</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;styles.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>after:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">styles</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">styleUrls</span>: <span class="string">&#x27;styles.css&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Use-fetch-as-backend-of-HttpClient"><a href="#Use-fetch-as-backend-of-HttpClient" class="headerlink" title="Use fetch as backend of HttpClient"></a>Use <code>fetch</code> as backend of <code>HttpClient</code></h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.config.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">appConfig</span>: <span class="title class_">ApplicationConfig</span> = &#123;</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    <span class="title function_">provideHttpClient</span>(<span class="title function_">withFetch</span>()),</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>output</tag>
        <tag>angular 17</tag>
      </tags>
  </entry>
  <entry>
    <title>what&#39;s new in angular 6</title>
    <url>/2024/07/28/what-s-new-in-angular-6/</url>
    <content><![CDATA[<h1 id="Table-of-content"><a href="#Table-of-content" class="headerlink" title="Table of content"></a>Table of content</h1><table>
<thead>
<tr>
<th>Feature</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><a href='#providein'>provideIn</a></td>
<td>A new way to declare service scope</td>
</tr>
</tbody></table>
<h2 id="provideIn"><a href="#provideIn" class="headerlink" title="provideIn"></a>provideIn</h2><p><a id='providein'></a><br>In Angular 6, you can use the <code>provideIn</code> property in the <code>@Injectable</code> decorator to declare the scope of the service.</p>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
        <tag>angular6</tag>
      </tags>
  </entry>
  <entry>
    <title>working-efficiently</title>
    <url>/2024/02/28/working-efficiently/</url>
    <content><![CDATA[<h1 id="Working-Efficiently"><a href="#Working-Efficiently" class="headerlink" title="Working Efficiently"></a>Working Efficiently</h1><h2 id="Useful-VSCode-Plugins"><a href="#Useful-VSCode-Plugins" class="headerlink" title="Useful VSCode Plugins"></a>Useful VSCode Plugins</h2><ol>
<li>Code Runner - Run code snippet or code file for multiple languages. </li>
<li>Mithril Emmet - Quickly write Html&#x2F;CSS&#x2F;JSX tags.</li>
</ol>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>plugin</tag>
        <tag>shortcuts</tag>
      </tags>
  </entry>
  <entry>
    <title>书法杂谈(一)</title>
    <url>/2023/12/18/%E4%B9%A6%E6%B3%95%E6%9D%82%E8%B0%88-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="如何写榜书"><a href="#如何写榜书" class="headerlink" title="如何写榜书"></a>如何写榜书</h1><p>榜书需用熟纸，最好是铜版纸，十分光滑。墨需要用浓墨，最好买超浓墨汁，也可以自制宿墨（将墨水准备好之后，放置一晚），最见精神，如果写完纸张发皱，可用熨斗熨一下。笔可用兼毫，写大字时一定要将笔毫铺开，方能如意！不可只用笔尖，那是小字的笔法。<br>初练榜书时，可用报纸，将一张报纸从中间裁开，每张写一字，</p>
<h1 id="如何让墨汁好写"><a href="#如何让墨汁好写" class="headerlink" title="如何让墨汁好写"></a>如何让墨汁好写</h1><p>可以在墨汁中添加洗洁精或者液态胶水，今天晚上我就加了一点液态胶水，效果很好，墨汁不会太稀，也不会太浓，很好写。非常丝滑，胶水不用太好的，就文具店那种白色液体胶水即可。</p>
<h1 id="宿墨"><a href="#宿墨" class="headerlink" title="宿墨"></a>宿墨</h1><p>宿墨可以自行制作，也可以买现成的宿墨，今日见抖音作者用宣和宿墨写豆腐宣，很是得手。</p>
<h1 id="笔法"><a href="#笔法" class="headerlink" title="笔法"></a>笔法</h1><p>写字需笔笔交待清楚！要把动作做到位，不可草率。</p>
<h1 id="毛笔"><a href="#毛笔" class="headerlink" title="毛笔"></a>毛笔</h1><ol>
<li>山马就是马尾巴，这个称呼来自岛国，这事今天在抖音武京生老师直播间学到的，特此记录。</li>
</ol>
]]></content>
      <categories>
        <category>calligraphy</category>
      </categories>
      <tags>
        <tag>calligraphy</tag>
      </tags>
  </entry>
</search>
